/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:25:12 GMT 2019
 */

package org.sat4j.minisat.constraints.card;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.card.MinWatchCard;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomLiteralSelectionStrategy;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.MandatoryLiteralListener;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DotSearchTracing;
import org.sat4j.tools.SingleSolutionDetector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MinWatchCard_ESTest extends MinWatchCard_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 0);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      minWatchCard0.undo(0);
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI(watcherBasedPrimeImplicantStrategy0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, true, 1497);
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI((MandatoryLiteralListener) null, 99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 1);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI(watcherBasedPrimeImplicantStrategy0, (-4547));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      vecInt0.remove(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 0);
      // Undeclared exception!
      try { 
        minWatchCard0.computeWatches();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 1985);
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, eMARestarts0, mUSLauncher0);
      minWatchCard0.assertConstraintIfNeeded(solver0);
      assertEquals((-1985), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, true, 1497);
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, eMARestarts0, iLogAble0);
      minWatchCard0.assertConstraint(solver0);
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(1, minWatchCard0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 1985);
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, eMARestarts0, mUSLauncher0);
      minWatchCard0.remove(solver0);
      assertEquals((-1985), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-2136));
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      // Undeclared exception!
      try { 
        minWatchCard0.propagate(solver0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1, 1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 37);
      minWatchCard0.calcReasonOnTheFly((-168), vecInt0, vecInt0);
      assertEquals(1, minWatchCard0.size());
      assertEquals((-36), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      vecInt0.shrink(5000);
      int int0 = MinWatchCard.linearisation(lits0, vecInt0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-511));
      minWatchCard0.calcReason((-511), vecInt0);
      assertEquals((-511), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-1141));
      minWatchCard0.computeWatches();
      assertEquals((-1141), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 404);
      minWatchCard0.size();
      assertEquals(404, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 0);
      int int0 = minWatchCard0.requiredNumberOfSatisfiedLiterals();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, (-49));
      int int0 = minWatchCard0.requiredNumberOfSatisfiedLiterals();
      assertEquals((-49), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1, 1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 1);
      lits0.getFromPool(3113);
      minWatchCard0.getVocabulary();
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, minWatchCard0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 404);
      minWatchCard0.getLits();
      assertEquals(404, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 1);
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(2);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, lubyRestarts0);
      minWatchCard0.undo(2);
      MinWatchCard minWatchCard1 = minWatchCard0.computePropagation(solver0);
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(minWatchCard1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VecInt vecInt0 = new VecInt(967, 0);
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, 967);
      DotSearchTracing<SingleSolutionDetector> dotSearchTracing0 = new DotSearchTracing<SingleSolutionDetector>("OfX @/E~(gHzk<Rq");
      // Undeclared exception!
      try { 
        minWatchCard0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, (-1));
      // Undeclared exception!
      try { 
        minWatchCard0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst((-1697));
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-1697));
      // Undeclared exception!
      try { 
        minWatchCard0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1697
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst((-1697));
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-1697));
      // Undeclared exception!
      try { 
        minWatchCard0.simplify();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1698
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 1);
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(8);
      vecInt0.push((-1));
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1476);
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      SearchParams searchParams0 = new SearchParams();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0, mUSLauncher0);
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew(solver0, (ILits) null, vecInt0, true, (-1715));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      vecInt0.push((-967));
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, true, 447);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -967
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      // Undeclared exception!
      try { 
        MinWatchCard.linearisation(iLits0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      IVecInt iVecInt0 = vecInt0.push((-909));
      // Undeclared exception!
      try { 
        MinWatchCard.linearisation(iLits0, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -909
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-967));
      // Undeclared exception!
      try { 
        minWatchCard0.getAssertionLevel((IVecInt) null, 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1, 1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 1);
      // Undeclared exception!
      try { 
        minWatchCard0.computeWatches();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1595);
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1595);
      // Undeclared exception!
      try { 
        minWatchCard0.calcReason(1595, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1595
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, readOnlyVecInt0, false, (-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard((ILits) null, (IVecInt) null, true, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 2343);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(2191, (-360));
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, (-3265));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -359
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(1347);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(11);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 518);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, fixedPeriodRestarts0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(iLits0, readOnlyVecInt0, 1347);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard((ILits) null, (IVecInt) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 2362);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(8);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 8);
      minWatchCard0.normalize();
      assertEquals(8, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(8, 8);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1347);
      minWatchCard0.size();
      assertEquals(1347, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(8, 8);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 8);
      DotSearchTracing<SingleSolutionDetector> dotSearchTracing0 = new DotSearchTracing<SingleSolutionDetector>("[");
      String string0 = minWatchCard0.toString((VarMapper) dotSearchTracing0);
      assertEquals("4[?] 4[?] 4[?] 4[?] 4[?] 4[?] 4[?] 4[?] >= 8", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(8);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1347);
      minWatchCard0.toString((VarMapper) null);
      assertEquals(1347, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 1);
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("[QmJ9Q");
      minWatchCard0.toString((VarMapper) dotSearchTracing0);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1, 1);
      VecInt vecInt1 = new VecInt(1, 0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      int int0 = minWatchCard0.getAssertionLevel(vecInt1, 1347);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1, 1);
      VecInt vecInt1 = new VecInt(1);
      vecInt1.unsafePush(1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt1, false, 1);
      int int0 = minWatchCard0.getAssertionLevel(vecInt0, (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1, 1);
      VecInt vecInt1 = new VecInt(1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt1, false, 1);
      int int0 = minWatchCard0.getAssertionLevel(vecInt0, (-1));
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 0);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI(watcherBasedPrimeImplicantStrategy0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 0);
      minWatchCard0.undo(0);
      // Undeclared exception!
      try { 
        minWatchCard0.calcReasonOnTheFly((-1), iVecInt0, iVecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, true, (-1));
      minWatchCard0.calcReasonOnTheFly((-1), (IVecInt) null, (IVecInt) null);
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1, 1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 1);
      minWatchCard0.calcReasonOnTheFly(1, vecInt0, vecInt0);
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, minWatchCard0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1, 1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      minWatchCard0.hashCode();
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, true, (-1));
      MinWatchCard minWatchCard1 = new MinWatchCard(iLits0, vecInt0, true, 0);
      boolean boolean0 = minWatchCard1.equals(minWatchCard0);
      assertFalse(minWatchCard0.equals((Object)minWatchCard1));
      assertEquals(0, minWatchCard1.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, true, (-1));
      boolean boolean0 = minWatchCard0.equals(minWatchCard0);
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-511));
      boolean boolean0 = minWatchCard0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals((-511), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1, 1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 1);
      boolean boolean0 = minWatchCard0.equals("-0");
      assertFalse(boolean0);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(8);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 8);
      try { 
        minWatchCard0.computePropagation((UnitPropagationListener) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, 0);
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, fixedPeriodRestarts0, iLogAble0);
      minWatchCard0.computePropagation(solver0);
      assertEquals(1, solver0.getPropagationLevel());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1);
      vecInt0.unsafePush(1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 1);
      // Undeclared exception!
      try { 
        minWatchCard0.computePropagation((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 1);
      MinWatchCard minWatchCard1 = minWatchCard0.computePropagation((UnitPropagationListener) null);
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(minWatchCard1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(9, 1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, (-2108));
      minWatchCard0.register();
      assertEquals((-2108), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(0.0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(2976.587781, (-1188.6471), 0.999, (-1197));
      PureOrder pureOrder0 = new PureOrder();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, miniSATRestarts0, (ILogAble) null);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 0);
      minWatchCard0.assertConstraintIfNeeded(solver0);
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1, 1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 1);
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      minWatchCard0.assertConstraintIfNeeded(solver0);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1, 1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 1);
      // Undeclared exception!
      try { 
        minWatchCard0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(8, 8);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1347);
      String string0 = minWatchCard0.toString();
      assertEquals("+x4[?] +x4[?] +x4[?] +x4[?] +x4[?] +x4[?] +x4[?] +x4[?] >= 1347", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(8);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 8);
      minWatchCard0.toString();
      assertEquals(8, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1, 1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 1);
      boolean boolean0 = minWatchCard0.simplify();
      assertFalse(boolean0);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1, 1);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>((-1));
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, miniSATRestarts0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1247);
      // Undeclared exception!
      try { 
        minWatchCard0.remove(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Lits lits0 = new Lits();
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(randomLiteralSelectionStrategy0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, miniSATRestarts0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, 1247);
      minWatchCard0.remove(solver0);
      assertEquals(1247, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      minWatchCard0.undo(0);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      SearchParams searchParams0 = new SearchParams(1963);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, eMARestarts0, mUSLauncher0);
      // Undeclared exception!
      try { 
        minWatchCard0.propagate(solver0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 0);
      // Undeclared exception!
      try { 
        minWatchCard0.propagate((UnitPropagationListener) null, (-1697));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1697
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1, 1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      // Undeclared exception!
      try { 
        minWatchCard0.propagate((UnitPropagationListener) null, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      Constr constr0 = MinWatchCard.minWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, true, (-988));
      assertNull(constr0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      SearchParams searchParams0 = new SearchParams();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder((-1));
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, mUSLauncher0);
      Constr constr0 = MinWatchCard.minWatchCardNew(solver0, iLits0, vecInt0, false, 0);
      assertNotNull(constr0);
      assertEquals(0, solver0.getPropagationLevel());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1, 1);
      try { 
        MinWatchCard.minWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, true, 2241);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew((UnitPropagationListener) null, iLits0, vecInt0, false, (-2243));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1, 1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 1);
      minWatchCard0.calcReason((-1), vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(1, minWatchCard0.size());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1, 1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 1);
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(8);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 8);
      // Undeclared exception!
      try { 
        minWatchCard0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 1);
      boolean boolean0 = minWatchCard0.learnt();
      assertFalse(boolean0);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-1141));
      minWatchCard0.incActivity((-672.614396427898));
      assertEquals((-1141), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 1);
      minWatchCard0.setActivity((-1034.0));
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1, 1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 1);
      // Undeclared exception!
      try { 
        minWatchCard0.isSatisfied();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(7, 7);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 7);
      double double0 = minWatchCard0.getActivity();
      assertEquals(7, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(8);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 8);
      boolean boolean0 = minWatchCard0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertEquals(8, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1, 1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 1);
      boolean boolean0 = minWatchCard0.locked();
      assertTrue(boolean0);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(8);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 8);
      int int0 = minWatchCard0.requiredNumberOfSatisfiedLiterals();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 1);
      minWatchCard0.forwardActivity(3490.2855);
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 1);
      Constr constr0 = minWatchCard0.toConstraint();
      assertEquals((-1), constr0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(8);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1347);
      // Undeclared exception!
      try { 
        minWatchCard0.get(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 32);
      boolean boolean0 = minWatchCard0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
      assertEquals((-32), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(8, 8);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1347);
      minWatchCard0.getLits();
      assertEquals(1347, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 32);
      minWatchCard0.rescaleBy(32);
      assertEquals(32, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(8);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, true, (-370));
      minWatchCard0.getVocabulary();
      assertEquals((-370), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }
}
