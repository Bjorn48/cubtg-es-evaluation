* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.minisat.core.Solver
* Starting Client-0
* Connecting to master process on port 18070
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.minisat.core.Solver
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 3882
* Using seed 1550366622050
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 1320 / 3882
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.1893542757417103
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1145975443383356
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.11333333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.17293233082706766
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.33070866141732286
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.25196850393700787
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.09004092769440655
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
[MASTER] 02:24:28.607 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class org.sat4j.minisat.orders.LevelBasedVarOrderHeap canUseFunctionalMocks=false, canBeMocked: true
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 278
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.19633507853403143
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.12824010914051842
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.12
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.18796992481203006
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.3779527559055118
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.28346456692913385
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.10368349249658936
[MASTER] 02:24:35.307 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.ILits
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 364
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.21902268760907503
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.1432469304229195
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.136
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.20676691729323307
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4251968503937008
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.33070866141732286
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.12005457025920874
[MASTER] 02:24:42.198 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.core.Solver due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.core.Solver due to org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.specs.ILogAble
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 449
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.231239092495637
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.15006821282401092
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.18266666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.20676691729323307
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.4566929133858268
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.33858267716535434
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.12687585266030013
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 536
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 621
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.3394415357766143
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.21691678035470668
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.24666666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.22180451127819548
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5196850393700787
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.3937007874015748
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.1582537517053206
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 715
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 804
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.35951134380453753
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.23465211459754434
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.2613333333333333
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.23308270676691728
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5511811023622047
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.4251968503937008
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.17598908594815826
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 895
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.36649214659685864
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.24010914051841747
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.27466666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.24436090225563908
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.5826771653543307
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.44881889763779526
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.18144611186903137
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 983
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1072
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
[MASTER] 02:25:08.601 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for org.sat4j.minisat.core.Solver due to org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.IOrder
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1158
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.38394415357766143
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.2592087312414734
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.30133333333333334
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2857142857142857
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.6692913385826772
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5196850393700787
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.20327421555252387
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1244
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1337
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.393542757417103
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.26193724420190995
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.30133333333333334
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.2932330827067669
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.6929133858267716
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.5669291338582677
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.20600272851296045
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1421
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1501
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1588
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.43804537521815007
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3015006821282401
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.348
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3157894736842105
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.7559055118110236
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6220472440944882
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2755798090040928
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1670
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1750
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.45898778359511344
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3219645293315143
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.37466666666666665
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3233082706766917
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.7874015748031497
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6377952755905512
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.2933151432469304
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1838
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1922
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.468586387434555
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3328785811732606
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.38666666666666666
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3383458646616541
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8031496062992126
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6692913385826772
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.30286493860845837
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2015
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2108
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2199
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.47294938917975565
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.33424283765347884
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.388
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.34962406015037595
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8267716535433071
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6929133858267716
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.3096862210095498
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2297
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2390
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2475
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.47731239092495636
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.339699863574352
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.4026666666666667
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3533834586466165
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8503937007874016
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7086614173228346
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.3165075034106412
* naaame: 
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 2499
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4860383944153578
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3424283765347885
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.408
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3533834586466165
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8582677165354331
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7165354330708661
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.3178717598908595
* Search finished after 125s and 27 generations, 45290 statements, best individual has fitness: 2241.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4860383944153578
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3424283765347885
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.408
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3533834586466165
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8582677165354331
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7165354330708661
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.3178717598908595
* Minimizing test suite
[MASTER] 02:26:59.333 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 50%
* Total number of goals: 1146
* Number of covered goals: 576
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 34%
* Total number of goals: 733
* Number of covered goals: 251
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 65
* Number of covered goals: 65
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 42%
* Total number of goals: 750
* Number of covered goals: 316
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 35%
* Total number of goals: 266
* Number of covered goals: 94
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 87%
* Total number of goals: 127
* Number of covered goals: 111
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 72%
* Total number of goals: 127
* Number of covered goals: 91
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 32%
* Total number of goals: 733
* Number of covered goals: 233
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4860383944153578
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3424283765347885
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.408
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3533834586466165
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8582677165354331
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7165354330708661
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.3178717598908595
* Generated 231 tests with total length 4678
* Resulting test suite's coverage: 56% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 02:27:53.955 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6705166666666666% of time used, but only 17/231 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 5%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.4860383944153578
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.3424283765347885
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.408
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3533834586466165
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8582677165354331
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.7165354330708661
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.3178717598908595
* Compiling and checking tests
[MASTER] 02:28:23.810 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$GlucoseLCDS
[MASTER] 02:28:23.817 [logback-1] WARN  ClassResetter - class java.lang.IncompatibleClassChangeError thrown while loading method  __STATIC_RESET() for class org.sat4j.minisat.core.Solver$Glucose2LCDS
[MASTER] 02:28:26.185 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:26.186 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
SearchParams searchParams0 = new SearchParams();
UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
ArminRestarts arminRestarts0 = new ArminRestarts();
Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, (ILogAble) null);
solver0.simplifyDB();
assertEquals(1, solver0.nVars());

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(704);
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
SearchParams searchParams1 = new SearchParams();
Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams1, levelBasedVarOrderHeap0, arminRestarts0);
solver1.findModel();
assertEquals(2147483, solver1.getTimeout());


[MASTER] 02:28:26.648 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 02:28:26.649 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
SearchParams searchParams0 = new SearchParams();
UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
ArminRestarts arminRestarts0 = new ArminRestarts();
Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, (ILogAble) null);
solver0.simplifyDB();
PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(704);
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
SearchParams searchParams1 = new SearchParams();
Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams1, levelBasedVarOrderHeap0, arminRestarts0);
solver1.findModel();
NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams1, levelBasedVarOrderHeap0, arminRestarts0, (ILogAble) null);
solver2.setDataStructureFactory(clausalDataStructureWL0);
ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>((-1635.313566881));
CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, arminRestarts0);
solver3.setLearnedConstraintsDeletionStrategy(solver2.size_based);

[MASTER] 02:28:28.723 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:28.725 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
SearchParams searchParams0 = new SearchParams(1687.0815232563998, 1.0, 1.0, 450);
int[] intArray0 = new int[5];
intArray0[0] = 450;
intArray0[1] = 450;
intArray0[2] = 450;
intArray0[3] = 450;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
EMARestarts eMARestarts0 = new EMARestarts();
Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, eMARestarts0);
solver0.clearLearntClauses();
assertEquals(1, solver0.nVars());

IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
solver0.addAtMost(iVecInt0, 450);
NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
MUSLauncher mUSLauncher0 = new MUSLauncher();
iVecInt0.growTo(450, 450);
iVecInt0.iterator();
MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, eMARestarts0);
solver1.isSatisfiable(iVecInt0, true);
solver1.addAtMost(iVecInt0, 450);
PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMax>();
Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning1, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, eMARestarts0, mUSLauncher0);
int[] intArray1 = solver1.model();
assertArrayEquals(new int[] {450}, intArray1);


[MASTER] 02:28:30.260 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:30.267 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams(1687.0815232563998, 1.0, 334.2924930782404, 4);
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

int[] intArray0 = new int[5];
intArray0[0] = 4;
intArray0[1] = 4;
intArray0[2] = 4;
intArray0[3] = 4;
intArray0[4] = 4;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {4, 4, 4, 4, 4}, intArray0);
assertEquals(5, intArray0.length);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertNotNull(eMARestarts0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, eMARestarts0);
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);
assertArrayEquals(new int[] {4, 4, 4, 4, 4}, intArray0);
assertEquals(5, intArray0.length);

solver0.clearLearntClauses();
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertArrayEquals(new int[] {4, 4, 4, 4, 4}, intArray0);
assertEquals(5, intArray0.length);

IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertNotNull(iVecInt0);
assertArrayEquals(new int[] {4, 4, 4, 4, 4}, intArray0);
assertEquals(5, intArray0.length);

AtLeast atLeast0 = (AtLeast)solver0.addAtMost(iVecInt0, 4);
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertFalse(atLeast0.simplify());
assertEquals((-4), atLeast0.requiredNumberOfSatisfiedLiterals());
assertEquals(0, atLeast0.size());
assertFalse(atLeast0.canBePropagatedMultipleTimes());
assertEquals(0.0, atLeast0.getActivity(), 0.01);
assertTrue(atLeast0.locked());
assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
assertFalse(atLeast0.isSatisfied());
assertFalse(atLeast0.learnt());
assertNotNull(atLeast0);
assertArrayEquals(new int[] {4, 4, 4, 4, 4}, intArray0);
assertEquals(5, intArray0.length);

NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, subsetVarOrder0, eMARestarts0);
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertNotNull(solver1);
assertArrayEquals(new int[] {4, 4, 4, 4, 4}, intArray0);
assertEquals(5, intArray0.length);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("#constraints  ");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>((LearningStrategy<CardinalityDataStructureYanMax>) null, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, eMARestarts0, mUSLauncher0);

[MASTER] 02:28:30.593 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:30.595 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

int[] intArray0 = new int[6];
intArray0[0] = 947;
intArray0[1] = (-1937);
intArray0[2] = 1620;
intArray0[3] = 43;
intArray0[4] = 0;
intArray0[5] = 45;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {947, (-1937), 1620, 43, 0, 45}, intArray0);
assertEquals(6, intArray0.length);

LubyRestarts lubyRestarts0 = new LubyRestarts(0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics0, mixedDataStructureDanielWL0, subsetVarOrder0, lubyRestarts0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);
assertArrayEquals(new int[] {947, (-1937), 1620, 43, 0, 45}, intArray0);
assertEquals(6, intArray0.length);

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts0, learnedConstraintsEvaluationType0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertArrayEquals(new int[] {947, (-1937), 1620, 43, 0, 45}, intArray0);
assertEquals(6, intArray0.length);

NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningNoHeuristics0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, (MixedDataStructureDanielHT) null, searchParams0, subsetVarOrder0, lubyRestarts0);

[MASTER] 02:28:30.912 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:30.929 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(47);
assertEquals(47, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams(144.6899, 4);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(144.6899, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(144.6899, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, double0, 0.01);

SearchParams searchParams1 = new SearchParams(4);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(4, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

double double1 = searchParams1.getClaDecay();
assertNotSame(searchParams1, searchParams0);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(4, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, double1, 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotEquals(double1, double0, 0.01);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(glucose21Restarts0);

ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

int[] intArray0 = new int[7];
intArray0[0] = 2979;
intArray0[1] = 112;
intArray0[2] = 1579;
intArray0[3] = 0;
intArray0[4] = 867;
intArray0[5] = 1;
intArray0[6] = 2409;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {2979, 112, 1579, 0, 867, 1, 2409}, intArray0);
assertEquals(7, intArray0.length);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, subsetVarOrder0, glucose21Restarts0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(solver0);
assertArrayEquals(new int[] {2979, 112, 1579, 0, 867, 1, 2409}, intArray0);
assertEquals(7, intArray0.length);

SearchParams searchParams2 = solver0.getSearchParams();
assertNotSame(searchParams2, searchParams0);
assertNotSame(searchParams2, searchParams1);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(100, searchParams2.getInitConflictBound());
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(searchParams2);
assertArrayEquals(new int[] {2979, 112, 1579, 0, 867, 1, 2409}, intArray0);
assertFalse(searchParams2.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams1));
assertEquals(7, intArray0.length);

SolverStats solverStats0 = solver0.getStats();
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0, solverStats0.getStarts());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(solverStats0);
assertArrayEquals(new int[] {2979, 112, 1579, 0, 867, 1, 2409}, intArray0);
assertEquals(7, intArray0.length);

glucose21Restarts0.init(searchParams2, solverStats0);
assertNotSame(searchParams2, searchParams0);
assertNotSame(searchParams2, searchParams1);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(7, solver0.nVars());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(100, searchParams2.getInitConflictBound());
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0, solverStats0.getStarts());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertArrayEquals(new int[] {2979, 112, 1579, 0, 867, 1, 2409}, intArray0);
assertFalse(searchParams2.equals((Object)searchParams0));
assertFalse(searchParams2.equals((Object)searchParams1));
assertEquals(7, intArray0.length);

glucose21Restarts0.onRestart();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("#constraints  ");
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams1, varOrderHeap0, glucose21Restarts0, mUSLauncher0);
assertEquals(47, percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(4, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertNotNull(solver1);
assertFalse(searchParams1.equals((Object)searchParams2));
assertFalse(searchParams1.equals((Object)searchParams0));

VecInt vecInt0 = new VecInt();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, readOnlyVecInt0.size());
assertTrue(readOnlyVecInt0.isEmpty());
assertNotNull(readOnlyVecInt0);

IVecInt iVecInt0 = readOnlyVecInt0.clone();
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, readOnlyVecInt0.size());
assertTrue(readOnlyVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertNotNull(iVecInt0);
assertTrue(iVecInt0.equals((Object)vecInt0));

int[] intArray1 = solver1.findModel(iVecInt0);
assertNotSame(searchParams1, searchParams2);
assertNotSame(searchParams1, searchParams0);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(iVecInt0, vecInt0);
assertNotSame(intArray1, intArray0);
assertEquals(47, percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(4, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, readOnlyVecInt0.size());
assertTrue(readOnlyVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertNotNull(intArray1);
assertArrayEquals(new int[] {}, intArray1);
assertFalse(searchParams1.equals((Object)searchParams2));
assertFalse(searchParams1.equals((Object)searchParams0));
assertTrue(vecInt0.equals((Object)iVecInt0));
assertTrue(iVecInt0.equals((Object)vecInt0));
assertFalse(intArray1.equals((Object)intArray0));
assertEquals(0, intArray1.length);


[MASTER] 02:28:31.272 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:31.277 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

int[] intArray0 = new int[3];
intArray0[0] = 0;
intArray0[1] = 0;
intArray0[2] = 0;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {0, 0, 0}, intArray0);
assertEquals(3, intArray0.length);

LubyRestarts lubyRestarts0 = new LubyRestarts(2170);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(2170, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

SolverStats solverStats0 = new SolverStats();
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getRootSimplifications());
assertNotNull(solverStats0);

lubyRestarts0.init((SearchParams) null, solverStats0);
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(2170, lubyRestarts0.getFactor());
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onRestart();
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(2170, lubyRestarts0.getFactor());
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, subsetVarOrder0, lubyRestarts0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(2170, lubyRestarts0.getFactor());
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);
assertArrayEquals(new int[] {0, 0, 0}, intArray0);
assertEquals(3, intArray0.length);

ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertNotNull(iLits0);

activeLearning0.setOrder(subsetVarOrder0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertArrayEquals(new int[] {0, 0, 0}, intArray0);
assertEquals(3, intArray0.length);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, (SearchParams) null, subsetVarOrder0, lubyRestarts0);
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.nConstraints());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(2170, lubyRestarts0.getFactor());
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);
assertArrayEquals(new int[] {0, 0, 0}, intArray0);
assertEquals(3, intArray0.length);

solver1.primeImplicant();

[MASTER] 02:28:31.628 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:31.637 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

lubyRestarts0.onRestart();
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, lubyRestarts0, (ILogAble) null);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(32);
assertEquals(32, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertNotNull(iLits0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, (SearchParams) null, varOrderHeap0, lubyRestarts0, (ILogAble) null);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, percentLengthLearning0.getLimit());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, lubyRestarts0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertEquals(2, solver2.newVar());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver2);

solver0.cancelUntil(45);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielHT>(45);
assertEquals(45, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning1, mixedDataStructureDanielHT0, varOrderHeap0, lubyRestarts0);
assertEquals(45, percentLengthLearning1.getLimit());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0, solver3.decisionLevel());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals(2, solver3.newVar());
assertFalse(solver3.isSolverKeptHot());
assertEquals(1, solver3.nVars());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.nConstraints());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(0, solver3.currentDecisionLevel());
assertFalse(solver3.isVerbose());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver3);

solver3.cancelUntilTrailLevel(32);
assertEquals(45, percentLengthLearning1.getLimit());
assertEquals(3, solver3.nVars());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(3, solver3.realNumberOfVariables());
assertEquals(0, solver3.decisionLevel());
assertEquals(4, solver3.newVar());
assertFalse(solver3.isSolverKeptHot());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.nConstraints());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(0, solver3.currentDecisionLevel());
assertFalse(solver3.isVerbose());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);


[MASTER] 02:28:31.921 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:31.922 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

PureOrder pureOrder0 = new PureOrder();
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(arminRestarts0);

ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL0, (SearchParams) null, pureOrder0, arminRestarts0);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertNotNull(solver0);

solver0.primeImplicant();

[MASTER] 02:28:32.355 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:32.357 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(1961);
assertEquals(1961, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, (-1851.0951181));
assertEquals((-1851.0951181), randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

LubyRestarts lubyRestarts0 = new LubyRestarts(2170);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(2170, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

SolverStats solverStats0 = new SolverStats();
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getReducedliterals());
assertNotNull(solverStats0);

lubyRestarts0.init((SearchParams) null, solverStats0);
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2170, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onRestart();
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2170, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, randomWalkDecorator0, lubyRestarts0);
assertEquals(1961, percentLengthLearning0.getLimit());
assertEquals((-1851.0951181), randomWalkDecorator0.getProbability(), 0.01);
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2170, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(lubyRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

solver0.suggestNextLiteralToBranchOn(2170);

[MASTER] 02:28:32.684 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:32.689 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

naturalStaticOrder0.undo(1674);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertNotNull(fixedPeriodRestarts0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

fixedPeriodRestarts0.onRestart();
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());

NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningNoHeuristics0);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertNotNull(solver0);

NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningNoHeuristics1);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertNotNull(eMARestarts0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics1, cardinalityDataStructureYanMax0, naturalStaticOrder0, eMARestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertNotNull(solver1);

solver1.expireTimeout();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());

ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL1);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

ILits iLits0 = clausalDataStructureWL1.getVocabulary();
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

ClausalDataStructureWL clausalDataStructureWL2 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL2);
assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL0));
assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL1));

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL2, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(1, solver2.nVars());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertNotNull(solver2);
assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL0));
assertFalse(clausalDataStructureWL2.equals((Object)clausalDataStructureWL1));
assertFalse(solver2.equals((Object)solver0));

solver0.undoOne();

[MASTER] 02:28:33.096 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:33.107 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

RSATLastLearnedClausesPhaseSelectionStrategy rSATLastLearnedClausesPhaseSelectionStrategy0 = new RSATLastLearnedClausesPhaseSelectionStrategy();
assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
assertNotNull(rSATLastLearnedClausesPhaseSelectionStrategy0);

rSATLastLearnedClausesPhaseSelectionStrategy0.updateVar((-1715));
assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());

VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATLastLearnedClausesPhaseSelectionStrategy0);
assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningButHeuristics0);

boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, varOrderHeap0, lubyRestarts0);
assertEquals("lightweight component caching from RSAT inverting phase for variables at conflict decision level", rSATLastLearnedClausesPhaseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

VecInt vecInt0 = new VecInt();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

VarOrderHeap varOrderHeap1 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertNotNull(varOrderHeap1);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));

NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningNoHeuristics0);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, lubyRestarts0);
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

long long0 = solver1.getTimeoutMs();
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(2147483647L, long0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(1656);
assertEquals(1656, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertNotNull(iLits0);

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL1);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL1, naturalStaticOrder0, lubyRestarts0);
assertEquals(1656, percentLengthLearning0.getLimit());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.decisionLevel());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver2);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, iLits0);
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertEquals(1, originalBinaryClause0.requiredNumberOfSatisfiedLiterals());
assertFalse(originalBinaryClause0.simplify());
assertEquals(2, originalBinaryClause0.size());
assertFalse(originalBinaryClause0.canBePropagatedMultipleTimes());
assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
assertTrue(originalBinaryClause0.canBeSatisfiedByCountingLiterals());
assertFalse(originalBinaryClause0.locked());
assertFalse(originalBinaryClause0.learnt());
assertFalse(originalBinaryClause0.isSatisfied());
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(originalBinaryClause0);
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));

solver2.claBumpActivity(originalBinaryClause0);
assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertEquals(1656, percentLengthLearning0.getLimit());
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(4, solver2.newVar());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertEquals(3, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(1, originalBinaryClause0.requiredNumberOfSatisfiedLiterals());
assertFalse(originalBinaryClause0.simplify());
assertEquals(2, originalBinaryClause0.size());
assertFalse(originalBinaryClause0.canBePropagatedMultipleTimes());
assertEquals(0.0, originalBinaryClause0.getActivity(), 0.01);
assertTrue(originalBinaryClause0.canBeSatisfiedByCountingLiterals());
assertFalse(originalBinaryClause0.locked());
assertFalse(originalBinaryClause0.learnt());
assertFalse(originalBinaryClause0.isSatisfied());
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));


[MASTER] 02:28:33.512 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 02:28:33.542 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(48);
assertEquals(48, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams(144.6899, 4);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(144.6899, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(144.6899, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, double0, 0.01);

SearchParams searchParams1 = new SearchParams(4);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

double double1 = searchParams1.getClaDecay();
assertNotSame(searchParams1, searchParams0);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, double1, 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotEquals(double1, double0, 0.01);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(glucose21Restarts0);

glucose21Restarts0.reset();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams1, varOrderHeap0, glucose21Restarts0);
assertEquals(48, percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);
assertFalse(searchParams1.equals((Object)searchParams0));

percentLengthLearning0.setLimit(48);
assertEquals(48, percentLengthLearning0.getLimit());

glucose21Restarts0.onRestart();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());

cardinalityDataStructure0.setLearner(solver0);
assertNotSame(searchParams1, searchParams0);
assertEquals(48, percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(searchParams1.equals((Object)searchParams0));

SimplificationType simplificationType0 = SimplificationType.EXPENSIVE_SIMPLIFICATION;
solver0.setSimplifier(simplificationType0);
assertNotSame(searchParams1, searchParams0);
assertEquals(48, percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(5, solver0.nVars());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(searchParams1.equals((Object)searchParams0));

ILogAble iLogAble0 = solver0.getLogger();
assertNotSame(searchParams1, searchParams0);
assertEquals(48, percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(7, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(8, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(iLogAble0);
assertFalse(searchParams1.equals((Object)searchParams0));

LearningStrategy<ClausalDataStructureWL> learningStrategy0 = null;
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>();
assertEquals(10, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

int int0 = 0;
SearchParams searchParams2 = new SearchParams(0);
assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
assertEquals(0, searchParams2.getInitConflictBound());
assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
assertNotNull(searchParams2);
assertFalse(searchParams2.equals((Object)searchParams1));
assertFalse(searchParams2.equals((Object)searchParams0));

PureOrder pureOrder0 = new PureOrder();
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, (ClausalDataStructureWL) null, searchParams2, pureOrder0, lubyRestarts0, mUSLauncher0);

[MASTER] 02:28:35.482 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:35.507 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams(1687.0815232563998, 1.0, 334.2924930782404, 4);
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

int[] intArray0 = new int[5];
intArray0[0] = 4;
intArray0[1] = 4;
intArray0[2] = 4;
intArray0[3] = 4;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {4, 4, 4, 4, 0}, intArray0);
assertEquals(5, intArray0.length);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertNotNull(eMARestarts0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, eMARestarts0);
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);
assertArrayEquals(new int[] {4, 4, 4, 4, 0}, intArray0);
assertEquals(5, intArray0.length);

solver0.clearLearntClauses();
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertArrayEquals(new int[] {4, 4, 4, 4, 0}, intArray0);
assertEquals(5, intArray0.length);

IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertNotNull(iVecInt0);
assertArrayEquals(new int[] {4, 4, 4, 4, 0}, intArray0);
assertEquals(5, intArray0.length);

AtLeast atLeast0 = (AtLeast)solver0.addAtMost(iVecInt0, 4);
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(7, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.nVars());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals((-4), atLeast0.requiredNumberOfSatisfiedLiterals());
assertEquals(0, atLeast0.size());
assertFalse(atLeast0.isSatisfied());
assertFalse(atLeast0.learnt());
assertFalse(atLeast0.canBePropagatedMultipleTimes());
assertEquals(0.0, atLeast0.getActivity(), 0.01);
assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
assertFalse(atLeast0.simplify());
assertTrue(atLeast0.locked());
assertNotNull(atLeast0);
assertArrayEquals(new int[] {4, 4, 4, 4, 0}, intArray0);
assertEquals(5, intArray0.length);

NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, subsetVarOrder0, eMARestarts0);
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertNotNull(solver1);
assertArrayEquals(new int[] {4, 4, 4, 4, 0}, intArray0);
assertEquals(5, intArray0.length);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

iVecInt0.growTo(4, 4);
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(10, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(9, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(9, solver0.nVars());
assertEquals(4, iVecInt0.last());
assertFalse(iVecInt0.isEmpty());
assertEquals(4, iVecInt0.size());
assertArrayEquals(new int[] {4, 4, 4, 4, 0}, intArray0);
assertEquals(5, intArray0.length);

ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

Lits lits0 = (Lits)clausalDataStructureWL0.getVocabulary();
assertEquals(0, lits0.nVars());
assertEquals(0, lits0.realnVars());
assertNotNull(lits0);

NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics1 = new NoLearningButHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningButHeuristics1);

ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(0.0);
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, varOrderHeap0, eMARestarts0);
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertNotNull(solver2);

solver2.undoOne();

[MASTER] 02:28:35.901 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:35.902 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(0.0);
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

PureOrder pureOrder0 = new PureOrder(2111);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(2111, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

NoRestarts noRestarts0 = new NoRestarts();
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertEquals("NoRestarts", noRestarts0.toString());
assertFalse(noRestarts0.shouldRestart());
assertNotNull(noRestarts0);

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams(2111, 2111);
assertEquals(2111, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(2111.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, (RestartStrategy) null);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(2111, pureOrder0.getPeriod());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(2111, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(2111.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertNotNull(solver0);

int int0 = 1141;
solver0.enqueue(1141);

[MASTER] 02:28:36.219 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:36.225 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, lubyRestarts0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

ILogAble iLogAble0 = solver0.getLogger();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(iLogAble0);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, lubyRestarts0, iLogAble0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

solver1.model();

[MASTER] 02:28:36.574 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 02:28:36.575 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
assertNotNull(rSATPhaseSelectionStrategy0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, (SearchParams) null, levelBasedVarOrderHeap0, (RestartStrategy) null);
assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

VecInt vecInt0 = new VecInt();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

vecInt0.clear();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

IVecInt iVecInt0 = vecInt0.push(627);
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt0, vecInt0);
assertEquals(1, vecInt0.size());
assertEquals(627, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(627, iVecInt0.last());
assertEquals(1, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertNotNull(iVecInt0);

vecInt0.sort();
assertSame(vecInt0, iVecInt0);
assertEquals(1, vecInt0.size());
assertEquals(627, vecInt0.last());
assertFalse(vecInt0.isEmpty());

int[] intArray0 = vecInt0.toArray();
assertSame(vecInt0, iVecInt0);
assertEquals(1, vecInt0.size());
assertEquals(627, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertNotNull(intArray0);
assertArrayEquals(new int[] {627, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);

IVecInt iVecInt1 = vecInt0.clone();
assertSame(vecInt0, iVecInt0);
assertNotSame(vecInt0, iVecInt1);
assertNotSame(iVecInt1, vecInt0);
assertNotSame(iVecInt1, iVecInt0);
assertEquals(1, vecInt0.size());
assertEquals(627, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(1, iVecInt1.size());
assertFalse(iVecInt1.isEmpty());
assertEquals(627, iVecInt1.last());
assertNotNull(iVecInt1);
assertTrue(iVecInt1.equals((Object)vecInt0));
assertTrue(iVecInt1.equals((Object)iVecInt0));

solver0.findModel(iVecInt1);

[MASTER] 02:28:36.940 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:36.945 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>((-2772.0));
assertEquals(0, activeLearning0.getLimit());
assertEquals((-2772.0), activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

naturalStaticOrder0.undo(0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertNotNull(fixedPeriodRestarts0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

fixedPeriodRestarts0.onRestart();
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals(0, activeLearning0.getLimit());
assertEquals((-2772.0), activeLearning0.getActivityPercent(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

VecInt vecInt0 = new VecInt(0, 0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

Set<Integer> set0 = solver0.fromLastDecisionLevel(vecInt0);
assertFalse(set0.contains(0));
assertEquals(0, activeLearning0.getLimit());
assertEquals((-2772.0), activeLearning0.getActivityPercent(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, set0.size());
assertTrue(set0.isEmpty());
assertNotNull(set0);

NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertNotNull(solver1);

Solver solver2 = (Solver)solver1.getSolvingEngine();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(5, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver2.isVerbose());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(4, solver2.realNumberOfVariables());
assertEquals(4, solver2.nVars());
assertEquals(5, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertNotNull(solver2);


[MASTER] 02:28:37.338 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:37.340 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

cardinalityDataStructureYanMax0.conflictDetectedInWatchesFor(32, 32);
lubyRestarts0.onRestart();
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax1);
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));

NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, (SearchParams) null, levelBasedVarOrderHeap0, lubyRestarts0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

solver0.findModel();

[MASTER] 02:28:37.703 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 02:28:37.718 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

PureOrder pureOrder0 = new PureOrder(4);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(4, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

pureOrder0.varDecayActivity();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(4, pureOrder0.getPeriod());

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, 4);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(4, pureOrder0.getPeriod());
assertNotNull(tabuListDecorator0);

MiniSATLearning<MixedDataStructureDanielHT> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielHT>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

LubyRestarts lubyRestarts0 = new LubyRestarts(2170);
assertEquals(2170, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

SolverStats solverStats0 = new SolverStats();
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertNotNull(solverStats0);

solverStats0.incLearnedternaryclauses();
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(1L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getImportedUnits());

lubyRestarts0.init((SearchParams) null, solverStats0);
assertEquals(2170, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(1L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onRestart();
assertEquals(2170, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(miniSATLearning0, mixedDataStructureDanielHT0, searchParams0, tabuListDecorator0, lubyRestarts0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(4, pureOrder0.getPeriod());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(2170, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

LubyRestarts lubyRestarts1 = (LubyRestarts)solver0.getRestartStrategy();
assertSame(lubyRestarts0, lubyRestarts1);
assertSame(lubyRestarts1, lubyRestarts0);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(4, pureOrder0.getPeriod());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(2170, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, lubyRestarts1.luby());
assertEquals(2170L, lubyRestarts1.nextRestartNumberOfConflict());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(2170, lubyRestarts1.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts1);

Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, tabuListDecorator0, lubyRestarts1);
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(4, pureOrder0.getPeriod());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(2170, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, lubyRestarts1.luby());
assertEquals(2170L, lubyRestarts1.nextRestartNumberOfConflict());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(2170, lubyRestarts1.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, (CardinalityDataStructureYanMin) null, tabuListDecorator0, lubyRestarts0);

[MASTER] 02:28:38.012 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:38.017 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, lubyRestarts0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

VecInt vecInt0 = new VecInt();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

vecInt0.clear();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

IVecInt iVecInt0 = vecInt0.push(32);
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt0, vecInt0);
assertFalse(vecInt0.isEmpty());
assertEquals(1, vecInt0.size());
assertEquals(32, vecInt0.last());
assertFalse(iVecInt0.isEmpty());
assertEquals(1, iVecInt0.size());
assertEquals(32, iVecInt0.last());
assertNotNull(iVecInt0);

vecInt0.sort();
assertSame(vecInt0, iVecInt0);
assertFalse(vecInt0.isEmpty());
assertEquals(1, vecInt0.size());
assertEquals(32, vecInt0.last());

int[] intArray0 = vecInt0.toArray();
assertSame(vecInt0, iVecInt0);
assertFalse(vecInt0.isEmpty());
assertEquals(1, vecInt0.size());
assertEquals(32, vecInt0.last());
assertNotNull(intArray0);
assertArrayEquals(new int[] {32, 0, 0, 0, 0}, intArray0);
assertEquals(5, intArray0.length);

int[] intArray1 = solver0.findModel(iVecInt0);
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt0, vecInt0);
assertNotSame(intArray1, intArray0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(33, solver0.nVars());
assertEquals(33, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(34, solver0.newVar());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(vecInt0.isEmpty());
assertEquals(1, vecInt0.size());
assertEquals(32, vecInt0.last());
assertFalse(iVecInt0.isEmpty());
assertEquals(1, iVecInt0.size());
assertEquals(32, iVecInt0.last());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(intArray1);
assertArrayEquals(new int[] {32}, intArray1);
assertFalse(intArray1.equals((Object)intArray0));
assertEquals(1, intArray1.length);


[MASTER] 02:28:38.344 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:38.347 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(fixedPeriodRestarts0);

SearchParams searchParams1 = new SearchParams();
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

fixedPeriodRestarts0.onRestart();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, searchParams0, varOrderHeap0, fixedPeriodRestarts0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(solver0);
assertFalse(searchParams0.equals((Object)searchParams1));

IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
assertNotSame(searchParams0, searchParams1);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(iVecInt0.isEmpty());
assertEquals((-2), iVecInt0.last());
assertEquals(2, iVecInt0.size());
assertNotNull(iVecInt0);
assertFalse(searchParams0.equals((Object)searchParams1));

int int0 = 30;
solver0.addExactly(iVecInt0, 30);

[MASTER] 02:28:38.799 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:38.828 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, double0, 0.01);

LearningStrategy<ClausalDataStructureWL> learningStrategy0 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

int[] intArray0 = new int[1];
intArray0[0] = 298;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {298}, intArray0);
assertEquals(1, intArray0.length);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);
assertArrayEquals(new int[] {298}, intArray0);
assertEquals(1, intArray0.length);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertNotNull(eMARestarts0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(learningStrategy0, clausalDataStructureWL0, tabuListDecorator0, eMARestarts0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);
assertArrayEquals(new int[] {298}, intArray0);
assertEquals(1, intArray0.length);

SearchParams searchParams1 = solver0.getSearchParams();
assertNotSame(searchParams1, searchParams0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams1);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(1, intArray0.length);

int int0 = searchParams1.getInitConflictBound();
assertNotSame(searchParams1, searchParams0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(5, solver0.nVars());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, int0);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(1, intArray0.length);

Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, searchParams1, tabuListDecorator0, eMARestarts0);
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(8, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(7, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertNotNull(solver1);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(1, intArray0.length);

IOrder iOrder0 = solver1.getOrder();
assertSame(iOrder0, tabuListDecorator0);
assertSame(tabuListDecorator0, iOrder0);
assertNotSame(searchParams1, searchParams0);
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(10, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(9, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(9, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertNotNull(iOrder0);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(1, intArray0.length);

Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, iOrder0, eMARestarts0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(11, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(12, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(11, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(5, solver1.nVars());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(1, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertNotNull(solver2);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(1, intArray0.length);

int int1 = solver2.nConstraints();
assertSame(tabuListDecorator0, iOrder0);
assertNotSame(searchParams1, searchParams0);
assertSame(iOrder0, tabuListDecorator0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(13, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(13, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(14, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(7, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(7, solver1.realNumberOfVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(8, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(3, solver2.nVars());
assertEquals(0, int1);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(int1 == int0);
assertEquals(1, intArray0.length);


[MASTER] 02:28:39.126 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:39.138 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams(144.6899, 4);
assertEquals(144.6899, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(144.6899, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, double0, 0.01);

SearchParams searchParams1 = new SearchParams(4);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

double double1 = searchParams1.getClaDecay();
assertNotSame(searchParams1, searchParams0);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, double1, 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotEquals(double1, double0, 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams1, tabuListDecorator0, (RestartStrategy) null, mUSLauncher0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(solver0);
assertFalse(searchParams1.equals((Object)searchParams0));

ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>(4);
assertEquals(4.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams1, levelBasedVarOrderHeap0, (RestartStrategy) null);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(4.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertNotNull(solver1);
assertFalse(searchParams1.equals((Object)searchParams0));

long long0 = solver1.getTimeoutMs();
assertNotSame(searchParams1, searchParams0);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(4.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(4, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483647L, long0);
assertFalse(searchParams1.equals((Object)searchParams0));

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(144.6899, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(3, solver2.nVars());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.realNumberOfVariables());
assertNotNull(solver2);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(solver2.equals((Object)solver0));

solver2.sortOnActivity();
assertNotSame(searchParams0, searchParams1);
assertNotSame(solver2, solver0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(144.6899, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(6, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(5, solver2.realNumberOfVariables());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(5, solver2.nVars());
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(solver2.equals((Object)solver0));

boolean boolean0 = solver0.assume(3);
assertNotSame(searchParams1, searchParams0);
assertNotSame(solver0, solver2);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.decisionLevel());
assertEquals(1, solver0.currentDecisionLevel());
assertEquals(1, solver0.getPropagationLevel());
assertTrue(boolean0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(solver0.equals((Object)solver2));

ActiveLearning<MixedDataStructureDanielHT> activeLearning1 = new ActiveLearning<MixedDataStructureDanielHT>(1.0E20);
assertEquals(0, activeLearning1.getLimit());
assertEquals(1.0E20, activeLearning1.getActivityPercent(), 0.01);
assertNotNull(activeLearning1);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(activeLearning1, mixedDataStructureDanielHT0, searchParams0, tabuListDecorator0, (RestartStrategy) null);
assertEquals(0, activeLearning1.getLimit());
assertEquals(1.0E20, activeLearning1.getActivityPercent(), 0.01);
assertEquals(144.6899, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(0, solver3.nConstraints());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(0, solver3.decisionLevel());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals(0, solver3.currentDecisionLevel());
assertFalse(solver3.isVerbose());
assertEquals(2, solver3.newVar());
assertEquals(0, solver3.getPropagationLevel());
assertFalse(solver3.isSolverKeptHot());
assertEquals(2147483, solver3.getTimeout());
assertEquals(1, solver3.nVars());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(solver3);
assertFalse(searchParams0.equals((Object)searchParams1));

VecInt vecInt0 = new VecInt((-636));

[MASTER] 02:28:39.430 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:39.434 [logback-1] WARN  JUnitAnalyzer - Failing test:
 boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertNotNull(userFixedPhaseSelectionStrategy0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(arminRestarts0);

VecInt vecInt0 = new VecInt();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

boolean boolean1 = vecInt0.equals((Object) null);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertFalse(boolean1);
assertFalse(boolean1 == boolean0);

vecInt0.ensure(278);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

int int0 = vecInt0.size();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, int0);

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

IVecInt iVecInt0 = vecInt0.push(31);
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt0, vecInt0);
assertEquals(1, vecInt0.size());
assertFalse(vecInt0.isEmpty());
assertEquals(31, vecInt0.last());
assertFalse(iVecInt0.isEmpty());
assertEquals(1, iVecInt0.size());
assertEquals(31, iVecInt0.last());
assertNotNull(iVecInt0);

UnitClauses unitClauses0 = new UnitClauses(vecInt0);
assertEquals(1, vecInt0.size());
assertFalse(vecInt0.isEmpty());
assertEquals(31, vecInt0.last());
assertTrue(unitClauses0.isSatisfied());
assertFalse(unitClauses0.simplify());
assertFalse(unitClauses0.canBePropagatedMultipleTimes());
assertNotNull(unitClauses0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);

NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics1 = new NoLearningButHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningButHeuristics1);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics1, clausalDataStructureWL0, levelBasedVarOrderHeap0, arminRestarts0);
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(solver0);

int int1 = solver0.getTimeout();
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(2147483, int1);
assertFalse(int1 == int0);

ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, arminRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(solver1);

solver1.analyze(unitClauses0, (Pair) null);

[MASTER] 02:28:39.701 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 02:28:39.709 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

lubyRestarts0.onRestart();
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, lubyRestarts0, (ILogAble) null);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, (SearchParams) null, varOrderHeap0, lubyRestarts0, (ILogAble) null);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, lubyRestarts0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(1, solver2.nVars());
assertFalse(solver2.isVerbose());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver2);

solver0.cancelUntil(49);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielHT>(49);
assertEquals(49, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning1, mixedDataStructureDanielHT0, varOrderHeap0, lubyRestarts0);
assertEquals(49, percentLengthLearning1.getLimit());
assertFalse(solver3.isSolverKeptHot());
assertEquals(2147483, solver3.getTimeout());
assertEquals(2, solver3.newVar());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals(0, solver3.nConstraints());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(1, solver3.nVars());
assertEquals(0, solver3.decisionLevel());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(0, solver3.currentDecisionLevel());
assertFalse(solver3.isVerbose());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver3);

solver3.cancelUntilTrailLevel(32);
assertEquals(49, percentLengthLearning1.getLimit());
assertFalse(solver3.isSolverKeptHot());
assertEquals(2147483, solver3.getTimeout());
assertEquals(4, solver3.newVar());
assertEquals(3, solver3.nVars());
assertEquals(0, solver3.nConstraints());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(3, solver3.realNumberOfVariables());
assertEquals(0, solver3.decisionLevel());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(0, solver3.currentDecisionLevel());
assertFalse(solver3.isVerbose());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);


[MASTER] 02:28:39.942 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:39.943 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

LubyRestarts lubyRestarts0 = new LubyRestarts((-2717));
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-2717), lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>((-2717));
assertEquals((-2717), percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, varOrderHeap0, lubyRestarts0);
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals((-2717), lubyRestarts0.getFactor());
assertEquals((-2717), percentLengthLearning0.getLimit());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

IVecInt iVecInt0 = VecInt.EMPTY;
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertNotNull(iVecInt0);

solver0.addAtLeast(iVecInt0, 1000);

[MASTER] 02:28:40.240 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 02:28:40.252 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics1 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningButHeuristics1);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertNotNull(mUSLauncher0);

VecInt vecInt0 = new VecInt();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

VecInt vecInt1 = new VecInt();
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.isEmpty());
assertNotNull(vecInt1);
assertTrue(vecInt1.equals((Object)vecInt0));

VecInt vecInt2 = new VecInt();
assertEquals(0, vecInt2.size());
assertTrue(vecInt2.isEmpty());
assertNotNull(vecInt2);
assertTrue(vecInt2.equals((Object)vecInt1));
assertTrue(vecInt2.equals((Object)vecInt0));

vecInt2.growTo((-2305), (-2305));
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, vecInt0);
assertEquals(0, vecInt2.size());
assertTrue(vecInt2.isEmpty());
assertTrue(vecInt2.equals((Object)vecInt1));
assertTrue(vecInt2.equals((Object)vecInt0));

IteratorInt iteratorInt0 = vecInt2.iterator();
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, vecInt0);
assertEquals(0, vecInt2.size());
assertTrue(vecInt2.isEmpty());
assertNotNull(iteratorInt0);
assertTrue(vecInt2.equals((Object)vecInt1));
assertTrue(vecInt2.equals((Object)vecInt0));

boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
assertFalse(boolean0);

Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
vecInt2.sort(comparator0);
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, vecInt0);
assertEquals(0, vecInt2.size());
assertTrue(vecInt2.isEmpty());
assertTrue(vecInt2.equals((Object)vecInt1));
assertTrue(vecInt2.equals((Object)vecInt0));

MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary1 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary1);
assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, lubyRestarts0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);
assertFalse(mixedDataStructureDanielWLConciseBinary0.equals((Object)mixedDataStructureDanielWLConciseBinary1));

boolean boolean1 = solver0.isSatisfiable((IVecInt) vecInt2, true);
assertNotSame(mixedDataStructureDanielWLConciseBinary0, mixedDataStructureDanielWLConciseBinary1);
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, vecInt0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, vecInt2.size());
assertTrue(vecInt2.isEmpty());
assertTrue(boolean1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(mixedDataStructureDanielWLConciseBinary0.equals((Object)mixedDataStructureDanielWLConciseBinary1));
assertFalse(boolean1 == boolean0);
assertTrue(vecInt2.equals((Object)vecInt1));
assertTrue(vecInt2.equals((Object)vecInt0));

AtLeast atLeast0 = (AtLeast)solver0.addAtMost(vecInt0, 1421);
assertNotSame(mixedDataStructureDanielWLConciseBinary0, mixedDataStructureDanielWLConciseBinary1);
assertNotSame(vecInt0, vecInt1);
assertNotSame(vecInt0, vecInt2);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(5, solver0.nVars());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals((-1421), atLeast0.requiredNumberOfSatisfiedLiterals());
assertFalse(atLeast0.canBePropagatedMultipleTimes());
assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
assertFalse(atLeast0.learnt());
assertEquals(0.0, atLeast0.getActivity(), 0.01);
assertEquals(0, atLeast0.size());
assertFalse(atLeast0.isSatisfied());
assertFalse(atLeast0.simplify());
assertTrue(atLeast0.locked());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(atLeast0);
assertFalse(mixedDataStructureDanielWLConciseBinary0.equals((Object)mixedDataStructureDanielWLConciseBinary1));
assertTrue(vecInt0.equals((Object)vecInt2));
assertTrue(vecInt0.equals((Object)vecInt1));

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
assertEquals(10, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, searchParams0, varOrderHeap0, lubyRestarts0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(10, percentLengthLearning1.getLimit());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

solver1.setOrder(varOrderHeap0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(10, percentLengthLearning1.getLimit());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.decisionLevel());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver1.model((-223));

[MASTER] 02:28:40.531 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:40.548 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(Integer.MIN_VALUE);
assertEquals(Integer.MIN_VALUE, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

PureOrder pureOrder0 = new PureOrder();
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

int[] intArray0 = new int[7];
intArray0[0] = 2979;
intArray0[1] = 112;
intArray0[2] = 1579;
intArray0[3] = 0;
intArray0[4] = 867;
intArray0[5] = 1;
intArray0[6] = 2409;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {2979, 112, 1579, 0, 867, 1, 2409}, intArray0);
assertEquals(7, intArray0.length);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, subsetVarOrder0, glucose21Restarts0);
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(solver0);
assertArrayEquals(new int[] {2979, 112, 1579, 0, 867, 1, 2409}, intArray0);
assertEquals(7, intArray0.length);

SearchParams searchParams1 = solver0.getSearchParams();
assertNotSame(searchParams1, searchParams0);
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(searchParams1);
assertArrayEquals(new int[] {2979, 112, 1579, 0, 867, 1, 2409}, intArray0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(7, intArray0.length);

SolverStats solverStats0 = solver0.getStats();
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(5, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(solverStats0);
assertArrayEquals(new int[] {2979, 112, 1579, 0, 867, 1, 2409}, intArray0);
assertEquals(7, intArray0.length);

glucose21Restarts0.init(searchParams1, solverStats0);
assertNotSame(searchParams1, searchParams0);
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(7, solver0.nVars());
assertEquals(8, solver0.newVar());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {2979, 112, 1579, 0, 867, 1, 2409}, intArray0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(7, intArray0.length);

glucose21Restarts0.onRestart();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, glucose21Restarts0);
assertEquals(Integer.MIN_VALUE, percentLengthLearning0.getLimit());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertNotNull(solver1);
assertFalse(searchParams0.equals((Object)searchParams1));

solver1.setNeedToReduceDB(true);
assertNotSame(searchParams0, searchParams1);
assertEquals(Integer.MIN_VALUE, percentLengthLearning0.getLimit());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(20, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0, solver1.decisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(searchParams0.equals((Object)searchParams1));


[MASTER] 02:28:40.813 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:40.818 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

PureOrder pureOrder0 = new PureOrder(25);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(25, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotNull(pureOrder0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, (-1052));
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(25, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotNull(tabuListDecorator0);

tabuListDecorator0.varDecayActivity();
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(25, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());

int[] intArray0 = new int[9];
intArray0[0] = 25;
intArray0[1] = 662;
intArray0[2] = 619;
intArray0[3] = 25;
intArray0[4] = (-1052);
intArray0[5] = (-1052);
intArray0[6] = 619;
intArray0[7] = 25;
intArray0[8] = 25;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {25, 662, 619, 25, (-1052), (-1052), 619, 25, 25}, intArray0);
assertEquals(9, intArray0.length);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(5384);
assertEquals(5384, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertNotNull(miniSATRestarts0);

MixedDataStructureDanielHT mixedDataStructureDanielHT1 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT1);
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT1, searchParams0, pureOrder0, miniSATRestarts0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(5384, fixedLengthLearning0.getMaxLength());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(25, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(solver0);
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
solver0.setLearnedConstraintsDeletionStrategy((ConflictTimer) miniSATRestarts0, learnedConstraintsEvaluationType0);
assertNotSame(mixedDataStructureDanielHT1, mixedDataStructureDanielHT0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(5384, fixedLengthLearning0.getMaxLength());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(25, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));

FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning1, mixedDataStructureDanielWLConciseBinary0, searchParams0, tabuListDecorator0, miniSATRestarts0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(25, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(3, fixedLengthLearning1.getMaxLength());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.getPropagationLevel());
assertNotNull(solver1);

solver1.modelWithInternalVariables();

[MASTER] 02:28:41.137 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 02:28:41.139 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap((IPhaseSelectionStrategy) null);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts((-3293));
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-3293), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielHT>(500);
assertEquals(500, fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning1, mixedDataStructureDanielHT0, varOrderHeap0, lubyRestarts0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals((-3293), lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(500, fixedLengthLearning1.getMaxLength());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

int[] intArray0 = new int[5];
intArray0[1] = 997;
solver0.addClauseOnTheFly(intArray0);

[MASTER] 02:28:41.447 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:41.459 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap((IPhaseSelectionStrategy) null);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielHT>(500);
assertEquals(500, fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);

NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

LubyRestarts lubyRestarts0 = new LubyRestarts(500);
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(500, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, lubyRestarts0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(500, lubyRestarts0.getFactor());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

byte[] byteArray0 = new byte[5];
byteArray0[0] = (byte) (-4);
byteArray0[1] = (byte) (-4);
byteArray0[2] = (byte)37;
byteArray0[3] = (byte) (-51);
MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(500, lubyRestarts0.getFactor());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
assertFalse(minOneDecorator0.hasNoObjectiveFunction());
assertFalse(minOneDecorator0.isOptimal());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(minOneDecorator0);

IVecInt iVecInt0 = minOneDecorator0.createBlockingClauseForCurrentModel();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(500, lubyRestarts0.getFactor());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
assertFalse(minOneDecorator0.hasNoObjectiveFunction());
assertFalse(minOneDecorator0.isOptimal());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(iVecInt0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

ILits iLits0 = levelBasedVarOrderHeap0.getVocabulary();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNull(iLits0);

LearntWLClause learntWLClause0 = new LearntWLClause(iVecInt0, (ILits) null);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertTrue(learntWLClause0.learnt());
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertEquals(0, learntWLClause0.size());
assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
assertFalse(learntWLClause0.isSatisfied());
assertFalse(learntWLClause0.simplify());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(500, lubyRestarts0.getFactor());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(7, solver0.nVars());
assertEquals(8, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
assertFalse(minOneDecorator0.hasNoObjectiveFunction());
assertFalse(minOneDecorator0.isOptimal());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(learntWLClause0);

cardinalityDataStructureYanMax0.learnConstraint(learntWLClause0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertTrue(learntWLClause0.learnt());
assertFalse(learntWLClause0.canBePropagatedMultipleTimes());
assertEquals(0, learntWLClause0.size());
assertEquals(0.0, learntWLClause0.getActivity(), 0.01);
assertFalse(learntWLClause0.isSatisfied());
assertFalse(learntWLClause0.simplify());
assertTrue(learntWLClause0.canBeSatisfiedByCountingLiterals());
assertEquals(1, learntWLClause0.requiredNumberOfSatisfiedLiterals());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(500, lubyRestarts0.getFactor());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(10, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(9, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
assertFalse(minOneDecorator0.hasNoObjectiveFunction());
assertFalse(minOneDecorator0.isOptimal());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, iVecInt0.size());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

byteArray0[4] = (byte)47;
boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
assertFalse(boolean0);
assertArrayEquals(new byte[] {(byte) (-4), (byte) (-4), (byte)37, (byte) (-51), (byte)47}, byteArray0);
assertEquals(5, byteArray0.length);

lubyRestarts0.onBackjumpToRootLevel();
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(500, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

SimplificationType simplificationType0 = SimplificationType.SIMPLE_SIMPLIFICATION;
solver0.setSimplifier(simplificationType0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(500, lubyRestarts0.getFactor());
assertEquals(11, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(12, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(11, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics1 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
assertNotNull(noLearningButHeuristics1);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics1, mixedDataStructureSingleWL0, varOrderHeap0, lubyRestarts0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(500, lubyRestarts0.getFactor());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

solver1.suggestNextLiteralToBranchOn(500);

[MASTER] 02:28:41.685 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:41.688 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, lubyRestarts0, (ILogAble) null);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertNotNull(iLits0);

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, varOrderHeap0, lubyRestarts0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

solver1.setNeedToReduceDB(false);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver1.forget(32);

[MASTER] 02:28:41.930 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:41.932 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

PureOrder pureOrder0 = new PureOrder(2536);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(2536, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertNotNull(pureOrder0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, (RestartStrategy) null);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(2536, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);

int[] intArray0 = new int[0];
solver0.backtrack(intArray0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(2536, pureOrder0.getPeriod());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);


[MASTER] 02:28:42.173 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 02:28:42.175 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

LubyRestarts lubyRestarts0 = new LubyRestarts(434);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(434, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(434);
assertEquals(434, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, varOrderHeap0, lubyRestarts0);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(434, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(434, percentLengthLearning0.getLimit());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

long long0 = solver0.getTimeoutMs();
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(434, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(434, percentLengthLearning0.getLimit());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2147483647L, long0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);


[MASTER] 02:28:42.447 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:42.451 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

searchParams0.setInitConflictBound((-1228));
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-1228), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(fixedPeriodRestarts0);

SearchParams searchParams1 = new SearchParams();
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

fixedPeriodRestarts0.onRestart();
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, searchParams0, varOrderHeap0, fixedPeriodRestarts0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-1228), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);
assertFalse(searchParams0.equals((Object)searchParams1));

IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
assertNotSame(searchParams0, searchParams1);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals((-1228), searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertEquals((-2), iVecInt0.last());
assertNotNull(iVecInt0);
assertFalse(searchParams0.equals((Object)searchParams1));

MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams1, varOrderHeap0, fixedPeriodRestarts0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertNotNull(solver1);
assertFalse(searchParams1.equals((Object)searchParams0));

solver1.enqueue((-130));

[MASTER] 02:28:42.860 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:42.865 [logback-1] WARN  JUnitAnalyzer - Failing test:
 LearningStrategy<CardinalityDataStructure> learningStrategy0 = (LearningStrategy<CardinalityDataStructure>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
CardinalityDataStructure cardinalityDataStructure0 = mock(CardinalityDataStructure.class, new ViolatedAssumptionAnswer());
doReturn((ILits) null).when(cardinalityDataStructure0).getVocabulary();
SearchParams searchParams0 = new SearchParams(0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

NoRestarts noRestarts0 = new NoRestarts();
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertNotNull(noRestarts0);

boolean boolean0 = noRestarts0.shouldRestart();
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertFalse(boolean0);

noRestarts0.onBackjumpToRootLevel();
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());

PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
assertEquals(0, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams1 = new SearchParams((-1.0), 935.0501622898, (-1.0), 0);
assertEquals((-1.0), searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(935.0501622898, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals((-1.0), searchParams1.getVarDecay(), 0.01);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams1, naturalStaticOrder0, noRestarts0, mUSLauncher0);
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(0, percentLengthLearning0.getLimit());
assertEquals((-1.0), searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(935.0501622898, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals((-1.0), searchParams1.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertNotNull(solver0);
assertFalse(searchParams1.equals((Object)searchParams0));

long long0 = solver0.getTimeoutMs();
assertNotSame(searchParams1, searchParams0);
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(0, percentLengthLearning0.getLimit());
assertEquals((-1.0), searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(935.0501622898, searchParams1.getClaDecay(), 0.01);
assertEquals(0, searchParams1.getInitConflictBound());
assertEquals((-1.0), searchParams1.getVarDecay(), 0.01);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals(2147483647L, long0);
assertFalse(searchParams1.equals((Object)searchParams0));

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(learningStrategy0, cardinalityDataStructure0, searchParams0, varOrderHeap0, noRestarts0, mUSLauncher0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("NoRestarts", noRestarts0.toString());
assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
assertFalse(noRestarts0.shouldRestart());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertNotNull(solver1);
assertFalse(searchParams0.equals((Object)searchParams1));

solver1.assume(0);

[MASTER] 02:28:43.223 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:43.246 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
assertEquals(0, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, double0, 0.01);

LearningStrategy<ClausalDataStructureWL> learningStrategy0 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

int[] intArray0 = new int[1];
intArray0[0] = 298;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {298}, intArray0);
assertEquals(1, intArray0.length);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);
assertArrayEquals(new int[] {298}, intArray0);
assertEquals(1, intArray0.length);

LubyRestarts lubyRestarts0 = new LubyRestarts(2170);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(2170, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

SolverStats solverStats0 = new SolverStats();
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getRootSimplifications());
assertNotNull(solverStats0);

lubyRestarts0.init((SearchParams) null, solverStats0);
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2170, lubyRestarts0.getFactor());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>(2);
assertEquals(2, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

LubyRestarts lubyRestarts1 = new LubyRestarts();
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts1);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));

lubyRestarts1.onRestart();
assertNotSame(lubyRestarts1, lubyRestarts0);
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, subsetVarOrder0, lubyRestarts1);
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(2, fixedLengthLearning0.getMaxLength());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertEquals(1, intArray0.length);

Constr constr0 = solver0.propagate();
assertNotSame(lubyRestarts1, lubyRestarts0);
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(2, fixedLengthLearning0.getMaxLength());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNull(constr0);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertEquals(1, intArray0.length);

lubyRestarts0.onRestart();
assertNotSame(lubyRestarts0, lubyRestarts1);
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2170, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, subsetVarOrder0, lubyRestarts0);
assertEquals(0, percentLengthLearning0.getLimit());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2170, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
assertEquals(1, intArray0.length);

percentLengthLearning0.setSolver(solver1);
assertNotSame(lubyRestarts0, lubyRestarts1);
assertEquals(0, percentLengthLearning0.getLimit());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2170, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
assertEquals(1, intArray0.length);

subsetVarOrder0.assignLiteral(2570);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertArrayEquals(new int[] {298}, intArray0);
assertEquals(1, intArray0.length);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertNotNull(eMARestarts0);

Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(learningStrategy0, clausalDataStructureWL0, tabuListDecorator0, eMARestarts0);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals(5, solver2.realNumberOfVariables());
assertEquals(5, solver2.nVars());
assertEquals(6, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(solver2);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(solver2.equals((Object)solver0));
assertEquals(1, intArray0.length);

SearchParams searchParams1 = solver2.getSearchParams();
assertNotSame(solver2, solver0);
assertNotSame(searchParams1, searchParams0);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals(7, solver2.realNumberOfVariables());
assertEquals(8, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(7, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(searchParams1);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(solver2.equals((Object)solver0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(1, intArray0.length);

int int0 = searchParams1.getInitConflictBound();
assertNotSame(solver2, solver0);
assertNotSame(searchParams1, searchParams0);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isSolverKeptHot());
assertEquals(9, solver2.realNumberOfVariables());
assertEquals(9, solver2.nVars());
assertEquals(10, solver2.newVar());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(100, int0);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(solver2.equals((Object)solver0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(1, intArray0.length);

Solver<CardinalityDataStructureYanMax> solver3 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams1, tabuListDecorator0, eMARestarts0);
assertEquals(0, percentLengthLearning0.getLimit());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(11, solver2.realNumberOfVariables());
assertEquals(12, solver2.newVar());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals(11, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.nConstraints());
assertEquals(0, solver3.decisionLevel());
assertFalse(solver3.isSolverKeptHot());
assertEquals(5, solver3.realNumberOfVariables());
assertEquals(6, solver3.newVar());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(5, solver3.nVars());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(0, solver3.currentDecisionLevel());
assertFalse(solver3.isVerbose());
assertNotNull(solver3);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(solver2.equals((Object)solver0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(solver3.equals((Object)solver1));
assertEquals(1, intArray0.length);

solver3.discardCurrentModel();

[MASTER] 02:28:43.481 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:43.483 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

PureOrder pureOrder0 = new PureOrder(2536);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(2536, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, (RestartStrategy) null);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(2536, pureOrder0.getPeriod());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertNotNull(solver0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, pureOrder0, (RestartStrategy) null);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(2536, pureOrder0.getPeriod());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertNotNull(solver1);

solver1.truthValue(2536);

[MASTER] 02:28:43.801 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:43.819 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>((-1165.28080838));
assertEquals(0, activeLearning0.getLimit());
assertEquals((-1165.28080838), activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, double0, 0.01);

LearningStrategy<ClausalDataStructureWL> learningStrategy0 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

int[] intArray0 = new int[1];
intArray0[0] = 298;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {298}, intArray0);
assertEquals(1, intArray0.length);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);
assertArrayEquals(new int[] {298}, intArray0);
assertEquals(1, intArray0.length);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertNotNull(eMARestarts0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(learningStrategy0, clausalDataStructureWL0, tabuListDecorator0, eMARestarts0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);
assertArrayEquals(new int[] {298}, intArray0);
assertEquals(1, intArray0.length);

SearchParams searchParams1 = solver0.getSearchParams();
assertNotSame(searchParams1, searchParams0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertNotNull(searchParams1);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(1, intArray0.length);

int int0 = searchParams1.getInitConflictBound();
assertNotSame(searchParams1, searchParams0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(5, solver0.nVars());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(100, int0);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(1, intArray0.length);

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, eMARestarts0);
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2, solver1.newVar());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(solver1);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(1, intArray0.length);

ILogAble iLogAble0 = solver1.getLogger();
assertNotSame(searchParams0, searchParams1);
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(4, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(iLogAble0);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(1, intArray0.length);

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams1, tabuListDecorator0, eMARestarts0, iLogAble0);
assertEquals(0, activeLearning0.getLimit());
assertEquals((-1165.28080838), activeLearning0.getActivityPercent(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(7, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(5, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(6, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isVerbose());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertNotNull(solver2);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(1, intArray0.length);

solver2.setKeepSolverHot(false);
assertNotSame(searchParams0, searchParams1);
assertNotSame(searchParams1, searchParams0);
assertEquals(0, activeLearning0.getLimit());
assertEquals((-1165.28080838), activeLearning0.getActivityPercent(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(9, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(10, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(7, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(7, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals(8, solver1.newVar());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals(3, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(1, intArray0.length);


[MASTER] 02:28:44.068 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 02:28:44.072 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

naturalStaticOrder0.undo(1670);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(fixedPeriodRestarts0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

fixedPeriodRestarts0.onRestart();
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());

String string0 = fixedPeriodRestarts0.toString();
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals("constant restarts strategy every 0 conflicts", string0);
assertNotNull(string0);

NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningNoHeuristics0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertNotNull(miniSATRestarts0);

MixedDataStructureDanielHT mixedDataStructureDanielHT1 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT1);
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));

NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics1 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningNoHeuristics1);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics1, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, miniSATRestarts0, mUSLauncher0);
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(solver1);
assertFalse(mixedDataStructureDanielHT0.equals((Object)mixedDataStructureDanielHT1));

solver1.varBumpActivity(1670);
assertNotSame(mixedDataStructureDanielHT0, mixedDataStructureDanielHT1);
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mixedDataStructureDanielHT0.equals((Object)mixedDataStructureDanielHT1));


[MASTER] 02:28:44.318 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:44.323 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertNotNull(iLits0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

PureOrder pureOrder0 = new PureOrder((-3759));
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals((-3759), pureOrder0.getPeriod());
assertNotNull(pureOrder0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertNotNull(fixedPeriodRestarts0);

SearchParams searchParams1 = new SearchParams();
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

fixedPeriodRestarts0.onRestart();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, pureOrder0, fixedPeriodRestarts0, (ILogAble) null);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals((-3759), pureOrder0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);
assertFalse(searchParams0.equals((Object)searchParams1));

IVecInt iVecInt0 = VecInt.EMPTY;
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertNotNull(iVecInt0);

iVecInt0.sort();
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());

ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL1);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertNotNull(miniSATRestarts0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL1, levelBasedVarOrderHeap0, miniSATRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertNotNull(solver1);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertFalse(solver1.equals((Object)solver0));

VecInt vecInt0 = (VecInt)solver1.decisions;
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

IteratorInt iteratorInt0 = vecInt0.iterator();
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertNotSame(solver1, solver0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(0, solver1.decisionLevel());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertNotNull(iteratorInt0);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertFalse(solver1.equals((Object)solver0));

IteratorInt iteratorInt1 = iVecInt0.iterator();
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertNotNull(iteratorInt1);
assertFalse(iteratorInt1.equals((Object)iteratorInt0));

iVecInt0.clear();
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());

solver0.addAtMost(vecInt0, 128);

[MASTER] 02:28:44.547 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 02:28:44.550 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertNotNull(userFixedPhaseSelectionStrategy0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, (ILogAble) null);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertNotNull(solver0);

ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>((-1.0));
assertEquals(0, activeLearning0.getLimit());
assertEquals((-1.0), activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(0, activeLearning0.getLimit());
assertEquals((-1.0), activeLearning0.getActivityPercent(), 0.01);
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertNotNull(solver1);

int int0 = solver1.newVar((-1664));
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(0, activeLearning0.getLimit());
assertEquals((-1.0), activeLearning0.getActivityPercent(), 0.01);
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals((-1664), solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals((-1664), int0);


[MASTER] 02:28:44.756 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 02:28:44.757 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

cardinalityDataStructureYanMax0.conflictDetectedInWatchesFor(32, 32);
lubyRestarts0.onRestart();
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax1);
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));

SearchParams searchParams0 = new SearchParams(32, 32);
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);
assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));

solver0.discardCurrentModel();

[MASTER] 02:28:45.050 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 02:28:45.056 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(4157);
assertEquals(4157, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, lubyRestarts0, (ILogAble) null);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(4157, percentLengthLearning0.getLimit());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, varOrderHeap0, lubyRestarts0);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(1, solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

solver1.setDBSimplificationAllowed(false);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, solver1.decisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(3, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<MixedDataStructureSingleWL> solver2 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, (SearchParams) null, varOrderHeap0, (RestartStrategy) null);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(1, solver2.nVars());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.realNumberOfVariables());
assertNotNull(solver2);

solver2.suggestNextLiteralToBranchOn(14);

[MASTER] 02:28:45.348 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 02:28:45.349 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(0.0);
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

int int0 = 6;
SearchParams searchParams0 = new SearchParams(6);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(6, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("#constraints  ");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, arminRestarts0, mUSLauncher0);
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(6, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertNotNull(solver0);

solver0.reduceDB();

[MASTER] 02:28:45.635 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NoSuchFieldError
[MASTER] 02:28:45.635 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertNotNull(mUSLauncher0);

String[] stringArray0 = new String[8];
stringArray0[0] = "c ";
stringArray0[1] = "c ";
stringArray0[2] = "c ";
stringArray0[3] = "c ";
stringArray0[4] = "c ";
stringArray0[5] = "c ";
stringArray0[6] = "c ";
stringArray0[7] = "c ";
mUSLauncher0.run(stringArray0);

[MASTER] 02:28:45.942 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:45.944 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

LearnedConstraintsDeletionStrategy learnedConstraintsDeletionStrategy0 = mock(LearnedConstraintsDeletionStrategy.class, new ViolatedAssumptionAnswer());
solver0.setLearnedConstraintsDeletionStrategy(learnedConstraintsDeletionStrategy0);

[MASTER] 02:28:46.220 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 02:28:46.222 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

naturalStaticOrder0.undo(1670);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertNotNull(fixedPeriodRestarts0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

fixedPeriodRestarts0.onRestart();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
assertTrue(miniSATRestarts0.shouldRestart());
assertNotNull(miniSATRestarts0);

NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

int[] intArray0 = new int[0];
MinWatchCard minWatchCard0 = (MinWatchCard)solver0.addAtMostOnTheFly(intArray0, (-2881));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertFalse(solver0.isVerbose());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
assertFalse(minWatchCard0.simplify());
assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
assertTrue(minWatchCard0.locked());
assertEquals(0, minWatchCard0.size());
assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
assertEquals(2881, minWatchCard0.requiredNumberOfSatisfiedLiterals());
assertFalse(minWatchCard0.learnt());
assertTrue(MinWatchCard.ATLEAST);
assertFalse(MinWatchCard.ATMOST);
assertNotNull(minWatchCard0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);


[MASTER] 02:28:46.503 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:46.506 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertNotNull(fixedPeriodRestarts0);

SearchParams searchParams1 = new SearchParams();
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, searchParams0, varOrderHeap0, fixedPeriodRestarts0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);
assertFalse(searchParams0.equals((Object)searchParams1));

IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
assertNotSame(searchParams0, searchParams1);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(iVecInt0.isEmpty());
assertEquals((-2), iVecInt0.last());
assertEquals(2, iVecInt0.size());
assertNotNull(iVecInt0);
assertFalse(searchParams0.equals((Object)searchParams1));

solver0.setLearningStrategy(noLearningNoHeuristics0);
assertNotSame(searchParams0, searchParams1);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(searchParams0.equals((Object)searchParams1));

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics1 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
assertNotNull(noLearningNoHeuristics1);

CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure1);
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));

NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);


[MASTER] 02:28:46.858 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 02:28:46.870 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn("#TX{+").when(varOrderHeap0).toString();
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 1421);
assertNotNull(tabuListDecorator0);

tabuListDecorator0.varDecayActivity();
LubyRestarts lubyRestarts0 = new LubyRestarts(1421);
assertEquals(1421, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

LubyRestarts lubyRestarts1 = new LubyRestarts((-1503));
assertTrue(lubyRestarts1.shouldRestart());
assertEquals((-1503), lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts1);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));

NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams(3633.9376171738, 32);
assertEquals(3633.9376171738, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, lubyRestarts1);
assertTrue(lubyRestarts1.shouldRestart());
assertEquals((-1503), lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(3633.9376171738, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));

ILogAble iLogAble0 = solver0.getLogger();
assertNotSame(lubyRestarts1, lubyRestarts0);
assertTrue(lubyRestarts1.shouldRestart());
assertEquals((-1503), lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(3633.9376171738, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(iLogAble0);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));

ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>(32);
assertEquals(32.0, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertNotNull(activeLearning1);

activeLearning1.setLimit(32);
assertEquals(32.0, activeLearning1.getActivityPercent(), 0.01);
assertEquals(32, activeLearning1.getLimit());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, lubyRestarts0, iLogAble0);
assertEquals(1421, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals((-1503), lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(3633.9376171738, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(5, solver0.nVars());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(32.0, activeLearning1.getActivityPercent(), 0.01);
assertEquals(32, activeLearning1.getLimit());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));

PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, tabuListDecorator0, lubyRestarts1, iLogAble0);
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.decisionLevel());
assertEquals(2, solver2.newVar());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals((-1503), lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(3633.9376171738, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.nVars());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver2);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD;
solver2.setLearnedConstraintsDeletionStrategy((ConflictTimer) lubyRestarts1, learnedConstraintsEvaluationType0);
assertNotSame(lubyRestarts1, lubyRestarts0);
assertEquals(10, percentLengthLearning0.getLimit());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(3, solver2.nVars());
assertEquals(4, solver2.newVar());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals((-1503), lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(3633.9376171738, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(32, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertFalse(solver0.isSolverKeptHot());
assertEquals(9, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(9, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(10, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));

solver2.cancelUntil((-1109));

[MASTER] 02:28:47.189 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:47.195 [logback-1] WARN  JUnitAnalyzer - Failing test:
 boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertNotNull(userFixedPhaseSelectionStrategy0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(arminRestarts0);

VecInt vecInt0 = new VecInt();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

boolean boolean1 = vecInt0.equals(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertFalse(boolean1);
assertFalse(boolean1 == boolean0);

vecInt0.ensure(278);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

int int0 = vecInt0.size();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, int0);

IVecInt iVecInt0 = vecInt0.push(3);
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt0, vecInt0);
assertEquals(3, vecInt0.last());
assertEquals(1, vecInt0.size());
assertFalse(vecInt0.isEmpty());
assertEquals(1, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertEquals(3, iVecInt0.last());
assertNotNull(iVecInt0);

IVecInt iVecInt1 = vecInt0.pop();
assertSame(vecInt0, iVecInt1);
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt1, vecInt0);
assertSame(iVecInt1, iVecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, iVecInt1.size());
assertTrue(iVecInt1.isEmpty());
assertNotNull(iVecInt1);

UnitClauses unitClauses0 = new UnitClauses(iVecInt1);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, iVecInt1.size());
assertTrue(iVecInt1.isEmpty());
assertTrue(unitClauses0.isSatisfied());
assertFalse(unitClauses0.canBePropagatedMultipleTimes());
assertFalse(unitClauses0.simplify());
assertNotNull(unitClauses0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, levelBasedVarOrderHeap0, arminRestarts0);
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(solver0);

Lbool lbool0 = solver0.truthValue(3);
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("U", lbool0.toString());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(lbool0);

NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics1 = new NoLearningButHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningButHeuristics1);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics1, clausalDataStructureWL0, levelBasedVarOrderHeap0, arminRestarts0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(solver1);

int int1 = solver1.getTimeout();
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(2147483, int1);
assertFalse(int1 == int0);


[MASTER] 02:28:47.529 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:47.548 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>(0);
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, double0, 0.01);

LearningStrategy<ClausalDataStructureWL> learningStrategy0 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL1);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

int[] intArray0 = new int[1];
intArray0[0] = 298;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {298}, intArray0);
assertEquals(1, intArray0.length);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);
assertArrayEquals(new int[] {298}, intArray0);
assertEquals(1, intArray0.length);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertNotNull(eMARestarts0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(learningStrategy0, clausalDataStructureWL1, tabuListDecorator0, eMARestarts0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertNotNull(solver0);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertEquals(1, intArray0.length);

SearchParams searchParams1 = solver0.getSearchParams();
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertNotSame(searchParams1, searchParams0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams1);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(1, intArray0.length);

int int0 = searchParams1.getInitConflictBound();
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertNotSame(searchParams1, searchParams0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, int0);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(1, intArray0.length);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams1, subsetVarOrder0, eMARestarts0);
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(7, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(8, solver0.newVar());
assertEquals(7, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertNotNull(solver1);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(solver1.equals((Object)solver0));
assertEquals(1, intArray0.length);

int int1 = solver1.getPropagationLevel();
assertNotSame(clausalDataStructureWL0, clausalDataStructureWL1);
assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
assertNotSame(solver0, solver1);
assertNotSame(searchParams1, searchParams0);
assertNotSame(solver1, solver0);
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(9, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(10, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(9, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.nConstraints());
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isSolverKeptHot());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, int1);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(clausalDataStructureWL0.equals((Object)clausalDataStructureWL1));
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
assertFalse(solver0.equals((Object)solver1));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(solver1.equals((Object)solver0));
assertFalse(int1 == int0);
assertEquals(1, intArray0.length);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>((LearningStrategy<CardinalityDataStructureYanMin>) null, cardinalityDataStructureYanMin0, subsetVarOrder0, eMARestarts0);

[MASTER] 02:28:47.893 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:47.898 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertNotNull(userFixedPhaseSelectionStrategy0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(1327);
assertEquals(1327, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

MixedDataStructureDanielHT mixedDataStructureDanielHT1 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT1);
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT1, searchParams0, levelBasedVarOrderHeap0, arminRestarts0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(1327, fixedLengthLearning0.getMaxLength());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertNotNull(solver0);
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));

solver0.decayActivities();
assertNotSame(mixedDataStructureDanielHT1, mixedDataStructureDanielHT0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(1327, fixedLengthLearning0.getMaxLength());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertFalse(mixedDataStructureDanielHT1.equals((Object)mixedDataStructureDanielHT0));

NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics1);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

int[] intArray0 = new int[7];
intArray0[0] = 1327;
intArray0[1] = 1327;
intArray0[2] = (-2096);
intArray0[3] = 1327;
intArray0[4] = 1327;
intArray0[5] = 1327;
intArray0[6] = 1327;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {1327, 1327, (-2096), 1327, 1327, 1327, 1327}, intArray0);
assertEquals(7, intArray0.length);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics1, cardinalityDataStructure0, subsetVarOrder0, arminRestarts0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertNotNull(solver1);
assertArrayEquals(new int[] {1327, 1327, (-2096), 1327, 1327, 1327, 1327}, intArray0);
assertEquals(7, intArray0.length);

solver1.primeImplicant(1327);

[MASTER] 02:28:48.146 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 02:28:48.156 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningNoHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertNotNull(fixedPeriodRestarts0);

SearchParams searchParams1 = new SearchParams();
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

fixedPeriodRestarts0.onRestart();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

VarOrderHeap varOrderHeap1 = new VarOrderHeap();
assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
assertNotNull(varOrderHeap1);
assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));

double double0 = 6085.9477286;
Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertNotNull(glucose21Restarts0);

ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>(2.0);
assertEquals(2.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams1, varOrderHeap0, glucose21Restarts0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(2.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(solver0);
assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
assertFalse(searchParams1.equals((Object)searchParams0));

ILogAble iLogAble0 = solver0.out;
assertNotNull(iLogAble0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, searchParams0, varOrderHeap0, glucose21Restarts0, iLogAble0);
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.nVars());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(2.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(4, solver0.newVar());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(solver1);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
assertFalse(searchParams1.equals((Object)searchParams0));

DataStructureFactory dataStructureFactory0 = solver1.getDSFactory();
assertSame(dataStructureFactory0, cardinalityDataStructure0);
assertSame(cardinalityDataStructure0, dataStructureFactory0);
assertNotSame(searchParams0, searchParams1);
assertNotSame(varOrderHeap0, varOrderHeap1);
assertNotSame(searchParams1, searchParams0);
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(3, solver1.nVars());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals(2.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(5, solver0.nVars());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(dataStructureFactory0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));
assertFalse(searchParams1.equals((Object)searchParams0));

NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, fixedPeriodRestarts0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(1, solver2.nVars());
assertEquals(0, solver2.nConstraints());
assertEquals(2, solver2.newVar());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertNotNull(solver2);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(varOrderHeap0.equals((Object)varOrderHeap1));

solver2.getIthConstr(30);

[MASTER] 02:28:48.494 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:48.503 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
assertEquals(0, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, double0, 0.01);

LearningStrategy<ClausalDataStructureWL> learningStrategy0 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

int[] intArray0 = new int[1];
boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

intArray0[0] = 298;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {298}, intArray0);
assertEquals(1, intArray0.length);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);
assertArrayEquals(new int[] {298}, intArray0);
assertEquals(1, intArray0.length);

LubyRestarts lubyRestarts0 = new LubyRestarts(0);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

SolverStats solverStats0 = new SolverStats();
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0, solverStats0.getShortcuts());
assertNotNull(solverStats0);

lubyRestarts0.init((SearchParams) null, solverStats0);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>(2);
assertEquals(2, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

LubyRestarts lubyRestarts1 = new LubyRestarts();
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts1);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));

lubyRestarts1.onRestart();
assertNotSame(lubyRestarts1, lubyRestarts0);
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, subsetVarOrder0, lubyRestarts1);
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(2, fixedLengthLearning0.getMaxLength());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertEquals(1, intArray0.length);

Constr constr0 = solver0.propagate();
assertNotSame(lubyRestarts1, lubyRestarts0);
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(2, fixedLengthLearning0.getMaxLength());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNull(constr0);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertEquals(1, intArray0.length);

Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, subsetVarOrder0, lubyRestarts0);
assertEquals(0, percentLengthLearning0.getLimit());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.nVars());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
assertEquals(1, intArray0.length);

solver1.removeSubsumedConstr((IConstr) null);

[MASTER] 02:28:48.823 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:48.827 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

lubyRestarts0.onRestart();
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(2);
assertEquals(2, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary1 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary1);
assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary1, varOrderHeap0, lubyRestarts0);
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(2, percentLengthLearning0.getLimit());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.nVars());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);
assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));

Map<String, Number> map0 = solver0.getStat();
assertNotSame(mixedDataStructureDanielWLConciseBinary1, mixedDataStructureDanielWLConciseBinary0);
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(2, percentLengthLearning0.getLimit());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(map0.isEmpty());
assertEquals(17, map0.size());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(map0);
assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));

long long0 = solver0.getTimeoutMs();
assertNotSame(mixedDataStructureDanielWLConciseBinary1, mixedDataStructureDanielWLConciseBinary0);
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(2, percentLengthLearning0.getLimit());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(5, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(2147483647L, long0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));


[MASTER] 02:28:49.115 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:49.120 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap((IPhaseSelectionStrategy) null);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

LubyRestarts lubyRestarts0 = new LubyRestarts(500);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(500, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, varOrderHeap0, lubyRestarts0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(500, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(500, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(3, solver0.nVars());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
assertFalse(minOneDecorator0.isOptimal());
assertFalse(minOneDecorator0.hasNoObjectiveFunction());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(minOneDecorator0);

VecInt vecInt0 = new VecInt();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(500, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

IConstr iConstr0 = solver1.addAtMost(vecInt0, 427);
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(500, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(4, solver1.newVar());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNull(iConstr0);


[MASTER] 02:28:49.462 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:49.477 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 1421);
assertNotNull(tabuListDecorator0);

tabuListDecorator0.varDecayActivity();
clauseOnlyLearning0.setVarActivityListener((VarActivityListener) null);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

lubyRestarts0.onRestart();
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, tabuListDecorator0, lubyRestarts0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

boolean boolean0 = solver0.isDBSimplificationAllowed();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(boolean0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onBackjumpToRootLevel();
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

VarOrderHeap varOrderHeap1 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn((double[]) null).when(varOrderHeap1).getVariableHeuristics();
TabuListDecorator tabuListDecorator1 = new TabuListDecorator(varOrderHeap1, 1421);
assertNotNull(tabuListDecorator1);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));

tabuListDecorator1.varDecayActivity();
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, tabuListDecorator1, lubyRestarts0);
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));

double[] doubleArray0 = solver1.getVariableHeuristics();
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.nVars());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNull(doubleArray0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));

MockPrintStream mockPrintStream0 = new MockPrintStream("0&~w414grDHxlT:;2");
assertNotNull(mockPrintStream0);

mockPrintStream0.close();
solver1.printStat((PrintStream) mockPrintStream0, "0&~w414grDHxlT:;2");
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertEquals(5, solver1.nVars());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));

FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertNotNull(clauseOnlyLearning1);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(clauseOnlyLearning1, cardinalityDataStructure0, tabuListDecorator1, lubyRestarts0);
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver2);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));

ILogAble iLogAble0 = solver2.getLogger();
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.realNumberOfVariables());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.decisionLevel());
assertEquals(3, solver2.nVars());
assertFalse(solver2.isSolverKeptHot());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(iLogAble0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));

Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, (SearchParams) null, tabuListDecorator0, lubyRestarts0, iLogAble0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertEquals(5, solver2.nVars());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(6, solver2.newVar());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(5, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.decisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals(2, solver3.newVar());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.nConstraints());
assertFalse(solver3.isSolverKeptHot());
assertEquals(1, solver3.nVars());
assertFalse(solver3.isDBSimplificationAllowed());
assertFalse(solver3.isVerbose());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver3);
assertFalse(tabuListDecorator0.equals((Object)tabuListDecorator1));
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));

int[] intArray0 = new int[8];
intArray0[0] = 1421;
intArray0[1] = 1421;
intArray0[2] = 1421;
intArray0[3] = 1421;
intArray0[4] = 1421;
intArray0[5] = 32;
intArray0[6] = 32;
intArray0[7] = 1421;
solver3.addClauseOnTheFly(intArray0);

[MASTER] 02:28:49.790 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:49.793 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
doReturn((String) null).when(varOrderHeap0).toString();
boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
assertFalse(boolean0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 1421);
assertNotNull(tabuListDecorator0);

tabuListDecorator0.varDecayActivity();
LubyRestarts lubyRestarts0 = new LubyRestarts(1421);
assertEquals(1421, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, tabuListDecorator0, lubyRestarts0);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(1421, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

int int0 = solver0.newVar(32);
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(1421, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(33, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(34, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(32, int0);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

int int1 = solver0.getPropagationLevel();
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(1421, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(35, solver0.realNumberOfVariables());
assertEquals(32, solver0.nVars());
assertEquals(36, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, int1);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(int1 == int0);


[MASTER] 02:28:50.135 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:50.136 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL1);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(clauseOnlyLearning0, clausalDataStructureWL1, varOrderHeap0, lubyRestarts0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);
assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));

solver0.toString();

[MASTER] 02:28:50.436 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 02:28:50.438 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams(144.6899, 4);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(144.6899, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getVarDecay();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(144.6899, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, double0, 0.01);

SearchParams searchParams1 = new SearchParams(4);
assertEquals(4, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

double double1 = searchParams1.getClaDecay();
assertNotSame(searchParams1, searchParams0);
assertEquals(4, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0.999, double1, 0.01);
assertFalse(searchParams1.equals((Object)searchParams0));
assertNotEquals(double1, double0, 0.01);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams1, tabuListDecorator0, (RestartStrategy) null, mUSLauncher0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(4, searchParams1.getInitConflictBound());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertNotNull(solver0);
assertFalse(searchParams1.equals((Object)searchParams0));

solver0.primeImplicant(0);

[MASTER] 02:28:50.697 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:50.699 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

PureOrder pureOrder0 = new PureOrder(2536);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(2536, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertNotNull(pureOrder0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, (RestartStrategy) null);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(2536, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(1410);
assertEquals(1410, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, (RestartStrategy) null);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(2536, pureOrder0.getPeriod());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(1410, fixedLengthLearning0.getMaxLength());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertNotNull(solver1);

solver1.model(2536);

[MASTER] 02:28:51.152 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:51.175 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertNotNull(iLits0);

SearchParams searchParams0 = new SearchParams(0.0, 0.0, 0.0, 70);
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(70, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

PureOrder pureOrder0 = new PureOrder(0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertNotNull(pureOrder0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 0);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

LubyRestarts lubyRestarts0 = new LubyRestarts(2170);
assertEquals(2170, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

SolverStats solverStats0 = new SolverStats();
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getShortcuts());
assertNotNull(solverStats0);

lubyRestarts0.init((SearchParams) null, solverStats0);
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2170, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, solverStats0.getDecisions());
assertEquals(0L, solverStats0.getRootSimplifications());
assertEquals(0, solverStats0.getStarts());
assertEquals(0L, solverStats0.getIgnoredclauses());
assertEquals(0L, solverStats0.getUpdateLBD());
assertEquals(0L, solverStats0.getConflicts());
assertEquals(0L, solverStats0.getLearnedternaryclauses());
assertEquals(0, solverStats0.getReduceddb());
assertEquals(0L, solverStats0.getLearnedclauses());
assertEquals(0, solverStats0.getImportedUnits());
assertEquals(0L, solverStats0.getInspects());
assertEquals(0L, solverStats0.getReducedliterals());
assertEquals(0L, solverStats0.getChangedreason());
assertEquals(0L, solverStats0.getLearnedliterals());
assertEquals(0L, solverStats0.getLearnedbinaryclauses());
assertEquals(0L, solverStats0.getPropagations());
assertEquals(0, solverStats0.getShortcuts());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

lubyRestarts0.onRestart();
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2170, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, lubyRestarts0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(70, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2170, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

SearchParams searchParams1 = solver0.getSearchParams();
assertSame(searchParams0, searchParams1);
assertSame(searchParams1, searchParams0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(70, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2170, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(70, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(searchParams1);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("#constraints  ");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams1, pureOrder0, arminRestarts0, mUSLauncher0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(70, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2170, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(70, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

IConstr iConstr0 = solver1.getIthConstr(0);
assertSame(searchParams0, searchParams1);
assertSame(searchParams1, searchParams0);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0.0, searchParams0.getClaDecay(), 0.01);
assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
assertEquals(70, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals(0, pureOrder0.getPeriod());
assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(2170L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(2170, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(7, solver0.nVars());
assertEquals(8, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
assertEquals(70, searchParams1.getInitConflictBound());
assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(3, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNull(iConstr0);

PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(10, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning1, (MixedDataStructureDanielWLConciseBinary) null, searchParams1, pureOrder0, arminRestarts0);

[MASTER] 02:28:51.543 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:51.547 [logback-1] WARN  JUnitAnalyzer - Failing test:
 boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertNotNull(userFixedPhaseSelectionStrategy0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(arminRestarts0);

VecInt vecInt0 = new VecInt();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

boolean boolean1 = vecInt0.equals(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertFalse(boolean1);
assertFalse(boolean1 == boolean0);

vecInt0.ensure(278);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

int int0 = vecInt0.size();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, int0);

IVecInt iVecInt0 = vecInt0.push(3);
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt0, vecInt0);
assertEquals(3, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(1, vecInt0.size());
assertEquals(1, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertEquals(3, iVecInt0.last());
assertNotNull(iVecInt0);

IVecInt iVecInt1 = vecInt0.pop();
assertSame(vecInt0, iVecInt1);
assertSame(vecInt0, iVecInt0);
assertSame(iVecInt1, iVecInt0);
assertSame(iVecInt1, vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, iVecInt1.size());
assertTrue(iVecInt1.isEmpty());
assertNotNull(iVecInt1);

UnitClauses unitClauses0 = new UnitClauses(iVecInt1);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertEquals(0, iVecInt1.size());
assertTrue(iVecInt1.isEmpty());
assertFalse(unitClauses0.canBePropagatedMultipleTimes());
assertFalse(unitClauses0.simplify());
assertTrue(unitClauses0.isSatisfied());
assertNotNull(unitClauses0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);

NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics1 = new NoLearningButHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningButHeuristics1);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics1, clausalDataStructureWL0, levelBasedVarOrderHeap0, arminRestarts0);
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertNotNull(solver0);

int int1 = solver0.getTimeout();
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals(2147483, int1);
assertFalse(int1 == int0);

LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
solver0.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);

[MASTER] 02:28:52.572 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:52.573 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(0.0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams0 = new SearchParams(6);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(6, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(arminRestarts0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>((-2625));
assertEquals((-2625), percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams1 = new SearchParams();
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams1, varOrderHeap0, arminRestarts0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals((-2625), percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);
assertFalse(searchParams1.equals((Object)searchParams0));

solver0.assume(2668);

[MASTER] 02:28:52.816 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:52.817 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(0);
assertEquals(0, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(arminRestarts0);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, arminRestarts0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertNotNull(solver0);

solver0.varBumpActivity(18);

[MASTER] 02:28:53.178 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:53.181 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

naturalStaticOrder0.undo(1674);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertNotNull(fixedPeriodRestarts0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

fixedPeriodRestarts0.onRestart();
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());

NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningNoHeuristics0);

int[] intArray0 = new int[0];
VecInt vecInt0 = new VecInt(intArray0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);

vecInt0.growTo(1674, 1674);
assertEquals(1674, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(1674, vecInt0.size());
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);

IteratorInt iteratorInt0 = vecInt0.iterator();
assertEquals(1674, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(1674, vecInt0.size());
assertNotNull(iteratorInt0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);

MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertNotNull(solver0);

boolean boolean0 = solver0.isSatisfiable((IVecInt) vecInt0, true);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1674, vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertEquals(1674, vecInt0.size());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(1675, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1676, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(1675, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertTrue(boolean0);
assertArrayEquals(new int[] {}, intArray0);
assertEquals(0, intArray0.length);

solver0.addAtMost(vecInt0, 99);

[MASTER] 02:28:53.527 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 02:28:53.538 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

double[] doubleArray0 = randomWalkDecorator0.getVariableHeuristics();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(doubleArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(1, doubleArray0.length);

RestartStrategy restartStrategy0 = null;
MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertNotNull(solver0);

ILogAble iLogAble0 = solver0.out;
assertNotNull(iLogAble0);

Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, iLogAble0);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(5, solver1.newVar());
assertEquals(4, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(4, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertNotNull(solver1);
assertFalse(solver1.equals((Object)solver0));

clauseOnlyLearning0.setVarActivityListener(solver1);
assertNotSame(solver0, solver1);
assertNotSame(solver1, solver0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(9, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(10, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(8, solver1.nVars());
assertEquals(9, solver1.newVar());
assertEquals(8, solver1.realNumberOfVariables());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver0.equals((Object)solver1));
assertFalse(solver1.equals((Object)solver0));

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, randomWalkDecorator0, (RestartStrategy) null, mUSLauncher0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(1, solver2.nVars());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(2, solver2.newVar());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertNotNull(solver2);

SearchListener<Solver<MixedDataStructureDanielWLConciseBinary>> searchListener0 = (SearchListener<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(SearchListener.class, new ViolatedAssumptionAnswer());
solver2.slistener = searchListener0;
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.nVars());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());

IVecInt iVecInt0 = solver2.unsatExplanation();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(6, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertEquals(5, solver2.nVars());
assertEquals(5, solver2.realNumberOfVariables());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(2147483, solver2.getTimeout());
assertNull(iVecInt0);

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>((-1233));
assertEquals((-1233), fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

String string0 = fixedLengthLearning0.toString();
assertEquals((-1233), fixedLengthLearning0.getMaxLength());
assertEquals("Limit learning to clauses of size smaller or equal to -1233", string0);
assertNotNull(string0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

cardinalityDataStructureYanMin0.getWatchesFor((-1233));

[MASTER] 02:28:53.909 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:53.926 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

double[] doubleArray0 = randomWalkDecorator0.getVariableHeuristics();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(doubleArray0);
assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
assertEquals(1, doubleArray0.length);

MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, randomWalkDecorator0, (RestartStrategy) null, mUSLauncher0);
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(1, solver0.nVars());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(solver0);

SearchListener<Solver<MixedDataStructureDanielWLConciseBinary>> searchListener0 = (SearchListener<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(SearchListener.class, new ViolatedAssumptionAnswer());
solver0.slistener = searchListener0;
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(3, solver0.nVars());
assertEquals(4, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());

IVecInt iVecInt0 = solver0.unsatExplanation();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertNull(iVecInt0);

ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, (RestartStrategy) null);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertNotNull(solver1);

int int0 = solver1.newVar((-3895));
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertEquals((-3895), solver1.nVars());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals((-3895), int0);

FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-750));
assertEquals((-750), fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

lubyRestarts0.onRestart();
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
assertEquals((-750), fixedLengthLearning0.getMaxLength());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(2, solver2.newVar());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver2);

solver2.setLearningStrategy(fixedLengthLearning0);
assertEquals((-750), fixedLengthLearning0.getMaxLength());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(4, solver2.newVar());
assertEquals(3, solver2.nVars());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver2.cancelUntilTrailLevel(4);
assertEquals((-750), fixedLengthLearning0.getMaxLength());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(6, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.decisionLevel());
assertEquals(5, solver2.nVars());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(5, solver2.realNumberOfVariables());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

solver1.isSatisfiable();

[MASTER] 02:28:54.217 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:54.220 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, lubyRestarts0, (ILogAble) null);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(1, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(32);
assertEquals(32, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

SearchParams searchParams1 = new SearchParams();
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

lubyRestarts0.onRestart();
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, varOrderHeap0, lubyRestarts0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(32, lubyRestarts0.getFactor());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, percentLengthLearning0.getLimit());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(1, solver1.nVars());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

VecInt vecInt0 = new VecInt(32, (-4));
assertEquals(32, vecInt0.size());
assertEquals((-4), vecInt0.last());
assertFalse(vecInt0.isEmpty());
assertNotNull(vecInt0);

solver1.fromLastDecisionLevel(vecInt0);

[MASTER] 02:28:54.546 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:54.555 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>((-1.0));
assertEquals((-1.0), activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(1.5, double0, 0.01);

LearningStrategy<ClausalDataStructureWL> learningStrategy0 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

int[] intArray0 = new int[1];
intArray0[0] = 298;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {298}, intArray0);
assertEquals(1, intArray0.length);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);
assertArrayEquals(new int[] {298}, intArray0);
assertEquals(1, intArray0.length);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertNotNull(eMARestarts0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(learningStrategy0, clausalDataStructureWL0, tabuListDecorator0, eMARestarts0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);
assertArrayEquals(new int[] {298}, intArray0);
assertEquals(1, intArray0.length);

SearchParams searchParams1 = solver0.getSearchParams();
assertNotSame(searchParams1, searchParams0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertNotNull(searchParams1);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(1, intArray0.length);

int int0 = searchParams1.getInitConflictBound();
assertNotSame(searchParams1, searchParams0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(6, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, int0);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(1, intArray0.length);

TabuListDecorator tabuListDecorator1 = new TabuListDecorator(subsetVarOrder0, 2183);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator1);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals(1, intArray0.length);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("#constraints  ");
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams1, tabuListDecorator1, eMARestarts0, mUSLauncher0);
assertEquals((-1.0), activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(7, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(7, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(8, solver0.newVar());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(solver1);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(tabuListDecorator0.equals((Object)tabuListDecorator1));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals(1, intArray0.length);

VecInt vecInt0 = new VecInt();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

IConstr iConstr0 = solver1.addExactly(vecInt0, 0);
assertNotSame(tabuListDecorator0, tabuListDecorator1);
assertNotSame(searchParams1, searchParams0);
assertNotSame(tabuListDecorator1, tabuListDecorator0);
assertEquals((-1.0), activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(10, solver0.newVar());
assertEquals(9, solver0.realNumberOfVariables());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(9, solver0.nVars());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertFalse(mUSLauncher0.isSilent());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(3, solver1.nVars());
assertFalse(solver1.isVerbose());
assertEquals(2, solver1.nConstraints());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertFalse(iConstr0.canBePropagatedMultipleTimes());
assertEquals(2, iConstr0.size());
assertEquals(0.0, iConstr0.getActivity(), 0.01);
assertNotNull(iConstr0);
assertArrayEquals(new int[] {298}, intArray0);
assertFalse(tabuListDecorator0.equals((Object)tabuListDecorator1));
assertFalse(searchParams1.equals((Object)searchParams0));
assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
assertEquals(1, intArray0.length);


[MASTER] 02:28:54.870 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:54.876 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.realnVars());
assertEquals(0, iLits0.nVars());
assertNotNull(iLits0);

ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>(0.0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

SearchParams searchParams0 = new SearchParams(0.0, 263);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(263, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

PureOrder pureOrder0 = new PureOrder((-2977));
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2977), pureOrder0.getPeriod());
assertNotNull(pureOrder0);

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(fixedPeriodRestarts0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertNotNull(mUSLauncher0);

Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, searchParams0, pureOrder0, fixedPeriodRestarts0, mUSLauncher0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(263, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2977), pureOrder0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

PureOrder pureOrder1 = (PureOrder)solver0.getOrder();
assertSame(pureOrder0, pureOrder1);
assertSame(pureOrder1, pureOrder0);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(263, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2977), pureOrder0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
assertEquals(0, pureOrder1.numberOfInterestingVariables());
assertEquals((-2977), pureOrder1.getPeriod());
assertNotNull(pureOrder1);

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, pureOrder1, fixedPeriodRestarts0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(263, searchParams0.getInitConflictBound());
assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
assertEquals(0, pureOrder0.numberOfInterestingVariables());
assertEquals((-2977), pureOrder0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(5, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
assertEquals(0, pureOrder1.numberOfInterestingVariables());
assertEquals((-2977), pureOrder1.getPeriod());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2147483, solver1.getTimeout());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertNotNull(solver1);

solver1.getLiteralsPropagatedAt(263);

[MASTER] 02:28:55.126 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:55.128 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertNotNull(userFixedPhaseSelectionStrategy0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(arminRestarts0);

arminRestarts0.newConflict();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());

NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax1);
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax1, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, (ILogAble) null);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertNotNull(solver0);
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));

boolean boolean0 = solver0.isSolverKeptHot();
assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals("Fixed selection strategy.", userFixedPhaseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertFalse(solver0.isSolverKeptHot());
assertEquals(3, solver0.nVars());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(boolean0);
assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));


[MASTER] 02:28:55.430 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<2> but was:<1>
[MASTER] 02:28:55.435 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

naturalStaticOrder0.undo(1674);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertNotNull(fixedPeriodRestarts0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertNotNull(searchParams0);

fixedPeriodRestarts0.onRestart();
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());

NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningNoHeuristics0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertNotNull(solver0);

VecInt vecInt0 = new VecInt(1674, 3);
assertFalse(vecInt0.isEmpty());
assertEquals(1674, vecInt0.size());
assertEquals(3, vecInt0.last());
assertNotNull(vecInt0);

Set<Integer> set0 = solver0.fromLastDecisionLevel(vecInt0);
assertTrue(set0.contains(3));
assertFalse(set0.contains(1674));
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertFalse(vecInt0.isEmpty());
assertEquals(1674, vecInt0.size());
assertEquals(3, vecInt0.last());
assertFalse(set0.isEmpty());
assertEquals(1, set0.size());
assertNotNull(set0);

NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertNotNull(solver1);

Solver solver2 = (Solver)solver1.getSolvingEngine();
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isVerbose());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(5, solver2.newVar());
assertEquals(4, solver2.realNumberOfVariables());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.nConstraints());
assertFalse(solver2.isSolverKeptHot());
assertEquals(4, solver2.nVars());
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
assertFalse(solver1.isSolverKeptHot());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals(5, solver1.nVars());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(6, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertNotNull(solver2);


[MASTER] 02:28:55.704 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:55.706 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertNotNull(arminRestarts0);

SearchParams searchParams0 = new SearchParams(407);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(407, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
assertNotNull(rSATPhaseSelectionStrategy0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertNotNull(randomWalkDecorator0);

LubyRestarts lubyRestarts0 = new LubyRestarts(11);
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(11, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(11);
assertEquals(0, activeLearning0.getLimit());
assertEquals(11.0, activeLearning0.getActivityPercent(), 0.01);
assertNotNull(activeLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, arminRestarts0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(407, searchParams0.getInitConflictBound());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertEquals(11.0, activeLearning0.getActivityPercent(), 0.01);
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.decisionLevel());
assertEquals(2147483, solver0.getTimeout());
assertNotNull(solver0);

solver0.model(11);

[MASTER] 02:28:55.942 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:55.945 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, lubyRestarts0, (ILogAble) null);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2, solver0.newVar());
assertEquals(1, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, lubyRestarts0);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, solver1.decisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);

solver1.clearLearntClauses();
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(1, lubyRestarts0.luby());
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, solver1.decisionLevel());
assertEquals(4, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(2147483, solver1.getTimeout());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(3, solver1.nVars());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);


[MASTER] 02:28:56.189 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:56.190 [logback-1] WARN  JUnitAnalyzer - Failing test:
 PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

cardinalityDataStructureYanMax0.conflictDetectedInWatchesFor(58, 32);
lubyRestarts0.onRestart();
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, lubyRestarts0);
assertEquals(10, percentLengthLearning0.getLimit());
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertFalse(lubyRestarts0.shouldRestart());
assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0, solver0.decisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);

solver0.reduceDB();

[MASTER] 02:28:56.430 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:56.432 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertNotNull(naturalStaticOrder0);

naturalStaticOrder0.undo(1670);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());

FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertNotNull(fixedPeriodRestarts0);

SearchParams searchParams0 = new SearchParams();
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertNotNull(searchParams0);

fixedPeriodRestarts0.onRestart();
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());

NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
assertNotNull(noLearningNoHeuristics0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL0, naturalStaticOrder0, fixedPeriodRestarts0);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertNotNull(solver0);

int[] intArray0 = new int[9];
intArray0[0] = 1670;
intArray0[1] = 1670;
intArray0[2] = 1670;
intArray0[5] = 1670;
intArray0[7] = 1670;
intArray0[8] = 1670;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {1670, 1670, 1670, 0, 0, 1670, 0, 1670, 1670}, intArray0);
assertEquals(9, intArray0.length);

CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure1);
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));

int int0 = solver0.nextFreeVarId(true);
assertEquals("Natural static ordering", naturalStaticOrder0.toString());
assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
assertTrue(fixedPeriodRestarts0.shouldRestart());
assertEquals(0L, fixedPeriodRestarts0.getPeriod());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(5, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals(4, solver0.realNumberOfVariables());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(4, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(3, int0);


[MASTER] 02:28:56.693 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:56.717 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
assertNotNull(noLearningButHeuristics0);

CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams(1687.0815232563998, 1.0, 334.2924930782404, 4);
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

int[] intArray0 = new int[5];
intArray0[0] = 4;
intArray0[1] = 4;
intArray0[2] = 4;
intArray0[3] = 4;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {4, 4, 4, 4, 0}, intArray0);
assertEquals(5, intArray0.length);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertNotNull(eMARestarts0);

Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, eMARestarts0);
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertNotNull(solver0);
assertArrayEquals(new int[] {4, 4, 4, 4, 0}, intArray0);
assertEquals(5, intArray0.length);

solver0.clearLearntClauses();
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertArrayEquals(new int[] {4, 4, 4, 4, 0}, intArray0);
assertEquals(5, intArray0.length);

IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(5, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertNotNull(iVecInt0);
assertArrayEquals(new int[] {4, 4, 4, 4, 0}, intArray0);
assertEquals(5, intArray0.length);

AtLeast atLeast0 = (AtLeast)solver0.addAtMost(iVecInt0, 4);
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(7, solver0.realNumberOfVariables());
assertEquals(8, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(7, solver0.nVars());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertFalse(atLeast0.simplify());
assertEquals(0, atLeast0.size());
assertEquals((-4), atLeast0.requiredNumberOfSatisfiedLiterals());
assertTrue(atLeast0.locked());
assertFalse(atLeast0.learnt());
assertFalse(atLeast0.isSatisfied());
assertEquals(0.0, atLeast0.getActivity(), 0.01);
assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
assertFalse(atLeast0.canBePropagatedMultipleTimes());
assertNotNull(atLeast0);
assertArrayEquals(new int[] {4, 4, 4, 4, 0}, intArray0);
assertEquals(5, intArray0.length);

NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertFalse(mUSLauncher0.isSilent());
assertNotNull(mUSLauncher0);

iVecInt0.growTo(4, 4);
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(9, solver0.realNumberOfVariables());
assertEquals(9, solver0.nVars());
assertEquals(10, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(4, iVecInt0.last());
assertEquals(4, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertArrayEquals(new int[] {4, 4, 4, 4, 0}, intArray0);
assertEquals(5, intArray0.length);

IteratorInt iteratorInt0 = iVecInt0.iterator();
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(11, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(11, solver0.realNumberOfVariables());
assertEquals(12, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(4, iVecInt0.last());
assertEquals(4, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertNotNull(iteratorInt0);
assertArrayEquals(new int[] {4, 4, 4, 4, 0}, intArray0);
assertEquals(5, intArray0.length);

MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, subsetVarOrder0, eMARestarts0);
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.nConstraints());
assertEquals("c ", solver1.getLogPrefix());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertNotNull(solver1);
assertArrayEquals(new int[] {4, 4, 4, 4, 0}, intArray0);
assertEquals(5, intArray0.length);

UnitClauses unitClauses0 = (UnitClauses)solver1.addAtMost(iVecInt0, 4);
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.nConstraints());
assertEquals(0, solver1.getPropagationLevel());
assertFalse(solver1.isVerbose());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(5, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertEquals(2147483, solver1.getTimeout());
assertTrue(unitClauses0.isSatisfied());
assertFalse(unitClauses0.canBePropagatedMultipleTimes());
assertFalse(unitClauses0.simplify());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(13, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(13, solver0.realNumberOfVariables());
assertEquals(14, solver0.newVar());
assertEquals(2147483, solver0.getTimeout());
assertEquals(1, solver0.nConstraints());
assertFalse(solver0.isSolverKeptHot());
assertEquals(4, iVecInt0.last());
assertEquals(4, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertNotNull(unitClauses0);
assertArrayEquals(new int[] {4, 4, 4, 4, 0}, intArray0);
assertEquals(5, intArray0.length);

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
assertEquals(10, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertNotNull(clauseOnlyLearning0);

Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, eMARestarts0);
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(1, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(2, solver2.newVar());
assertNotNull(solver2);
assertArrayEquals(new int[] {4, 4, 4, 4, 0}, intArray0);
assertEquals(5, intArray0.length);

solver2.expireTimeout();
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(3, solver2.nVars());
assertEquals(4, solver2.newVar());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.nConstraints());
assertEquals(0, solver2.decisionLevel());
assertArrayEquals(new int[] {4, 4, 4, 4, 0}, intArray0);
assertEquals(5, intArray0.length);

MaxWatchCard maxWatchCard0 = (MaxWatchCard)solver2.addBlockingClause(iVecInt0);
assertEquals(1687.0815232563998, searchParams0.getVarDecay(), 0.01);
assertEquals(1.0, searchParams0.getClaDecay(), 0.01);
assertEquals(4, searchParams0.getInitConflictBound());
assertEquals(334.2924930782404, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(15, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(2147483, solver0.getTimeout());
assertEquals(15, solver0.realNumberOfVariables());
assertEquals(1, solver0.nConstraints());
assertEquals(16, solver0.newVar());
assertFalse(solver0.isSolverKeptHot());
assertEquals(5, solver2.realNumberOfVariables());
assertEquals(6, solver2.newVar());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(5, solver2.nVars());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(1, solver2.nConstraints());
assertEquals(0, solver2.decisionLevel());
assertEquals(4, iVecInt0.last());
assertEquals(4, iVecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertEquals(4, maxWatchCard0.size());
assertEquals(0.0, maxWatchCard0.getActivity(), 0.01);
assertEquals(1, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
assertFalse(maxWatchCard0.canBePropagatedMultipleTimes());
assertTrue(maxWatchCard0.locked());
assertFalse(maxWatchCard0.learnt());
assertFalse(maxWatchCard0.simplify());
assertTrue(maxWatchCard0.canBeSatisfiedByCountingLiterals());
assertNotNull(maxWatchCard0);
assertArrayEquals(new int[] {4, 4, 4, 4, 0}, intArray0);
assertEquals(5, intArray0.length);


[MASTER] 02:28:57.008 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:57.026 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(0.0);
assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
assertEquals(0, activeLearning0.getLimit());
assertNotNull(activeLearning0);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

SearchParams searchParams0 = new SearchParams();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

double double0 = searchParams0.getConflictBoundIncFactor();
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, double0, 0.01);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

int[] intArray0 = new int[8];
intArray0[0] = 6;
intArray0[1] = 298;
intArray0[2] = 6;
intArray0[3] = 298;
intArray0[4] = 6;
intArray0[5] = 6;
intArray0[6] = 298;
intArray0[7] = 6;
SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(subsetVarOrder0);
assertArrayEquals(new int[] {6, 298, 6, 298, 6, 6, 298, 6}, intArray0);
assertEquals(8, intArray0.length);

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(tabuListDecorator0);
assertArrayEquals(new int[] {6, 298, 6, 298, 6, 6, 298, 6}, intArray0);
assertEquals(8, intArray0.length);

EMARestarts eMARestarts0 = new EMARestarts();
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertNotNull(eMARestarts0);

MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertNotNull(miniSATLearning0);

Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, tabuListDecorator0, eMARestarts0);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(solver0);
assertArrayEquals(new int[] {6, 298, 6, 298, 6, 6, 298, 6}, intArray0);
assertEquals(8, intArray0.length);

SearchParams searchParams1 = solver0.getSearchParams();
assertNotSame(searchParams1, searchParams0);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(3, solver0.nVars());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(searchParams1);
assertArrayEquals(new int[] {6, 298, 6, 298, 6, 6, 298, 6}, intArray0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(8, intArray0.length);

int int0 = searchParams1.getInitConflictBound();
assertNotSame(searchParams1, searchParams0);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isVerbose());
assertEquals(5, solver0.nVars());
assertEquals(5, solver0.realNumberOfVariables());
assertEquals(6, solver0.newVar());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals(100, int0);
assertArrayEquals(new int[] {6, 298, 6, 298, 6, 6, 298, 6}, intArray0);
assertFalse(searchParams1.equals((Object)searchParams0));
assertEquals(8, intArray0.length);

PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>((-1328));
assertEquals((-1328), percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
assertNotNull(mixedDataStructureSingleWL0);

Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, searchParams0, tabuListDecorator0, eMARestarts0);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-1328), percentLengthLearning0.getLimit());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(2, solver1.newVar());
assertFalse(solver1.isSolverKeptHot());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(solver1);
assertArrayEquals(new int[] {6, 298, 6, 298, 6, 6, 298, 6}, intArray0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(8, intArray0.length);

IOrder iOrder0 = solver1.getOrder();
assertNotSame(searchParams0, searchParams1);
assertSame(iOrder0, tabuListDecorator0);
assertSame(tabuListDecorator0, iOrder0);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals((-1328), percentLengthLearning0.getLimit());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(4, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals(3, solver1.nVars());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(iOrder0);
assertArrayEquals(new int[] {6, 298, 6, 298, 6, 6, 298, 6}, intArray0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(8, intArray0.length);

ActiveLearning<MixedDataStructureDanielWL> activeLearning1 = new ActiveLearning<MixedDataStructureDanielWL>(1000.0);
assertEquals(1000.0, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertNotNull(activeLearning1);

MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
assertNotNull(mixedDataStructureDanielWL0);

Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertNotNull(glucose21Restarts0);

Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(activeLearning1, mixedDataStructureDanielWL0, iOrder0, glucose21Restarts0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals((-1328), percentLengthLearning0.getLimit());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(6, solver1.newVar());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(5, solver1.nVars());
assertEquals(5, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1000.0, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(2, solver2.newVar());
assertFalse(solver2.isVerbose());
assertEquals(1, solver2.nVars());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals("c ", solver2.getLogPrefix());
assertNotNull(solver2);
assertArrayEquals(new int[] {6, 298, 6, 298, 6, 6, 298, 6}, intArray0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertEquals(8, intArray0.length);

int int1 = solver2.nConstraints();
assertNotSame(searchParams0, searchParams1);
assertSame(tabuListDecorator0, iOrder0);
assertSame(iOrder0, tabuListDecorator0);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals((-1328), percentLengthLearning0.getLimit());
assertFalse(solver1.isVerbose());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(7, solver1.nVars());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(8, solver1.newVar());
assertEquals(7, solver1.realNumberOfVariables());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(1000.0, activeLearning1.getActivityPercent(), 0.01);
assertEquals(0, activeLearning1.getLimit());
assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
assertEquals(0, solver2.decisionLevel());
assertEquals(4, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(2147483, solver2.getTimeout());
assertFalse(solver2.isDBSimplificationAllowed());
assertFalse(solver2.isSolverKeptHot());
assertEquals(0, solver2.nConstraints());
assertEquals(3, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(3, solver2.realNumberOfVariables());
assertEquals(0, int1);
assertArrayEquals(new int[] {6, 298, 6, 298, 6, 6, 298, 6}, intArray0);
assertFalse(searchParams0.equals((Object)searchParams1));
assertFalse(int1 == int0);
assertEquals(8, intArray0.length);

NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningNoHeuristics0);

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver3 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, tabuListDecorator0, eMARestarts0);
assertEquals(2147483, solver3.getTimeout());
assertFalse(solver3.isSolverKeptHot());
assertEquals(1, solver3.nVars());
assertEquals(2, solver3.newVar());
assertEquals(1, solver3.realNumberOfVariables());
assertEquals(0, solver3.nConstraints());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(0, solver3.decisionLevel());
assertEquals("c ", solver3.getLogPrefix());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(0, solver3.currentDecisionLevel());
assertFalse(solver3.isVerbose());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(solver3);
assertArrayEquals(new int[] {6, 298, 6, 298, 6, 6, 298, 6}, intArray0);
assertEquals(8, intArray0.length);

LearnedConstraintsDeletionStrategy learnedConstraintsDeletionStrategy0 = solver3.fixedSize(1203);
assertSame(tabuListDecorator0, iOrder0);
assertEquals(2147483, solver3.getTimeout());
assertFalse(solver3.isSolverKeptHot());
assertEquals(3, solver3.nVars());
assertEquals(0, solver3.nConstraints());
assertEquals(4, solver3.newVar());
assertEquals(0, solver3.getPropagationLevel());
assertEquals(3, solver3.realNumberOfVariables());
assertEquals(0, solver3.decisionLevel());
assertEquals("c ", solver3.getLogPrefix());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(0, solver3.currentDecisionLevel());
assertFalse(solver3.isVerbose());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
assertNotNull(learnedConstraintsDeletionStrategy0);
assertArrayEquals(new int[] {6, 298, 6, 298, 6, 6, 298, 6}, intArray0);
assertEquals(8, intArray0.length);


[MASTER] 02:28:57.316 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected:<1> but was:<0>
[MASTER] 02:28:57.335 [logback-1] WARN  JUnitAnalyzer - Failing test:
 NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
assertNotNull(noLearningButHeuristics0);

SearchParams searchParams0 = new SearchParams();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams0);

PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertNotNull(varOrderHeap0);

LubyRestarts lubyRestarts0 = new LubyRestarts();
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts0);

LubyRestarts lubyRestarts1 = new LubyRestarts();
assertTrue(lubyRestarts1.shouldRestart());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(lubyRestarts1);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));

lubyRestarts1.onRestart();
assertNotSame(lubyRestarts1, lubyRestarts0);
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));

MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
assertNotNull(mixedDataStructureDanielWLConciseBinary0);

Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, lubyRestarts1, (ILogAble) null);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(100, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isVerbose());
assertEquals(1, solver0.nVars());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(2, solver0.newVar());
assertEquals(0, solver0.nConstraints());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver0);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));

PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>((-2601));
assertEquals((-2601), percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
assertNotNull(clausalDataStructureWL0);

ILits iLits0 = clausalDataStructureWL0.getVocabulary();
assertEquals(0, iLits0.nVars());
assertEquals(0, iLits0.realnVars());
assertNotNull(iLits0);

SearchParams searchParams1 = new SearchParams();
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertNotNull(searchParams1);
assertFalse(searchParams1.equals((Object)searchParams0));

Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams1, varOrderHeap0, lubyRestarts1, (ILogAble) null);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals((-2601), percentLengthLearning0.getLimit());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(2147483, solver1.getTimeout());
assertEquals(1, solver1.realNumberOfVariables());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(1, solver1.nVars());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isDBSimplificationAllowed());
assertFalse(solver1.isVerbose());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver1);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertFalse(searchParams1.equals((Object)searchParams0));

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertNotNull(fixedLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMin>(3297);
assertEquals(3297, fixedLengthLearning1.getMaxLength());
assertNotNull(fixedLengthLearning1);
assertFalse(fixedLengthLearning1.equals((Object)fixedLengthLearning0));

fixedLengthLearning1.setSolver((Solver<CardinalityDataStructureYanMin>) null);
assertNotSame(fixedLengthLearning1, fixedLengthLearning0);
assertEquals(3297, fixedLengthLearning1.getMaxLength());
assertFalse(fixedLengthLearning1.equals((Object)fixedLengthLearning0));

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning1, cardinalityDataStructureYanMin0, (SearchParams) null, varOrderHeap0, lubyRestarts1);
assertEquals(3297, fixedLengthLearning1.getMaxLength());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.nConstraints());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(0, solver2.decisionLevel());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(0, solver2.currentDecisionLevel());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isVerbose());
assertFalse(solver2.isSolverKeptHot());
assertEquals(1, solver2.nVars());
assertEquals(2147483, solver2.getTimeout());
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver2);
assertFalse(fixedLengthLearning1.equals((Object)fixedLengthLearning0));
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));

Solver<MixedDataStructureDanielWLConciseBinary> solver3 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams1, varOrderHeap0, lubyRestarts1);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, solver3.decisionLevel());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertFalse(solver3.isVerbose());
assertEquals(3, solver3.nVars());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals("c ", solver3.getLogPrefix());
assertEquals(3, solver3.realNumberOfVariables());
assertEquals(4, solver3.newVar());
assertFalse(solver3.isSolverKeptHot());
assertEquals(0, solver3.nConstraints());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver3);
assertFalse(solver3.equals((Object)solver0));
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertFalse(searchParams1.equals((Object)searchParams0));

solver3.cancelUntil(32);
assertNotSame(solver3, solver0);
assertNotSame(lubyRestarts1, lubyRestarts0);
assertNotSame(searchParams1, searchParams0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, solver3.decisionLevel());
assertEquals(2147483, solver3.getTimeout());
assertEquals(0, solver3.currentDecisionLevel());
assertEquals(0, solver3.getPropagationLevel());
assertFalse(solver3.isVerbose());
assertFalse(solver3.isDBSimplificationAllowed());
assertEquals(5, solver3.realNumberOfVariables());
assertEquals(5, solver3.nVars());
assertEquals(6, solver3.newVar());
assertEquals("c ", solver3.getLogPrefix());
assertFalse(solver3.isSolverKeptHot());
assertEquals(0, solver3.nConstraints());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
assertEquals(100, searchParams1.getInitConflictBound());
assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(solver3.equals((Object)solver0));
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertFalse(searchParams1.equals((Object)searchParams0));

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielHT>(45);
assertEquals(45, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

Solver<MixedDataStructureDanielHT> solver4 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning1, mixedDataStructureDanielHT0, varOrderHeap0, lubyRestarts0);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertTrue(lubyRestarts0.shouldRestart());
assertEquals(32, lubyRestarts0.getFactor());
assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
assertEquals(1, lubyRestarts0.luby());
assertEquals(45, percentLengthLearning1.getLimit());
assertFalse(solver4.isDBSimplificationAllowed());
assertEquals("c ", solver4.getLogPrefix());
assertEquals(0, solver4.currentDecisionLevel());
assertEquals(0, solver4.getPropagationLevel());
assertEquals(2, solver4.newVar());
assertEquals(0, solver4.decisionLevel());
assertEquals(1, solver4.realNumberOfVariables());
assertFalse(solver4.isVerbose());
assertEquals(2147483, solver4.getTimeout());
assertEquals(0, solver4.nConstraints());
assertFalse(solver4.isSolverKeptHot());
assertEquals(1, solver4.nVars());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver4);
assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));

Solver<MixedDataStructureDanielHT> solver5 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning1, mixedDataStructureDanielHT0, varOrderHeap0, lubyRestarts1);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(45, percentLengthLearning1.getLimit());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertFalse(solver5.isVerbose());
assertEquals(0, solver5.getPropagationLevel());
assertEquals(0, solver5.nConstraints());
assertFalse(solver5.isSolverKeptHot());
assertEquals("c ", solver5.getLogPrefix());
assertEquals(4, solver5.newVar());
assertEquals(3, solver5.realNumberOfVariables());
assertFalse(solver5.isDBSimplificationAllowed());
assertEquals(3, solver5.nVars());
assertEquals(0, solver5.currentDecisionLevel());
assertEquals(0, solver5.decisionLevel());
assertEquals(2147483, solver5.getTimeout());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver5);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertFalse(solver5.equals((Object)solver4));

solver5.cancelUntilTrailLevel(32);
assertNotSame(lubyRestarts1, lubyRestarts0);
assertNotSame(solver5, solver4);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(45, percentLengthLearning1.getLimit());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertFalse(solver5.isVerbose());
assertEquals(0, solver5.getPropagationLevel());
assertEquals(0, solver5.nConstraints());
assertFalse(solver5.isSolverKeptHot());
assertEquals(6, solver5.newVar());
assertEquals("c ", solver5.getLogPrefix());
assertEquals(5, solver5.realNumberOfVariables());
assertEquals(5, solver5.nVars());
assertFalse(solver5.isDBSimplificationAllowed());
assertEquals(0, solver5.currentDecisionLevel());
assertEquals(0, solver5.decisionLevel());
assertEquals(2147483, solver5.getTimeout());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertFalse(solver5.equals((Object)solver4));

Solver solver6 = (Solver)solver5.getSolvingEngine();
assertNotSame(lubyRestarts1, lubyRestarts0);
assertNotSame(solver5, solver4);
assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(45, percentLengthLearning1.getLimit());
assertEquals(32, lubyRestarts1.getFactor());
assertEquals(1, lubyRestarts1.luby());
assertFalse(lubyRestarts1.shouldRestart());
assertEquals(32L, lubyRestarts1.nextRestartNumberOfConflict());
assertFalse(solver5.isVerbose());
assertEquals(0, solver5.getPropagationLevel());
assertEquals(0, solver5.nConstraints());
assertFalse(solver5.isSolverKeptHot());
assertEquals(9, solver5.nVars());
assertEquals("c ", solver5.getLogPrefix());
assertEquals(10, solver5.newVar());
assertFalse(solver5.isDBSimplificationAllowed());
assertEquals(9, solver5.realNumberOfVariables());
assertEquals(0, solver5.currentDecisionLevel());
assertEquals(0, solver5.decisionLevel());
assertEquals(2147483, solver5.getTimeout());
assertEquals(8, solver6.realNumberOfVariables());
assertFalse(solver6.isDBSimplificationAllowed());
assertEquals("c ", solver6.getLogPrefix());
assertEquals(8, solver6.nVars());
assertEquals(0, solver6.currentDecisionLevel());
assertEquals(0, solver6.getPropagationLevel());
assertEquals(9, solver6.newVar());
assertFalse(solver6.isVerbose());
assertEquals(0, solver6.decisionLevel());
assertEquals(2147483, solver6.getTimeout());
assertEquals(0, solver6.nConstraints());
assertFalse(solver6.isSolverKeptHot());
assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
assertNotNull(solver6);
assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
assertFalse(solver5.equals((Object)solver4));


* Writing tests to file
* Writing JUnit test case 'Solver_ESTest' to evosuite-tests
* Done!

* Computation finished
