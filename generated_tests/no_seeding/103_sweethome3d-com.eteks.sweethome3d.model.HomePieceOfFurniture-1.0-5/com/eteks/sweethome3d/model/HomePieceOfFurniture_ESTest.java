/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 19:06:46 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DoorOrWindow;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.PieceOfFurniture;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.MathContext;
import java.math.RoundingMode;
import java.net.URL;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomePieceOfFurniture_ESTest extends HomePieceOfFurniture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setMovable(true);
      homeLight0.setElevation(4730.388F);
      homeLight0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float((double) (-805.8F));
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4240.484F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setVisible(false);
      homeLight1.setNameAngle(0);
      homeLight0.isBottomRightPointAt(4.8F, 3700, 0.0F);
      homeLight0.getTexture();
      homeLight0.setDescription("Id(PZHY");
      homeLight0.move(0, 0.3926991F);
      homeLight0.getNameStyle();
      homeLight0.setNameStyle((TextStyle) null);
      homeLight1.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      LightSource lightSource0 = new LightSource(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 2344, float0);
      Float float1 = new Float((-1369.8F));
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      bigDecimal0.subtract(bigDecimal1);
      CatalogLight catalogLight0 = new CatalogLight("", "H&I,7>edELC", "", temporaryURLContent0, temporaryURLContent0, 2344, 0.0F, (-1.0F), (-1.0F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal1, bigDecimal0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogLight0.setCategory(furnitureCategory0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = new HomeLight(homeLight1);
      HomeLight homeLight3 = homeLight2.clone();
      homeLight3.isPointAt(3.4028235E38F, 3.4028235E38F, 2344);
      HomeLight homeLight4 = homeLight1.clone();
      homeLight1.getTexture();
      homeLight4.getDescription();
      homeLight1.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation(3700);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal((-2145886805));
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setMovable(true);
      Level level0 = new Level("RNWuJ=(K7g@v\t[p'", (-2145886805), 0.0F, (-2145886805));
      homeLight0.setShininess((Float) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((double) (-806.0515F));
      BigDecimal bigDecimal0 = new BigDecimal((double) (-5));
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-806.0515F), 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setNameVisible(true);
      homeLight1.setHeight(0.0F);
      homeLight1.getLevel();
      Integer integer0 = new Integer((-5));
      homeLight1.setColor(integer0);
      homeLight1.setModelMirrored(false);
      homeLight0.isTopRightPointAt(0.0F, 0.0F, 5391.62F);
      homeLight1.getColor();
      homeLight1.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("[9,[9_51,dQ", "NAME_ANGLE", "!|6\"c}", temporaryURLContent0, temporaryURLContent0, (-805.8F), 0, 0.0F, 0, true, lightSourceArray0, (float[][]) null, "", true, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setDepth((-3333.765F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getDepth();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.setDescription("com.eteks.sweethome3d.tools.TemporaryURLContent");
      homeLight2.setDescription("!|6\"c}");
      homeLight0.isPointAt((-1358.0857F), 2.0F, 805.8F);
      homeLight1.isDoorOrWindow();
      homeLight2.isNameCenterPointAt((-3333.765F), 0.0F, 2101.6F);
      homeLight0.getColor();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      homeLight0.isNameCenterPointAt(1246.9795F, (-2143.0F), 5391.62F);
      homeLight0.isBottomLeftPointAt(0.3926991F, 0.0F, (-2143.0F));
      homeLight0.getX();
      TextStyle textStyle0 = new TextStyle(198.8669F);
      homeLight0.setNameStyle(textStyle0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((double) 0.6248775F);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("[9,[9_51,dQ", "[9,[9_51,dQ", "NAME_ANGLE", temporaryURLContent0, temporaryURLContent0, 0.6248775F, 0.6248775F, 0, 0.6248775F, true, lightSourceArray0, (float[][]) null, "[9,[9_51,dQ", false, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal1.toBigIntegerExact();
      homeLight0.isTopLeftPointAt(0, 0.0F, 0);
      HomeLight homeLight1 = homeLight0.clone();
      CatalogTexture catalogTexture0 = new CatalogTexture("NAME_ANGLE", (Content) null, 2831.6F, 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeLight0.setTexture(homeTexture0);
      HomeLight homeLight2 = new HomeLight(homeLight1);
      HomeLight homeLight3 = homeLight2.clone();
      homeLight1.getValueAddedTax();
      HomeLight homeLight4 = new HomeLight(homeLight3);
      homeLight0.getAngle();
      homeLight1.isBottomRightPointAt((-1.0F), 1.0F, 2831.6F);
      homeLight2.getCurrency();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      assertNotNull(lightSource0);
      assertNull(lightSource0.getDiameter());
      assertEquals(3700, lightSource0.getColor());
      assertEquals((-805.8F), lightSource0.getZ(), 0.01F);
      assertEquals(5391.62F, lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      
      Float float1 = new Float(4246.75F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(4246.75F, (float)float1, 0.01F);
      
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      assertNotNull(lightSource1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(3700, lightSource1.getColor());
      assertEquals(0.0F, lightSource1.getX(), 0.01F);
      assertEquals((-650.33F), lightSource1.getY(), 0.01F);
      assertEquals(4246.75F, lightSource1.getZ(), 0.01F);
      assertEquals(4246.75F, lightSource1.getDiameter(), 0.01F);
      
      float float2 = Float.min(5391.62F, 0.0F);
      assertEquals(0.0F, float2, 0.01F);
      
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("", homeLight1.getName());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      
      Integer integer0 = new Integer(3700);
      assertNotNull(integer0);
      assertEquals(3700, (int)integer0);
      
      homeLight0.setColor(integer0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(3700, (int)homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      TextStyle textStyle0 = new TextStyle(5391.62F);
      assertNotNull(textStyle0);
      assertFalse(textStyle0.isItalic());
      assertEquals(5391.62F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      
      HomeLight homeLight2 = new HomeLight(homeLight1);
      assertNotNull(homeLight2);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(3700, (int)homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("", homeLight1.getName());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertFalse(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals((-402.9F), homeLight2.getY(), 0.01F);
      assertEquals(4246.75F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getDescription());
      assertEquals((-805.8F), homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      
      homeLight2.setNameStyle(textStyle0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(3700, (int)homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("", homeLight1.getName());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertEquals(5391.62F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertFalse(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals((-402.9F), homeLight2.getY(), 0.01F);
      assertEquals(4246.75F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getDescription());
      assertEquals((-805.8F), homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      
      boolean boolean0 = homeLight0.isTopRightPointAt(1850.0F, 1740.1F, 3700);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(boolean0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(3700, (int)homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(3700, (int)homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      boolean boolean1 = homeLight2.isAtLevel((Level) null);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertTrue(boolean1);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(3700, (int)homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("", homeLight1.getName());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertFalse(homeLight2.isResizable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals((-402.9F), homeLight2.getY(), 0.01F);
      assertEquals(4246.75F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getDescription());
      assertEquals((-805.8F), homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      
      homeLight1.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation((-1040.273F));
      homeLight0.getDepth();
      homeLight0.setDescription((String) null);
      homeLight1.intersectsRectangle(3700, (-2992.6448F), 3.121255F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation(83.4497F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setMovable(true);
      homeLight1.setHeight(0.0F);
      homeLight1.setHeight(4246.75F);
      homeLight1.getStaircaseCutOutShape();
      homeLight0.setAngle(524.0F);
      homeLight0.setLevel((Level) null);
      homeLight1.getPrice();
      homeLight0.getHeight();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      try {
        homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-806.2796F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float((-1285.3262F));
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-806.2796F), (-1285.3262F), 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      bigDecimal1.setScale(0);
      BigDecimal bigDecimal2 = new BigDecimal(3700);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      MathContext mathContext0 = new MathContext(3700, roundingMode0);
      bigDecimal0.divide(bigDecimal2, mathContext0);
      homeLight1.setName("");
      homeLight1.setElevation(3700);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.setNameVisible(true);
      homeLight2.containsPoint((-650.33F), 0.0F, (-269.187F));
      homeLight1.setX(0.0F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$14", "com.eteks.sweethome3d.model.HomePieceOfFurniture$14", "com.eteks.sweethome3d.model.HomePieceOfFurniture$14", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$14", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      homeLight0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.setTexture((HomeTexture) null);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float((-1285.3262F));
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), (-1285.3262F), 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      bigDecimal1.setScale(0);
      BigDecimal bigDecimal2 = new BigDecimal(3700);
      RoundingMode roundingMode0 = RoundingMode.FLOOR;
      MathContext mathContext0 = new MathContext(3700, roundingMode0);
      bigDecimal0.divide(bigDecimal2, mathContext0);
      homeLight1.setName("");
      homeLight1.setElevation(3700);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.setNameVisible(false);
      homeLight2.containsPoint((-650.33F), 0.0F, (-269.187F));
      homeLight1.setX(0.0F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isPointAt(4730.388F, 4730.388F, 4730.388F);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float(0.0F);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal0.toEngineeringString();
      homeLight0.isNameVisible();
      homeLight0.getLevel();
      homeLight0.isNameCenterPointAt(0.0F, 56.63828F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[12];
      Float float0 = new Float((float) 2344);
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 4246.75F, 2344, float0);
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float(122.7);
      LightSource lightSource1 = new LightSource((-4536.1626F), 0.0F, 5391.62F, 2344, float1);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource2;
      Float float2 = new Float(4246.75F);
      LightSource lightSource3 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float2);
      lightSourceArray0[3] = lightSource3;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation((-1040.273F));
      homeLight1.clone();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[29];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("VALUE%ADDED_TAX,PEqCvNTA5E", "VALUE%ADDED_TAX,PEqCvNTA5E", "VALUE%ADDED_TAX,PEqCvNTA5E", temporaryURLContent0, temporaryURLContent0, (-1.0F), 473.91205F, (-1.0F), (-1.0F), true, lightSourceArray0, (float[][]) null, "VALUE%ADDED_TAX,PEqCvNTA5E", true, bigDecimal0, bigDecimal0);
      CatalogTexture catalogTexture0 = new CatalogTexture("VALUE%ADDED_TAX,PEqCvNTA5E", temporaryURLContent0, (-1.0F), 473.91205F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setTexture(homeTexture0);
      homeLight0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[10];
      Float float0 = new Float(122.7);
      Float float1 = new Float(473.68286F);
      BigDecimal bigDecimal0 = new BigDecimal(15);
      CatalogLight catalogLight0 = new CatalogLight("VALUE_ADDED_TAX_PERCENTAGE", "", "VALUE_ADDED_TAX_PERCENTAGE", temporaryURLContent0, temporaryURLContent0, 0.0F, 473.68286F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      BigDecimal bigDecimal2 = new BigDecimal(5);
      CatalogLight catalogLight1 = new CatalogLight("", "VALUE_ADDED_TAX_PERCENTAGE", "_bZk1'T0,MF)bx", temporaryURLContent0, temporaryURLContent0, (-189.5024F), 0.0F, 5, 0.0F, false, lightSourceArray0, (float[][]) null, "ny4Wr.F'cLkB{", false, bigDecimal2, bigDecimal2);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.getValueAddedTax();
      HomeLight homeLight3 = new HomeLight(homeLight2);
      homeLight3.isBottomRightPointAt(5, 1655.84F, 1655.84F);
      homeLight1.getCurrency();
      homeLight3.getModel();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation((-650.33F));
      Integer integer0 = new Integer(3700);
      homeLight0.setColor(integer0);
      homeLight0.getNameXOffset();
      homeLight0.setAngle((-650.33F));
      homeLight0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, true, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      BigDecimal bigDecimal0 = new BigDecimal((-2144186572));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("[9,[9_51,dQ", "NAME_ANGLE", "!|6\"c}", temporaryURLContent0, temporaryURLContent0, (-805.8F), 0, 0.0F, 0, true, lightSourceArray0, (float[][]) null, "", true, (BigDecimal) null, (BigDecimal) null);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("4kyt6YrbR10");
      catalogLight0.setCategory(furnitureCategory0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight2.setDepth(0.0F);
      HomeLight homeLight3 = homeLight1.clone();
      homeLight1.getDepth();
      homeLight1.setDescription("NAME_ANGLE");
      homeLight1.setDescription("!|6\"c}");
      homeLight0.isTopLeftPointAt((-2144186572), (-805.8F), 0.0F);
      homeLight2.isPointAt(36.386F, 0.0F, 0);
      homeLight3.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setY(4246.75F);
      homeLight0.setName("/D<t?/edc");
      homeLight0.setMovable(true);
      homeLight1.setHeight(0.0F);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      bigDecimal0.setScale(13);
      homeLight0.setMovable(false);
      // Undeclared exception!
      try { 
        homeLight1.setHeight(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((-1262.0786475337));
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("ELEVATION", "ELEVATION", "NAME_ANGE", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "[9,[9_51,dQ", false, bigDecimal1, bigDecimal0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("[9,[9_51,dQ");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.setNameVisible(true);
      homeLight1.isTopRightPointAt(0, 0, 0);
      homeLight2.setElevation((-1310.1F));
      homeLight0.getNameXOffset();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight2.isNameCenterPointAt(289.33F, (-1310.1F), 1593.7255F);
      homeLight2.setName("applicationSubFolder.Windows");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[6];
      Float float0 = new Float(0.0F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("VAaUE_ADDED_TAX_PERCENTA5E", "VAaUE_ADDED_TAX_PERCENTA5E", "VAaUE_ADDED_TAX_PERCENTA5E", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "VAaUE_ADDED_TAX_PERCENTA5E", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setModelMirrored(true);
      homeLight0.getColor();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      Float float1 = new Float(4246.75F);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 4246.75F, 0.0F, true, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getNameXOffset();
      homeLight0.getLevel();
      homeLight0.isAtLevel((Level) null);
      homeLight0.isNameVisible();
      homeLight0.setWidth(0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((-4431.324F));
      BigDecimal bigDecimal0 = new BigDecimal((-10));
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "3}5yeWyy4oC", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, (-4431.324F), (-4431.324F), (-4431.324F), (-4431.324F), false, lightSourceArray0, (float[][]) null, "3}5yeWyy4oC", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      HomeLight homeLight2 = new HomeLight(homeLight0);
      HomeLight homeLight3 = new HomeLight(homeLight1);
      homeLight0.setY((-4431.324F));
      homeLight0.isPointAt((-10), (-10), (-4431.324F));
      homeLight1.getNameXOffset();
      homeLight1.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.getPrice();
      homeLight0.isNameCenterPointAt((-552.16F), 664.7F, (-552.16F));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((-1262.0786475337));
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("ELEVATION", "ELEVATION", "NAME_ANGE", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "[9,[9_51,dQ", true, bigDecimal1, bigDecimal0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("[9,[9_51,dQ");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.setNameVisible(true);
      HomeLight homeLight3 = homeLight2.clone();
      homeLight1.getNameStyle();
      homeLight3.setNameStyle((TextStyle) null);
      homeLight3.setX(3685.0F);
      homeLight1.getPlanIcon();
      homeLight0.setY(1.0F);
      homeLight1.getPoints();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.18809766232016);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      MathContext mathContext0 = MathContext.UNLIMITED;
      bigDecimal0.plus(mathContext0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CatalogLight catalogLight0 = new CatalogLight(".E_WiaB!6'BNCAF&", ".E_WiaB!6'BNCAF&", ".E_WiaB!6'BNCAF&", temporaryURLContent0, temporaryURLContent0, 745.57F, 0.0F, 0.0F, 1076.1362F, true, lightSourceArray0, (float[][]) null, ".E_WiaB!6'BNCAF&", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal0.toBigIntegerExact();
      homeLight0.isTopLeftPointAt(8, 0.0F, 1408.4231F);
      homeLight0.setNameXOffset(1408.4231F);
      homeLight0.getNameXOffset();
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isNameCenterPointAt(1408.4231F, 1408.4231F, 1408.4231F);
      homeLight0.getCatalogId();
      homeLight0.getDescription();
      homeLight0.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3711);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3711, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 3711, 3.4028235E38F, 5391.62F, 3711, true, lightSourceArray0, (float[][]) null, "J*.yg0FOY9 ;R~/I+@", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation(0.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setMovable(true);
      homeLight1.setHeight(0.0F);
      homeLight1.getStaircaseCutOutShape();
      homeLight0.setAngle(0.0F);
      homeLight1.getX();
      homeLight1.getNameYOffset();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("J*.yg0FOY9 ;R~/I+@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.J*.yg0FOY9 ;R~/I+@
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getValueAddedTax();
      HomePieceOfFurniture.SortableProperty.values();
      homeLight0.setName("NNWuJ=(K7g@v\t[p'");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      BigDecimal bigDecimal0 = new BigDecimal((-2144186572));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("ELEVATION", "ELEVATION", "NAME_ANGLE", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "[9,[9_51,dQ", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal1.toBigIntegerExact();
      homeLight0.isTopLeftPointAt(0, 0.0F, 0);
      HomeLight homeLight1 = homeLight0.clone();
      CatalogTexture catalogTexture0 = new CatalogTexture("HNq[}}'9z", temporaryURLContent0, 0.0F, 3.4028235E38F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeLight0.setTexture(homeTexture0);
      homeLight0.setModelMirrored(false);
      homeLight0.setHeight(805.8F);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.setX((-1.0F));
      homeLight1.getDescription();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3711);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3711, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 3711, 3.4028235E38F, 5391.62F, 3711, true, lightSourceArray0, (float[][]) null, "J*.yg0FOY9 ;R~/I+@", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation(0.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setMovable(true);
      homeLight1.setHeight(0.0F);
      homeLight1.getStaircaseCutOutShape();
      homeLight0.setAngle(0.0F);
      homeLight0.getNameXOffset();
      homeLight1.getName();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[3] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      bigDecimal0.setScale(13);
      homeLight1.isBottomRightPointAt((-1.0F), 525.72F, (-1040.273F));
      homeLight1.setHeight(0.64712363F);
      homeLight1.getStaircaseCutOutShape();
      homeLight1.setAngle(3700);
      homeLight0.getColor();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      Float float1 = new Float(0.0F);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigDecimal bigDecimal0 = new BigDecimal(0);
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation((-650.33F));
      homeLight0.setX(0.0F);
      homeLight0.getPlanIcon();
      homeLight0.setY(35.8F);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      homePieceOfFurniture0.setAngle(0.0F);
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(3700, 4246.75F, 5391.62F, 3700, float0);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 4246.75F, 0.0F, true, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", true, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setMovable(false);
      homeLight1.isTopRightPointAt((-650.33F), (-650.33F), 0.0F);
      homeLight1.setElevation((-1040.273F));
      homeLight1.isBackFaceShown();
      HomeLight homeLight2 = new HomeLight(homeLight0);
      homeLight2.getTexture();
      homeLight1.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation(0.0F);
      homeLight0.getDepth();
      homeLight0.setDescription((String) null);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation(4730.388F);
      homeLight0.setVisible(false);
      homeLight0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 4246.75F, 2344, float0);
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float(122.7);
      LightSource lightSource1 = new LightSource((-4536.1626F), 0.0F, 5391.62F, 2344, float1);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource2;
      Float float2 = new Float(4246.75F);
      LightSource lightSource3 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float2);
      lightSourceArray0[3] = lightSource3;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getValueAddedTax();
      homeLight1.setElevation((-1040.273F));
      Integer integer0 = new Integer(3700);
      homeLight1.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setMovable(true);
      homeLight0.isPointAt(752.7526F, 0.0F, 0.0F);
      homeLight0.setHeight(3062.0469F);
      homeLight0.getStaircaseCutOutShape();
      homeLight1.setAngle(524.0F);
      homeLight1.setLevel((Level) null);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.getPrice();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation(83.4497F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setMovable(true);
      homeLight0.setHeight(823.13F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.setAngle((-650.33F));
      homeLight0.setNameXOffset(5391.62F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float((-1285.3262F));
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), (-1285.3262F), 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), (-1285.3262F), 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      bigDecimal0.setScale(13);
      homeLight1.setName("RNWuJ=(K7g@v\t[p'");
      homeLight1.setElevation(3700);
      homeLight1.containsPoint((-1.0F), 3700.0F, 525.72F);
      homeLight0.setX(3700);
      homeLight0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("rNK4(1w2.#(f!8{L", "rNK4(1w2.#(f!8{L", "rNK4(1w2.#(f!8{L", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "rNK4(1w2.#(f!8{L", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setDescription("rNK4(1w2.#(f!8{L");
      homeLight0.setNameVisible(true);
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.NAME;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      homeLight0.getNameStyle();
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3711);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3711, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 3711, 3.4028235E38F, 5391.62F, 3711, true, lightSourceArray0, (float[][]) null, "J*.yg0FOY9 ;R~/I+@", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation(0.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setMovable(true);
      homeLight1.setHeight(0.0F);
      homeLight1.getStaircaseCutOutShape();
      homeLight0.setAngle(0.0F);
      homeLight0.isResizable();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      LightSource[] lightSourceArray0 = new LightSource[4];
      LightSource lightSource0 = new LightSource(2.0F, 2.0F, 2.0F, 3051);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1.0F), (-1.0F), (-6.5F), 2146537612);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(2146537612, 0.3926991F, 2146537612, 3051);
      lightSourceArray0[2] = lightSource2;
      Float float0 = new Float((float) 2439);
      LightSource lightSource3 = new LightSource((-378.1F), 0.0F, (-6.5F), 2439, float0);
      lightSourceArray0[3] = lightSource3;
      float[][] floatArray0 = new float[6][5];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (float) 2439;
      floatArray1[1] = (-1.0F);
      floatArray1[2] = (float) 3051;
      floatArray1[3] = (float) 3051;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.3926991F;
      floatArray2[2] = (float) 3051;
      floatArray2[3] = 0.3926991F;
      floatArray2[4] = (-378.1F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      floatArray3[0] = (float) 2146537612;
      floatArray3[1] = (-378.1F);
      floatArray3[2] = (float) 2146537612;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      floatArray4[0] = (float) 2439;
      floatArray4[1] = (float) 2146537612;
      floatArray4[2] = (float) 2439;
      floatArray4[3] = 2.0F;
      floatArray4[4] = (-6.5F);
      floatArray4[5] = (-2768.3F);
      floatArray4[6] = 464.0308F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[1];
      floatArray5[0] = 464.0308F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[7];
      floatArray6[0] = (-378.1F);
      floatArray6[1] = 0.0F;
      floatArray6[2] = 0.3926991F;
      floatArray6[3] = (-2768.3F);
      floatArray6[4] = (-1.0F);
      floatArray6[5] = (float) 2439;
      floatArray6[6] = (-2768.3F);
      floatArray0[5] = floatArray6;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight(":(P<w3Mbuo]O7XK", ":(P<w3Mbuo]O7XK", "y@W[", resourceURLContent0, resourceURLContent0, (-378.1F), (-378.1F), 464.0308F, 2.0F, true, lightSourceArray0, floatArray0, ":(P<w3Mbuo]O7XK", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      homePieceOfFurniture0.getPrice();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, true, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.getColor();
      homeLight0.setNameYOffset(4730.388F);
      homeLight0.getNameAngle();
      homeLight0.setDescription("NNWuJ=(K7g@v\t[p'");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("rNK4(1w2.#(f!8{dL", "rNK4(1w2.#(f!8{dL", "rNK4(1w2.#(f!8{dL", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, true, lightSourceArray0, (float[][]) null, "rNK4(1w2.#(f!8{dL", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      homePieceOfFurniture0.containsPoint(611.72F, 4730.388F, 4730.388F);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(3700, 4246.75F, 5391.62F, 3700, float0);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.intersectsRectangle(3.4028235E38F, 0.0F, 3.4028235E38F, 3700);
      homeLight1.setMovable(true);
      homeLight1.isTopRightPointAt((-650.33F), (-650.33F), 0.0F);
      homeLight1.setElevation((-1040.273F));
      homeLight0.getNameXOffset();
      HomePieceOfFurniture.SortableProperty.values();
      homeLight0.setDescription((String) null);
      homeLight1.clone();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      BigDecimal bigDecimal0 = new BigDecimal((-2144186572));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("[9,[9_51,dQ", "NAME_ANGLE", "!|6\"c}", temporaryURLContent0, temporaryURLContent0, (-805.8F), 0, 0.0F, 0, false, lightSourceArray0, (float[][]) null, "", true, (BigDecimal) null, (BigDecimal) null);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("4kyt6YrbR10");
      catalogLight0.setCategory(furnitureCategory0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      CatalogTexture catalogTexture0 = new CatalogTexture(".'@<)&D", temporaryURLContent0, 0.3323729F, 0);
      TexturesCategory texturesCategory0 = new TexturesCategory("");
      catalogTexture0.setCategory(texturesCategory0);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeLight0.setAngle(0.0F);
      homeLight0.setLevel((Level) null);
      homeLight1.clone();
      homeLight1.getPrice();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[10];
      Float float0 = new Float(122.7);
      Float float1 = new Float(473.68286F);
      BigDecimal bigDecimal0 = new BigDecimal(15);
      CatalogLight catalogLight0 = new CatalogLight("VALUE_ADDED_TAX_PERCENTAGE", "", "VALUE_ADDED_TAX_PERCENTAGE", temporaryURLContent0, temporaryURLContent0, 0.0F, 473.68286F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setHeight(3062.0469F);
      homeLight0.getStaircaseCutOutShape();
      homeLight1.setAngle(473.68286F);
      homeLight0.isBottomLeftPointAt(0.0F, 473.68286F, 15);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.clone();
      Float float2 = new Float(122.7);
      Level level0 = new Level("", 3062.0469F, 15, 0.0F);
      homeLight0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopLeftPointAt(1844.2783F, 4730.388F, 4730.388F);
      homeLight0.isPointAt(4730.388F, (-181.7248F), (-181.7248F));
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.TEXTURE;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 4246.75F, 2344, float0);
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float(122.7);
      LightSource lightSource1 = new LightSource((-4536.1626F), 0.0F, 5391.62F, 2344, float1);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource2;
      Float float2 = new Float(122.7);
      LightSource lightSource3 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float2);
      lightSourceArray0[3] = lightSource3;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation((-1040.273F));
      homeLight0.getX();
      homeLight1.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((-630.512F));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "pOgw:QY", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, (-630.512F), (-630.512F), (-630.512F), (-630.512F), false, lightSourceArray0, (float[][]) null, "pOgw:QY", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle((-630.512F));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((double) 0.0F);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      Float float1 = new Float((float) 0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      BigDecimal bigDecimal2 = new BigDecimal(1L);
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.BackgroundImage", "com.eteks.sweethome3d.model.BackgroundImage", "com.eteks.sweethome3d.model.BackgroundImage", temporaryURLContent0, temporaryURLContent0, 0.3084497F, 2.0F, 187.23666F, 680.75F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.BackgroundImage", true, bigDecimal0, bigDecimal2);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle(0.3084497F);
      homeLight1.isBottomLeftPointAt(187.23666F, 1777.137F, 2668.3652F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Float float0 = new Float((double) 0.6248775F);
      LightSource lightSource0 = new LightSource((-805.8F), (-805.8F), 0.6248775F, (-2573));
      Float float1 = new Float((-163.05F));
      BigDecimal bigDecimal0 = new BigDecimal(2145803495);
      LightSource[] lightSourceArray0 = new LightSource[3];
      lightSourceArray0[0] = lightSource0;
      lightSourceArray0[1] = lightSource0;
      lightSourceArray0[2] = lightSource0;
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, temporaryURLContent0, temporaryURLContent0, 1358.2037F, (-163.05F), 677.6F, 0.0F, false, lightSourceArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getStaircaseCutOutShape();
      homeLight1.setAngle(2721.0F);
      homeLight0.getNameXOffset();
      HomeLight homeLight2 = new HomeLight(homeLight0);
      homeLight1.getName();
      homeLight1.isTexturable();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal((double) (-5));
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setNameVisible(true);
      homeLight0.clone();
      homeLight0.isBottomLeftPointAt((-5), (-5), 1032.0255F);
      homeLight1.setName("p ?=Wx&[j2LNr");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 4246.75F, 2344, float0);
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float(122.7);
      LightSource lightSource1 = new LightSource(4246.75F, 0.0F, 0.0F, 2344);
      lightSourceArray0[3] = lightSource1;
      LightSource lightSource2 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource2;
      Float float2 = new Float((double) 2344);
      LightSource lightSource3 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float2);
      lightSourceArray0[3] = lightSource3;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation((-1040.273F));
      homeLight1.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      Float float1 = new Float((double) (-806.0515F));
      BigDecimal bigDecimal0 = new BigDecimal((double) (-5));
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-806.0515F), 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setWidth(0.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setHeight(0.0F);
      homeLight1.setName("RNWuJ=(K7g@v\t[p'");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal((-13));
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getLevel();
      homeLight0.setShininess((Float) null);
      homeLight0.getShininess();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 996.0F, 996.0F, 996.0F, 996.0F, true, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Level level0 = new Level("RNWuJ=(K7g@v\t[p'", (-13), 996.0F, (-13));
      homeLight0.move(996.0F, 2546.919F);
      homeLight0.setShininess((Float) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      BigDecimal bigDecimal0 = new BigDecimal((-2144186572));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("ELEVATION", "ELEVATION", "}Wt%3*_{E0onfCE", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "[9,[9_51,dQ", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal1.toBigIntegerExact();
      homeLight0.isTopLeftPointAt(0, 0.0F, 0);
      HomeLight homeLight1 = homeLight0.clone();
      CatalogTexture catalogTexture0 = new CatalogTexture("HNq[}}'9z", temporaryURLContent0, 0.0F, 3.4028235E38F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeLight0.setTexture(homeTexture0);
      homeLight1.setModelMirrored(true);
      homeLight0.setHeight(0);
      homeLight0.setX((-1.0F));
      homeLight0.isNameVisible();
      homeLight0.getShininess();
      homeLight1.getLevel();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[4];
      LightSource lightSource0 = new LightSource(206.65924F, (-1950.3734F), 3700, 3700);
      Float float0 = new Float(0.0F);
      BigDecimal bigDecimal0 = new BigDecimal((-2144186572));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      CatalogTexture catalogTexture0 = new CatalogTexture("?yXd~", (Content) null, (-4647.46F), 369.635F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeTexture0.getImage();
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(1732.8336F, 4071.8F, 167.95F, 1.0F, (-35.86F));
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1036.211F), (-35.86F), 0.0F, (-4647.46F), 0);
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(369.635F, 0.0F, 1.0F, 0.0F, (-4647.46F));
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(4071.8F, 3700, (-811.01F), 1.0F, (-1.0F));
      sashArray0[3] = sash3;
      Sash sash4 = new Sash((-3915.7F), 1.0F, (-1628.0F), 817.0F, 0);
      sashArray0[4] = sash4;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("NAME_X_OFFSET", "Y", "Y", (Content) null, (Content) null, 1814.1758F, 3700.0F, 1.0F, 817.0F, true, 6689.3784F, (-1950.3734F), sashArray0, (float[][]) null, "NAME_X_OFFSET", false, bigDecimal0, bigDecimal1);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getIcon();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("[NWuJ=(K7g@v\t[p'", "pOgw:QY", "[NWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "pOgw:QY", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      homeLight0.getColor();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      BigDecimal bigDecimal0 = new BigDecimal((-2144186572));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("ELEVATION", "ELEVATION", "NAME_ANGLE", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "[9,[9_51,dQ", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal1.toBigIntegerExact();
      homeLight0.isTopLeftPointAt(0, 0.0F, 0);
      HomeLight homeLight1 = homeLight0.clone();
      CatalogTexture catalogTexture0 = new CatalogTexture("HNq[}}'9z", temporaryURLContent0, 0.0F, 3.4028235E38F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeLight0.setTexture(homeTexture0);
      homeLight0.setModelMirrored(true);
      homeLight0.setHeight((-1.0F));
      homeLight1.setX(0.31243876F);
      homeLight0.getTexture();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(3700, 4246.75F, 5391.62F, 3700, float0);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setMovable(true);
      homeLight1.isTopRightPointAt((-650.33F), (-650.33F), 0.0F);
      bigDecimal0.toBigIntegerExact();
      homeLight1.setElevation((-1040.273F));
      homeLight1.isBackFaceShown();
      HomeLight homeLight2 = new HomeLight(homeLight0);
      homeLight2.setNameAngle(5391.62F);
      homeLight2.getTexture();
      homeLight1.setTexture((HomeTexture) null);
      homeLight1.setDescription("-95");
      homeLight2.move(3700, 2.4956195F);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      Float float1 = new Float(0.0F);
      BigDecimal bigDecimal0 = new BigDecimal((double) (-5));
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation((-1040.273F));
      homeLight1.setHeight(0.0F);
      homeLight1.setName("RNWuJ=(K7g@v\t[p'");
      homeLight1.getLevel();
      homeLight1.getGroundElevation();
      homeLight1.getCatalogId();
      homeLight1.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[8];
      LightSource lightSource0 = new LightSource(1826.4119F, 1826.4119F, 561.6434F, 769);
      lightSourceArray0[0] = lightSource0;
      Float float0 = new Float((float) 769);
      LightSource lightSource1 = new LightSource(1826.4119F, 1826.4119F, 254.73F, (-1), float0);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource((-223.931F), 561.6434F, 0.5F, 3);
      lightSourceArray0[2] = lightSource2;
      Float float1 = new Float(1.6785772F);
      LightSource lightSource3 = new LightSource(2.14286541E9F, 2.14286541E9F, 3.4028235E38F, (-2085), float1);
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(2.0F, 2004.15F, 769, 1073741824, float1);
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(2004.15F, 1981.3F, 2.0F, 33, float1);
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(1981.3F, 561.6434F, 1073741824, (-2085));
      lightSourceArray0[6] = lightSource6;
      LightSource lightSource7 = new LightSource(0.0F, 561.6434F, (-650.33F), 769);
      lightSourceArray0[7] = lightSource7;
      BigDecimal bigDecimal0 = new BigDecimal(401.146276);
      CatalogLight catalogLight0 = new CatalogLight("", (String) null, (String) null, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 561.6434F, 0.5F, 561.6434F, 1826.4119F, false, lightSourceArray0, "Y", (float[][]) null, "", false, false, true, bigDecimal0, bigDecimal0, "jar:");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isDeformable();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[6];
      Float float0 = new Float(473.68286F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("VALUE_ADDED_TAX_PERCENTA5E", "VALUE_ADDED_TAX_PERCENTA5E", "VALUE_ADDED_TAX_PERCENTA5E", temporaryURLContent0, temporaryURLContent0, 0.0F, 473.68286F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "VALUE_ADDED_TAX_PERCENTA5E", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      CatalogLight catalogLight1 = new CatalogLight("", "VALUE_ADDED_TAX_PERCENTA5E", "", temporaryURLContent0, temporaryURLContent0, 180.20316F, 3700.0F, 173.02267F, 173.02267F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      catalogLight0.compareTo((CatalogPieceOfFurniture) catalogLight1);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle(473.68286F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight1.setModelMirrored(true);
      homeLight1.getColor();
      homeLight1.setAngle((-2135.0F));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(3700, 4246.75F, 5391.62F, 3700, float0);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setMovable(true);
      bigDecimal0.toBigIntegerExact();
      homeLight1.setElevation((-1040.273F));
      homeLight1.isBackFaceShown();
      HomeLight homeLight2 = new HomeLight(homeLight0);
      homeLight2.setNameAngle(5391.62F);
      Float float2 = new Float(1.0F);
      homeLight0.setShininess(float2);
      homeLight2.getTexture();
      homeLight1.setDescription("-95");
      homeLight2.move(3700, 2.4956195F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-806.2796F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float((-806.2796F));
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-806.2796F), 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      bigDecimal1.setScale(0);
      BigDecimal bigDecimal2 = new BigDecimal(3700);
      HomeLight homeLight2 = new HomeLight(homeLight0);
      homeLight2.clone();
      homeLight1.getDepth();
      homeLight0.setDescription("RNWuJ=(K7g@v\t[p'");
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      homePieceOfFurniture0.getTexture();
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      bigDecimal0.setScale(13);
      homeLight1.setName("RNWuJ=(K7g@v\t[p'");
      homeLight1.containsPoint((-1.0F), 3700.0F, 525.72F);
      homeLight1.getAngle();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 4246.75F, 2344, float0);
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float(122.7);
      LightSource lightSource1 = new LightSource((-4536.1626F), 0.0F, 5391.62F, 2344, float1);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource2;
      Float float2 = new Float(4246.75F);
      LightSource lightSource3 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float2);
      lightSourceArray0[3] = lightSource3;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      homeLight0.getValueAddedTax();
      homeLight0.containsPoint(0.0F, 0.0F, 0.0F);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.getAngle();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[6];
      Float float0 = new Float(0.0F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("VAaUE_ADDED_TAX_PERCENTA5E", "VAaUE_ADDED_TAX_PERCENTA5E", "VAaUE_ADDED_TAX_PERCENTA5E", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "VAaUE_ADDED_TAX_PERCENTA5E", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setModelMirrored(true);
      homeLight0.setNameXOffset((-1946.0059F));
      homeLight0.getColor();
      homeLight0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v[p'", "NNWuJ=(K7g@v[p'", "NNWuJ=(K7g@v[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, true, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v[p'", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setDepth(4730.388F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.intersectsRectangle(5430.388F, 5430.388F, 5430.388F, 5430.388F);
      homeLight0.isPointAt(4730.388F, (-181.7248F), (-181.7248F));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Mtq]m<I9k7Q+$");
      LightSource[] lightSourceArray0 = new LightSource[4];
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float0 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float0);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation((-1040.273F));
      homeLight0.getDepth();
      homeLight0.setVisible(false);
      homeLight0.isNameCenterPointAt((-1228.7092F), 4246.75F, (-1040.273F));
      homeLight1.isBottomLeftPointAt((-1784.0F), 637.3729F, (-1784.0F));
      homeLight0.getDescription();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal((-13));
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Level level0 = new Level("RNWuJ=(K7g@v\t[p'", (-13), 0.0F, (-13));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("RNWuJ=(K7g@v\t[p'", propertyChangeListener0);
      homeLight0.removePropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.setShininess((Float) null);
      Level level1 = level0.clone();
      homeLight0.isAtLevel(level1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float(0.0F);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "pOgw:QY", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "pOgw:QY", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setNameVisible(false);
      homeLight1.setNameXOffset(0.0F);
      homeLight1.setAngle(0.0F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float((-1285.3262F));
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(3700);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), (-1285.3262F), 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      bigDecimal1.setScale(3700);
      homeLight1.setName("");
      homeLight1.setElevation(3700);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.containsPoint((-650.33F), 0.0F, (-269.187F));
      homeLight1.setX(0.0F);
      homeLight0.isMovable();
      homeLight0.move((-650.33F), 3700.0F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getLevel();
      homeLight0.setNameVisible(false);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt((-650.33F), (-650.33F), (-805.8F));
      homeLight1.setElevation((-650.33F));
      homeLight0.getNameXOffset();
      homeLight0.setAngle((-650.33F));
      homeLight0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(4246.75F);
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, 4246.75F, 0, 4246.75F, 5.599918F, true, lightSourceArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setName((String) null);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation((-1149.9543F));
      homeLight0.getDepth();
      homeLight0.setVisible(false);
      Random.setNextRandom(1);
      homeLight0.isModelMirrored();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(0.0F, (-805.8F), (-805.8F), 3685);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float((double) (-805.8F));
      BigDecimal bigDecimal0 = new BigDecimal((-2562));
      CatalogLight catalogLight0 = new CatalogLight("%mumFQh", "%mumFQh", "", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-3413.5F), (-805.8F), (-1513.0F), 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.clone();
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight1.setMovable(false);
      homeLight2.setNameVisible(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      homeLight1.clone();
      homeLight2.setX((-1513.0F));
      homeLight0.getPlanIcon();
      HomeLight homeLight3 = new HomeLight(catalogLight0);
      homeLight3.setY(3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      LightSource lightSource0 = new LightSource(3.4028235E38F, 3.4028235E38F, 4246.75F, 2344, float0);
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float(122.7);
      LightSource lightSource1 = new LightSource((-4536.1626F), 0.0F, 2344, 2344, float1);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(2344, 1.2421489F, (-805.8F), 3700);
      lightSourceArray0[0] = lightSource2;
      Float float2 = new Float(4246.75F);
      LightSource lightSource3 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float2);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal(122.7);
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(Y7g@v\t[p'", "", "RNWuJ=(Y7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 3.4028235E38F, (-805.8F), 4246.75F, 3.4028235E38F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      homeLight0.getValueAddedTax();
      homeLight0.containsPoint(1.2421489F, 0.0F, 0.0F);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.getAngle();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      Float float1 = new Float(4246.75F);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      BigDecimal.valueOf((long) 0, 713);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      furnitureCategory0.getFurniture();
      catalogLight0.setCategory(furnitureCategory0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt((-698.5325F), (-698.5325F), (-805.8F));
      homeLight0.setY(4246.75F);
      homeLight1.setElevation((-1040.273F));
      homeLight0.getNameXOffset();
      homeLight1.isBackFaceShown();
      homeLight0.isNameCenterPointAt((-1040.273F), 0, 4246.75F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$14", "com.eteks.sweethome3d.model.HomePieceOfFurniture$14", "com.eteks.sweethome3d.model.HomePieceOfFurniture$14", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$14", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getLevel();
      homeLight0.isAtLevel((Level) null);
      homeLight0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      BigDecimal bigDecimal0 = new BigDecimal(2136571098);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float((double) 446.5721F);
      LightSource lightSource0 = new LightSource((-1174.0F), (-3835.573F), (-2215.662F), 2136571098, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.0F, (-2215.662F), (-1174.0F), (-3417), float0);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource((-2133.253F), (-13), 937.2329F, 2136571098, float0);
      lightSourceArray0[2] = lightSource2;
      CatalogLight catalogLight0 = new CatalogLight("5", "RN~KWuJ=(K7g@v\t[p'", "RN~KWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 446.5721F, (-4431.324F), (-13), 0.0F, false, lightSourceArray0, (float[][]) null, "?1LoIRRD\"Z!*sp#", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getLevel();
      Float float1 = new Float((double) (-3835.573F));
      homeLight0.setShininess(float1);
      homeLight0.getShininess();
      homeLight0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float((double) (-805.8F));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal1.toBigIntegerExact();
      homeLight0.isTopLeftPointAt(2.0F, 0.0F, 2.0F);
      HomeLight homeLight1 = homeLight0.clone();
      CatalogTexture catalogTexture0 = new CatalogTexture("RNWuJ=(K7g@v\t[p'", temporaryURLContent0, 1.0F, 1499.7828F);
      TexturesCategory texturesCategory0 = new TexturesCategory("");
      catalogTexture0.setCategory(texturesCategory0);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeLight0.setAngle(1.0F);
      homeLight0.containsPoint((-1.0F), 0.0F, 0.18659133F);
      HomeLight homeLight2 = new HomeLight(homeLight0);
      HomeLight homeLight3 = homeLight0.clone();
      homeLight3.getAngle();
      homeLight1.isBottomRightPointAt((-2410.0F), 1.0F, 2.0F);
      homeLight3.getCurrency();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      Float float1 = new Float((double) (-806.0515F));
      BigDecimal bigDecimal0 = new BigDecimal((double) (-5));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=Wi,f=J";
      stringArray0[1] = "=Wi,f=J";
      stringArray0[2] = "RNWuJ=(K7g@v\t[p'";
      stringArray0[3] = "B";
      stringArray0[4] = "=Wi,f=J";
      Long long0 = new Long((-5));
      Float float2 = new Float((-123.815F));
      URLContent uRLContent0 = new URLContent((URL) null);
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "=Wi,f=J", "B", stringArray0, long0, float2, temporaryURLContent0, temporaryURLContent0, uRLContent0, (-806.0515F), (-123.815F), 2115.848F, 0.3926991F, true, lightSourceArray0, "com.eteks.sweethome3d.model.CatalogLight", (float[][]) null, "com.eteks.sweethome3d.model.CatalogLight", true, true, false, bigDecimal0, bigDecimal0, "pU");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setHeight((-123.815F));
      homeLight0.getLevel();
      homeLight0.getGroundElevation();
      // Undeclared exception!
      try { 
        homeLight0.setShininess(float2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      Float float1 = new Float(4246.75F);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      catalogLight0.setCategory(furnitureCategory0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt((-698.5325F), (-698.5325F), (-805.8F));
      homeLight1.setElevation((-1040.273F));
      homeLight0.getNameXOffset();
      homeLight1.setNameYOffset(0.0F);
      homeLight1.isModelMirrored();
      Integer integer0 = new Integer(0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(4730.388F);
      homeLight0.isPointAt(4730.388F, (-181.7248F), (-181.7248F));
      homeLight0.getPoints();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 996.0F, 996.0F, 996.0F, 996.0F, false, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Level level0 = new Level("RNWuJ=(K7g@v\t[p'", (-13), 996.0F, (-13));
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.isAtLevel(level0);
      homeLight0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("ELEVATION", "ELEVATION", "NAME_ANGLE", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "[9,[9_51,dQ", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal1.shortValueExact();
      bigDecimal1.toBigIntegerExact();
      CatalogTexture catalogTexture0 = new CatalogTexture("NAME_ANGLE", temporaryURLContent0, 0.0F, 3.4028235E38F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeLight0.setTexture(homeTexture0);
      homeLight0.setModelMirrored(true);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      homeLight2.isPointAt(156.0F, 3936.1F, 156.0F);
      Level level0 = new Level("{%@;Bim", 893.53265F, 1439.6682F, (-1.0F));
      homeLight1.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("NAME_ANGLE", "B@Xu[?'_.2", "L0J^*Hs%Zv{`", temporaryURLContent0, temporaryURLContent0, 0.0F, 5391.62F, (-1.0F), 5391.62F, true, lightSourceArray0, (float[][]) null, "NAME_ANGLE", true, bigDecimal0, bigDecimal0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      homeLight0.isPointAt((-2123.0F), 1702.9298F, 1702.9298F);
      homeLight1.isDoorOrWindow();
      homeLight2.isNameCenterPointAt((-805.8F), 1.0F, 1702.9298F);
      homeLight1.getColor();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = new BigDecimal((-35));
      CatalogLight catalogLight0 = new CatalogLight("TN`KWuJ=(Kg@v:[|pk", "TN`KWuJ=(Kg@v:[|pk", "TN`KWuJ=(Kg@v:[|pk", temporaryURLContent0, temporaryURLContent0, (-4429.3784F), (-4429.3784F), (-4429.3784F), (-4429.3784F), true, lightSourceArray0, (float[][]) null, "TN`KWuJ=(Kg@v:[|pk", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      Integer.getInteger("");
      CatalogLight catalogLight1 = new CatalogLight("", "", "Y", temporaryURLContent0, temporaryURLContent0, (-35), 653.58453F, 653.58453F, 1946.599F, true, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight1 = new HomeLight(catalogLight1);
      homeLight1.setMovable(false);
      homeLight1.isNameCenterPointAt((-4429.3784F), 653.58453F, 3397.0F);
      homeLight0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setColor((Integer) null);
      homeLight0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setName("");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.setElevation(2082.423F);
      homeLight1.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      Float float1 = new Float((float) 2344);
      BigInteger bigInteger0 = BigInteger.ZERO;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogLight catalogLight0 = new CatalogLight("f", "f", "MYsV;8]+*L2(", temporaryURLContent0, (Content) null, 1894.3793F, (-1040.273F), 0.0F, (-2160.727F), true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight0.clone();
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      homeLight2.isBottomRightPointAt(660.74567F, (-2160.727F), (-4750.0F));
      homeLight1.getCurrency();
      homeLight1.getModel();
      homeLight2.isNameCenterPointAt((-134.6F), (-4750.0F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      LightSource lightSource0 = new LightSource(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 2344, float0);
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float(122.7);
      LightSource lightSource1 = new LightSource((-4536.0F), 0.0F, 2344, 2344, float1);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(2344, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource2;
      Float float2 = new Float(3.4028235E38F);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(Y7g@v\t[p'", "", "RNWuJ=(Y7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 3.4028235E38F, (-805.8F), (-805.8F), 3.4028235E38F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getValueAddedTax();
      homeLight0.containsPoint(0.0F, 0.0F, 0.0F);
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      homeLight2.getAngle();
      homeLight1.isBottomRightPointAt((-805.8F), 0.0F, (-805.8F));
      homeLight1.getCurrency();
      homeLight0.getAngle();
      homeLight0.setNameYOffset((-1.0F));
      homeLight1.setName("com.eteks.sweethome3d.model.LightSource");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("[9,[9_51,dQ", "NAME_ANGLE", "!|6\"c}", temporaryURLContent0, temporaryURLContent0, (-805.8F), 0, 0.0F, 0, true, lightSourceArray0, (float[][]) null, "", true, (BigDecimal) null, (BigDecimal) null);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("4kyt6YrbR10");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight0.isPointAt(1850.0F, 1850.0F, 1850.0F);
      homeLight0.isDoorOrWindow();
      homeLight0.isNameCenterPointAt(2101.6F, 1850.0F, 1850.0F);
      homeLight1.getColor();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float((float) 2320);
      LightSource lightSource0 = new LightSource(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 2320, float0);
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float(122.7);
      LightSource lightSource1 = new LightSource((-4536.0F), (-1021.72F), 2320, 2320, float1);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(2320, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource2;
      Float float2 = new Float(3.4028235E38F);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(Y7g@v\t[p'", "", "RNWuJ=(Y7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 3.4028235E38F, (-805.8F), (-805.8F), 3.4028235E38F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getValueAddedTax();
      homeLight0.containsPoint(0.0F, (-1021.72F), 0.0F);
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      homeLight2.getAngle();
      homeLight1.isBottomRightPointAt((-805.8F), (-1021.72F), (-805.8F));
      homeLight1.getCurrency();
      homeLight0.getAngle();
      homeLight0.setNameYOffset((-1.0F));
      homeLight1.setName("com.eteks.sweethome3d.model.LightSource");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation(4730.388F);
      homeLight0.setVisible(false);
      // Undeclared exception!
      try { 
        homeLight0.setWidth((-1053.23F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      BigDecimal bigDecimal0 = new BigDecimal((-2144186572));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("ELEVATION", "ELEVATION", "NAME_ANGLE", temporaryURLContent0, temporaryURLContent0, (-805.8F), (-805.8F), 0, 0.0F, true, lightSourceArray0, (float[][]) null, "[9,[9_51,dQ", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal1.toBigIntegerExact();
      homeLight0.isTopLeftPointAt(0, 0.0F, 0);
      HomeLight homeLight1 = homeLight0.clone();
      CatalogTexture catalogTexture0 = new CatalogTexture("HNq[}}'9z", temporaryURLContent0, (-805.8F), 3.4028235E38F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeLight0.setTexture(homeTexture0);
      homeLight1.setModelMirrored(true);
      homeLight0.setHeight(1.0F);
      homeLight0.setX((-1.0F));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[17];
      Float float0 = new Float(0.0F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("VALUE_ADDED_TAX_PERCENTA5E", "VALUE_ADDED_TAX_PERCENTA5E", "VALUE_ADDED_TAX_PERCENTA5E", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "VALUE_ADDED_TAX_PERCENTA5E", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      TextStyle textStyle0 = new TextStyle(0.0F, true, false);
      homeLight0.setNameStyle(textStyle0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle(0.0F);
      Level level0 = new Level("VALUE_ADDED_TAX_PERCENTA5E", 0.0F, 0.0F, 0.0F);
      homeLight0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setMovable(true);
      homeLight1.setHeight(0.0F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = "RNWuJ=(K7g@v\\t[p'";
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal((-13));
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Integer integer0 = new Integer((-13));
      homeLight0.setColor(integer0);
      // Undeclared exception!
      try { 
        homeLight0.setHeight(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float((double) (-805.8F));
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(3700);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal0.add(bigDecimal1);
      homeLight0.isBottomLeftPointAt(0.3926991F, 0.0F, (-2143.0F));
      homeLight0.getX();
      Sash[] sashArray0 = new Sash[6];
      Sash sash0 = new Sash(776.51F, (-805.8F), 0.0F, 779.832F, 2341.339F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(2632.936F, (-805.8F), 2632.936F, 3.4028235E38F, 2632.936F);
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-2143.0F), 2.0F, 2632.936F, 3700, 779.832F);
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(3.4028235E38F, 2341.339F, 3.4028235E38F, 3.4028235E38F, (-1.0F));
      sashArray0[3] = sash3;
      Sash sash4 = new Sash((-659.43F), 0.0F, 0.0F, 2.0F, 745.045F);
      sashArray0[4] = sash4;
      Sash sash5 = new Sash((-2143.0F), (-1.0F), 1274.0F, 2504.5F, (-300.1552F));
      sashArray0[5] = sash5;
      Integer integer0 = new Integer(3700);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("NAME", temporaryURLContent0, temporaryURLContent0, (-805.8F), 2341.339F, (-1.0F), 776.51F, false, 1133.55F, 0.0F, sashArray0, integer0, (float[][]) null, false, (-659.43F), false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow1.clone();
      homePieceOfFurniture0.getLevel();
      homeLight0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      Float.min(5391.62F, 0.0F);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      Integer integer0 = new Integer(3700);
      homeLight0.setColor(integer0);
      TextStyle textStyle0 = new TextStyle(5391.62F);
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight2.setNameStyle(textStyle0);
      homeLight2.getPoints();
      homeLight0.isTopRightPointAt(1850.0F, 1740.1F, 3700);
      homeLight0.getLevel();
      homeLight2.isAtLevel((Level) null);
      homeLight1.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, true, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.isBottomLeftPointAt(4730.388F, 4730.388F, 4730.388F);
      homeLight0.getGroundElevation();
      HomePieceOfFurniture.SortableProperty.values();
      homeLight0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(0.0F);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("NAME_ANGLE", "B@Xu[?'_.2", "L0J^*Hs%Zv{`", temporaryURLContent0, temporaryURLContent0, 0.0F, 5391.62F, (-1.0F), 5391.62F, true, lightSourceArray0, (float[][]) null, "NAME_ANGLE", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight1.setPower((-1949.4669F));
      HomeLight homeLight2 = new HomeLight(homeLight1);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("L0J^*Hs%Zv{`");
      HomeLight homeLight3 = new HomeLight(homeLight0);
      HomeLight homeLight4 = new HomeLight(homeLight0);
      homeLight2.isPointAt((-1.0F), 1.0F, 283.004F);
      homeLight0.isNameCenterPointAt(0, 0.0F, (-1.0F));
      homeLight0.getColor();
      homeLight4.isTexturable();
      homeLight1.isPointAt(0.0F, 0.0F, 0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 4246.75F, (-805.8F), 3711);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3711, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 3711, 3.4028235E38F, 5391.62F, 3711, true, lightSourceArray0, (float[][]) null, "J*.yg0FOY9 ;R~/I+@", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation((-805.8F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setMovable(true);
      homeLight1.setHeight(0.0F);
      homeLight1.getStaircaseCutOutShape();
      homeLight0.setAngle(0);
      homeLight0.getNameXOffset();
      homeLight1.getName();
      homeLight1.getWidth();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Mtq]m<I9k7Q+$");
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation((-1040.273F));
      homeLight0.getDepth();
      homeLight0.setVisible(false);
      homeLight0.isNameCenterPointAt((-1228.7092F), 4246.75F, (-1040.273F));
      homeLight1.isBottomLeftPointAt((-1784.0F), 637.3729F, (-1784.0F));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight1.clone();
      HomeLight homeLight3 = new HomeLight(homeLight2);
      homeLight3.setElevation(823.13F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      Float float1 = new Float(4246.75F);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation((-650.33F));
      homeLight0.getNameXOffset();
      homeLight0.setAngle((-650.33F));
      homeLight1.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, true, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopRightPointAt(4536.2744F, 4536.2744F, 4536.2744F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(1714.918F);
      homeLight0.setElevation(4730.388F);
      homeLight0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation(83.4497F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setMovable(true);
      homeLight1.setHeight(0.0F);
      homeLight1.getStaircaseCutOutShape();
      homeLight0.setAngle(524.0F);
      homeLight1.setNameXOffset(0.0F);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(206.65924F, (-1950.3734F), 3700, 3700);
      Float float1 = new Float(0.0F);
      LightSource lightSource1 = new LightSource(0.0F, 0.0F, (-1950.3734F), 3700, float0);
      BigDecimal bigDecimal0 = new BigDecimal((-2144186572));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "N}!H(rkTWMDlHlg8Qd", "", temporaryURLContent0, temporaryURLContent0, 3700, 0, (-805.8F), (-805.8F), false, lightSourceArray0, (float[][]) null, "NAME_ANGLE", true, bigDecimal0, bigDecimal1);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogLight0.setCategory(furnitureCategory0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.setDepth(3700);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.getDepth();
      homeLight0.setDescription("NAME_ANGLE");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(3700, 4246.75F, 5391.62F, 3700, float0);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setMovable(false);
      bigDecimal0.toBigIntegerExact();
      homeLight1.setElevation((-1040.273F));
      homeLight1.isBackFaceShown();
      HomeLight homeLight2 = new HomeLight(homeLight0);
      homeLight2.setNameAngle(5391.62F);
      homeLight2.getTexture();
      homeLight1.setDescription("-95");
      homeLight2.move(3700, 2.4956195F);
      homeLight2.getShininess();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((double) 0.0F);
      CatalogLight catalogLight0 = new CatalogLight("NAME_VISIBLE", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 2344.0F, 0.0F, 1309.1F, (-1.0F), true, lightSourceArray0, (float[][]) null, "", true, (BigDecimal) null, (BigDecimal) null);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      HomeLight homeLight2 = homeLight0.clone();
      HomeLight homeLight3 = new HomeLight(homeLight0);
      homeLight1.setVisible(false);
      homeLight0.isNameCenterPointAt((-653.95F), (-140.56F), 0.0F);
      homeLight1.getColor();
      homeLight0.clone();
      homeLight2.intersectsRectangle((-653.95F), 1130.83F, 0.5F, (-782.78284F));
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 4246.75F, (-805.8F), 3711);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3711, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 3711, 3.4028235E38F, 5391.62F, 3711, true, lightSourceArray0, (float[][]) null, "J*.yg0FOY9 ;R~/I+@", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation((-805.8F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setMovable(true);
      homeLight1.setHeight(0.0F);
      homeLight1.getStaircaseCutOutShape();
      homeLight0.setAngle(0);
      homeLight0.getNameXOffset();
      homeLight1.getName();
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, true, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(4730.388F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setModelMirrored(false);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.getColor();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float(0.0F);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getStaircaseCutOutShape();
      homeLight1.setAngle(0.0F);
      homeLight0.getNameXOffset();
      HomeLight homeLight2 = new HomeLight(homeLight0);
      homeLight2.containsPoint(0.0F, 0.0F, 289.33F);
      homeLight2.getName();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.18809766232016);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.shortValueExact();
      bigDecimal0.toBigIntegerExact();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "[9,[9_5c,dQ";
      stringArray0[1] = "[9,[9_5c,dQ";
      stringArray0[2] = "NAME_ANGE";
      Long long0 = new Long((short)1);
      Float float1 = new Float(0.3904719055719319);
      CatalogLight catalogLight0 = new CatalogLight("ELEVATION", "NAME_ANGE", "ELEVATION", "ELEVATION", stringArray0, long0, float1, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (short)1, 0.0F, 0.0F, (-2056.1677F), false, lightSourceArray0, "6yN", (float[][]) null, (String) null, true, true, false, bigDecimal0, bigDecimal0, "");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      homePieceOfFurniture0.getStaircaseCutOutShape();
      homePieceOfFurniture0.isBackFaceShown();
      homePieceOfFurniture0.isBottomRightPointAt((-2056.1677F), (-1.0F), (-1989.8256F));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((double) 0.0F);
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "!|6\"c}", "", temporaryURLContent0, temporaryURLContent0, (-1285.33F), (-1285.33F), 0.0F, (-653.95F), false, lightSourceArray0, (float[][]) null, "&[R?leY~RZ&kM?", false, (BigDecimal) null, (BigDecimal) null);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("RNWuJ=(K7g@v\t[p'");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.setNameVisible(true);
      HomeLight homeLight3 = homeLight0.clone();
      homeLight2.setX(402.4F);
      homeLight2.getPlanIcon();
      homeLight1.setY((-653.95F));
      homeLight3.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("NAME_ANGLE", "B@Xu[?'_.2", "L0J^*Hs%Zv{`", temporaryURLContent0, temporaryURLContent0, 0.0F, 5391.62F, (-1.0F), 5391.62F, true, lightSourceArray0, (float[][]) null, "NAME_ANGLE", true, bigDecimal0, bigDecimal0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      homeLight0.move(327.79F, (-1.0F));
      bigDecimal0.remainder(bigDecimal1);
      homeLight0.isPointAt((-2123.0F), 1702.9298F, 1702.9298F);
      homeLight1.isDoorOrWindow();
      homeLight2.isNameCenterPointAt((-805.8F), 1.0F, 1702.9298F);
      homeLight1.getColor();
      homeLight2.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float((double) (-805.8F));
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, (-2.8137474F), (-805.8F), 4246.8F, (-2.8137474F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setVisible(false);
      homeLight1.setNameAngle(0);
      homeLight0.isBottomRightPointAt(4.8F, 3700, 0.0F);
      homeLight1.isTopRightPointAt(0.0F, 3700, 4246.8F);
      homeLight1.getLevel();
      homeLight1.isAtLevel((Level) null);
      homeLight0.getGroundElevation();
      homeLight0.getTexture();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(4246.75F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(3700);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation(83.4497F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setMovable(true);
      homeLight1.setHeight(0.0F);
      homeLight1.getStaircaseCutOutShape();
      homeLight0.setAngle(524.0F);
      homeLight1.setNameXOffset(0.0F);
      homeLight0.isModelMirrored();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      Float float1 = new Float(3895.62);
      LightSource lightSource0 = new LightSource(2344, 3700, (-805.8F), 2344);
      Float float2 = new Float((double) (-805.8F));
      BigDecimal bigDecimal0 = new BigDecimal(5047);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$6", "", temporaryURLContent0, temporaryURLContent0, 3700, 4246.75F, 4246.75F, 3700, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal1.add(bigDecimal0);
      homeLight0.isBottomLeftPointAt(1.0F, 3700, (-1155.8923F));
      homeLight0.getX();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(119.3455264288503);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("[9,[9_51,dQ", "NAME_ANGLE", "!|6\"c}", temporaryURLContent0, temporaryURLContent0, (-805.8F), 0, 0.0F, 0, true, lightSourceArray0, (float[][]) null, "", true, (BigDecimal) null, (BigDecimal) null);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("4kyt6YrbR10");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight0.setShininess(float0);
      homeLight0.getTexture();
      homeLight1.move((-1714.8F), (-805.8F));
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.getPoints();
      homeLight2.setNameAngle((-1714.8F));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 4246.75F, 2344, float0);
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float(122.7);
      LightSource lightSource1 = new LightSource((-4536.1626F), 0.0F, 2344, 2344, float1);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(2344, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource2;
      Float float2 = new Float(4246.75F);
      LightSource lightSource3 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float2);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(Y7g@v\t[p'", "", "RNWuJ=(Y7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      homeLight0.containsPoint(0.0F, 0.0F, 0.0F);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.getAngle();
      homeLight1.setNameXOffset((-1525.98F));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[3] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      bigDecimal0.setScale(13);
      homeLight1.isBottomRightPointAt((-1.0F), 525.72F, (-1040.273F));
      homeLight1.setName("RNWuJ=(K7g@v\t[p'");
      homeLight1.setElevation(3700);
      homeLight1.isNameCenterPointAt(0.3926991F, (-1040.273F), 2297.546F);
      HomePieceOfFurniture.Property.values();
      homeLight0.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal((double) (-5));
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setNameVisible(true);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight1.getColor();
      homeLight2.isNameVisible();
      homeLight0.getLevel();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      BigDecimal bigDecimal0 = new BigDecimal((-2144186572));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("[9,[9_51,dQ", "NAME_ANGLE", "!|6\"c}", temporaryURLContent0, temporaryURLContent0, (-805.8F), 11, 0.0F, 11, true, lightSourceArray0, (float[][]) null, "", true, (BigDecimal) null, (BigDecimal) null);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("4kyt6YrbR10");
      catalogLight0.setCategory(furnitureCategory0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight2.setDepth(0.0F);
      homeLight1.clone();
      homeLight1.getDepth();
      homeLight1.setDescription("NAME_ANGLE");
      homeLight1.setDescription("!|6\"c}");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("rNK4(1w2.#(f!8{L", "rNK4(1w2.#(f!8{L", "rNK4(1w2.#(f!8{L", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "rNK4(1w2.#(f!8{L", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setDescription("rNK4(1w2.#(f!8{L");
      homeLight0.setNameVisible(true);
      homeLight0.setNameVisible(false);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((double) 0.0F);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      CatalogLight catalogLight0 = new CatalogLight("ELEVATION", "ELEVATION", "NAME_ANGE", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "NAME_ANGE", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal0.shortValueExact();
      HomeLight homeLight1 = homeLight0.clone();
      bigDecimal0.unscaledValue();
      homeLight0.getGroundElevation();
      Float float1 = new Float((double) 0.0F);
      homeLight1.setShininess(float1);
      homeLight1.getShininess();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setShininess((Float) null);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = new BigDecimal(0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "", resourceURLContent0, temporaryURLContent0, 0.0F, 1894.3793F, 0.0F, 1894.3793F, false, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight1.clone();
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      homeLight0.isBottomRightPointAt(0, 1655.84F, (-402.9F));
      homeLight2.clone();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("[9,[9_51,dQ", "NAME_ANGLE", "!|6\"c}", temporaryURLContent0, temporaryURLContent0, 0.0F, 0, 0.0F, 0, true, lightSourceArray0, (float[][]) null, "", false, (BigDecimal) null, (BigDecimal) null);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("4kyt6YrbR10");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = new HomeLight(homeLight1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight3 = new HomeLight(homeLight2);
      homeLight1.clone();
      homeLight3.setX((-2623.2073F));
      homeLight3.getPlanIcon();
      homeLight0.setY(0.0F);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.18809766232016);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CatalogLight catalogLight0 = new CatalogLight(".E_WiaB!6'BNCAF&", ".E_WiaB!6'BNCAF&", ".E_WiaB!6'BNCAF&", temporaryURLContent0, temporaryURLContent0, 745.57F, 0.0F, 0.0F, 1076.1362F, true, lightSourceArray0, (float[][]) null, ".E_WiaB!6'BNCAF&", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal0.toBigIntegerExact();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopLeftPointAt(745.57F, 8, 3508.647F);
      homeLight1.setNameVisible(false);
      MathContext mathContext0 = new MathContext(1591);
      bigDecimal0.plus(mathContext0);
      homeLight1.getLevel();
      Float float1 = new Float(52992.03859497071);
      homeLight1.setShininess(float1);
      homeLight1.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("ja'r", "ja'r", "ja'r", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "ja'r", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.isNameCenterPointAt(4730.388F, 4730.388F, 4730.388F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 0.0F, 3707);
      Float float0 = new Float(0.0F);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getStaircaseCutOutShape();
      homeLight1.setAngle(0.0F);
      homeLight0.getNameXOffset();
      HomeLight homeLight2 = new HomeLight(homeLight0);
      homeLight2.getName();
      homeLight2.getY();
      homeLight2.getPoints();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation((-1040.273F));
      homeLight0.getDepth();
      homeLight0.setVisible(false);
      homeLight0.isNameCenterPointAt((-1228.7092F), 4246.75F, (-1040.273F));
      homeLight1.getModelRotation();
      homeLight1.getModel();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("[9,[9_51,dQ", "NAME_ANGLE", "!|6\"c}", temporaryURLContent0, temporaryURLContent0, (-805.8F), 0, 0.0F, 0, true, lightSourceArray0, (float[][]) null, "", true, (BigDecimal) null, (BigDecimal) null);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("4kyt6YrbR10");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight2.isTopRightPointAt((-1.0F), 1850.0F, 0);
      homeLight2.getLevel();
      homeLight2.isAtLevel((Level) null);
      homeLight0.getGroundElevation();
      homeLight0.getX();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(206.65924F, (-1950.3734F), 3700, 3700);
      Float float1 = new Float(0.0F);
      LightSource lightSource1 = new LightSource(0.0F, 0.0F, (-1950.3734F), 3700, float0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "N}!H(rkTWMDlHlg8Qd", "", temporaryURLContent0, temporaryURLContent0, 3700, 0, (-805.8F), (-805.8F), false, lightSourceArray0, (float[][]) null, "NAME_ANGLE", true, bigDecimal0, bigDecimal1);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogLight0.setCategory(furnitureCategory0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight0.isNameCenterPointAt(3700, (-1036.211F), (-1036.211F));
      homeLight0.isBottomLeftPointAt(0.0F, (-2144186572), 0.0F);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[10];
      Float float0 = new Float(122.7);
      Float float1 = new Float(473.68286F);
      BigDecimal bigDecimal0 = new BigDecimal(15);
      CatalogLight catalogLight0 = new CatalogLight("VALUE_ADDED_TAX_PERCENTAGE", "", "VALUE_ADDED_TAX_PERCENTAGE", temporaryURLContent0, temporaryURLContent0, 0.0F, 473.68286F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      BigDecimal bigDecimal2 = new BigDecimal(5);
      CatalogLight catalogLight1 = new CatalogLight("", "VALUE_ADDED_TAX_PERCENTAGE", "_bZk1'T0,MF)bx", temporaryURLContent0, temporaryURLContent0, (-189.5024F), 0.0F, 5, 0.0F, false, lightSourceArray0, (float[][]) null, "ny4Wr.F'cLkB{", false, bigDecimal2, bigDecimal2);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight0.isPointAt(0.0F, (-1369.8F), 1282.1F);
      homeLight2.clone();
      homeLight1.getTexture();
      homeLight2.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      Float float1 = new Float((double) (-805.8F));
      Float float2 = new Float((-805.8F));
      BigDecimal bigDecimal0 = new BigDecimal((-1.0));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(Y7g@v\t[p'", "", "", temporaryURLContent0, temporaryURLContent0, (-2082.7222F), 335.96582F, 2000.478F, 3.4028235E38F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation(2569.7544F);
      homeLight0.getDepth();
      homeLight0.setVisible(false);
      homeLight1.getWidth();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", temporaryURLContent0, temporaryURLContent0, 2344, 0.0F, (-805.8F), (-805.8F), true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopRightPointAt(1619.8375F, 1.0F, (-805.8F));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isPointAt(4730.388F, (-181.7248F), (-181.7248F));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float((-1285.3262F));
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(3700);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), (-1285.3262F), 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      bigDecimal1.setScale(3700);
      homeLight1.setName("");
      homeLight1.setElevation(3700);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.containsPoint((-650.33F), 0.0F, (-269.187F));
      homeLight1.setX(0.0F);
      homeLight0.isMovable();
      homeLight1.isTopRightPointAt(0.0F, 0.0F, 3700.0F);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 4246.75F, 2344, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-4536.1626F), 0.0F, 2344, 2344, float0);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(2344, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource2;
      Float float1 = new Float(4246.75F);
      LightSource lightSource3 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(Y7g@v\t[p'", "", "RNWuJ=(Y7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setDescription("editorSubFolder");
      homeLight0.move((-5419.571F), (-650.33F));
      homeLight0.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      BigDecimal bigDecimal0 = new BigDecimal((-2144186572));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("[9,[9_51,dQ", "NAME_ANGLE", "!|6\"c}", temporaryURLContent0, temporaryURLContent0, (-805.8F), 0, 0.0F, 0, true, lightSourceArray0, (float[][]) null, "", true, (BigDecimal) null, (BigDecimal) null);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("4kyt6YrbR10");
      catalogLight0.setCategory(furnitureCategory0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight2.setDepth(0.0F);
      TextStyle textStyle0 = new TextStyle((-805.8F));
      TextStyle textStyle1 = textStyle0.deriveStyle((-1.0F));
      homeLight1.setNameStyle(textStyle1);
      HomeLight homeLight3 = homeLight1.clone();
      homeLight1.getDepth();
      homeLight1.setDescription("NAME_ANGLE");
      homeLight1.setDescription("!|6\"c}");
      homeLight2.isPointAt((-805.8F), 0.0F, 0);
      homeLight3.isDoorOrWindow();
      homeLight1.isMovable();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[9];
      Float float0 = new Float((float) 2344);
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 4246.75F, 2344, float0);
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float(122.7);
      LightSource lightSource1 = new LightSource((-4536.1626F), 0.0F, 5391.62F, 2344, float1);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource2;
      Float float2 = new Float(122.7);
      LightSource lightSource3 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float2);
      lightSourceArray0[3] = lightSource3;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation((-1040.273F));
      homeLight0.getX();
      homeLight0.setVisible(true);
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal((-35));
      Long long0 = new Long(558L);
      Float float0 = new Float(1776.8319328779967);
      CatalogLight catalogLight0 = new CatalogLight("+fUJy$\"=d8", "", "RN~KWuJ=(K7g@v\t[p'", "", (String[]) null, long0, float0, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 558L, 1.0F, 558L, 1.0F, false, lightSourceArray0, "ELEVATION", (float[][]) null, "", false, true, false, bigDecimal0, bigDecimal0, "RN~KWuJ=(K7g@v\t[p'");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal0.shortValueExact();
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal1 = new BigDecimal((-1.0));
      bigDecimal1.unscaledValue();
      homeLight1.getGroundElevation();
      Float float1 = new Float((-1.0));
      homeLight1.setName("+fUJy$\"=d8");
      homeLight1.getNameAngle();
      homeLight1.isTexturable();
      homeLight1.isNameCenterPointAt(558L, (-4431.324F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(6.283185307179586);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal1.toBigIntegerExact();
      homeLight0.isTopLeftPointAt(2.0F, 0.0F, 2.0F);
      BigInteger bigInteger0 = BigInteger.ZERO;
      CatalogTexture catalogTexture0 = new CatalogTexture("", temporaryURLContent0, 2.0F, 289.33F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeLight0.setTexture(homeTexture0);
      homeLight0.getTexture();
      homeLight0.setTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      float float0 = (-805.8F);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float1 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      float float2 = (-650.33F);
      Float float3 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float3);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      catalogLight0.setCategory(furnitureCategory0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      // Undeclared exception!
      try { 
        homeLight0.setDepth(3700);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float(122.7);
      Float float1 = new Float(4246.75F);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Float float2 = new Float(122.7);
      LightSource lightSource0 = new LightSource(0.0F, (-189.919F), (-1686.5F), (-573));
      Float float3 = new Float((-2545.824671));
      BigDecimal bigDecimal0 = new BigDecimal((-573));
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("$VALUES", "$VALUES", "$VALUES", temporaryURLContent0, temporaryURLContent0, 2010.5F, (-189.919F), (-573), (-1686.5F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation((-573));
      homeLight0.getNameXOffset();
      HomeLight homeLight1 = homeLight0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      catalogLight0.setCategory(furnitureCategory0);
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.getStaircaseCutOutShape();
      homeLight0.isNameCenterPointAt(2010.5F, (-1686.5F), 0.0F);
      homeLight0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      Float float0 = new Float((-1022.1F));
      BigDecimal bigDecimal0 = new BigDecimal(0);
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource(8.251245F, 3580.876F, (-1108.0626F), 0);
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float((double) 8.251245F);
      LightSource lightSource1 = new LightSource((-1022.1F), 0.0F, 0.3926991F, 0, float1);
      lightSourceArray0[1] = lightSource1;
      CatalogLight catalogLight0 = new CatalogLight("6[-ssCB}>M=;~S,", (String) null, (String) null, temporaryURLContent0, temporaryURLContent0, (-1022.1F), 8.251245F, (-1022.1F), 0.3926991F, false, lightSourceArray0, (float[][]) null, "S]NTqYn#hTx\"", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getStaircaseCutOutShape();
      homeLight1.setAngle(0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      homeLight1.setShininess(float1);
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      homeLight2.setDescription((String) null);
      HomePieceOfFurniture.SortableProperty.values();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      homeLight0.isNameCenterPointAt(1246.9795F, (-2143.0F), 5391.62F);
      homeLight0.isBottomLeftPointAt(0.3926991F, 0.0F, (-2143.0F));
      homeLight0.getX();
      homeLight0.intersectsRectangle(1.0F, (-475.77466F), (-805.8F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("rNK4(1w2.#(f!8{L", "rNK4(1w2.#(f!8{L", "rNK4(1w2.#(f!8{L", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "rNK4(1w2.#(f!8{L", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      homePieceOfFurniture0.getTexture();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-806.2796F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float((-806.2796F));
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-806.2796F), 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      bigDecimal1.setScale(0);
      BigDecimal bigDecimal2 = new BigDecimal(3700);
      homeLight1.setName("");
      homeLight1.setElevation(3700);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.setX((-806.2796F));
      homeLight0.setNameYOffset(0.0F);
      homeLight0.isModelMirrored();
      homeLight1.getWidth();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((double) 0.6248775F);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("[9,[9_51,dQ", "[9,[9_51,dQ", "NAME_ANGLE", temporaryURLContent0, temporaryURLContent0, 0.6248775F, 0.6248775F, 0, 0.6248775F, true, lightSourceArray0, (float[][]) null, "[9,[9_51,dQ", false, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal1.toBigIntegerExact();
      homeLight0.isTopLeftPointAt(0, 0.0F, 0);
      HomeLight homeLight1 = homeLight0.clone();
      CatalogTexture catalogTexture0 = new CatalogTexture("NAME_ANGLE", (Content) null, 2831.6F, 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeLight0.setTexture(homeTexture0);
      HomeLight homeLight2 = new HomeLight(homeLight1);
      HomeLight homeLight3 = homeLight1.clone();
      homeLight2.getValueAddedTax();
      HomeLight homeLight4 = new HomeLight(catalogLight0);
      homeLight2.getAngle();
      homeLight4.isBottomRightPointAt(0, 0.0F, 3571.4282F);
      homeLight4.getCurrency();
      homeLight3.getShininess();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, true, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getGroundElevation();
      Level level0 = new Level("NNWuJ=(K7g@v\t[p'", 4730.388F, 1.0F, 4730.388F);
      Level level1 = level0.clone();
      homeLight0.setLevel(level1);
      homeLight0.setColor((Integer) null);
      homeLight0.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 996.0F, 996.0F, 996.0F, 996.0F, true, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight1.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt((-650.33F), (-650.33F), (-805.8F));
      homeLight1.setElevation((-650.33F));
      homeLight0.getNameXOffset();
      homeLight0.setAngle((-650.33F));
      homeLight0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 4246.75F, 2344, float0);
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float(122.7);
      LightSource lightSource1 = new LightSource((-4536.1626F), 0.0F, 5391.62F, 2344, float1);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource2;
      Float float2 = new Float(4246.75F);
      LightSource lightSource3 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float2);
      lightSourceArray0[3] = lightSource3;
      BigDecimal bigDecimal0 = new BigDecimal(44);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation((-1040.273F));
      homeLight1.isTopRightPointAt((-1040.273F), (-2143.0F), 0.0F);
      homeLight0.setElevation((-2143.0F));
      homeLight0.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopLeftPointAt(2.0F, 0.0F, 2.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation((-1040.273F));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      Float float1 = new Float(4246.75F);
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("8qdJy", "RNWuJ=(K7g@v\t[p'", "4lG%>.{?[HAC", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0.0F, (-1.0F), (-1.0F), 0, true, lightSourceArray0, "RNWuJ=(K7g@v\t[p'", (float[][]) null, "Q", false, false, false, bigDecimal1, bigDecimal1, "applicationSubFolder.Mac OS X");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal0.shortValueExact();
      bigDecimal0.toBigIntegerExact();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CatalogTexture catalogTexture0 = new CatalogTexture("wnoJ~{=ZLr", temporaryURLContent0, (-4099.2F), 2930.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      // Undeclared exception!
      try { 
        homeLight0.setTexture(homeTexture0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("NAME_ANGLE", "B@Xu[?'_.2", "B@Xu[?'_.2", temporaryURLContent0, temporaryURLContent0, 0.0F, 5391.62F, (-1.0F), 5391.62F, true, lightSourceArray0, (float[][]) null, "NAME_ANGLE", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getStaircaseCutOutShape();
      homeLight0.setAngle((-805.8F));
      homeLight1.isBottomLeftPointAt(5391.62F, 5391.62F, 0);
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      HomeLight homeLight3 = homeLight0.clone();
      homeLight1.clone();
      homeLight2.getX();
      homeLight3.getElevation();
      Level level0 = new Level("</wKd>+yj-", 0.0F, (-1651.0F), 719.44617F);
      homeLight2.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(3700, 4246.75F, 5391.62F, 3700, float0);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setMovable(true);
      homeLight1.isTopRightPointAt((-650.33F), (-650.33F), 0.0F);
      homeLight1.setElevation((-1040.273F));
      homeLight0.getNameXOffset();
      HomePieceOfFurniture.SortableProperty.values();
      homeLight0.containsPoint((-1036.211F), 2295.7944F, (-378.1F));
      homeLight0.setMovable(true);
      homeLight0.setDescription("_aKE&@bY!3]IP");
      homeLight0.isVisible();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      float float0 = 0.0F;
      LightSource[] lightSourceArray0 = new LightSource[2];
      int int0 = 3707;
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, (-805.8F), 3707);
      Float float1 = new Float(0.0F);
      BigDecimal bigDecimal0 = new BigDecimal(0.0F);
      CatalogLight catalogLight0 = new CatalogLight(":l", "RNWuJ=(K7g@v\t[p'", "", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0.0F, 3707, (-805.8F), (-805.8F), false, lightSourceArray0, "", (float[][]) null, ".Rk", false, false, false, bigDecimal0, bigDecimal0, "|D}KvCfi'Y9L");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      Sash[] sashArray0 = new Sash[7];
      Sash sash0 = new Sash((-805.8F), (-452.54F), 2223.803F, (-452.54F), 3707);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-805.8F), 217.9F, 3936.1F, 217.9F, (-1.0F));
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-2413.0F), (-805.8F), 217.9F, 1386.3745F, (-1.0F));
      sashArray0[2] = sash2;
      Sash sash3 = new Sash((-2201.874F), 2194.596F, 1009.09314F, 2.0F, 1974.697F);
      sashArray0[3] = sash3;
      Sash sash4 = new Sash((-1425.3448F), 2259.8F, 3707, (-1369.8F), (-1266.6276F));
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(2.0F, 1009.09314F, 2695.8118F, (-452.54F), (-1425.3448F));
      sashArray0[5] = sash5;
      Sash sash6 = new Sash(2223.803F, 1974.697F, 402.4F, 2695.8118F, 2091.4F);
      sashArray0[6] = sash6;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("eJ,{", "com.eteks.sweethome3d.model.HomePieceOfFurniture$14", ")L>Jp }gC^n9", temporaryURLContent0, temporaryURLContent0, 2.0F, 0.0F, 217.9F, (-452.54F), false, 3936.1F, (-1425.3448F), sashArray0, (float[][]) null, ".Rk", false, bigDecimal0, bigDecimal0);
      catalogLight0.compareTo((CatalogPieceOfFurniture) catalogDoorOrWindow0);
      homeLight1.isTopLeftPointAt((-805.8F), (-805.8F), 0.0F);
      homeLight1.clone();
      CatalogTexture catalogTexture0 = new CatalogTexture("RNWuJ=(K7g@v\t[p'", (Content) null, (-805.8F), 2831.6F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      // Undeclared exception!
      try { 
        homeLight1.setTexture(homeTexture0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      Float float0 = new Float((-1583.86F));
      BigDecimal bigDecimal0 = new BigDecimal(0);
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource(1493.5F, 0.5F, 0, 0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(4.608918F, 4.608918F, 0.5F, 2147474077, float0);
      lightSourceArray0[1] = lightSource1;
      CatalogLight catalogLight0 = new CatalogLight("", (String) null, "&db", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 2.0F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal0.toBigIntegerExact();
      homeLight0.isTopLeftPointAt(1408.4231F, (-1583.86F), 1408.4231F);
      homeLight0.getNameXOffset();
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.getStaircaseCutOutShape();
      homeLight1.isNameCenterPointAt(0.0F, 1493.5F, (-1.0F));
      homeLight0.getCatalogId();
      homeLight0.getDescription();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 4246.75F, 2344, float0);
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float(122.7);
      LightSource lightSource1 = new LightSource((-4536.1626F), 0.0F, 2344, 2344, float1);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(2344, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource2;
      Float.isFinite(0.0F);
      Float float2 = new Float(4246.75F);
      LightSource lightSource3 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float2);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(Y7g@v\t[p'", "", "RNWuJ=(Y7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getValueAddedTax();
      homeLight0.containsPoint(0.0F, 0.0F, 0.0F);
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      homeLight2.getAngle();
      homeLight1.getY();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(110.19351753729158);
      assertNotNull(float0);
      assertEquals(110.19352F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(206.65924F, (-1950.3734F), 3700, 3700);
      assertNotNull(lightSource0);
      assertEquals(3700.0F, lightSource0.getZ(), 0.01F);
      assertEquals(3700, lightSource0.getColor());
      assertEquals(206.65924F, lightSource0.getX(), 0.01F);
      assertEquals((-1950.3734F), lightSource0.getY(), 0.01F);
      assertNull(lightSource0.getDiameter());
      
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      LightSource lightSource1 = new LightSource(0.0F, 0.0F, (-1950.3734F), 3700, float0);
      assertNotNull(lightSource1);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-1950.3734F), lightSource1.getZ(), 0.01F);
      assertEquals(3700, lightSource1.getColor());
      assertEquals(110.19352F, lightSource1.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource1.getX(), 0.01F);
      assertEquals(0.0F, lightSource1.getY(), 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal((-2144186572));
      assertNotNull(bigDecimal0);
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "N}!H(rkTWMDlHlg8Qd", "", temporaryURLContent0, temporaryURLContent0, 3700, 0, (-805.8F), (-805.8F), false, lightSourceArray0, (float[][]) null, "NAME_ANGLE", true, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isProportional());
      assertEquals("N}!H(rkTWMDlHlg8Qd", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-805.8F), catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      assertNotNull(furnitureCategory0);
      assertEquals("", furnitureCategory0.getName());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      
      catalogLight0.setCategory(furnitureCategory0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isProportional());
      assertEquals("N}!H(rkTWMDlHlg8Qd", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-805.8F), catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", furnitureCategory0.getName());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isProportional());
      assertEquals("N}!H(rkTWMDlHlg8Qd", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-805.8F), catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-805.8F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals((-805.8F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-805.8F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("N}!H(rkTWMDlHlg8Qd", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("", homeLight0.getDescription());
      assertEquals(3700.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1850.0F, homeLight0.getX(), 0.01F);
      
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      assertNotNull(homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isProportional());
      assertEquals("N}!H(rkTWMDlHlg8Qd", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-805.8F), catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1850.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-805.8F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(3700.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-805.8F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals("N}!H(rkTWMDlHlg8Qd", homeLight1.getName());
      
      homeLight1.setDepth(3700);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isProportional());
      assertEquals("N}!H(rkTWMDlHlg8Qd", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-805.8F), catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1850.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-805.8F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(3700.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(3700.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-805.8F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals("N}!H(rkTWMDlHlg8Qd", homeLight1.getName());
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotNull(homeLight2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isProportional());
      assertEquals("N}!H(rkTWMDlHlg8Qd", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-805.8F), catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1850.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-805.8F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(3700.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(3700.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-805.8F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals("N}!H(rkTWMDlHlg8Qd", homeLight1.getName());
      assertEquals((-805.8F), homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isResizable());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(3700.0F, homeLight2.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals("", homeLight2.getDescription());
      assertTrue(homeLight2.isTexturable());
      assertEquals((-805.8F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(1850.0F, homeLight2.getX(), 0.01F);
      assertEquals("N}!H(rkTWMDlHlg8Qd", homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertEquals(3700.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      
      float float2 = homeLight2.getDepth();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals(3700.0F, float2, 0.01F);
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isProportional());
      assertEquals("N}!H(rkTWMDlHlg8Qd", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-805.8F), catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1850.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-805.8F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(3700.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(3700.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-805.8F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals("N}!H(rkTWMDlHlg8Qd", homeLight1.getName());
      assertEquals((-805.8F), homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isResizable());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(3700.0F, homeLight2.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals("", homeLight2.getDescription());
      assertTrue(homeLight2.isTexturable());
      assertEquals((-805.8F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(1850.0F, homeLight2.getX(), 0.01F);
      assertEquals("N}!H(rkTWMDlHlg8Qd", homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertEquals(3700.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      
      homeLight0.setDescription("NAME_ANGLE");
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isProportional());
      assertEquals("N}!H(rkTWMDlHlg8Qd", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-805.8F), catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-805.8F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals((-805.8F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-805.8F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("N}!H(rkTWMDlHlg8Qd", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(3700.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1850.0F, homeLight0.getX(), 0.01F);
      
      homeLight1.setDescription("");
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isProportional());
      assertEquals("N}!H(rkTWMDlHlg8Qd", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-805.8F), catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(1850.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-805.8F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(3700.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(3700.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-805.8F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals("N}!H(rkTWMDlHlg8Qd", homeLight1.getName());
      
      Content content0 = homeLight0.getPlanIcon();
      assertNull(content0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isProportional());
      assertEquals("N}!H(rkTWMDlHlg8Qd", catalogLight0.getName());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-805.8F), catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-805.8F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals((-805.8F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-805.8F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("N}!H(rkTWMDlHlg8Qd", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(3700.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1850.0F, homeLight0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.isNameCenterPointAt(4730.388F, (-3681.2888F), (-3681.2888F));
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float((-1285.3262F));
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), (-1285.3262F), 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      bigDecimal0.setScale(13);
      homeLight1.setName("RNWuJ=(K7g@v\t[p'");
      homeLight1.setElevation(3700);
      homeLight1.containsPoint((-1.0F), 3700.0F, 525.72F);
      homeLight0.setX(3700);
      homeLight0.isBackFaceShown();
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[6];
      Float float0 = new Float(0.0F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("VALUE_ADDED_TAX_PERCENTA5E", "VALUE_ADDED_TAX_PERCENTA5E", "VALUE_ADDED_TAX_PERCENTA5E", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "VALUE_ADDED_TAX_PERCENTA5E", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle(0.0F);
      homeLight0.setHeight(2907.0708F);
      homeLight0.setName("VALUE_ADDED_TAX_PERCENTA5E");
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation((-1040.273F));
      homeLight0.getDepth();
      homeLight0.setVisible(false);
      homeLight1.isTopLeftPointAt((-702.9197F), 1.0F, (-1040.273F));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal((double) (-5));
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      homeLight0.setNameAngle(0.0F);
      homeLight0.setNameVisible(true);
      HomeLight homeLight1 = homeLight0.clone();
      HomePieceOfFurniture.Property.values();
      homeLight0.getGroundElevation();
      homeLight1.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation(83.4497F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setMovable(true);
      homeLight1.setHeight(0.0F);
      homeLight1.getStaircaseCutOutShape();
      homeLight0.setAngle(524.0F);
      homeLight1.getHeight();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[17];
      Float float0 = new Float(473.68286F);
      Float float1 = new Float(473.68286F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("VALUE_ADDED_TAX_PERCENTA5E", "VALUE_ADDED_TAX_PERCENTA5E", "VALUE_ADDED_TAX_PERCENTA5E", temporaryURLContent0, temporaryURLContent0, 0.0F, 473.68286F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "VALUE_ADDED_TAX_PERCENTA5E", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      homeLight0.isBottomRightPointAt(15, 0.5F, (-609.0F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.clone();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float((-1285.3262F));
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), (-1285.3262F), 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      bigDecimal0.setScale(3700);
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      homeLight1.setElevation(1228.7092F);
      homeLight0.containsPoint((-1285.3262F), 5391.62F, (-805.8F));
      homeLight0.setX(670.996F);
      homeLight1.isBackFaceShown();
      homeLight0.getElevation();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = "RNWuJ=(K7g@v\\t[p'";
      String string1 = "";
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      float float0 = 0.0F;
      float float1 = (-1285.33F);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float2 = new Float((double) 0.0F);
      float float3 = 0.0F;
      BigDecimal bigDecimal0 = null;
      float float4 = (-653.95F);
      boolean boolean0 = false;
      String string2 = "&[R?leY~RZ&kM?";
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "!|6\"c}", "", temporaryURLContent0, temporaryURLContent0, (-1285.33F), (-1285.33F), 0.0F, (-653.95F), false, lightSourceArray0, (float[][]) null, "&[R?leY~RZ&kM?", false, (BigDecimal) null, (BigDecimal) null);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("RNWuJ=(K7g@v\t[p'");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Float float5 = null;
      homeLight0.setShininess((Float) null);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight1.clone();
      boolean boolean1 = true;
      homeLight0.setNameVisible(true);
      homeLight0.clone();
      String string3 = "com.eteks.sweethome3d.model.HomePieceOfFurniture$6";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "&[R?leY~RZ&kM?";
      stringArray0[1] = "RNWuJ=(K7g@v\t[p'";
      stringArray0[2] = "com.eteks.sweethome3d.model.HomePieceOfFurniture$6";
      stringArray0[3] = "com.eteks.sweethome3d.model.HomePieceOfFurniture$6";
      stringArray0[4] = "";
      stringArray0[5] = "&[R?leY~RZ&kM?";
      stringArray0[6] = "!|6\"c}";
      stringArray0[7] = "!|6\"c}";
      try { 
        Long.valueOf("!|6\"c}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"!|6\"c}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      try {
        homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(4246.75F);
      BigDecimal bigDecimal0 = new BigDecimal((double) 0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      homeLight0.getDepth();
      homeLight0.isTopLeftPointAt(0, 0.0F, 0.0F);
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.18809766232016);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      CatalogLight catalogLight0 = new CatalogLight(".E_WiaB!6'BNCAF&", ".E_WiaB!6'BNCAF&", ".E_WiaB!6'BNCAF&", temporaryURLContent0, temporaryURLContent0, 745.57F, 0.0F, 0.0F, 1076.1362F, true, lightSourceArray0, (float[][]) null, ".E_WiaB!6'BNCAF&", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      BigInteger bigInteger0 = bigDecimal0.toBigIntegerExact();
      homeLight0.isTopLeftPointAt(8, 0.0F, 1408.4231F);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      bigDecimal0.shortValueExact();
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      bigDecimal0.toBigIntegerExact();
      homeLight1.setX(0.0F);
      CatalogTexture catalogTexture0 = new CatalogTexture("DESCRIPTION", temporaryURLContent0, 0.3926991F, 1076.1362F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeLight0.setTexture(homeTexture0);
      homeLight2.getTexture();
      homeLight1.setTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float(1.0F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("RN~KWuJ=(K7g@v\t[p'", "RN~KWuJ=(K7g@v\t[p'", "RN~KWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, (-4431.324F), 2889.9F, (-1255.309F), 0.7244219F, false, lightSourceArray0, (float[][]) null, "RN~KWuJ=(K7g@v\t[p'", true, bigDecimal0, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle((-4431.324F));
      homeLight1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float((double) (-805.8F));
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getLevel();
      homeLight1.setLevel((Level) null);
      bigDecimal0.add(bigDecimal1);
      homeLight0.isBottomLeftPointAt(0.3926991F, 0.0F, (-2143.0F));
      homeLight0.getX();
      homeLight1.clone();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, 0.0F, 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt((-650.33F), (-650.33F), 0.0F);
      homeLight1.setElevation((-1040.273F));
      homeLight0.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((double) 0.0F);
      BigDecimal bigDecimal0 = new BigDecimal((-414));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("70[h<G.?KAfjdUO(\"", "!|6\"c}", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 1882.662F, 1882.662F, (-1.0F), (-3114.4448F), false, lightSourceArray0, (float[][]) null, "T,VBXM]''2", false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation(1882.662F);
      homeLight0.getNameXOffset();
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((double) 4246.75F);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, 0.0F, 3700);
      Float float1 = new Float((double) 0.0F);
      lightSourceArray0[3] = lightSourceArray0[2];
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal0.pow(3700);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setVisible(false);
      homeLight1.setNameAngle(0);
      homeLight0.setNameAngle(0.0F);
      homeLight0.setShininess(float1);
      homeLight0.getTexture();
      homeLight0.setDescription("RNWuJ=(K7g@v\t[p'");
      homeLight0.move(3899.248F, 1.0F);
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight0.getPoints();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("rNK4(1w2.#(f!8{L", "rNK4(1w2.#(f!8{L", "rNK4(1w2.#(f!8{L", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "rNK4(1w2.#(f!8{L", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setDescription("rNK4(1w2.#(f!8{L");
      homeLight0.getLevel();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float0);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopLeftPointAt(2.0F, 0.0F, 2.0F);
      homeLight0.setElevation((-650.33F));
      homeLight0.getDepth();
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.setVisible(false);
      homeLight1.isBottomRightPointAt((-1040.273F), (-805.8F), (-650.33F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("RNWuJ=(K7g@v\t[p'", propertyChangeListener0);
      homeLight0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.getName();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      float float0 = 4730.388F;
      boolean boolean0 = false;
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal0.shortValueExact();
      // Undeclared exception!
      try { 
        homeLight0.setDepth((-1.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(4246.75F);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      bigDecimal1.min(bigDecimal0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      catalogLight0.setCategory(furnitureCategory0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getDepth();
      homeLight1.setDescription("RNWuJ=(K7g@v\t[p'");
      homeLight1.getTexture();
      homeLight1.setTexture((HomeTexture) null);
      homeLight1.setVisible(false);
      homeLight0.getNameYOffset();
      homeLight0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[11];
      Float float0 = new Float(473.68286F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("VALUE_ADDED_TAX_PERCENTA5E", "VALUE_ADDED_TAX_PERCENTA5E", "VALUE_ADDED_TAX_PERCENTA5E", temporaryURLContent0, temporaryURLContent0, 0.0F, 473.68286F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "VALUE_ADDED_TAX_PERCENTA5E", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setWidth(473.68286F);
      homeLight0.getValueAddedTax();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle(473.68286F);
      homeLight0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((double) 0.0F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("ELEVATION", "ELEVATION", "NAME_ANGE", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "NAME_ANGE", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal0.shortValueExact();
      HomeLight homeLight1 = homeLight0.clone();
      BigInteger bigInteger0 = BigInteger.ONE;
      float float1 = new Integer((short)1);
      Float float2 = new Float((double) 1);
      homeLight1.setShininess(float2);
      homeLight1.getShininess();
      homeLight0.isModelMirrored();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = new BigDecimal(205147.91868810155);
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.FurnitureCategory", (String) null, "com.eteks.sweethome3d.model.FurnitureCategory", temporaryURLContent0, temporaryURLContent0, (-5), (-805.8F), 0.0F, (-805.8F), false, lightSourceArray0, (float[][]) null, "lD@lyjB\"{R%q])ue/g", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.setNameVisible(false);
      HomeLight homeLight3 = homeLight0.clone();
      HomeLight homeLight4 = new HomeLight(homeLight3);
      homeLight4.setName((String) null);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      BigDecimal bigDecimal0 = new BigDecimal((-2144186572));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("[9,[9_51,dQ", "NAME_ANGLE", "!|6\"c}", temporaryURLContent0, temporaryURLContent0, (-805.8F), 0, 0.0F, 0, false, lightSourceArray0, (float[][]) null, "", true, (BigDecimal) null, (BigDecimal) null);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("4kyt6YrbR10");
      catalogLight0.setCategory(furnitureCategory0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.isTopLeftPointAt((-805.8F), 0.0F, (-962.48035F));
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight2.getTexture();
      homeLight0.setDescription("");
      homeLight1.move(1426.6892F, 0);
      homeLight0.getNameStyle();
      homeLight1.setDescription("2z");
      homeLight0.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float float0 = new Float(122.7);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      float float1 = 2.0F;
      bigDecimal1.toBigIntegerExact();
      homeLight0.isTopLeftPointAt(2.0F, 0.0F, 2.0F);
      HomeLight homeLight1 = homeLight0.clone();
      CatalogTexture catalogTexture0 = new CatalogTexture("RNWuJ=(K7g@v\t[p'", temporaryURLContent0, 1.0F, 1499.7828F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeLight0.setTexture(homeTexture0);
      // Undeclared exception!
      try { 
        homeLight1.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.9985F, 4730.9985F, 4730.9985F, 4730.9985F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation((-1040.273F));
      homeLight0.getDepth();
      homeLight0.setVisible(false);
      homeLight1.isTopLeftPointAt((-702.9197F), 1.0F, 0.0F);
      homeLight1.setDescription("_+]f/o");
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      LightSource lightSource0 = new LightSource(3.4028235E38F, 3.4028235E38F, 3.4028235E38F, 2344, float0);
      Float float1 = new Float((-1369.8F));
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("", "H&I,7>edELC", "", temporaryURLContent0, temporaryURLContent0, 2344, 0.0F, (-1.0F), (-1.0F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal1, bigDecimal0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogLight0.setCategory(furnitureCategory0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt(1619.8375F, 1.0F, (-805.8F));
      homeLight0.setElevation((-1369.8F));
      homeLight0.getNameXOffset();
      homeLight1.isBackFaceShown();
      homeLight0.isNameCenterPointAt((-1.0F), 1.0F, 3.4028235E38F);
      homeLight1.setName("");
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(4246.75F);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      bigDecimal1.min(bigDecimal0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      catalogLight0.setCategory(furnitureCategory0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getDepth();
      homeLight1.setDescription("RNWuJ=(K7g@v\t[p'");
      homeLight1.getTexture();
      homeLight1.setTexture((HomeTexture) null);
      homeLight1.setVisible(false);
      homeLight1.isVisible();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 4246.75F, 2344, float0);
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float(122.7);
      LightSource lightSource1 = new LightSource(4246.75F, 0.0F, 0.0F, 2344);
      lightSourceArray0[3] = lightSource1;
      LightSource lightSource2 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource2;
      Float float2 = new Float((double) 2344);
      LightSource lightSource3 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float2);
      lightSourceArray0[3] = lightSource3;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation((-1040.273F));
      homeLight0.getWidth();
      homeLight1.isDeformable();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[17];
      Float float0 = new Float(473.68286F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CatalogLight catalogLight0 = new CatalogLight("jZ@kE`$%>Czh", "com.eteks.sweethome3d.model.HomePieceOfFurniture$10", "VALUE_ADDED_TAX_PERCENTA5E", temporaryURLContent0, temporaryURLContent0, 2344.0F, 236.34145F, 2344.0F, (-1.0F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal0.toBigIntegerExact();
      homeLight0.isTopLeftPointAt(0.0F, 236.34145F, 745.57F);
      homeLight0.getDepth();
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      homeLight0.isTopLeftPointAt(0.5F, 946.68F, 1235.7607F);
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[6];
      Float float0 = new Float(0.0F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("VAaUE_ADDED_TAX_PERCENTA5E", "VAaUE_ADDED_TAX_PERCENTA5E", "VAaUE_ADDED_TAX_PERCENTA5E", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "VAaUE_ADDED_TAX_PERCENTA5E", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[10];
      Float float0 = new Float(122.7);
      Float float1 = new Float(473.68286F);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      CatalogLight catalogLight0 = new CatalogLight("y a", "", "y a", temporaryURLContent0, temporaryURLContent0, 0.0F, 473.68286F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setHeight(3062.0469F);
      homeLight0.getStaircaseCutOutShape();
      homeLight1.setAngle(473.68286F);
      homeLight0.isBottomLeftPointAt(0.0F, 473.68286F, 0);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.clone();
      homeLight2.getX();
      Level level0 = new Level("", 3062.0469F, 0, 0.0F);
      homeLight0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation((-1040.273F));
      homeLight0.getDepth();
      homeLight0.setVisible(false);
      homeLight0.isNameVisible();
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[12];
      Float float0 = new Float((float) 2344);
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 4246.75F, 2344, float0);
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float(122.7);
      LightSource lightSource1 = new LightSource((-4536.1626F), 0.0F, 5391.62F, 2344, float1);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource2;
      Float float2 = new Float(4246.75F);
      LightSource lightSource3 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float2);
      lightSourceArray0[3] = lightSource3;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      bigDecimal1.scale();
      homeLight1.setElevation((-1040.273F));
      // Undeclared exception!
      try { 
        homeLight1.setHeight((-4536.1626F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Integer integer0 = new Integer(2147426656);
      homeLight0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      float float0 = 0.0F;
      float float1 = (-805.8F);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float2 = new Float(122.7);
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource0;
      Float float3 = new Float(4246.75F);
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float3);
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      bigDecimal0.setScale(13);
      homeLight0.setMovable(false);
      // Undeclared exception!
      try { 
        homeLight1.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, true, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getTexture();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.HEIGHT;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      float float0 = new Float(4730.388F);
      homeLight0.setDescription("");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((double) 0.0F);
      BigDecimal bigDecimal0 = new BigDecimal((double) (-5));
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      homeLight0.setNameVisible(true);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      CatalogLight catalogLight1 = new CatalogLight("=eZ$!]", "=eZ$!]", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 1404.2975F, 1404.2975F, (-5), (-1611.17F), false, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", false, bigDecimal1, bigDecimal1);
      HomeLight homeLight1 = new HomeLight(catalogLight1);
      homeLight1.clone();
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      catalogLight1.compareTo((CatalogPieceOfFurniture) catalogLight0);
      homeLight1.isBottomRightPointAt(1404.2975F, 1404.2975F, 949.444F);
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, true, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setName("DESCRIPTION");
      homeLight0.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      HomeDoorOrWindow homeDoorOrWindow0 = null;
      try {
        homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      assertNotNull(lightSource0);
      assertEquals((-805.8F), lightSource0.getZ(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(5391.62F, lightSource0.getX(), 0.01F);
      assertEquals(3700, lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(4246.75F, (float)float1, 0.01F);
      
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      assertNotNull(lightSource1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(0.0F, lightSource1.getX(), 0.01F);
      assertEquals((-650.33F), lightSource1.getY(), 0.01F);
      assertEquals(3700, lightSource1.getColor());
      assertEquals(4246.75F, lightSource1.getDiameter(), 0.01F);
      assertEquals(4246.75F, lightSource1.getZ(), 0.01F);
      
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      
      homeLight1.setElevation((-1040.273F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1040.273F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals((-1040.273F), homeLight1.getElevation(), 0.01F);
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      
      homeLight1.setPower(1.0F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals(1.0F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1040.273F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals((-1040.273F), homeLight1.getElevation(), 0.01F);
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      
      float float2 = homeLight0.getDepth();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((-805.8F), float2, 0.01F);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      homeLight0.setDescription((String) null);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      boolean boolean0 = homeLight1.isDeformable();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals(1.0F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1040.273F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals((-1040.273F), homeLight1.getElevation(), 0.01F);
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      
      // Undeclared exception!
      try { 
        homeLight0.setWidth(3.4028235E38F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[6];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("VAaUE_ADDED_TAX_PERCENTA5E", "VAaUE_ADDED_TAX_PERCENTA5E", "VAaUE_ADDED_TAX_PERCENTA5E", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "VAaUE_ADDED_TAX_PERCENTA5E", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(6, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isMovable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getName());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(6, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isMovable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getName());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getDescription());
      
      homeLight0.move(0.0F, 0.0F);
      assertEquals(6, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isMovable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getName());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getDescription());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(6, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isMovable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getName());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight1.getCatalogId());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight1.getName());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      
      homeLight1.move(0.0F, 1620.0F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(6, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isMovable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getName());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getShininess());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight1.getCatalogId());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(1620.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight1.getName());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      
      homeLight1.setModelMirrored(true);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(6, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isMovable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getName());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getShininess());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight1.getCatalogId());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(1620.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight1.getName());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isModelMirrored());
      
      Integer integer0 = homeLight1.getColor();
      assertNull(integer0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(6, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isMovable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getName());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getShininess());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight1.getCatalogId());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(1620.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight1.getName());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("NAME_ANGLE", "B@Xu[?'_.2", "L0J^*Hs%Zv{`", temporaryURLContent0, temporaryURLContent0, 0.0F, 5391.62F, (-1.0F), 5391.62F, false, lightSourceArray0, (float[][]) null, "NAME_ANGLE", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertEquals("B@Xu[?'_.2", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(5391.62F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(5391.62F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("L0J^*Hs%Zv{`", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertEquals("B@Xu[?'_.2", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(5391.62F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(5391.62F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("L0J^*Hs%Zv{`", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("B@Xu[?'_.2", homeLight0.getName());
      assertEquals("NAME_ANGLE", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(5391.62F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(5391.62F, homeLight0.getElevation(), 0.01F);
      assertEquals("L0J^*Hs%Zv{`", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(2695.81F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(5391.62F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      HomeLight homeLight1 = new HomeLight(homeLight0);
      assertNotNull(homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertEquals("B@Xu[?'_.2", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(5391.62F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(5391.62F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("L0J^*Hs%Zv{`", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("B@Xu[?'_.2", homeLight0.getName());
      assertEquals("NAME_ANGLE", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(5391.62F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(5391.62F, homeLight0.getElevation(), 0.01F);
      assertEquals("L0J^*Hs%Zv{`", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(2695.81F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(5391.62F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(5391.62F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("L0J^*Hs%Zv{`", homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(5391.62F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("B@Xu[?'_.2", homeLight1.getName());
      assertEquals(2695.81F, homeLight1.getY(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-1.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(5391.62F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      
      homeLight1.setPower((-1949.4669F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertEquals("B@Xu[?'_.2", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(5391.62F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(5391.62F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("L0J^*Hs%Zv{`", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("B@Xu[?'_.2", homeLight0.getName());
      assertEquals("NAME_ANGLE", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(5391.62F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(5391.62F, homeLight0.getElevation(), 0.01F);
      assertEquals("L0J^*Hs%Zv{`", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(2695.81F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(5391.62F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(5391.62F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals((-1949.4669F), homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("L0J^*Hs%Zv{`", homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(5391.62F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("B@Xu[?'_.2", homeLight1.getName());
      assertEquals(2695.81F, homeLight1.getY(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight1.getCatalogId());
      assertEquals((-1.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(5391.62F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      
      HomeLight homeLight2 = new HomeLight(homeLight1);
      assertNotNull(homeLight2);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertEquals("B@Xu[?'_.2", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(5391.62F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(5391.62F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("L0J^*Hs%Zv{`", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("B@Xu[?'_.2", homeLight0.getName());
      assertEquals("NAME_ANGLE", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(5391.62F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(5391.62F, homeLight0.getElevation(), 0.01F);
      assertEquals("L0J^*Hs%Zv{`", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(2695.81F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(5391.62F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(5391.62F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals((-1949.4669F), homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("L0J^*Hs%Zv{`", homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(5391.62F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("B@Xu[?'_.2", homeLight1.getName());
      assertEquals(2695.81F, homeLight1.getY(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight1.getCatalogId());
      assertEquals((-1.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(5391.62F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals((-1.0F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(5391.62F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(2695.81F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(5391.62F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("L0J^*Hs%Zv{`", homeLight2.getDescription());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals("NAME_ANGLE", homeLight2.getCatalogId());
      assertEquals("B@Xu[?'_.2", homeLight2.getName());
      assertEquals(5391.62F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getCurrency());
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("L0J^*Hs%Zv{`");
      assertNotNull(furnitureCategory0);
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertEquals("L0J^*Hs%Zv{`", furnitureCategory0.getName());
      
      HomeLight homeLight3 = new HomeLight(homeLight0);
      assertNotNull(homeLight3);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertEquals("B@Xu[?'_.2", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(5391.62F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(5391.62F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("L0J^*Hs%Zv{`", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("B@Xu[?'_.2", homeLight0.getName());
      assertEquals("NAME_ANGLE", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(5391.62F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(5391.62F, homeLight0.getElevation(), 0.01F);
      assertEquals("L0J^*Hs%Zv{`", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(2695.81F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(5391.62F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals("L0J^*Hs%Zv{`", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertTrue(homeLight3.isResizable());
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(5391.62F, homeLight3.getElevation(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getShininess());
      assertNull(homeLight3.getColor());
      assertEquals(5391.62F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight3.getCatalogId());
      assertEquals("B@Xu[?'_.2", homeLight3.getName());
      assertEquals(2695.81F, homeLight3.getY(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertFalse(homeLight3.isMovable());
      assertEquals((-1.0F), homeLight3.getHeight(), 0.01F);
      assertEquals(5391.62F, homeLight3.getDepth(), 0.01F);
      
      HomeLight homeLight4 = new HomeLight(homeLight0);
      assertNotNull(homeLight4);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight4.equals((Object)homeLight0));
      assertFalse(homeLight4.equals((Object)homeLight3));
      assertFalse(homeLight4.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight1));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertEquals("B@Xu[?'_.2", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(5391.62F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(5391.62F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("L0J^*Hs%Zv{`", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("B@Xu[?'_.2", homeLight0.getName());
      assertEquals("NAME_ANGLE", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(5391.62F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(5391.62F, homeLight0.getElevation(), 0.01F);
      assertEquals("L0J^*Hs%Zv{`", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(2695.81F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(5391.62F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight4.getX(), 0.01F);
      assertTrue(homeLight4.isTexturable());
      assertFalse(homeLight4.isDoorOrWindow());
      assertFalse(homeLight4.isBackFaceShown());
      assertNull(homeLight4.getColor());
      assertFalse(homeLight4.isModelMirrored());
      assertEquals(5391.62F, homeLight4.getDepth(), 0.01F);
      assertNull(homeLight4.getCurrency());
      assertEquals(0.0F, homeLight4.getNameYOffset(), 0.01F);
      assertEquals("L0J^*Hs%Zv{`", homeLight4.getDescription());
      assertEquals("NAME_ANGLE", homeLight4.getCatalogId());
      assertEquals((-1.0F), homeLight4.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight4.getPower(), 0.01F);
      assertFalse(homeLight4.isMovable());
      assertEquals(2695.81F, homeLight4.getY(), 0.01F);
      assertEquals("B@Xu[?'_.2", homeLight4.getName());
      assertEquals(5391.62F, homeLight4.getGroundElevation(), 0.01F);
      assertNull(homeLight4.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight4.getNameAngle(), 0.01F);
      assertTrue(homeLight4.isVisible());
      assertTrue(homeLight4.isResizable());
      assertNull(homeLight4.getShininess());
      assertEquals(5391.62F, homeLight4.getElevation(), 0.01F);
      assertTrue(homeLight4.isDeformable());
      assertFalse(homeLight4.isNameVisible());
      assertEquals(0.0F, homeLight4.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight4.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight4.getWidth(), 0.01F);
      
      homeLight0.setNameXOffset(1.0F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertEquals("B@Xu[?'_.2", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(5391.62F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(5391.62F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("L0J^*Hs%Zv{`", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertEquals(1.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("B@Xu[?'_.2", homeLight0.getName());
      assertEquals("NAME_ANGLE", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(5391.62F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(5391.62F, homeLight0.getElevation(), 0.01F);
      assertEquals("L0J^*Hs%Zv{`", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(2695.81F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(5391.62F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      boolean boolean0 = homeLight2.isPointAt((-1.0F), 1.0F, 297.55722F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight4);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight4);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight4));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight4));
      assertTrue(boolean0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertEquals("B@Xu[?'_.2", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(5391.62F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(5391.62F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("L0J^*Hs%Zv{`", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertEquals(1.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("B@Xu[?'_.2", homeLight0.getName());
      assertEquals("NAME_ANGLE", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(5391.62F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(5391.62F, homeLight0.getElevation(), 0.01F);
      assertEquals("L0J^*Hs%Zv{`", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(2695.81F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(5391.62F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(5391.62F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals((-1949.4669F), homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("L0J^*Hs%Zv{`", homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(5391.62F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("B@Xu[?'_.2", homeLight1.getName());
      assertEquals(2695.81F, homeLight1.getY(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight1.getCatalogId());
      assertEquals((-1.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(5391.62F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals((-1.0F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(5391.62F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(2695.81F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(5391.62F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("L0J^*Hs%Zv{`", homeLight2.getDescription());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals("NAME_ANGLE", homeLight2.getCatalogId());
      assertEquals("B@Xu[?'_.2", homeLight2.getName());
      assertEquals(5391.62F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getCurrency());
      
      boolean boolean1 = homeLight0.isNameCenterPointAt(0, 0.0F, (-1.0F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean1);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertEquals("B@Xu[?'_.2", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(5391.62F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(5391.62F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("L0J^*Hs%Zv{`", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertEquals(1.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("B@Xu[?'_.2", homeLight0.getName());
      assertEquals("NAME_ANGLE", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(5391.62F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(5391.62F, homeLight0.getElevation(), 0.01F);
      assertEquals("L0J^*Hs%Zv{`", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(2695.81F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(5391.62F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      boolean boolean2 = homeLight4.isTexturable();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight4, homeLight0);
      assertNotSame(homeLight4, homeLight3);
      assertNotSame(homeLight4, homeLight2);
      assertNotSame(homeLight4, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight4.equals((Object)homeLight0));
      assertFalse(homeLight4.equals((Object)homeLight3));
      assertFalse(homeLight4.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight1));
      assertTrue(boolean2);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertEquals("B@Xu[?'_.2", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(5391.62F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(5391.62F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("L0J^*Hs%Zv{`", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertEquals(1.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("B@Xu[?'_.2", homeLight0.getName());
      assertEquals("NAME_ANGLE", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(5391.62F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(5391.62F, homeLight0.getElevation(), 0.01F);
      assertEquals("L0J^*Hs%Zv{`", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(2695.81F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(5391.62F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight4.getX(), 0.01F);
      assertTrue(homeLight4.isTexturable());
      assertFalse(homeLight4.isDoorOrWindow());
      assertFalse(homeLight4.isBackFaceShown());
      assertNull(homeLight4.getColor());
      assertFalse(homeLight4.isModelMirrored());
      assertEquals(5391.62F, homeLight4.getDepth(), 0.01F);
      assertNull(homeLight4.getCurrency());
      assertEquals(0.0F, homeLight4.getNameYOffset(), 0.01F);
      assertEquals("L0J^*Hs%Zv{`", homeLight4.getDescription());
      assertEquals("NAME_ANGLE", homeLight4.getCatalogId());
      assertEquals((-1.0F), homeLight4.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight4.getPower(), 0.01F);
      assertFalse(homeLight4.isMovable());
      assertEquals(2695.81F, homeLight4.getY(), 0.01F);
      assertEquals("B@Xu[?'_.2", homeLight4.getName());
      assertEquals(5391.62F, homeLight4.getGroundElevation(), 0.01F);
      assertNull(homeLight4.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight4.getNameAngle(), 0.01F);
      assertTrue(homeLight4.isVisible());
      assertTrue(homeLight4.isResizable());
      assertNull(homeLight4.getShininess());
      assertEquals(5391.62F, homeLight4.getElevation(), 0.01F);
      assertTrue(homeLight4.isDeformable());
      assertFalse(homeLight4.isNameVisible());
      assertEquals(0.0F, homeLight4.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight4.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight4.getWidth(), 0.01F);
      
      boolean boolean3 = homeLight1.isPointAt(0.0F, 0.0F, 0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight4);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight4));
      assertTrue(boolean3);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertEquals("B@Xu[?'_.2", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(5391.62F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(5391.62F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("L0J^*Hs%Zv{`", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertEquals(1.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("B@Xu[?'_.2", homeLight0.getName());
      assertEquals("NAME_ANGLE", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(5391.62F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(5391.62F, homeLight0.getElevation(), 0.01F);
      assertEquals("L0J^*Hs%Zv{`", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(2695.81F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(5391.62F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(5391.62F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals((-1949.4669F), homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("L0J^*Hs%Zv{`", homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(5391.62F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("B@Xu[?'_.2", homeLight1.getName());
      assertEquals(2695.81F, homeLight1.getY(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight1.getCatalogId());
      assertEquals((-1.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(5391.62F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      
      boolean boolean4 = homeLight3.isTopRightPointAt(5.5221457F, (-850.933F), 1.0F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight4);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight4));
      assertFalse(boolean4);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertEquals("B@Xu[?'_.2", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(5391.62F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(5391.62F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("L0J^*Hs%Zv{`", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertEquals(1.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("B@Xu[?'_.2", homeLight0.getName());
      assertEquals("NAME_ANGLE", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(5391.62F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(5391.62F, homeLight0.getElevation(), 0.01F);
      assertEquals("L0J^*Hs%Zv{`", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(2695.81F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(5391.62F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals("L0J^*Hs%Zv{`", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertTrue(homeLight3.isResizable());
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(5391.62F, homeLight3.getElevation(), 0.01F);
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getShininess());
      assertNull(homeLight3.getColor());
      assertEquals(5391.62F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight3.getCatalogId());
      assertEquals("B@Xu[?'_.2", homeLight3.getName());
      assertEquals(2695.81F, homeLight3.getY(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertFalse(homeLight3.isMovable());
      assertEquals((-1.0F), homeLight3.getHeight(), 0.01F);
      assertEquals(5391.62F, homeLight3.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((double) 0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "!|6\"c}", "", temporaryURLContent0, temporaryURLContent0, (-1285.33F), (-1285.33F), 0.0F, (-653.95F), false, lightSourceArray0, (float[][]) null, "&[R?leY~RZ&kM?", false, (BigDecimal) null, (BigDecimal) null);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-653.95F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals("!|6\"c}", catalogLight0.getName());
      assertEquals((-1285.33F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("&[R?leY~RZ&kM?", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1285.33F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("RNWuJ=(K7g@v\t[p'");
      assertNotNull(furnitureCategory0);
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertEquals("RNWuJ=(K7g@v\t[p'", furnitureCategory0.getName());
      
      BigDecimal bigDecimal0 = new BigDecimal((-2620));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-2620), bigDecimal0.shortValue());
      assertEquals((byte) (-60), bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      CatalogLight catalogLight1 = new CatalogLight("!|6\"c}", "i}1b[{{) dlGCI", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4.1149178F, 402.4F, (-752.0F), 0.0F, false, lightSourceArray0, (float[][]) null, "&[R?leY~RZ&kM?", true, bigDecimal1, bigDecimal0);
      assertNotNull(catalogLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      assertEquals((short) (-2620), bigDecimal0.shortValue());
      assertEquals((byte) (-60), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight1.getInformation());
      assertTrue(catalogLight1.isDeformable());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertTrue(catalogLight1.isResizable());
      assertFalse(catalogLight1.isMovable());
      assertEquals("&[R?leY~RZ&kM?", catalogLight1.getCreator());
      assertEquals((-752.0F), catalogLight1.getHeight(), 0.01F);
      assertFalse(catalogLight1.isBackFaceShown());
      assertNull(catalogLight1.getCreationDate());
      assertNull(catalogLight1.getGrade());
      assertEquals(4.1149178F, catalogLight1.getWidth(), 0.01F);
      assertTrue(catalogLight1.isTexturable());
      assertEquals("!|6\"c}", catalogLight1.getId());
      assertTrue(catalogLight1.isProportional());
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight1.getDescription());
      assertEquals(0.0F, catalogLight1.getElevation(), 0.01F);
      assertFalse(catalogLight1.isDoorOrWindow());
      assertEquals(402.4F, catalogLight1.getDepth(), 0.01F);
      assertNull(catalogLight1.getColor());
      assertFalse(catalogLight1.isModifiable());
      assertEquals("i}1b[{{) dlGCI", catalogLight1.getName());
      assertNull(catalogLight1.getCurrency());
      
      HomeLight homeLight0 = new HomeLight(catalogLight1);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      assertEquals((short) (-2620), bigDecimal0.shortValue());
      assertEquals((byte) (-60), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight1.getInformation());
      assertTrue(catalogLight1.isDeformable());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertTrue(catalogLight1.isResizable());
      assertFalse(catalogLight1.isMovable());
      assertEquals("&[R?leY~RZ&kM?", catalogLight1.getCreator());
      assertEquals((-752.0F), catalogLight1.getHeight(), 0.01F);
      assertFalse(catalogLight1.isBackFaceShown());
      assertNull(catalogLight1.getCreationDate());
      assertNull(catalogLight1.getGrade());
      assertEquals(4.1149178F, catalogLight1.getWidth(), 0.01F);
      assertTrue(catalogLight1.isTexturable());
      assertEquals("!|6\"c}", catalogLight1.getId());
      assertTrue(catalogLight1.isProportional());
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight1.getDescription());
      assertEquals(0.0F, catalogLight1.getElevation(), 0.01F);
      assertFalse(catalogLight1.isDoorOrWindow());
      assertEquals(402.4F, catalogLight1.getDepth(), 0.01F);
      assertNull(catalogLight1.getColor());
      assertFalse(catalogLight1.isModifiable());
      assertEquals("i}1b[{{) dlGCI", catalogLight1.getName());
      assertNull(catalogLight1.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals("i}1b[{{) dlGCI", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(2.0574589F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isResizable());
      assertEquals(402.4F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(201.2F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("!|6\"c}", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-752.0F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(4.1149178F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      
      BigDecimal bigDecimal2 = bigDecimal1.add(bigDecimal0);
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((short) (-2620), bigDecimal0.shortValue());
      assertEquals((byte) (-60), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short) (-2619), bigDecimal2.shortValue());
      assertEquals((byte) (-59), bigDecimal2.byteValue());
      
      boolean boolean0 = homeLight0.isBottomLeftPointAt(402.9F, 0.5F, 848.2451F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(catalogLight1, catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      assertFalse(boolean0);
      assertEquals((short) (-2620), bigDecimal0.shortValue());
      assertEquals((byte) (-60), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight1.getInformation());
      assertTrue(catalogLight1.isDeformable());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertTrue(catalogLight1.isResizable());
      assertFalse(catalogLight1.isMovable());
      assertEquals("&[R?leY~RZ&kM?", catalogLight1.getCreator());
      assertEquals((-752.0F), catalogLight1.getHeight(), 0.01F);
      assertFalse(catalogLight1.isBackFaceShown());
      assertNull(catalogLight1.getCreationDate());
      assertNull(catalogLight1.getGrade());
      assertEquals(4.1149178F, catalogLight1.getWidth(), 0.01F);
      assertTrue(catalogLight1.isTexturable());
      assertEquals("!|6\"c}", catalogLight1.getId());
      assertTrue(catalogLight1.isProportional());
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight1.getDescription());
      assertEquals(0.0F, catalogLight1.getElevation(), 0.01F);
      assertFalse(catalogLight1.isDoorOrWindow());
      assertEquals(402.4F, catalogLight1.getDepth(), 0.01F);
      assertNull(catalogLight1.getColor());
      assertFalse(catalogLight1.isModifiable());
      assertEquals("i}1b[{{) dlGCI", catalogLight1.getName());
      assertNull(catalogLight1.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals("i}1b[{{) dlGCI", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(2.0574589F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isResizable());
      assertEquals(402.4F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(201.2F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("!|6\"c}", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-752.0F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(4.1149178F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      
      float float1 = homeLight0.getX();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(catalogLight1, catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      assertEquals(2.0574589F, float1, 0.01F);
      assertEquals((short) (-2620), bigDecimal0.shortValue());
      assertEquals((byte) (-60), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight1.getInformation());
      assertTrue(catalogLight1.isDeformable());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertTrue(catalogLight1.isResizable());
      assertFalse(catalogLight1.isMovable());
      assertEquals("&[R?leY~RZ&kM?", catalogLight1.getCreator());
      assertEquals((-752.0F), catalogLight1.getHeight(), 0.01F);
      assertFalse(catalogLight1.isBackFaceShown());
      assertNull(catalogLight1.getCreationDate());
      assertNull(catalogLight1.getGrade());
      assertEquals(4.1149178F, catalogLight1.getWidth(), 0.01F);
      assertTrue(catalogLight1.isTexturable());
      assertEquals("!|6\"c}", catalogLight1.getId());
      assertTrue(catalogLight1.isProportional());
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight1.getDescription());
      assertEquals(0.0F, catalogLight1.getElevation(), 0.01F);
      assertFalse(catalogLight1.isDoorOrWindow());
      assertEquals(402.4F, catalogLight1.getDepth(), 0.01F);
      assertNull(catalogLight1.getColor());
      assertFalse(catalogLight1.isModifiable());
      assertEquals("i}1b[{{) dlGCI", catalogLight1.getName());
      assertNull(catalogLight1.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals("i}1b[{{) dlGCI", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(2.0574589F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isResizable());
      assertEquals(402.4F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(201.2F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("!|6\"c}", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-752.0F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(4.1149178F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      assertNotNull(lightSource0);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals((-805.8F), lightSource0.getZ(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(5391.62F, lightSource0.getX(), 0.01F);
      assertEquals(3700, lightSource0.getColor());
      
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(4246.75F, (float)float1, 0.01F);
      
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      assertNotNull(lightSource1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(4246.75F, lightSource1.getZ(), 0.01F);
      assertEquals(3700, lightSource1.getColor());
      assertEquals(4246.75F, lightSource1.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource1.getX(), 0.01F);
      assertEquals((-650.33F), lightSource1.getY(), 0.01F);
      
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      
      homeLight1.setElevation((-1040.273F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals((-1040.273F), homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1040.273F), homeLight1.getGroundElevation(), 0.01F);
      
      float float2 = homeLight0.getHeight();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(4246.75F, float2, 0.01F);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[29];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("VALUE%ADDED_TAX,PEqCvNTA5E", "VALUE%ADDED_TAX,PEqCvNTA5E", "VALUE%ADDED_TAX,PEqCvNTA5E", temporaryURLContent0, temporaryURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), true, lightSourceArray0, (float[][]) null, "VALUE%ADDED_TAX,PEqCvNTA5E", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(29, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", catalogLight0.getDescription());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      
      CatalogTexture catalogTexture0 = new CatalogTexture("VALUE%ADDED_TAX,PEqCvNTA5E", temporaryURLContent0, (-1.0F), (-1.0F));
      assertNotNull(catalogTexture0);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", catalogTexture0.getName());
      assertNull(catalogTexture0.getCreator());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNotNull(homeTexture0);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", catalogTexture0.getName());
      assertNull(catalogTexture0.getCreator());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeTexture0.getWidth(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(29, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", catalogLight0.getDescription());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", homeLight0.getCatalogId());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", homeLight0.getName());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      
      homeLight0.setTexture(homeTexture0);
      assertEquals(29, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", catalogLight0.getDescription());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", catalogTexture0.getName());
      assertNull(catalogTexture0.getCreator());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeTexture0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", homeLight0.getCatalogId());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", homeLight0.getName());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      
      homeLight0.setTexture(homeTexture0);
      assertEquals(29, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-1.0F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", catalogLight0.getCreator());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", catalogLight0.getDescription());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", catalogTexture0.getName());
      assertNull(catalogTexture0.getCreator());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeTexture0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals((-1.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", homeLight0.getCatalogId());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", homeLight0.getName());
      assertEquals((-1.0F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("VALUE%ADDED_TAX,PEqCvNTA5E", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      Float float1 = new Float(4246.75F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(4246.75F, (float)float1, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal((-18));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-18), bigDecimal0.shortValue());
      assertEquals((byte) (-18), bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-807.0942F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short) (-18), bigDecimal0.shortValue());
      assertEquals((byte) (-18), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-807.0942F), catalogLight0.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      assertNotNull(furnitureCategory0);
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertNull(furnitureCategory0.getName());
      
      catalogLight0.setCategory(furnitureCategory0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short) (-18), bigDecimal0.shortValue());
      assertEquals((byte) (-18), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-807.0942F), catalogLight0.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertNull(furnitureCategory0.getName());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short) (-18), bigDecimal0.shortValue());
      assertEquals((byte) (-18), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-807.0942F), catalogLight0.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals((-807.0942F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-403.5471F), homeLight0.getY(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short) (-18), bigDecimal0.shortValue());
      assertEquals((byte) (-18), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-807.0942F), catalogLight0.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals((-807.0942F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-403.5471F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals((-403.5471F), homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals((-807.0942F), homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      
      boolean boolean0 = homeLight1.isTopRightPointAt((-698.5325F), (-698.5325F), (-807.0942F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean0);
      assertEquals((short) (-18), bigDecimal0.shortValue());
      assertEquals((byte) (-18), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-807.0942F), catalogLight0.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals((-807.0942F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-403.5471F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals((-403.5471F), homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals((-807.0942F), homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      
      catalogLight0.setCategory(furnitureCategory0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short) (-18), bigDecimal0.shortValue());
      assertEquals((byte) (-18), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-807.0942F), catalogLight0.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertNull(furnitureCategory0.getName());
      
      homeLight1.setElevation((-1040.273F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short) (-18), bigDecimal0.shortValue());
      assertEquals((byte) (-18), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-807.0942F), catalogLight0.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals((-807.0942F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-403.5471F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals((-403.5471F), homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-1040.273F), homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals((-807.0942F), homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals((-1040.273F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      
      float float2 = homeLight0.getNameXOffset();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, float2, 0.01F);
      assertEquals((short) (-18), bigDecimal0.shortValue());
      assertEquals((byte) (-18), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-807.0942F), catalogLight0.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals((-807.0942F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-403.5471F), homeLight0.getY(), 0.01F);
      
      BigDecimal bigDecimal2 = homeLight1.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short) (-18), bigDecimal0.shortValue());
      assertEquals((byte) (-18), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-807.0942F), catalogLight0.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals((-807.0942F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-403.5471F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals((-403.5471F), homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-1040.273F), homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals((-807.0942F), homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals((-1040.273F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((short) (-36), bigDecimal2.shortValue());
      assertEquals((byte) (-36), bigDecimal2.byteValue());
      
      String string0 = homeLight1.getStaircaseCutOutShape();
      assertNull(string0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short) (-18), bigDecimal0.shortValue());
      assertEquals((byte) (-18), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-807.0942F), catalogLight0.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals((-807.0942F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-403.5471F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals((-403.5471F), homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-1040.273F), homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals((-807.0942F), homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals((-1040.273F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      assertNotNull(lightSource0);
      assertEquals(5391.62F, lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(3700, lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertEquals((-805.8F), lightSource0.getZ(), 0.01F);
      
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(4246.75F, (float)float1, 0.01F);
      
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      assertNotNull(lightSource1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-650.33F), lightSource1.getY(), 0.01F);
      assertEquals(4246.75F, lightSource1.getZ(), 0.01F);
      assertEquals(3700, lightSource1.getColor());
      assertEquals(4246.75F, lightSource1.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource1.getX(), 0.01F);
      
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      
      BigDecimal bigDecimal2 = bigDecimal0.setScale(13);
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      
      homeLight1.setName("RNWuJ=(K7g@v\t[p'");
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      
      homeLight1.setElevation(3700);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(3700.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(3700.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      
      boolean boolean0 = homeLight1.containsPoint((-1.0F), 3700.0F, 525.72F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(3700.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(3700.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      
      HomeTexture homeTexture0 = homeLight1.getTexture();
      assertNull(homeTexture0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(3700.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(3700.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      assertNotNull(lightSource0);
      assertEquals(5391.62F, lightSource0.getX(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals((-805.8F), lightSource0.getZ(), 0.01F);
      assertEquals(3700, lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      
      Float float1 = new Float(4246.75F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(4246.75F, (float)float1, 0.01F);
      
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      assertNotNull(lightSource1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(4246.75F, lightSource1.getZ(), 0.01F);
      assertEquals(4246.75F, lightSource1.getDiameter(), 0.01F);
      assertEquals(3700, lightSource1.getColor());
      assertEquals(0.0F, lightSource1.getX(), 0.01F);
      assertEquals((-650.33F), lightSource1.getY(), 0.01F);
      
      float float2 = Float.min(5391.62F, 0.0F);
      assertEquals(0.0F, float2, 0.01F);
      
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(3700);
      assertNotNull(bigDecimal0);
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getName());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      
      Integer integer0 = new Integer(3700);
      assertNotNull(integer0);
      assertEquals(3700, (int)integer0);
      
      homeLight0.setColor(integer0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(3700, (int)homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      
      TextStyle textStyle0 = new TextStyle(5391.62F);
      assertNotNull(textStyle0);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertEquals(5391.62F, textStyle0.getFontSize(), 0.01F);
      
      HomeLight homeLight2 = new HomeLight(homeLight1);
      assertNotNull(homeLight2);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(3700, (int)homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getName());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals((-805.8F), homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals((-402.9F), homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("", homeLight2.getName());
      assertNull(homeLight2.getCurrency());
      assertEquals(4246.75F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      
      homeLight2.setNameStyle(textStyle0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(3700, (int)homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getName());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertEquals(5391.62F, textStyle0.getFontSize(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals((-805.8F), homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals((-402.9F), homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("", homeLight2.getName());
      assertNull(homeLight2.getCurrency());
      assertEquals(4246.75F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      
      BigDecimal bigDecimal1 = BigDecimal.valueOf((double) 0.0F);
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      
      boolean boolean0 = homeLight0.isTopRightPointAt(0.0F, 1752.0687F, 3700);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(boolean0);
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(3700, (int)homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      
      Level level0 = new Level("", 4246.75F, 3700, 5391.62F);
      assertNotNull(level0);
      assertEquals(4246.75F, level0.getElevation(), 0.01F);
      assertEquals(5391.62F, level0.getHeight(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("", level0.getName());
      
      boolean boolean1 = homeLight2.isAtLevel(level0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(boolean1);
      assertEquals(4246.75F, level0.getElevation(), 0.01F);
      assertEquals(5391.62F, level0.getHeight(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("", level0.getName());
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(3700, (int)homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getName());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals((-805.8F), homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals((-402.9F), homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("", homeLight2.getName());
      assertNull(homeLight2.getCurrency());
      assertEquals(4246.75F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(3700, 4246.75F, 5391.62F, 3700, float0);
      assertNotNull(lightSource0);
      assertEquals(5391.62F, lightSource0.getZ(), 0.01F);
      assertEquals(4246.75F, lightSource0.getY(), 0.01F);
      assertEquals(122.7F, lightSource0.getDiameter(), 0.01F);
      assertEquals(3700, lightSource0.getColor());
      assertEquals(3700.0F, lightSource0.getX(), 0.01F);
      
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(4246.75F, (float)float1, 0.01F);
      
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      assertNotNull(lightSource1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(4246.75F, lightSource1.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource1.getX(), 0.01F);
      assertEquals((-650.33F), lightSource1.getY(), 0.01F);
      assertEquals(4246.75F, lightSource1.getZ(), 0.01F);
      assertEquals(3700, lightSource1.getColor());
      
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getName());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      
      homeLight1.setMovable(true);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertTrue(homeLight1.isMovable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      
      boolean boolean0 = homeLight1.isTopRightPointAt((-650.33F), (-650.33F), 0.0F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertTrue(homeLight1.isMovable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      
      homeLight1.setElevation((-1040.273F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertTrue(homeLight1.isMovable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1040.273F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals((-1040.273F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      
      float float2 = homeLight0.getNameXOffset();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, float2, 0.01F);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      boolean boolean1 = homeLight0.containsPoint((-1036.211F), 2295.7944F, (-378.1F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean1);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      
      homeLight0.setMovable(true);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      
      // Undeclared exception!
      try { 
        homeLight0.setHeight(3700);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      Float float1 = new Float(4246.75F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(4246.75F, (float)float1, 0.01F);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      
      homeLight0.setElevation((-650.33F));
      assertEquals(4, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-650.33F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-650.33F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      
      float float2 = homeLight0.getNameXOffset();
      assertEquals(4, lightSourceArray0.length);
      assertEquals(0.0F, float2, 0.01F);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-650.33F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-650.33F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      
      homeLight0.setAngle((-650.33F));
      assertEquals(4, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-650.33F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(3.121255F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-650.33F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      
      homeLight0.setColor((Integer) null);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-650.33F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(3.121255F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-650.33F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      
      homeLight0.setNameYOffset(784.8225F);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-650.33F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(3.121255F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-650.33F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(784.8225F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      assertNotNull(lightSource0);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(3700, lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertEquals((-805.8F), lightSource0.getZ(), 0.01F);
      assertEquals(5391.62F, lightSource0.getX(), 0.01F);
      
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(4246.75F, (float)float1, 0.01F);
      
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      assertNotNull(lightSource1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(4246.75F, lightSource1.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource1.getX(), 0.01F);
      assertEquals((-650.33F), lightSource1.getY(), 0.01F);
      assertEquals(4246.75F, lightSource1.getZ(), 0.01F);
      assertEquals(3700, lightSource1.getColor());
      
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      
      boolean boolean0 = homeLight1.isTopRightPointAt((-650.33F), (-650.33F), (-805.8F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      
      homeLight1.setElevation((-1040.273F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1040.273F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1040.273F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      
      float float2 = homeLight0.getNameXOffset();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, float2, 0.01F);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[11];
      Float float0 = new Float(473.68286F);
      assertNotNull(float0);
      assertEquals(473.68286F, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("VALUE_ADDED_TAX_PERCENTA5E", "VALUE_ADDED_TAX_PERCENTA5E", "VALUE_ADDED_TAX_PERCENTA5E", temporaryURLContent0, temporaryURLContent0, 0.0F, 473.68286F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "VALUE_ADDED_TAX_PERCENTA5E", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(11, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(473.68286F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(11, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(473.68286F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(236.84143F, homeLight0.getY(), 0.01F);
      assertEquals(473.68286F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getName());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(11, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(473.68286F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(236.84143F, homeLight0.getY(), 0.01F);
      assertEquals(473.68286F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getName());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight1.getCatalogId());
      assertEquals(236.84143F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight1.getName());
      assertNull(homeLight1.getColor());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(473.68286F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      
      homeLight1.setAngle(473.68286F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(11, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(473.68286F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(236.84143F, homeLight0.getY(), 0.01F);
      assertEquals(473.68286F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getName());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight1.getCatalogId());
      assertEquals(236.84143F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight1.getName());
      assertNull(homeLight1.getColor());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(473.68286F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertEquals(2.4439633F, homeLight1.getAngle(), 0.01F);
      
      boolean boolean0 = homeLight0.isBottomLeftPointAt(0.0F, 473.68286F, 15);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(11, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(473.68286F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(236.84143F, homeLight0.getY(), 0.01F);
      assertEquals(473.68286F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getName());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(5391.62F, 5391.62F, (-805.8F), 3700);
      assertNotNull(lightSource0);
      assertEquals(5391.62F, lightSource0.getX(), 0.01F);
      assertEquals(5391.62F, lightSource0.getY(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals((-805.8F), lightSource0.getZ(), 0.01F);
      assertEquals(3700, lightSource0.getColor());
      
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(4246.75F, (float)float1, 0.01F);
      
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      assertNotNull(lightSource1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(0.0F, lightSource1.getX(), 0.01F);
      assertEquals((-650.33F), lightSource1.getY(), 0.01F);
      assertEquals(4246.75F, lightSource1.getZ(), 0.01F);
      assertEquals(4246.75F, lightSource1.getDiameter(), 0.01F);
      assertEquals(3700, lightSource1.getColor());
      
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      
      homeLight1.setElevation((-1040.273F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals((-1040.273F), homeLight1.getElevation(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-1040.273F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      
      boolean boolean0 = homeLight0.isMovable();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      assertNotNull(resourceURLContent0);
      assertTrue(resourceURLContent0.isMultiPartResource());
      
      Sash[] sashArray0 = new Sash[7];
      Sash sash0 = new Sash(4730.388F, 1.0F, (-2647.1785F), 3.4028235E38F, (-1981.81F));
      assertNotNull(sash0);
      assertEquals(4730.388F, sash0.getXAxis(), 0.01F);
      assertEquals((-2647.1785F), sash0.getWidth(), 0.01F);
      assertEquals(3.4028235E38F, sash0.getStartAngle(), 0.01F);
      assertEquals((-1981.81F), sash0.getEndAngle(), 0.01F);
      assertEquals(1.0F, sash0.getYAxis(), 0.01F);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), 3.4028235E38F, (-1.0F), (-1.0F), (-1.0F));
      assertNotNull(sash1);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-1.0F), sash1.getWidth(), 0.01F);
      assertEquals((-1.0F), sash1.getEndAngle(), 0.01F);
      assertEquals(3.4028235E38F, sash1.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash1.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash1.getXAxis(), 0.01F);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(270.01F, (-3455.682F), 3.4028235E38F, (-1981.81F), (-181.7248F));
      assertNotNull(sash2);
      assertFalse(sash2.equals((Object)sash0));
      assertFalse(sash2.equals((Object)sash1));
      assertEquals((-181.7248F), sash2.getEndAngle(), 0.01F);
      assertEquals((-1981.81F), sash2.getStartAngle(), 0.01F);
      assertEquals((-3455.682F), sash2.getYAxis(), 0.01F);
      assertEquals(270.01F, sash2.getXAxis(), 0.01F);
      assertEquals(3.4028235E38F, sash2.getWidth(), 0.01F);
      
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(985.5437F, 4730.388F, (-1179.4F), 3.4028235E38F, 4730.388F);
      assertNotNull(sash3);
      assertFalse(sash3.equals((Object)sash2));
      assertFalse(sash3.equals((Object)sash1));
      assertFalse(sash3.equals((Object)sash0));
      assertEquals(3.4028235E38F, sash3.getStartAngle(), 0.01F);
      assertEquals((-1179.4F), sash3.getWidth(), 0.01F);
      assertEquals(985.5437F, sash3.getXAxis(), 0.01F);
      assertEquals(4730.388F, sash3.getYAxis(), 0.01F);
      assertEquals(4730.388F, sash3.getEndAngle(), 0.01F);
      
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(4730.388F, 378.80743F, 3.4028235E38F, 327.6939F, 529.0F);
      assertNotNull(sash4);
      assertFalse(sash4.equals((Object)sash1));
      assertFalse(sash4.equals((Object)sash3));
      assertFalse(sash4.equals((Object)sash2));
      assertFalse(sash4.equals((Object)sash0));
      assertEquals(327.6939F, sash4.getStartAngle(), 0.01F);
      assertEquals(529.0F, sash4.getEndAngle(), 0.01F);
      assertEquals(3.4028235E38F, sash4.getWidth(), 0.01F);
      assertEquals(4730.388F, sash4.getXAxis(), 0.01F);
      assertEquals(378.80743F, sash4.getYAxis(), 0.01F);
      
      sashArray0[4] = sash4;
      Sash sash5 = new Sash((-113.23F), 3.4028235E38F, (-4843.0F), 3700.0F, 2.0F);
      assertNotNull(sash5);
      assertFalse(sash5.equals((Object)sash2));
      assertFalse(sash5.equals((Object)sash1));
      assertFalse(sash5.equals((Object)sash3));
      assertFalse(sash5.equals((Object)sash4));
      assertFalse(sash5.equals((Object)sash0));
      assertEquals((-4843.0F), sash5.getWidth(), 0.01F);
      assertEquals((-113.23F), sash5.getXAxis(), 0.01F);
      assertEquals(3.4028235E38F, sash5.getYAxis(), 0.01F);
      assertEquals(3700.0F, sash5.getStartAngle(), 0.01F);
      assertEquals(2.0F, sash5.getEndAngle(), 0.01F);
      
      sashArray0[5] = sash5;
      Sash sash6 = new Sash(941.724F, 3.4028235E38F, 3.4028235E38F, (-181.7248F), 4730.388F);
      assertNotNull(sash6);
      assertFalse(sash6.equals((Object)sash4));
      assertFalse(sash6.equals((Object)sash5));
      assertFalse(sash6.equals((Object)sash2));
      assertFalse(sash6.equals((Object)sash3));
      assertFalse(sash6.equals((Object)sash1));
      assertFalse(sash6.equals((Object)sash0));
      assertEquals(3.4028235E38F, sash6.getYAxis(), 0.01F);
      assertEquals((-181.7248F), sash6.getStartAngle(), 0.01F);
      assertEquals(941.724F, sash6.getXAxis(), 0.01F);
      assertEquals(3.4028235E38F, sash6.getWidth(), 0.01F);
      assertEquals(4730.388F, sash6.getEndAngle(), 0.01F);
      
      sashArray0[6] = sash6;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow((String) null, "NNWuJ=(K7g@v\t[p'", "com.eteks.sweethome3d.model.HomePieceOfFurniture$6", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-181.7248F), 4730.388F, 4730.388F, 4730.388F, false, (-181.7248F), 4730.388F, sashArray0, (float[][]) null, (String) null, true, true, false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(7, sashArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(4730.388F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$6", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(4730.388F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals((-181.7248F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(4730.388F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-181.7248F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(4730.388F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogDoorOrWindow0.getName());
      assertTrue(resourceURLContent0.isMultiPartResource());
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(7, sashArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(4730.388F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$6", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(4730.388F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals((-181.7248F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(4730.388F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-181.7248F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(4730.388F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogDoorOrWindow0.getName());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-181.7248F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-90.8624F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(2365.194F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(4730.388F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(4730.388F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(4730.388F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4730.388F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", homeDoorOrWindow0.getName());
      assertEquals(4730.388F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals((-181.7248F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$6", homeDoorOrWindow0.getDescription());
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(7, sashArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(4730.388F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$6", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(4730.388F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals((-181.7248F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(4730.388F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-181.7248F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(4730.388F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogDoorOrWindow0.getName());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-181.7248F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-90.8624F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(2365.194F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(4730.388F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(4730.388F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(4730.388F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4730.388F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", homeDoorOrWindow0.getName());
      assertEquals(4730.388F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals((-181.7248F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$6", homeDoorOrWindow0.getDescription());
      assertEquals(4730.388F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$6", homeDoorOrWindow1.getDescription());
      assertEquals(2365.194F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(4730.388F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(4730.388F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals("NNWuJ=(K7g@v\t[p'", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(4730.388F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-90.8624F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(4730.388F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-181.7248F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-181.7248F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      
      boolean boolean0 = homeDoorOrWindow1.isDoorOrWindow();
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(7, sashArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(boolean0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(4730.388F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$6", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(4730.388F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals((-181.7248F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(4730.388F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-181.7248F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(4730.388F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogDoorOrWindow0.getName());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-181.7248F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-90.8624F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(2365.194F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(4730.388F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(4730.388F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(4730.388F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(4730.388F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", homeDoorOrWindow0.getName());
      assertEquals(4730.388F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals((-181.7248F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$6", homeDoorOrWindow0.getDescription());
      assertEquals(4730.388F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$6", homeDoorOrWindow1.getDescription());
      assertEquals(2365.194F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(4730.388F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(4730.388F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals("NNWuJ=(K7g@v\t[p'", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(4730.388F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-90.8624F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(4730.388F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-181.7248F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-181.7248F), homeDoorOrWindow1.getWallThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal((double) (-5));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-5), bigDecimal0.shortValue());
      assertEquals((byte) (-5), bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 109.29348F, 109.29348F, 109.29348F, 109.29348F, true, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((short) (-5), bigDecimal0.shortValue());
      assertEquals((byte) (-5), bigDecimal0.byteValue());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(109.29348F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(109.29348F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(109.29348F, catalogLight0.getDepth(), 0.01F);
      assertEquals(109.29348F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((short) (-5), bigDecimal0.shortValue());
      assertEquals((byte) (-5), bigDecimal0.byteValue());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(109.29348F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(109.29348F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(109.29348F, catalogLight0.getDepth(), 0.01F);
      assertEquals(109.29348F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(109.29348F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(109.29348F, homeLight0.getWidth(), 0.01F);
      assertEquals(109.29348F, homeLight0.getDepth(), 0.01F);
      assertEquals(109.29348F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(54.64674F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(54.64674F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(109.29348F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      
      homeLight0.setHeight(109.29348F);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((short) (-5), bigDecimal0.shortValue());
      assertEquals((byte) (-5), bigDecimal0.byteValue());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(109.29348F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(109.29348F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(109.29348F, catalogLight0.getDepth(), 0.01F);
      assertEquals(109.29348F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(109.29348F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(109.29348F, homeLight0.getWidth(), 0.01F);
      assertEquals(109.29348F, homeLight0.getDepth(), 0.01F);
      assertEquals(109.29348F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(54.64674F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(54.64674F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(109.29348F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[2];
      Level level0 = new Level("RN~KWuJ=(K7g@v\t[p'", (-4120.5137F), (-4431.324F), 0.0F);
      assertNotNull(level0);
      assertTrue(level0.isVisible());
      assertEquals((-4431.324F), level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-4120.5137F), level0.getElevation(), 0.01F);
      assertEquals("RN~KWuJ=(K7g@v\t[p'", level0.getName());
      
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(879.39734F, 0.0F, 0.0F, 0.0F, 879.39734F);
      assertNotNull(sash0);
      assertEquals(0.0F, sash0.getYAxis(), 0.01F);
      assertEquals(0.0F, sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getWidth(), 0.01F);
      assertEquals(879.39734F, sash0.getXAxis(), 0.01F);
      assertEquals(879.39734F, sash0.getEndAngle(), 0.01F);
      
      sashArray0[0] = sash0;
      Integer integer0 = new Integer((-2030));
      assertNotNull(integer0);
      assertEquals((-2030), (int)integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("RN~KWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, (-35), 1269.8F, 0.5F, 3511.69F, true, (-1187.8658F), (-2806.0632F), sashArray0, integer0, (float[][]) null, true, (-4431.324F), true);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      assertEquals(0.5F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3511.69F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals((-35.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1187.8658F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-4431.324F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-2030), (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals((-2806.0632F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1269.8F, catalogDoorOrWindow0.getDepth(), 0.01F);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(1, sashArray0.length);
      assertEquals(0.5F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3511.69F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals((-35.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1187.8658F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-4431.324F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-2030), (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals((-2806.0632F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1269.8F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(634.9F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-17.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1269.8F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-35.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(3511.69F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2030), (int)homePieceOfFurniture0.getColor());
      assertEquals(3511.69F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertNotNull(homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertEquals(1, sashArray0.length);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(0.5F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3511.69F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals((-35.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1187.8658F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-4431.324F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-2030), (int)catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals((-2806.0632F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1269.8F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(634.9F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-17.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1269.8F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-35.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(3511.69F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2030), (int)homePieceOfFurniture0.getColor());
      assertEquals(3511.69F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2030), (int)homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homePieceOfFurniture1.getName());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertTrue(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(634.9F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(1269.8F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(3511.69F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(3511.69F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertEquals((-35.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals((-17.5F), homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[10];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      Float float1 = new Float(473.68286F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(473.68286F, (float)float1, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal(15);
      assertNotNull(bigDecimal0);
      assertEquals((byte)15, bigDecimal0.byteValue());
      assertEquals((short)15, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("VALUE_ADDED_TAX_PERCENTAGE", "", "VALUE_ADDED_TAX_PERCENTAGE", temporaryURLContent0, temporaryURLContent0, 0.0F, 473.68286F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(10, lightSourceArray0.length);
      assertEquals((byte)15, bigDecimal0.byteValue());
      assertEquals((short)15, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(473.68286F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getDescription());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getId());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(10, lightSourceArray0.length);
      assertEquals((byte)15, bigDecimal0.byteValue());
      assertEquals((short)15, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(473.68286F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getDescription());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getId());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(236.84143F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight0.getDescription());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(473.68286F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(10, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)15, bigDecimal0.byteValue());
      assertEquals((short)15, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(473.68286F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getDescription());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getId());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(236.84143F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight0.getDescription());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(473.68286F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(473.68286F, homeLight1.getDepth(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight1.getCatalogId());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(236.84143F, homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(string0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(10, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((byte)15, bigDecimal0.byteValue());
      assertEquals((short)15, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(473.68286F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getDescription());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getId());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(236.84143F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight0.getDescription());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(473.68286F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      
      homeLight1.setAngle(473.68286F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(10, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)15, bigDecimal0.byteValue());
      assertEquals((short)15, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(473.68286F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getDescription());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getId());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(236.84143F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight0.getDescription());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(473.68286F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(473.68286F, homeLight1.getDepth(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight1.getCatalogId());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertEquals(2.4439633F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(236.84143F, homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      
      boolean boolean0 = homeLight0.isBottomLeftPointAt(0.0F, 473.68286F, 15);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(10, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean0);
      assertEquals((byte)15, bigDecimal0.byteValue());
      assertEquals((short)15, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(473.68286F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getDescription());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getId());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(236.84143F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight0.getDescription());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(473.68286F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      
      HomeLight homeLight2 = homeLight0.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(10, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)15, bigDecimal0.byteValue());
      assertEquals((short)15, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(473.68286F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getDescription());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getId());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(236.84143F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight0.getDescription());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(473.68286F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("", homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight2.getCatalogId());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isMovable());
      assertEquals(236.84143F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(473.68286F, homeLight2.getDepth(), 0.01F);
      
      HomeLight homeLight3 = homeLight2.clone();
      assertNotNull(homeLight3);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight0);
      assertEquals(10, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertEquals((byte)15, bigDecimal0.byteValue());
      assertEquals((short)15, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(473.68286F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getDescription());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getId());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(236.84143F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight0.getDescription());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(473.68286F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals("", homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight2.getCatalogId());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isMovable());
      assertEquals(236.84143F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(473.68286F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight3.isBackFaceShown());
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertEquals("", homeLight3.getName());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isNameVisible());
      assertTrue(homeLight3.isMovable());
      assertTrue(homeLight3.isResizable());
      assertNull(homeLight3.getShininess());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(236.84143F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight3.getDescription());
      assertEquals(473.68286F, homeLight3.getDepth(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight3.getCatalogId());
      assertTrue(homeLight3.isVisible());
      assertTrue(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertNull(homeLight3.getCurrency());
      
      Level level0 = new Level("", 15, 15, 0.0F);
      assertNotNull(level0);
      assertEquals(15.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(15.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      
      HomeLight homeLight4 = (HomeLight)homeLight1.clone();
      assertNotNull(homeLight4);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight4);
      assertNotSame(homeLight4, homeLight2);
      assertNotSame(homeLight4, homeLight3);
      assertNotSame(homeLight4, homeLight0);
      assertNotSame(homeLight4, homeLight1);
      assertEquals(10, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight3));
      assertFalse(homeLight4.equals((Object)homeLight0));
      assertFalse(homeLight4.equals((Object)homeLight1));
      assertEquals((byte)15, bigDecimal0.byteValue());
      assertEquals((short)15, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(473.68286F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getDescription());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getId());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(236.84143F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight0.getDescription());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(473.68286F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(473.68286F, homeLight1.getDepth(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight1.getCatalogId());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertEquals(2.4439633F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(236.84143F, homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight4.isResizable());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight4.getDescription());
      assertNull(homeLight4.getShininess());
      assertTrue(homeLight4.isMovable());
      assertNull(homeLight4.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight4.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight4.getNameXOffset(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight4.getCatalogId());
      assertEquals(473.68286F, homeLight4.getDepth(), 0.01F);
      assertTrue(homeLight4.isVisible());
      assertTrue(homeLight4.isDeformable());
      assertEquals(0.0F, homeLight4.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight4.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight4.getPower(), 0.01F);
      assertNull(homeLight4.getCurrency());
      assertFalse(homeLight4.isModelMirrored());
      assertFalse(homeLight4.isBackFaceShown());
      assertTrue(homeLight4.isTexturable());
      assertEquals(2.4439633F, homeLight4.getAngle(), 0.01F);
      assertFalse(homeLight4.isDoorOrWindow());
      assertEquals(0.0F, homeLight4.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight4.getX(), 0.01F);
      assertNull(homeLight4.getColor());
      assertEquals(0.0F, homeLight4.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight4.getWidth(), 0.01F);
      assertEquals(236.84143F, homeLight4.getY(), 0.01F);
      assertFalse(homeLight4.isNameVisible());
      assertEquals("", homeLight4.getName());
      
      float float2 = homeLight0.getY();
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(10, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(236.84143F, float2, 0.01F);
      assertEquals((byte)15, bigDecimal0.byteValue());
      assertEquals((short)15, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(473.68286F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getDescription());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", catalogLight0.getId());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(236.84143F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight0.getDescription());
      assertEquals("VALUE_ADDED_TAX_PERCENTAGE", homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(473.68286F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal((-35));
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-35), bigDecimal0.byteValue());
      assertEquals((short) (-35), bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RN~KWuJ=(K7g@v\t[p'", "RN~KWuJ=(K7g@v\t[p'", "RN~KWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, (-4431.324F), (-4431.324F), (-4431.324F), (-4431.324F), false, lightSourceArray0, (float[][]) null, "RN~KWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte) (-35), bigDecimal0.byteValue());
      assertEquals((short) (-35), bigDecimal0.shortValue());
      assertEquals((-4431.324F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-4431.324F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-4431.324F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertEquals((-4431.324F), catalogLight0.getHeight(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((byte) (-35), bigDecimal0.byteValue());
      assertEquals((short) (-35), bigDecimal0.shortValue());
      assertEquals((-4431.324F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-4431.324F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-4431.324F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertEquals((-4431.324F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals((-4431.324F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-4431.324F), homeLight0.getElevation(), 0.01F);
      assertEquals((-2215.662F), homeLight0.getX(), 0.01F);
      assertEquals((-4431.324F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-2215.662F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals((-4431.324F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-4431.324F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("RN~KWuJ=(K7g@v\t[p'");
      assertNotNull(furnitureCategory0);
      assertEquals("RN~KWuJ=(K7g@v\t[p'", furnitureCategory0.getName());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte) (-35), bigDecimal0.byteValue());
      assertEquals((short) (-35), bigDecimal0.shortValue());
      assertEquals((-4431.324F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-4431.324F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-4431.324F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertEquals((-4431.324F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals((-4431.324F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-4431.324F), homeLight0.getElevation(), 0.01F);
      assertEquals((-2215.662F), homeLight0.getX(), 0.01F);
      assertEquals((-4431.324F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-2215.662F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals((-4431.324F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-4431.324F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-4431.324F), homeLight1.getHeight(), 0.01F);
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight1.getName());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-4431.324F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-4431.324F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals((-2215.662F), homeLight1.getX(), 0.01F);
      assertEquals((-2215.662F), homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals((-4431.324F), homeLight1.getElevation(), 0.01F);
      assertEquals((-4431.324F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      
      HomeLight homeLight2 = new HomeLight(homeLight0);
      assertNotNull(homeLight2);
      assertEquals(2, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((byte) (-35), bigDecimal0.byteValue());
      assertEquals((short) (-35), bigDecimal0.shortValue());
      assertEquals((-4431.324F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-4431.324F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-4431.324F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertEquals((-4431.324F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals((-4431.324F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-4431.324F), homeLight0.getElevation(), 0.01F);
      assertEquals((-2215.662F), homeLight0.getX(), 0.01F);
      assertEquals((-4431.324F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-2215.662F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals((-4431.324F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-4431.324F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight2.getCatalogId());
      assertTrue(homeLight2.isTexturable());
      assertEquals((-4431.324F), homeLight2.getHeight(), 0.01F);
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight2.getName());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals((-4431.324F), homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertEquals((-4431.324F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals((-2215.662F), homeLight2.getY(), 0.01F);
      assertEquals((-4431.324F), homeLight2.getElevation(), 0.01F);
      assertEquals((-2215.662F), homeLight2.getX(), 0.01F);
      assertEquals((-4431.324F), homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight2.getDescription());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      
      boolean boolean0 = homeLight1.isTopRightPointAt(2.0F, 2.0F, 2745.525F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean0);
      assertEquals((byte) (-35), bigDecimal0.byteValue());
      assertEquals((short) (-35), bigDecimal0.shortValue());
      assertEquals((-4431.324F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-4431.324F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-4431.324F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertEquals((-4431.324F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals((-4431.324F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-4431.324F), homeLight0.getElevation(), 0.01F);
      assertEquals((-2215.662F), homeLight0.getX(), 0.01F);
      assertEquals((-4431.324F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-2215.662F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals((-4431.324F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-4431.324F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-4431.324F), homeLight1.getHeight(), 0.01F);
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight1.getName());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-4431.324F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-4431.324F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals((-2215.662F), homeLight1.getX(), 0.01F);
      assertEquals((-2215.662F), homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals((-4431.324F), homeLight1.getElevation(), 0.01F);
      assertEquals((-4431.324F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      
      float float0 = homeLight0.getGroundElevation();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals(2, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((-4431.324F), float0, 0.01F);
      assertEquals((byte) (-35), bigDecimal0.byteValue());
      assertEquals((short) (-35), bigDecimal0.shortValue());
      assertEquals((-4431.324F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-4431.324F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-4431.324F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertEquals((-4431.324F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals((-4431.324F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-4431.324F), homeLight0.getElevation(), 0.01F);
      assertEquals((-2215.662F), homeLight0.getX(), 0.01F);
      assertEquals((-4431.324F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-2215.662F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals((-4431.324F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("RN~KWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-4431.324F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      assertNotNull(lightSource0);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(3700, lightSource0.getColor());
      assertEquals(5391.62F, lightSource0.getX(), 0.01F);
      assertEquals((-805.8F), lightSource0.getZ(), 0.01F);
      assertNull(lightSource0.getDiameter());
      
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float((-805.8F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-805.8F), (float)float1, 0.01F);
      
      Float float2 = new Float(4246.75F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(4246.75F, (float)float2, 0.01F);
      
      LightSource lightSource1 = new LightSource((-805.8F), 0.0F, (-1040.273F), 2, float2);
      assertNotNull(lightSource1);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-1040.273F), lightSource1.getZ(), 0.01F);
      assertEquals((-805.8F), lightSource1.getX(), 0.01F);
      assertEquals(4246.75F, lightSource1.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource1.getY(), 0.01F);
      assertEquals(2, lightSource1.getColor());
      
      BigDecimal bigDecimal0 = new BigDecimal(3700);
      assertNotNull(bigDecimal0);
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals((short)3700, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("", "RNWuJ=(K7g@v\t[p'", "", temporaryURLContent0, temporaryURLContent0, 5480.77F, 4246.75F, (-650.33F), (-2143.0F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal1, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2143.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-650.33F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(4246.75F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(5480.77F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2143.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-650.33F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(4246.75F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(5480.77F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(2123.375F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-650.33F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals((-2143.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(4246.75F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(5480.77F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-2143.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(2740.385F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2143.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-650.33F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(4246.75F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(5480.77F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(2123.375F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-650.33F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals((-2143.0F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(4246.75F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(5480.77F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-2143.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(2740.385F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(2123.375F, homeLight1.getY(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getName());
      assertTrue(homeLight1.isDeformable());
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(4246.75F, homeLight1.getDepth(), 0.01F);
      assertEquals(5480.77F, homeLight1.getWidth(), 0.01F);
      assertEquals((-2143.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals((-2143.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(2740.385F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals((-650.33F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("", homeLight1.getCatalogId());
      
      homeLight0.setElevation(1246.9795F);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2143.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-650.33F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(4246.75F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(5480.77F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(2123.375F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-650.33F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(1246.9795F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(1246.9795F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(4246.75F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(5480.77F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(2740.385F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      float float3 = homeLight0.getDepth();
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(4246.75F, float3, 0.01F);
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2143.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-650.33F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(4246.75F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(5480.77F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(2123.375F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-650.33F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(1246.9795F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(1246.9795F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(4246.75F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(5480.77F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(2740.385F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      homeLight1.setVisible(true);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2143.0F), catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-650.33F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(4246.75F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(5480.77F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(2123.375F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-650.33F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(1246.9795F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertEquals(1246.9795F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(4246.75F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(5480.77F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(2740.385F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(2123.375F, homeLight1.getY(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getName());
      assertTrue(homeLight1.isDeformable());
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(4246.75F, homeLight1.getDepth(), 0.01F);
      assertEquals(5480.77F, homeLight1.getWidth(), 0.01F);
      assertEquals((-2143.0F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals((-2143.0F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(2740.385F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals((-650.33F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("", homeLight1.getCatalogId());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource((-1460.8127F), (-1460.8127F), 0.0F, 0);
      assertNotNull(lightSource0);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(0, lightSource0.getColor());
      assertEquals((-1460.8127F), lightSource0.getY(), 0.01F);
      assertEquals((-1460.8127F), lightSource0.getX(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[7][8];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.3926991F;
      floatArray1[2] = (float) 0;
      floatArray1[3] = 0.3926991F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 141.614F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 0.3926991F;
      floatArray1[8] = (-1460.8127F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 141.614F;
      floatArray2[1] = (float) 0;
      floatArray2[2] = (-685.1179F);
      floatArray2[3] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (float) 0;
      floatArray3[1] = (-685.1179F);
      floatArray3[2] = (-1460.8127F);
      floatArray3[3] = (-685.1179F);
      floatArray3[4] = (float) 0;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[2];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = (-1460.8127F);
      floatArray4[1] = 3832.2F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[0];
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[6];
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray3));
      
      floatArray6[0] = (float) 0;
      floatArray6[1] = 0.0F;
      floatArray6[2] = (-1460.8127F);
      floatArray6[3] = 3832.2F;
      floatArray6[4] = 141.614F;
      floatArray6[5] = (-685.1179F);
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[4];
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray5));
      
      floatArray7[0] = 0.3926991F;
      floatArray7[1] = (float) 0;
      floatArray7[2] = 0.0F;
      floatArray7[3] = (-685.1179F);
      floatArray0[6] = floatArray7;
      CatalogLight catalogLight0 = new CatalogLight((String) null, "PRICE_VALUE_ADDED_TAX_INCLUDED", "PRICE_VALUE_ADDED_TAX_INCLUDED", uRLContent0, uRLContent0, uRLContent0, 0.0F, 0.0F, (-685.1179F), 0.3926991F, true, lightSourceArray0, floatArray0, "", true, true, false, (BigDecimal) null, (BigDecimal) null);
      assertNotNull(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(7, floatArray0.length);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-685.1179F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(7, floatArray0.length);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-685.1179F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getElevation(), 0.01F);
      assertEquals((-685.1179F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      
      Content content0 = homeLight0.getIcon();
      assertNotNull(content0);
      assertSame(uRLContent0, content0);
      assertSame(content0, uRLContent0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(7, floatArray0.length);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-685.1179F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getElevation(), 0.01F);
      assertEquals((-685.1179F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash(0.0F, (-1589.0F), (-1460.8127F), 1.0F, (-685.1179F));
      assertNotNull(sash0);
      assertEquals(1.0F, sash0.getStartAngle(), 0.01F);
      assertEquals((-1589.0F), sash0.getYAxis(), 0.01F);
      assertEquals(0.0F, sash0.getXAxis(), 0.01F);
      assertEquals((-685.1179F), sash0.getEndAngle(), 0.01F);
      assertEquals((-1460.8127F), sash0.getWidth(), 0.01F);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(1750.1166F, 0.0F, (-1460.8127F), (-1181.2013F), 0.5F);
      assertNotNull(sash1);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals((-1181.2013F), sash1.getStartAngle(), 0.01F);
      assertEquals(0.5F, sash1.getEndAngle(), 0.01F);
      assertEquals((-1460.8127F), sash1.getWidth(), 0.01F);
      assertEquals(0.0F, sash1.getYAxis(), 0.01F);
      assertEquals(1750.1166F, sash1.getXAxis(), 0.01F);
      
      sashArray0[1] = sash1;
      Integer integer0 = new Integer(8192);
      assertNotNull(integer0);
      assertEquals(8192, (int)integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow((String) null, content0, uRLContent0, 1.0F, 0.0F, (-1.0F), 0.0F, false, (-685.1179F), (-685.1179F), sashArray0, integer0, floatArray0, false, 0.0F, false);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(2, sashArray0.length);
      assertEquals(7, floatArray0.length);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-685.1179F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getElevation(), 0.01F);
      assertEquals((-685.1179F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(8192, (int)catalogDoorOrWindow0.getColor());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-685.1179F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-685.1179F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(2, sashArray0.length);
      assertEquals(7, floatArray0.length);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-685.1179F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getElevation(), 0.01F);
      assertEquals((-685.1179F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(8192, (int)catalogDoorOrWindow0.getColor());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-685.1179F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-685.1179F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-685.1179F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(8192, (int)homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals((-685.1179F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      
      homeDoorOrWindow0.setWidth(0.0F);
      assertSame(uRLContent0, content0);
      assertSame(content0, uRLContent0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(2, sashArray0.length);
      assertEquals(7, floatArray0.length);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-685.1179F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getName());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getElevation(), 0.01F);
      assertEquals((-685.1179F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertEquals("PRICE_VALUE_ADDED_TAX_INCLUDED", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(8192, (int)catalogDoorOrWindow0.getColor());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-685.1179F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-685.1179F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-685.1179F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(8192, (int)homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals((-685.1179F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      assertNotNull(lightSource0);
      assertEquals(5391.62F, lightSource0.getX(), 0.01F);
      assertEquals(3700, lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals((-805.8F), lightSource0.getZ(), 0.01F);
      
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float((double) (-805.8F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-805.8F), (float)float1, 0.01F);
      
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      
      homeLight0.setVisible(false);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isVisible());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      homeLight1.setNameAngle(0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isVisible());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      
      boolean boolean0 = homeLight0.isBottomRightPointAt(4.8F, 3700, 0.0F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isVisible());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      HomeTexture homeTexture0 = homeLight0.getTexture();
      assertNull(homeTexture0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isVisible());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      homeLight0.setDescription("Id(PZHY");
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Id(PZHY", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isVisible());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      homeLight0.move(0, 0.3926991F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Id(PZHY", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isVisible());
      assertEquals((-402.5073F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      TextStyle textStyle0 = homeLight0.getNameStyle();
      assertNull(textStyle0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("Id(PZHY", homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isVisible());
      assertEquals((-402.5073F), homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      assertNotNull(lightSource0);
      assertEquals((-805.8F), lightSource0.getZ(), 0.01F);
      assertEquals(5391.62F, lightSource0.getX(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(3700, lightSource0.getColor());
      
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(4246.75F, (float)float1, 0.01F);
      
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      assertNotNull(lightSource1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(3700, lightSource1.getColor());
      assertEquals(4246.75F, lightSource1.getZ(), 0.01F);
      assertEquals(0.0F, lightSource1.getX(), 0.01F);
      assertEquals((-650.33F), lightSource1.getY(), 0.01F);
      assertEquals(4246.75F, lightSource1.getDiameter(), 0.01F);
      
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isVisible());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      
      homeLight1.setElevation((-1040.273F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isVisible());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1040.273F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1040.273F), homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      
      float float2 = homeLight0.getDepth();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((-805.8F), float2, 0.01F);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      
      homeLight0.setDescription((String) null);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      
      float float3 = homeLight0.getHeight();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertNotEquals(float3, float2, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(4246.75F, float3, 0.01F);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy(".tmp", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals(".tmp", propertyChangeListenerProxy0.getPropertyName());
      
      homeLight0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(".tmp", propertyChangeListenerProxy0.getPropertyName());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 996.0F, 996.0F, 996.0F, 996.0F, true, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(996.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(996.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertEquals(996.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(996.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(996.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(996.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertEquals(996.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(996.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(996.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(498.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(996.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(498.0F, homeLight0.getX(), 0.01F);
      assertEquals(996.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(996.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(996.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      
      String string0 = bigDecimal0.toEngineeringString();
      assertNotNull(string0);
      assertEquals("1", string0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      Level level0 = new Level("RNWuJ=(K7g@v\t[p'", (-13), 996.0F, (-13));
      assertNotNull(level0);
      assertEquals("RNWuJ=(K7g@v\t[p'", level0.getName());
      assertEquals((-13.0F), level0.getElevation(), 0.01F);
      assertEquals(996.0F, level0.getFloorThickness(), 0.01F);
      assertEquals((-13.0F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      
      boolean boolean0 = homeLight0.isTopLeftPointAt((-13), 1.0F, 3.4028235E38F);
      assertEquals(2, lightSourceArray0.length);
      assertTrue(boolean0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(996.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(996.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertEquals(996.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(996.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(996.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(498.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(996.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(498.0F, homeLight0.getX(), 0.01F);
      assertEquals(996.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(996.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(996.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      
      homeLight0.setShininess((Float) null);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(996.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(996.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertEquals(996.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(996.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(996.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(498.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(996.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(498.0F, homeLight0.getX(), 0.01F);
      assertEquals(996.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(996.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(996.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      
      homeLight0.setName("com.eteks.sweethome3d.model.HomePieceOfFurniture$18");
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(996.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(996.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertEquals(996.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(996.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(996.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(498.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(996.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(498.0F, homeLight0.getX(), 0.01F);
      assertEquals(996.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$18", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(996.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(996.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((double) 0.6248775F);
      assertNotNull(float0);
      assertEquals(0.6248775F, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal((-16));
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-16), bigDecimal0.byteValue());
      assertEquals((short) (-16), bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("[9,[9_51,dQ", "[9,[9_51,dQ", "NAME_ANGLE", temporaryURLContent0, temporaryURLContent0, 0.6248775F, 0.6248775F, (-16), 0.6248775F, true, lightSourceArray0, (float[][]) null, "[9,[9_51,dQ", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((byte) (-16), bigDecimal0.byteValue());
      assertEquals((short) (-16), bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("[9,[9_51,dQ", catalogLight0.getName());
      assertEquals((-16.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.6248775F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.6248775F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.6248775F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((byte) (-16), bigDecimal0.byteValue());
      assertEquals((short) (-16), bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("[9,[9_51,dQ", catalogLight0.getName());
      assertEquals((-16.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.6248775F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.6248775F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.6248775F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.6248775F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals((-16.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.6248775F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.31243876F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.31243876F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      
      BigInteger bigInteger0 = bigDecimal0.toBigIntegerExact();
      assertNotNull(bigInteger0);
      assertEquals((byte) (-16), bigDecimal0.byteValue());
      assertEquals((short) (-16), bigDecimal0.shortValue());
      assertEquals((short) (-16), bigInteger0.shortValue());
      assertEquals((byte) (-16), bigInteger0.byteValue());
      
      boolean boolean0 = homeLight0.isTopLeftPointAt((-16), 0.0F, (-16));
      assertEquals(4, lightSourceArray0.length);
      assertTrue(boolean0);
      assertEquals((byte) (-16), bigDecimal0.byteValue());
      assertEquals((short) (-16), bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("[9,[9_51,dQ", catalogLight0.getName());
      assertEquals((-16.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.6248775F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.6248775F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.6248775F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.6248775F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals((-16.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.6248775F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.31243876F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.31243876F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte) (-16), bigDecimal0.byteValue());
      assertEquals((short) (-16), bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("[9,[9_51,dQ", catalogLight0.getName());
      assertEquals((-16.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.6248775F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.6248775F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.6248775F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.6248775F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals((-16.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.6248775F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.31243876F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.31243876F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.6248775F, homeLight1.getDepth(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight1.getName());
      assertEquals("NAME_ANGLE", homeLight1.getDescription());
      assertEquals(0.6248775F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.6248775F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight1.getCatalogId());
      assertEquals(0.31243876F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.31243876F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.6248775F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertEquals((-16.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("NAME_ANGLE", (Content) null, 2831.6F, 0.0F);
      assertNotNull(catalogTexture0);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals(2831.6F, catalogTexture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("NAME_ANGLE", catalogTexture0.getName());
      
      HomeLight homeLight2 = new HomeLight(homeLight1);
      assertNotNull(homeLight2);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte) (-16), bigDecimal0.byteValue());
      assertEquals((short) (-16), bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("[9,[9_51,dQ", catalogLight0.getName());
      assertEquals((-16.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.6248775F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.6248775F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.6248775F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.6248775F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals((-16.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.6248775F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.31243876F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.31243876F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.6248775F, homeLight1.getDepth(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight1.getName());
      assertEquals("NAME_ANGLE", homeLight1.getDescription());
      assertEquals(0.6248775F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.6248775F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight1.getCatalogId());
      assertEquals(0.31243876F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.31243876F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.6248775F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertEquals((-16.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-16.0F), homeLight2.getHeight(), 0.01F);
      assertEquals(0.6248775F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isMovable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals("[9,[9_51,dQ", homeLight2.getName());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.6248775F, homeLight2.getElevation(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.6248775F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getColor());
      assertEquals(0.6248775F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.31243876F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("[9,[9_51,dQ", homeLight2.getCatalogId());
      assertEquals(0.31243876F, homeLight2.getY(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight2.getDescription());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      
      HomeLight homeLight3 = homeLight2.clone();
      assertNotNull(homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertEquals((byte) (-16), bigDecimal0.byteValue());
      assertEquals((short) (-16), bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("[9,[9_51,dQ", catalogLight0.getName());
      assertEquals((-16.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.6248775F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.6248775F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.6248775F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.6248775F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals((-16.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.6248775F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.31243876F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.31243876F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.6248775F, homeLight1.getDepth(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight1.getName());
      assertEquals("NAME_ANGLE", homeLight1.getDescription());
      assertEquals(0.6248775F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.6248775F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight1.getCatalogId());
      assertEquals(0.31243876F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.31243876F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.6248775F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertEquals((-16.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-16.0F), homeLight2.getHeight(), 0.01F);
      assertEquals(0.6248775F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isMovable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals("[9,[9_51,dQ", homeLight2.getName());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.6248775F, homeLight2.getElevation(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.6248775F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getColor());
      assertEquals(0.6248775F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.31243876F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("[9,[9_51,dQ", homeLight2.getCatalogId());
      assertEquals(0.31243876F, homeLight2.getY(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight2.getDescription());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight3.isNameVisible());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertNull(homeLight3.getColor());
      assertFalse(homeLight3.isBackFaceShown());
      assertTrue(homeLight3.isDeformable());
      assertFalse(homeLight3.isModelMirrored());
      assertTrue(homeLight3.isVisible());
      assertEquals(0.6248775F, homeLight3.getElevation(), 0.01F);
      assertEquals(0.6248775F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.31243876F, homeLight3.getX(), 0.01F);
      assertEquals(0.6248775F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.31243876F, homeLight3.getY(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals("NAME_ANGLE", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals("[9,[9_51,dQ", homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.6248775F, homeLight3.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight3.getName());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertNull(homeLight3.getShininess());
      assertFalse(homeLight3.isResizable());
      assertTrue(homeLight3.isMovable());
      assertEquals((-16.0F), homeLight3.getHeight(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      
      BigDecimal bigDecimal1 = homeLight1.getValueAddedTax();
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte) (-16), bigDecimal0.byteValue());
      assertEquals((short) (-16), bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("[9,[9_51,dQ", catalogLight0.getName());
      assertEquals((-16.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.6248775F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.6248775F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.6248775F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.6248775F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals((-16.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.6248775F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.31243876F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.31243876F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.6248775F, homeLight1.getDepth(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight1.getName());
      assertEquals("NAME_ANGLE", homeLight1.getDescription());
      assertEquals(0.6248775F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.6248775F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight1.getCatalogId());
      assertEquals(0.31243876F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.31243876F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.6248775F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertEquals((-16.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((short)256, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      
      float float1 = homeLight0.getAngle();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((byte) (-16), bigDecimal0.byteValue());
      assertEquals((short) (-16), bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("[9,[9_51,dQ", catalogLight0.getName());
      assertEquals((-16.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.6248775F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.6248775F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.6248775F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.6248775F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals((-16.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.6248775F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.31243876F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.31243876F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = homeLight2.getCurrency();
      assertNull(string0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte) (-16), bigDecimal0.byteValue());
      assertEquals((short) (-16), bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("[9,[9_51,dQ", catalogLight0.getName());
      assertEquals((-16.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.6248775F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.6248775F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.6248775F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.6248775F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals((-16.0F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.6248775F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.31243876F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.31243876F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.6248775F, homeLight1.getDepth(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight1.getName());
      assertEquals("NAME_ANGLE", homeLight1.getDescription());
      assertEquals(0.6248775F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.6248775F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight1.getCatalogId());
      assertEquals(0.31243876F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.31243876F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.6248775F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertEquals((-16.0F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-16.0F), homeLight2.getHeight(), 0.01F);
      assertEquals(0.6248775F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isMovable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals("[9,[9_51,dQ", homeLight2.getName());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.6248775F, homeLight2.getElevation(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.6248775F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getColor());
      assertEquals(0.6248775F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.31243876F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("[9,[9_51,dQ", homeLight2.getCatalogId());
      assertEquals(0.31243876F, homeLight2.getY(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight2.getDescription());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.18809766232016);
      assertNotNull(float0);
      assertEquals(122.188095F, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("ELEVATION", "ELEVATION", "NAME_ANGE", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0, 0.0F, false, lightSourceArray0, (float[][]) null, "[9,[9_51,dQ", true, bigDecimal1, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals("NAME_ANGE", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals("NAME_ANGE", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("NAME_ANGE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      
      short short0 = bigDecimal1.shortValueExact();
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, short0);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      BigInteger bigInteger0 = bigDecimal1.toBigIntegerExact();
      assertNotNull(bigInteger0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      CatalogTexture catalogTexture0 = new CatalogTexture("NAME_ANGE", temporaryURLContent0, 0.0F, 0.0F);
      assertNotNull(catalogTexture0);
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("NAME_ANGE", catalogTexture0.getName());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertFalse(catalogTexture0.isModifiable());
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNotNull(homeTexture0);
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("NAME_ANGE", catalogTexture0.getName());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertFalse(catalogTexture0.isModifiable());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture0.getHeight(), 0.01F);
      assertEquals("NAME_ANGE", homeTexture0.getName());
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      
      homeLight0.setTexture(homeTexture0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals("NAME_ANGE", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("NAME_ANGE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("NAME_ANGE", catalogTexture0.getName());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertFalse(catalogTexture0.isModifiable());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture0.getHeight(), 0.01F);
      assertEquals("NAME_ANGE", homeTexture0.getName());
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      
      HomeTexture homeTexture1 = homeLight0.getTexture();
      assertNotNull(homeTexture1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(homeTexture1, homeTexture0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals("NAME_ANGE", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("NAME_ANGE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeTexture1.getWidth(), 0.01F);
      assertTrue(homeTexture1.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture1.getHeight(), 0.01F);
      assertEquals("NAME_ANGE", homeTexture1.getName());
      
      homeLight0.setName("NAME_ANGE");
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals("NAME_ANGE", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("NAME_ANGE", homeLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("NAME_ANGE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      
      homeLight0.setAngle((-1458.4592F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals("NAME_ANGE", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(5.5229483F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("NAME_ANGE", homeLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("NAME_ANGE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      
      String string0 = homeLight0.getDescription();
      assertNotNull(string0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals("NAME_ANGE", string0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals("NAME_ANGE", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(5.5229483F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("NAME_ANGE", homeLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("NAME_ANGE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal((-2144186572));
      assertNotNull(bigDecimal0);
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("ELEVATION", "ELEVATION", "NAME_ANGLE", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "[9,[9_51,dQ", true, bigDecimal1, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      
      BigInteger bigInteger0 = bigDecimal1.toBigIntegerExact();
      assertNotNull(bigInteger0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      boolean boolean0 = homeLight0.isTopLeftPointAt(0, 0.0F, 0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(boolean0);
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals("ELEVATION", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("NAME_ANGLE", homeLight1.getDescription());
      assertEquals("ELEVATION", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("HNq[}}'9z", temporaryURLContent0, 0.0F, 3.4028235E38F);
      assertNotNull(catalogTexture0);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("HNq[}}'9z", catalogTexture0.getName());
      assertEquals(0.0F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals(3.4028235E38F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      
      homeLight1.setNameAngle((-2144186572));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals("ELEVATION", homeLight1.getCatalogId());
      assertEquals(5.5221457F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("NAME_ANGLE", homeLight1.getDescription());
      assertEquals("ELEVATION", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      
      homeLight0.setY(2831.6F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(2831.6F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      Float float1 = new Float((double) 2831.6F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2831.6F, (float)float1, 0.01F);
      
      homeLight0.setShininess(float1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(2831.6F, homeLight0.getShininess(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(2831.6F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      HomeTexture homeTexture0 = homeLight1.getTexture();
      assertNull(homeTexture0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(2831.6F, homeLight0.getShininess(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(2831.6F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals("ELEVATION", homeLight1.getCatalogId());
      assertEquals(5.5221457F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("NAME_ANGLE", homeLight1.getDescription());
      assertEquals("ELEVATION", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      
      homeLight0.move(1.0F, (-2144186572));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(2831.6F, homeLight0.getShininess(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-2.14418381E9F), homeLight0.getY(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      BigDecimal bigDecimal2 = homeLight1.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)53, bigDecimal2.byteValue());
      assertEquals((short)20277, bigDecimal2.shortValue());
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(2831.6F, homeLight0.getShininess(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-2.14418381E9F), homeLight0.getY(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals("ELEVATION", homeLight1.getCatalogId());
      assertEquals(5.5221457F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("NAME_ANGLE", homeLight1.getDescription());
      assertEquals("ELEVATION", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      
      float[][] floatArray0 = homeLight0.getPoints();
      assertNotNull(floatArray0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(2831.6F, homeLight0.getShininess(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-2.14418381E9F), homeLight0.getY(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      homeLight0.setNameAngle((-2144186572));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(2831.6F, homeLight0.getShininess(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-2.14418381E9F), homeLight0.getY(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(5.5221457F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      Level level0 = new Level("NAME_ANGLE", 0, (-843.9313F), 702.5F);
      Level level1 = level0.clone();
      homeLight1.setLevel(level1);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(5.5221457F, homeLight0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      assertNotNull(float0);
      assertEquals(2344.0F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 4246.75F, 2344, float0);
      assertNotNull(lightSource0);
      assertEquals(0.0F, lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(2344.0F, lightSource0.getDiameter(), 0.01F);
      assertEquals(4246.75F, lightSource0.getZ(), 0.01F);
      assertEquals(2344, lightSource0.getColor());
      
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float(122.7);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(122.7F, (float)float1, 0.01F);
      
      LightSource lightSource1 = new LightSource((-4536.1626F), (-4536.1626F), 5391.62F, 2344, float1);
      assertNotNull(lightSource1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(5391.62F, lightSource1.getZ(), 0.01F);
      assertEquals(2344, lightSource1.getColor());
      assertEquals(122.7F, lightSource1.getDiameter(), 0.01F);
      assertEquals((-4536.1626F), lightSource1.getY(), 0.01F);
      assertEquals((-4536.1626F), lightSource1.getX(), 0.01F);
      
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(5391.62F, 0.0F, (-805.8F), 2344);
      assertNotNull(lightSource2);
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertNull(lightSource2.getDiameter());
      assertEquals(0.0F, lightSource2.getY(), 0.01F);
      assertEquals(5391.62F, lightSource2.getX(), 0.01F);
      assertEquals((-805.8F), lightSource2.getZ(), 0.01F);
      assertEquals(2344, lightSource2.getColor());
      
      lightSourceArray0[2] = lightSource2;
      Float float2 = new Float(122.7);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(122.7F, (float)float2, 0.01F);
      
      LightSource lightSource3 = new LightSource(0.0F, (-650.33F), 4246.75F, 2344, float2);
      assertNotNull(lightSource3);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(lightSource3.equals((Object)lightSource1));
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertEquals(2344, lightSource3.getColor());
      assertEquals(4246.75F, lightSource3.getZ(), 0.01F);
      assertEquals(122.7F, lightSource3.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource3.getX(), 0.01F);
      assertEquals((-650.33F), lightSource3.getY(), 0.01F);
      
      lightSourceArray0[3] = lightSource3;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash(1038.0046F, 1727.2463F, (-125.71624F), 1.0F, 406.34F);
      assertNotNull(sash0);
      assertEquals(1.0F, sash0.getStartAngle(), 0.01F);
      assertEquals((-125.71624F), sash0.getWidth(), 0.01F);
      assertEquals(1038.0046F, sash0.getXAxis(), 0.01F);
      assertEquals(406.34F, sash0.getEndAngle(), 0.01F);
      assertEquals(1727.2463F, sash0.getYAxis(), 0.01F);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1040.273F), 1.0F, 4246.75F, 0.3926991F, (-417.46558F));
      assertNotNull(sash1);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(0.3926991F, sash1.getStartAngle(), 0.01F);
      assertEquals(4246.75F, sash1.getWidth(), 0.01F);
      assertEquals(1.0F, sash1.getYAxis(), 0.01F);
      assertEquals((-1040.273F), sash1.getXAxis(), 0.01F);
      assertEquals((-417.46558F), sash1.getEndAngle(), 0.01F);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(2344, 0.0F, 0.0F, (-4536.1626F), 406.34F);
      assertNotNull(sash2);
      assertFalse(sash2.equals((Object)sash1));
      assertFalse(sash2.equals((Object)sash0));
      assertEquals(406.34F, sash2.getEndAngle(), 0.01F);
      assertEquals(2344.0F, sash2.getXAxis(), 0.01F);
      assertEquals((-4536.1626F), sash2.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash2.getWidth(), 0.01F);
      assertEquals(0.0F, sash2.getYAxis(), 0.01F);
      
      sashArray0[2] = sash2;
      Sash sash3 = new Sash((-1.0F), (-1.0F), (-1457.833F), (-1.0F), 3700.0F);
      assertNotNull(sash3);
      assertFalse(sash3.equals((Object)sash2));
      assertFalse(sash3.equals((Object)sash0));
      assertFalse(sash3.equals((Object)sash1));
      assertEquals((-1.0F), sash3.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash3.getXAxis(), 0.01F);
      assertEquals(3700.0F, sash3.getEndAngle(), 0.01F);
      assertEquals((-1.0F), sash3.getStartAngle(), 0.01F);
      assertEquals((-1457.833F), sash3.getWidth(), 0.01F);
      
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(5391.62F, 0.5F, (-824.53735F), (-445.5F), 4246.75F);
      assertNotNull(sash4);
      assertFalse(sash4.equals((Object)sash2));
      assertFalse(sash4.equals((Object)sash0));
      assertFalse(sash4.equals((Object)sash3));
      assertFalse(sash4.equals((Object)sash1));
      assertEquals((-824.53735F), sash4.getWidth(), 0.01F);
      assertEquals(5391.62F, sash4.getXAxis(), 0.01F);
      assertEquals((-445.5F), sash4.getStartAngle(), 0.01F);
      assertEquals(0.5F, sash4.getYAxis(), 0.01F);
      assertEquals(4246.75F, sash4.getEndAngle(), 0.01F);
      
      sashArray0[4] = sash4;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "4;&GS]xPyKg}{", "", temporaryURLContent0, temporaryURLContent0, uRLContent0, 0.0F, (-1457.833F), 0.0F, 3519.433F, false, (-445.5F), (-4536.1626F), sashArray0, (float[][]) null, " doesn't contain texture ", true, false, true, bigDecimal0, bigDecimal0, "");
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(5, sashArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("4;&GS]xPyKg}{", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(" doesn't contain texture ", catalogDoorOrWindow0.getCreator());
      assertEquals((-4536.1626F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3519.433F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1457.833F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-445.5F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(5, sashArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("4;&GS]xPyKg}{", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(" doesn't contain texture ", catalogDoorOrWindow0.getCreator());
      assertEquals((-4536.1626F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3519.433F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1457.833F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-445.5F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals("4;&GS]xPyKg}{", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3519.433F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-445.5F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(3519.433F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1457.833F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-4536.1626F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-728.9165F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      float float3 = homeDoorOrWindow0.getGroundElevation();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(5, sashArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals(3519.433F, float3, 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("4;&GS]xPyKg}{", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(" doesn't contain texture ", catalogDoorOrWindow0.getCreator());
      assertEquals((-4536.1626F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3519.433F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1457.833F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-445.5F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals("4;&GS]xPyKg}{", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3519.433F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-445.5F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(3519.433F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1457.833F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-4536.1626F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-728.9165F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((double) 4246.75F);
      assertNotNull(float0);
      assertEquals(4246.75F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, 0.0F, 3700);
      assertNotNull(lightSource0);
      assertEquals(0.0F, lightSource0.getZ(), 0.01F);
      assertEquals(3700, lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertEquals(5391.62F, lightSource0.getX(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      
      Float float1 = new Float(4246.75F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(4246.75F, (float)float1, 0.01F);
      
      lightSourceArray0[3] = lightSourceArray0[2];
      BigDecimal bigDecimal0 = new BigDecimal(3700);
      assertNotNull(bigDecimal0);
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      BigDecimal bigDecimal2 = bigDecimal0.pow(3700);
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      
      homeLight0.setNameAngle(3700);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(5.4870396F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(5.4870396F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getColor());
      assertEquals(5.4870396F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      
      homeLight0.setVisible(false);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(5.4870396F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      homeLight1.setNameAngle(3700);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(5.4870396F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getColor());
      assertEquals(5.4870396F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      
      homeLight0.setNameAngle(0.0F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      homeLight0.setShininess(float1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(4246.75F, homeLight0.getShininess(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      homeLight0.setDescription("RNWuJ=(K7g@v\t[p'");
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(4246.75F, homeLight0.getShininess(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      homeLight0.move(3899.248F, 1.0F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(3899.248F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(4246.75F, homeLight0.getShininess(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      BigDecimal bigDecimal3 = homeLight1.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal3);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte) (-24), bigDecimal3.byteValue());
      assertEquals((short)7400, bigDecimal3.shortValue());
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(3899.248F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(4246.75F, homeLight0.getShininess(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getColor());
      assertEquals(5.4870396F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      
      float[][] floatArray0 = homeLight0.getPoints();
      assertNotNull(floatArray0);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(3899.248F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(4246.75F, homeLight0.getShininess(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      boolean boolean0 = homeLight0.isBottomRightPointAt(1.0F, 0.0F, 2.0F);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean0);
      assertEquals((short)3700, bigDecimal0.shortValue());
      assertEquals((byte)116, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(3899.248F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(4246.75F, homeLight0.getShininess(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      assertNotNull(lightSource0);
      assertEquals((-805.8F), lightSource0.getZ(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(5391.62F, lightSource0.getX(), 0.01F);
      assertEquals(3700, lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      
      lightSourceArray0[2] = lightSource0;
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float0);
      assertNotNull(lightSource1);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(3700, lightSource1.getColor());
      assertEquals(4246.75F, lightSource1.getZ(), 0.01F);
      assertEquals(122.7F, lightSource1.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource1.getX(), 0.01F);
      assertEquals((-650.33F), lightSource1.getY(), 0.01F);
      
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      boolean boolean0 = homeLight0.isTopLeftPointAt(2.0F, 0.0F, 2.0F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(boolean0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      
      homeLight1.setElevation((-1040.273F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertEquals((-1040.273F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1040.273F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED;
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(4730.388F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(4730.388F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(4730.388F, catalogLight0.getHeight(), 0.01F);
      assertEquals(4730.388F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(4730.388F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(4730.388F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(4730.388F, catalogLight0.getHeight(), 0.01F);
      assertEquals(4730.388F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(4730.388F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(4730.388F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertEquals(2365.194F, homeLight0.getX(), 0.01F);
      assertEquals(4730.388F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(2365.194F, homeLight0.getY(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(4730.388F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(4730.388F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      
      homeLight0.setElevation(4730.388F);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(4730.388F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(4730.388F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(4730.388F, catalogLight0.getHeight(), 0.01F);
      assertEquals(4730.388F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(4730.388F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(4730.388F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertEquals(2365.194F, homeLight0.getX(), 0.01F);
      assertEquals(4730.388F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(2365.194F, homeLight0.getY(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(4730.388F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(4730.388F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      
      homeLight0.setDescription("NNWuJ=(K7g@v\t[p'");
      assertEquals(4, lightSourceArray0.length);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(4730.388F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(4730.388F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(4730.388F, catalogLight0.getHeight(), 0.01F);
      assertEquals(4730.388F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(4730.388F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(4730.388F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertEquals(2365.194F, homeLight0.getX(), 0.01F);
      assertEquals(4730.388F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(2365.194F, homeLight0.getY(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(4730.388F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(4730.388F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      
      boolean boolean0 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "NNWuJ=(K7g@v\t[p'");
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isTopRightPointAt(4730.388F, (-1239.7449F), 3069.0F);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(4730.388F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(4730.388F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(4730.388F, catalogLight0.getHeight(), 0.01F);
      assertEquals(4730.388F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(4730.388F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(4730.388F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertEquals(2365.194F, homeLight0.getX(), 0.01F);
      assertEquals(4730.388F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(2365.194F, homeLight0.getY(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(4730.388F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(4730.388F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertNotNull(resourceURLContent0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      
      Sash[] sashArray0 = new Sash[7];
      Sash sash0 = new Sash((-1201.486F), 2.0F, (-1201.486F), 2.0F, 1069.0F);
      assertNotNull(sash0);
      assertEquals(2.0F, sash0.getYAxis(), 0.01F);
      assertEquals(2.0F, sash0.getStartAngle(), 0.01F);
      assertEquals((-1201.486F), sash0.getWidth(), 0.01F);
      assertEquals((-1201.486F), sash0.getXAxis(), 0.01F);
      assertEquals(1069.0F, sash0.getEndAngle(), 0.01F);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(2.0F, 2.0F, 458.68457F, 356.60056F, 2123.375F);
      assertNotNull(sash1);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(356.60056F, sash1.getStartAngle(), 0.01F);
      assertEquals(2.0F, sash1.getYAxis(), 0.01F);
      assertEquals(2.0F, sash1.getXAxis(), 0.01F);
      assertEquals(458.68457F, sash1.getWidth(), 0.01F);
      assertEquals(2123.375F, sash1.getEndAngle(), 0.01F);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(2088.31F, 2.0F, 2.0F, (-1040.273F), 452.5471F);
      assertNotNull(sash2);
      assertFalse(sash2.equals((Object)sash0));
      assertFalse(sash2.equals((Object)sash1));
      assertEquals((-1040.273F), sash2.getStartAngle(), 0.01F);
      assertEquals(452.5471F, sash2.getEndAngle(), 0.01F);
      assertEquals(2.0F, sash2.getWidth(), 0.01F);
      assertEquals(2088.31F, sash2.getXAxis(), 0.01F);
      assertEquals(2.0F, sash2.getYAxis(), 0.01F);
      
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(1069.0F, 0.3926991F, 1069.0F, (-1465.697F), 356.60056F);
      assertNotNull(sash3);
      assertFalse(sash3.equals((Object)sash2));
      assertFalse(sash3.equals((Object)sash0));
      assertFalse(sash3.equals((Object)sash1));
      assertEquals(1069.0F, sash3.getXAxis(), 0.01F);
      assertEquals((-1465.697F), sash3.getStartAngle(), 0.01F);
      assertEquals(0.3926991F, sash3.getYAxis(), 0.01F);
      assertEquals(356.60056F, sash3.getEndAngle(), 0.01F);
      assertEquals(1069.0F, sash3.getWidth(), 0.01F);
      
      sashArray0[3] = sash3;
      Sash sash4 = new Sash((-2130.5178F), 1.0F, 8192.0F, 1.0F, 1069.0F);
      assertNotNull(sash4);
      assertFalse(sash4.equals((Object)sash2));
      assertFalse(sash4.equals((Object)sash1));
      assertFalse(sash4.equals((Object)sash0));
      assertFalse(sash4.equals((Object)sash3));
      assertEquals((-2130.5178F), sash4.getXAxis(), 0.01F);
      assertEquals(8192.0F, sash4.getWidth(), 0.01F);
      assertEquals(1.0F, sash4.getYAxis(), 0.01F);
      assertEquals(1069.0F, sash4.getEndAngle(), 0.01F);
      assertEquals(1.0F, sash4.getStartAngle(), 0.01F);
      
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(0.0F, 356.60056F, (-2130.5178F), 458.68457F, (-1201.486F));
      assertNotNull(sash5);
      assertFalse(sash5.equals((Object)sash0));
      assertFalse(sash5.equals((Object)sash3));
      assertFalse(sash5.equals((Object)sash1));
      assertFalse(sash5.equals((Object)sash4));
      assertFalse(sash5.equals((Object)sash2));
      assertEquals(458.68457F, sash5.getStartAngle(), 0.01F);
      assertEquals(356.60056F, sash5.getYAxis(), 0.01F);
      assertEquals((-2130.5178F), sash5.getWidth(), 0.01F);
      assertEquals(0.0F, sash5.getXAxis(), 0.01F);
      assertEquals((-1201.486F), sash5.getEndAngle(), 0.01F);
      
      sashArray0[5] = sash5;
      Sash sash6 = new Sash(0.5F, 0.5F, (-307.61F), 1069.0F, (-2130.5178F));
      assertNotNull(sash6);
      assertFalse(sash6.equals((Object)sash2));
      assertFalse(sash6.equals((Object)sash5));
      assertFalse(sash6.equals((Object)sash1));
      assertFalse(sash6.equals((Object)sash0));
      assertFalse(sash6.equals((Object)sash3));
      assertFalse(sash6.equals((Object)sash4));
      assertEquals(1069.0F, sash6.getStartAngle(), 0.01F);
      assertEquals(0.5F, sash6.getXAxis(), 0.01F);
      assertEquals((-2130.5178F), sash6.getEndAngle(), 0.01F);
      assertEquals(0.5F, sash6.getYAxis(), 0.01F);
      assertEquals((-307.61F), sash6.getWidth(), 0.01F);
      
      sashArray0[6] = sash6;
      float[][] floatArray0 = new float[6][1];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1.0F;
      floatArray1[1] = 458.68457F;
      floatArray1[2] = (-1201.486F);
      floatArray1[3] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 1.0F;
      floatArray2[1] = 1.0F;
      floatArray2[2] = 1353.876F;
      floatArray2[3] = 2088.31F;
      floatArray2[4] = 458.68457F;
      floatArray2[5] = 2088.31F;
      floatArray2[6] = 2.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[8];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 452.5471F;
      floatArray3[1] = 2123.375F;
      floatArray3[2] = (-1465.697F);
      floatArray3[3] = (-2215.662F);
      floatArray3[4] = (-2130.5178F);
      floatArray3[5] = 2088.31F;
      floatArray3[6] = (-1465.697F);
      floatArray3[7] = (-1040.273F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[2];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray1));
      
      floatArray4[0] = 2.0F;
      floatArray4[1] = 2088.31F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[6];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      floatArray5[0] = (-307.61F);
      floatArray5[1] = 8192.0F;
      floatArray5[2] = 2123.375F;
      floatArray5[3] = 0.0F;
      floatArray5[4] = (-1201.486F);
      floatArray5[5] = 0.5F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[7];
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray3));
      
      floatArray6[0] = 2.0F;
      floatArray6[1] = 356.60056F;
      floatArray6[2] = (-3441.396F);
      floatArray6[3] = 0.5F;
      floatArray6[4] = 0.3926991F;
      floatArray6[5] = 0.5F;
      floatArray6[6] = 0.0F;
      floatArray0[5] = floatArray6;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "?zN^5av|GX ~=lz", "?zN^5av|GX ~=lz", resourceURLContent0, resourceURLContent0, resourceURLContent0, 8192.0F, 8192.0F, 8192.0F, 1069.0F, true, 2088.31F, 8192.0F, sashArray0, floatArray0, "", true, true, false, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$12");
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(6, floatArray0.length);
      assertEquals(7, sashArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(8192.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$12", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("?zN^5av|GX ~=lz", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1069.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("?zN^5av|GX ~=lz", catalogDoorOrWindow0.getName());
      assertEquals(2088.31F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(8192.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(8192.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(8192.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(6, floatArray0.length);
      assertEquals(7, sashArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(8192.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$12", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("?zN^5av|GX ~=lz", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1069.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("?zN^5av|GX ~=lz", catalogDoorOrWindow0.getName());
      assertEquals(2088.31F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(8192.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(8192.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(8192.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(2088.31F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("?zN^5av|GX ~=lz", homeDoorOrWindow0.getName());
      assertEquals(8192.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("?zN^5av|GX ~=lz", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(4096.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(4096.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$12", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(8192.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(1069.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(8192.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(8192.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1069.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow1 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(6, floatArray0.length);
      assertEquals(7, sashArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(8192.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$12", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("?zN^5av|GX ~=lz", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1069.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("?zN^5av|GX ~=lz", catalogDoorOrWindow0.getName());
      assertEquals(2088.31F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(8192.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(8192.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(8192.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(2088.31F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("?zN^5av|GX ~=lz", homeDoorOrWindow0.getName());
      assertEquals(8192.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("?zN^5av|GX ~=lz", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(4096.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(4096.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$12", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(8192.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(1069.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(8192.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(8192.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1069.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$12", homeDoorOrWindow1.getCurrency());
      assertEquals(8192.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(8192.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(2088.31F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1069.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(1069.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(8192.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("?zN^5av|GX ~=lz", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(4096.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(8192.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(4096.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("?zN^5av|GX ~=lz", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isResizable());
      
      boolean boolean0 = homeDoorOrWindow1.isAtLevel((Level) null);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(6, floatArray0.length);
      assertEquals(7, sashArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(boolean0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(8192.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$12", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("?zN^5av|GX ~=lz", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1069.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("?zN^5av|GX ~=lz", catalogDoorOrWindow0.getName());
      assertEquals(2088.31F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(8192.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(8192.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(8192.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(2088.31F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("?zN^5av|GX ~=lz", homeDoorOrWindow0.getName());
      assertEquals(8192.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("?zN^5av|GX ~=lz", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(4096.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(4096.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$12", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(8192.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(1069.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(8192.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(8192.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1069.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$12", homeDoorOrWindow1.getCurrency());
      assertEquals(8192.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(8192.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(2088.31F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(1069.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(1069.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(8192.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("?zN^5av|GX ~=lz", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(4096.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(8192.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(4096.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("?zN^5av|GX ~=lz", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isResizable());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      assertNotNull(float0);
      assertEquals(2344.0F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 4246.75F, 2344, float0);
      assertNotNull(lightSource0);
      assertEquals(2344.0F, lightSource0.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(2344, lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getX(), 0.01F);
      assertEquals(4246.75F, lightSource0.getZ(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float(122.7);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(122.7F, (float)float1, 0.01F);
      
      LightSource lightSource1 = new LightSource((-4536.1626F), 0.0F, 5391.62F, 2344, float1);
      assertNotNull(lightSource1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals((-4536.1626F), lightSource1.getX(), 0.01F);
      assertEquals(5391.62F, lightSource1.getZ(), 0.01F);
      assertEquals(0.0F, lightSource1.getY(), 0.01F);
      assertEquals(122.7F, lightSource1.getDiameter(), 0.01F);
      assertEquals(2344, lightSource1.getColor());
      
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      assertNotNull(lightSource2);
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertNull(lightSource2.getDiameter());
      assertEquals(3700, lightSource2.getColor());
      assertEquals(5391.62F, lightSource2.getX(), 0.01F);
      assertEquals(0.0F, lightSource2.getY(), 0.01F);
      assertEquals((-805.8F), lightSource2.getZ(), 0.01F);
      
      lightSourceArray0[2] = lightSource2;
      Float float2 = new Float(122.7);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(122.7F, (float)float2, 0.01F);
      
      LightSource lightSource3 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float2);
      assertNotNull(lightSource3);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertFalse(lightSource3.equals((Object)lightSource1));
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertEquals(0.0F, lightSource3.getX(), 0.01F);
      assertEquals((-650.33F), lightSource3.getY(), 0.01F);
      assertEquals(4246.75F, lightSource3.getZ(), 0.01F);
      assertEquals(122.7F, lightSource3.getDiameter(), 0.01F);
      assertEquals(3700, lightSource3.getColor());
      
      lightSourceArray0[3] = lightSource3;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals("", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      
      homeLight1.setElevation((-1040.273F));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1040.273F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals((-1040.273F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals("", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      
      float float3 = homeLight0.getX();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(0.0F, float3, 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      
      homeLight1.setVisible(false);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1040.273F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals((-1040.273F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals("", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      assertNotNull(float0);
      assertEquals(2344.0F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 4246.75F, 2344, float0);
      assertNotNull(lightSource0);
      assertEquals(2344, lightSource0.getColor());
      assertEquals(4246.75F, lightSource0.getZ(), 0.01F);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(0.0F, lightSource0.getX(), 0.01F);
      assertEquals(2344.0F, lightSource0.getDiameter(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float(122.7);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(122.7F, (float)float1, 0.01F);
      
      LightSource lightSource1 = new LightSource((-4536.1626F), 0.0F, 5391.62F, 2344, float1);
      assertNotNull(lightSource1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(122.7F, lightSource1.getDiameter(), 0.01F);
      assertEquals(2344, lightSource1.getColor());
      assertEquals(5391.62F, lightSource1.getZ(), 0.01F);
      assertEquals((-4536.1626F), lightSource1.getX(), 0.01F);
      assertEquals(0.0F, lightSource1.getY(), 0.01F);
      
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      assertNotNull(lightSource2);
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertEquals(5391.62F, lightSource2.getX(), 0.01F);
      assertEquals(0.0F, lightSource2.getY(), 0.01F);
      assertEquals(3700, lightSource2.getColor());
      assertNull(lightSource2.getDiameter());
      assertEquals((-805.8F), lightSource2.getZ(), 0.01F);
      
      lightSourceArray0[2] = lightSource2;
      Float float2 = new Float(4246.75F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(4246.75F, (float)float2, 0.01F);
      
      LightSource lightSource3 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float2);
      assertNotNull(lightSource3);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertFalse(lightSource3.equals((Object)lightSource1));
      assertEquals(3700, lightSource3.getColor());
      assertEquals(4246.75F, lightSource3.getZ(), 0.01F);
      assertEquals(4246.75F, lightSource3.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource3.getX(), 0.01F);
      assertEquals((-650.33F), lightSource3.getY(), 0.01F);
      
      lightSourceArray0[3] = lightSource3;
      BigDecimal bigDecimal0 = new BigDecimal(2344);
      assertNotNull(bigDecimal0);
      assertEquals((short)2344, bigDecimal0.shortValue());
      assertEquals((byte)40, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)2344, bigDecimal0.shortValue());
      assertEquals((byte)40, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals((short)2344, bigDecimal0.shortValue());
      assertEquals((byte)40, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((short)2344, bigDecimal0.shortValue());
      assertEquals((byte)40, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      
      BigDecimal bigDecimal2 = homeLight0.getValueAddedTax();
      assertNotNull(bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals((byte)40, bigDecimal2.byteValue());
      assertEquals((short)2344, bigDecimal2.shortValue());
      assertEquals((short)2344, bigDecimal0.shortValue());
      assertEquals((byte)40, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      
      homeLight1.setElevation((-1040.273F));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1040.273F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals((-1040.273F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((short)2344, bigDecimal0.shortValue());
      assertEquals((byte)40, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      
      Integer integer0 = new Integer(3700);
      assertNotNull(integer0);
      assertEquals(3700, (int)integer0);
      
      homeLight1.setColor(integer0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1040.273F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals((-1040.273F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(3700, (int)homeLight1.getColor());
      assertEquals((short)2344, bigDecimal0.shortValue());
      assertEquals((byte)40, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.18809766232016);
      assertNotNull(float0);
      assertEquals(122.188095F, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      CatalogLight catalogLight0 = new CatalogLight(".E_WiaB!6'BNCAF&", ".E_WiaB!6'BNCAF&", ".E_WiaB!6'BNCAF&", temporaryURLContent0, temporaryURLContent0, 745.57F, 0.0F, 0.0F, 1076.1362F, true, lightSourceArray0, (float[][]) null, ".E_WiaB!6'BNCAF&", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(".E_WiaB!6'BNCAF&", catalogLight0.getName());
      assertEquals(".E_WiaB!6'BNCAF&", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(".E_WiaB!6'BNCAF&", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals(".E_WiaB!6'BNCAF&", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1076.1362F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(745.57F, catalogLight0.getWidth(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(".E_WiaB!6'BNCAF&", catalogLight0.getName());
      assertEquals(".E_WiaB!6'BNCAF&", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(".E_WiaB!6'BNCAF&", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals(".E_WiaB!6'BNCAF&", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1076.1362F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(745.57F, catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1076.1362F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(".E_WiaB!6'BNCAF&", homeLight0.getName());
      assertEquals(1076.1362F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(".E_WiaB!6'BNCAF&", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(372.785F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(".E_WiaB!6'BNCAF&", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(745.57F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      
      BigInteger bigInteger0 = bigDecimal0.toBigIntegerExact();
      assertNotNull(bigInteger0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigInteger0.byteValue());
      assertEquals((short)10, bigInteger0.shortValue());
      
      boolean boolean1 = homeLight0.isTopLeftPointAt(8, 0.0F, 1408.4231F);
      assertEquals(4, lightSourceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(".E_WiaB!6'BNCAF&", catalogLight0.getName());
      assertEquals(".E_WiaB!6'BNCAF&", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(".E_WiaB!6'BNCAF&", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals(".E_WiaB!6'BNCAF&", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1076.1362F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(745.57F, catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1076.1362F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(".E_WiaB!6'BNCAF&", homeLight0.getName());
      assertEquals(1076.1362F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(".E_WiaB!6'BNCAF&", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(372.785F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(".E_WiaB!6'BNCAF&", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(745.57F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      
      float float1 = homeLight0.getDepth();
      assertEquals(4, lightSourceArray0.length);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(".E_WiaB!6'BNCAF&", catalogLight0.getName());
      assertEquals(".E_WiaB!6'BNCAF&", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(".E_WiaB!6'BNCAF&", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals(".E_WiaB!6'BNCAF&", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1076.1362F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(745.57F, catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1076.1362F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(".E_WiaB!6'BNCAF&", homeLight0.getName());
      assertEquals(1076.1362F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(".E_WiaB!6'BNCAF&", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(372.785F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(".E_WiaB!6'BNCAF&", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(745.57F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      
      boolean boolean2 = homeLight0.isTopLeftPointAt(8, 0.0F, 0.0F);
      assertEquals(4, lightSourceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(".E_WiaB!6'BNCAF&", catalogLight0.getName());
      assertEquals(".E_WiaB!6'BNCAF&", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(".E_WiaB!6'BNCAF&", catalogLight0.getCreator());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals(".E_WiaB!6'BNCAF&", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertEquals(1076.1362F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(745.57F, catalogLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1076.1362F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(".E_WiaB!6'BNCAF&", homeLight0.getName());
      assertEquals(1076.1362F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(".E_WiaB!6'BNCAF&", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(372.785F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(".E_WiaB!6'BNCAF&", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(745.57F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      assertNotNull(float0);
      assertEquals(2344.0F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 4246.75F, 2344, float0);
      assertNotNull(lightSource0);
      assertEquals(4246.75F, lightSource0.getZ(), 0.01F);
      assertEquals(2344.0F, lightSource0.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource0.getX(), 0.01F);
      assertEquals(2344, lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float(122.7);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(122.7F, (float)float1, 0.01F);
      
      LightSource lightSource1 = new LightSource((-4536.1626F), 0.0F, 5391.62F, 2344, float1);
      assertNotNull(lightSource1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(0.0F, lightSource1.getY(), 0.01F);
      assertEquals(5391.62F, lightSource1.getZ(), 0.01F);
      assertEquals(122.7F, lightSource1.getDiameter(), 0.01F);
      assertEquals(2344, lightSource1.getColor());
      assertEquals((-4536.1626F), lightSource1.getX(), 0.01F);
      
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      assertNotNull(lightSource2);
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertEquals(5391.62F, lightSource2.getX(), 0.01F);
      assertEquals(0.0F, lightSource2.getY(), 0.01F);
      assertNull(lightSource2.getDiameter());
      assertEquals(3700, lightSource2.getColor());
      assertEquals((-805.8F), lightSource2.getZ(), 0.01F);
      
      lightSourceArray0[2] = lightSource2;
      Float float2 = new Float(4246.75F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(4246.75F, (float)float2, 0.01F);
      
      LightSource lightSource3 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float2);
      assertNotNull(lightSource3);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertFalse(lightSource3.equals((Object)lightSource1));
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertEquals(4246.75F, lightSource3.getZ(), 0.01F);
      assertEquals(3700, lightSource3.getColor());
      assertEquals(4246.75F, lightSource3.getDiameter(), 0.01F);
      assertEquals((-650.33F), lightSource3.getY(), 0.01F);
      assertEquals(0.0F, lightSource3.getX(), 0.01F);
      
      lightSourceArray0[3] = lightSource3;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      
      homeLight1.setElevation((-1040.273F));
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals((-1040.273F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1040.273F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = new BigDecimal((-35));
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-35), bigDecimal0.byteValue());
      assertEquals((short) (-35), bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("TN`KWuJ=(Kg@v:[|pk", "TN`KWuJ=(Kg@v:[|pk", "TN`KWuJ=(Kg@v:[|pk", temporaryURLContent0, temporaryURLContent0, (-4429.3784F), (-4429.3784F), (-4429.3784F), (-4429.3784F), true, lightSourceArray0, (float[][]) null, "TN`KWuJ=(Kg@v:[|pk", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((byte) (-35), bigDecimal0.byteValue());
      assertEquals((short) (-35), bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", catalogLight0.getName());
      assertEquals((-4429.3784F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-4429.3784F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-4429.3784F), catalogLight0.getElevation(), 0.01F);
      assertEquals("TN`KWuJ=(Kg@v:[|pk", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-4429.3784F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", catalogLight0.getCreator());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", catalogLight0.getDescription());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((byte) (-35), bigDecimal0.byteValue());
      assertEquals((short) (-35), bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", catalogLight0.getName());
      assertEquals((-4429.3784F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-4429.3784F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-4429.3784F), catalogLight0.getElevation(), 0.01F);
      assertEquals("TN`KWuJ=(Kg@v:[|pk", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-4429.3784F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", catalogLight0.getCreator());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", catalogLight0.getDescription());
      assertEquals((-4429.3784F), homeLight0.getHeight(), 0.01F);
      assertEquals((-4429.3784F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-4429.3784F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-4429.3784F), homeLight0.getElevation(), 0.01F);
      assertEquals((-2214.6892F), homeLight0.getY(), 0.01F);
      assertEquals((-2214.6892F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-4429.3784F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte) (-35), bigDecimal0.byteValue());
      assertEquals((short) (-35), bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", catalogLight0.getName());
      assertEquals((-4429.3784F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-4429.3784F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-4429.3784F), catalogLight0.getElevation(), 0.01F);
      assertEquals("TN`KWuJ=(Kg@v:[|pk", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-4429.3784F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", catalogLight0.getCreator());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", catalogLight0.getDescription());
      assertEquals((-4429.3784F), homeLight0.getHeight(), 0.01F);
      assertEquals((-4429.3784F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-4429.3784F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-4429.3784F), homeLight0.getElevation(), 0.01F);
      assertEquals((-2214.6892F), homeLight0.getY(), 0.01F);
      assertEquals((-2214.6892F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-4429.3784F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-4429.3784F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals((-2214.6892F), homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals((-2214.6892F), homeLight1.getX(), 0.01F);
      assertEquals((-4429.3784F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", homeLight1.getCatalogId());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-4429.3784F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-4429.3784F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-4429.3784F), homeLight1.getWidth(), 0.01F);
      assertEquals("TN`KWuJ=(Kg@v:[|pk", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isMovable());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", homeLight1.getDescription());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      
      boolean boolean0 = homeLight0.isBottomRightPointAt((-4429.3784F), (-4429.3784F), 387.8F);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean0);
      assertEquals((byte) (-35), bigDecimal0.byteValue());
      assertEquals((short) (-35), bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", catalogLight0.getName());
      assertEquals((-4429.3784F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-4429.3784F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-4429.3784F), catalogLight0.getElevation(), 0.01F);
      assertEquals("TN`KWuJ=(Kg@v:[|pk", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-4429.3784F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", catalogLight0.getCreator());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", catalogLight0.getDescription());
      assertEquals((-4429.3784F), homeLight0.getHeight(), 0.01F);
      assertEquals((-4429.3784F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-4429.3784F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-4429.3784F), homeLight0.getElevation(), 0.01F);
      assertEquals((-2214.6892F), homeLight0.getY(), 0.01F);
      assertEquals((-2214.6892F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-4429.3784F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      
      Integer integer0 = Integer.getInteger("");
      assertNull(integer0);
      
      homeLight0.setColor((Integer) null);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((byte) (-35), bigDecimal0.byteValue());
      assertEquals((short) (-35), bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", catalogLight0.getName());
      assertEquals((-4429.3784F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-4429.3784F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-4429.3784F), catalogLight0.getElevation(), 0.01F);
      assertEquals("TN`KWuJ=(Kg@v:[|pk", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-4429.3784F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", catalogLight0.getCreator());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", catalogLight0.getDescription());
      assertEquals((-4429.3784F), homeLight0.getHeight(), 0.01F);
      assertEquals((-4429.3784F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-4429.3784F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-4429.3784F), homeLight0.getElevation(), 0.01F);
      assertEquals((-2214.6892F), homeLight0.getY(), 0.01F);
      assertEquals((-2214.6892F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals("TN`KWuJ=(Kg@v:[|pk", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-4429.3784F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      assertNotNull(lightSource0);
      assertNull(lightSource0.getDiameter());
      assertEquals((-805.8F), lightSource0.getZ(), 0.01F);
      assertEquals(3700, lightSource0.getColor());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(5391.62F, lightSource0.getX(), 0.01F);
      
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float((-1285.3262F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1285.3262F), (float)float1, 0.01F);
      
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), (-1285.3262F), 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1285.3262F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1285.3262F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-1285.3262F), homeLight0.getHeight(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1285.3262F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-1285.3262F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1285.3262F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      
      BigDecimal bigDecimal2 = bigDecimal1.setScale(0);
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal2);
      assertSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((short)1, bigDecimal2.shortValue());
      assertEquals((byte)1, bigDecimal2.byteValue());
      
      homeLight1.setName("");
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1285.3262F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-1285.3262F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1285.3262F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      
      homeLight1.setElevation(3700);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1285.3262F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-1285.3262F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(3700.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(3700.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1285.3262F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotNull(homeLight2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1285.3262F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-1285.3262F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(3700.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(3700.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1285.3262F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals((-402.9F), homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getCatalogId());
      assertEquals((-805.8F), homeLight2.getDepth(), 0.01F);
      assertEquals(3700.0F, homeLight2.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getDescription());
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(3700.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals((-1285.3262F), homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      
      boolean boolean0 = homeLight2.containsPoint((-650.33F), 0.0F, (-269.187F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(boolean0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1285.3262F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-1285.3262F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(3700.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(3700.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1285.3262F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals((-402.9F), homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getCatalogId());
      assertEquals((-805.8F), homeLight2.getDepth(), 0.01F);
      assertEquals(3700.0F, homeLight2.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getDescription());
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(3700.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals((-1285.3262F), homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      
      homeLight1.setX(0.0F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1285.3262F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-1285.3262F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(3700.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(3700.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1285.3262F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      
      boolean boolean1 = homeLight1.isResizable();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertEquals(4, lightSourceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(boolean1);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1285.3262F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-1285.3262F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(3700.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(3700.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1285.3262F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      
      boolean boolean2 = homeLight0.isTexturable();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertTrue(boolean2);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1285.3262F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-1285.3262F), homeLight0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(121.16520255356444);
      assertNotNull(float0);
      assertEquals(121.1652F, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("ELEVATION", "ELEVATION", "NAME_ANGLE", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "[9,[9_51,dQ", true, bigDecimal1, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      
      HomeLight homeLight1 = new HomeLight(homeLight0);
      assertNotNull(homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertEquals("ELEVATION", homeLight1.getName());
      assertEquals("NAME_ANGLE", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("ELEVATION", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      
      homeLight0.setPower(0.0F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getPower(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      assertNotNull(homeLight2);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals("ELEVATION", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight2.getDescription());
      assertTrue(homeLight2.isTexturable());
      assertEquals("ELEVATION", homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isMovable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isResizable());
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("NAME_ANGLE");
      assertNotNull(furnitureCategory0);
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertEquals("NAME_ANGLE", furnitureCategory0.getName());
      
      HomeLight homeLight3 = new HomeLight(homeLight2);
      assertNotNull(homeLight3);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals("ELEVATION", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight2.getDescription());
      assertTrue(homeLight2.isTexturable());
      assertEquals("ELEVATION", homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isMovable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertTrue(homeLight3.isVisible());
      assertFalse(homeLight3.isBackFaceShown());
      assertTrue(homeLight3.isDeformable());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isMovable());
      assertTrue(homeLight3.isResizable());
      assertEquals("ELEVATION", homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals("NAME_ANGLE", homeLight3.getDescription());
      assertTrue(homeLight3.isTexturable());
      assertEquals("ELEVATION", homeLight3.getName());
      
      HomeLight homeLight4 = new HomeLight(homeLight0);
      assertNotNull(homeLight4);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight4.equals((Object)homeLight1));
      assertFalse(homeLight4.equals((Object)homeLight0));
      assertFalse(homeLight4.equals((Object)homeLight2));
      assertFalse(homeLight4.equals((Object)homeLight3));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getPower(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertNull(homeLight4.getStaircaseCutOutShape());
      assertNull(homeLight4.getShininess());
      assertEquals(0.0F, homeLight4.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight4.getPower(), 0.01F);
      assertEquals(0.0F, homeLight4.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight4.getNameXOffset(), 0.01F);
      assertTrue(homeLight4.isResizable());
      assertEquals("ELEVATION", homeLight4.getCatalogId());
      assertEquals(0.0F, homeLight4.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight4.getWidth(), 0.01F);
      assertEquals("ELEVATION", homeLight4.getName());
      assertEquals(0.0F, homeLight4.getElevation(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight4.getDescription());
      assertTrue(homeLight4.isTexturable());
      assertFalse(homeLight4.isNameVisible());
      assertFalse(homeLight4.isModelMirrored());
      assertFalse(homeLight4.isBackFaceShown());
      assertFalse(homeLight4.isDoorOrWindow());
      assertEquals(0.0F, homeLight4.getX(), 0.01F);
      assertEquals(0.0F, homeLight4.getY(), 0.01F);
      assertTrue(homeLight4.isDeformable());
      assertEquals(0.0F, homeLight4.getNameYOffset(), 0.01F);
      assertNull(homeLight4.getColor());
      assertEquals(0.0F, homeLight4.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight4.getHeight(), 0.01F);
      assertTrue(homeLight4.isVisible());
      assertNull(homeLight4.getCurrency());
      assertTrue(homeLight4.isMovable());
      
      HomeLight homeLight5 = new HomeLight(homeLight3);
      assertNotNull(homeLight5);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight4));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight4));
      assertFalse(homeLight5.equals((Object)homeLight0));
      assertFalse(homeLight5.equals((Object)homeLight3));
      assertFalse(homeLight5.equals((Object)homeLight2));
      assertFalse(homeLight5.equals((Object)homeLight1));
      assertFalse(homeLight5.equals((Object)homeLight4));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals("ELEVATION", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight2.getDescription());
      assertTrue(homeLight2.isTexturable());
      assertEquals("ELEVATION", homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isMovable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertTrue(homeLight3.isVisible());
      assertFalse(homeLight3.isBackFaceShown());
      assertTrue(homeLight3.isDeformable());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isMovable());
      assertTrue(homeLight3.isResizable());
      assertEquals("ELEVATION", homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals("NAME_ANGLE", homeLight3.getDescription());
      assertTrue(homeLight3.isTexturable());
      assertEquals("ELEVATION", homeLight3.getName());
      assertEquals("ELEVATION", homeLight5.getName());
      assertEquals(0.0F, homeLight5.getGroundElevation(), 0.01F);
      assertEquals("ELEVATION", homeLight5.getCatalogId());
      assertEquals(0.0F, homeLight5.getElevation(), 0.01F);
      assertFalse(homeLight5.isDoorOrWindow());
      assertEquals("NAME_ANGLE", homeLight5.getDescription());
      assertEquals(0.0F, homeLight5.getAngle(), 0.01F);
      assertTrue(homeLight5.isTexturable());
      assertEquals(0.5F, homeLight5.getPower(), 0.01F);
      assertFalse(homeLight5.isNameVisible());
      assertNull(homeLight5.getColor());
      assertEquals(0.0F, homeLight5.getNameYOffset(), 0.01F);
      assertFalse(homeLight5.isModelMirrored());
      assertFalse(homeLight5.isBackFaceShown());
      assertEquals(0.0F, homeLight5.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight5.getHeight(), 0.01F);
      assertNull(homeLight5.getCurrency());
      assertEquals(0.0F, homeLight5.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight5.getNameXOffset(), 0.01F);
      assertTrue(homeLight5.isMovable());
      assertNull(homeLight5.getShininess());
      assertEquals(0.0F, homeLight5.getY(), 0.01F);
      assertTrue(homeLight5.isDeformable());
      assertEquals(0.0F, homeLight5.getX(), 0.01F);
      assertNull(homeLight5.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight5.getDepth(), 0.01F);
      assertTrue(homeLight5.isResizable());
      assertTrue(homeLight5.isVisible());
      
      boolean boolean0 = homeLight5.isPointAt(0.0F, 0, 0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight4);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight5);
      assertNotSame(homeLight3, homeLight5);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight4);
      assertNotSame(homeLight5, homeLight0);
      assertNotSame(homeLight5, homeLight3);
      assertNotSame(homeLight5, homeLight2);
      assertNotSame(homeLight5, homeLight1);
      assertNotSame(homeLight5, homeLight4);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight4));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight5));
      assertFalse(homeLight3.equals((Object)homeLight5));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight4));
      assertFalse(homeLight5.equals((Object)homeLight0));
      assertFalse(homeLight5.equals((Object)homeLight3));
      assertFalse(homeLight5.equals((Object)homeLight2));
      assertFalse(homeLight5.equals((Object)homeLight1));
      assertFalse(homeLight5.equals((Object)homeLight4));
      assertTrue(boolean0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals("ELEVATION", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight2.getDescription());
      assertTrue(homeLight2.isTexturable());
      assertEquals("ELEVATION", homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isMovable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isResizable());
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertTrue(homeLight3.isVisible());
      assertFalse(homeLight3.isBackFaceShown());
      assertTrue(homeLight3.isDeformable());
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isMovable());
      assertTrue(homeLight3.isResizable());
      assertEquals("ELEVATION", homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertEquals(0.0F, homeLight3.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals("NAME_ANGLE", homeLight3.getDescription());
      assertTrue(homeLight3.isTexturable());
      assertEquals("ELEVATION", homeLight3.getName());
      assertEquals("ELEVATION", homeLight5.getName());
      assertEquals(0.0F, homeLight5.getGroundElevation(), 0.01F);
      assertEquals("ELEVATION", homeLight5.getCatalogId());
      assertEquals(0.0F, homeLight5.getElevation(), 0.01F);
      assertFalse(homeLight5.isDoorOrWindow());
      assertEquals("NAME_ANGLE", homeLight5.getDescription());
      assertEquals(0.0F, homeLight5.getAngle(), 0.01F);
      assertTrue(homeLight5.isTexturable());
      assertEquals(0.5F, homeLight5.getPower(), 0.01F);
      assertFalse(homeLight5.isNameVisible());
      assertNull(homeLight5.getColor());
      assertEquals(0.0F, homeLight5.getNameYOffset(), 0.01F);
      assertFalse(homeLight5.isModelMirrored());
      assertFalse(homeLight5.isBackFaceShown());
      assertEquals(0.0F, homeLight5.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight5.getHeight(), 0.01F);
      assertNull(homeLight5.getCurrency());
      assertEquals(0.0F, homeLight5.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight5.getNameXOffset(), 0.01F);
      assertTrue(homeLight5.isMovable());
      assertNull(homeLight5.getShininess());
      assertEquals(0.0F, homeLight5.getY(), 0.01F);
      assertTrue(homeLight5.isDeformable());
      assertEquals(0.0F, homeLight5.getX(), 0.01F);
      assertNull(homeLight5.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight5.getDepth(), 0.01F);
      assertTrue(homeLight5.isResizable());
      assertTrue(homeLight5.isVisible());
      
      boolean boolean1 = homeLight2.isNameCenterPointAt(0.0F, 464.0F, 0.0F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight4);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight5);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight4));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight5));
      assertFalse(boolean1);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals("ELEVATION", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight2.getDescription());
      assertTrue(homeLight2.isTexturable());
      assertEquals("ELEVATION", homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isMovable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isResizable());
      
      boolean boolean2 = homeLight0.isTexturable();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight5);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight4);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight5));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertTrue(boolean2);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getPower(), 0.01F);
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      
      HomeLight homeLight6 = new HomeLight(homeLight2);
      assertNotNull(homeLight6);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight6.equals((Object)homeLight5));
      assertFalse(homeLight6.equals((Object)homeLight0));
      assertFalse(homeLight6.equals((Object)homeLight1));
      assertFalse(homeLight6.equals((Object)homeLight4));
      assertFalse(homeLight6.equals((Object)homeLight2));
      assertFalse(homeLight6.equals((Object)homeLight3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight4));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight5));
      assertEquals(0.0F, homeLight6.getHeight(), 0.01F);
      assertTrue(homeLight6.isMovable());
      assertEquals(0.0F, homeLight6.getWidth(), 0.01F);
      assertFalse(homeLight6.isNameVisible());
      assertEquals(0.5F, homeLight6.getPower(), 0.01F);
      assertNull(homeLight6.getCurrency());
      assertFalse(homeLight6.isModelMirrored());
      assertEquals(0.0F, homeLight6.getNameYOffset(), 0.01F);
      assertNull(homeLight6.getColor());
      assertEquals(0.0F, homeLight6.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight6.getAngle(), 0.01F);
      assertEquals("ELEVATION", homeLight6.getCatalogId());
      assertTrue(homeLight6.isTexturable());
      assertEquals("ELEVATION", homeLight6.getName());
      assertFalse(homeLight6.isDoorOrWindow());
      assertFalse(homeLight6.isBackFaceShown());
      assertEquals(0.0F, homeLight6.getDepth(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight6.getDescription());
      assertNull(homeLight6.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight6.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight6.getNameAngle(), 0.01F);
      assertTrue(homeLight6.isVisible());
      assertTrue(homeLight6.isResizable());
      assertTrue(homeLight6.isDeformable());
      assertNull(homeLight6.getShininess());
      assertEquals(0.0F, homeLight6.getX(), 0.01F);
      assertEquals(0.0F, homeLight6.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight6.getY(), 0.01F);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals("ELEVATION", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight2.getDescription());
      assertTrue(homeLight2.isTexturable());
      assertEquals("ELEVATION", homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isMovable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isResizable());
      
      boolean boolean3 = homeLight6.isPointAt(1.322829F, 297.55722F, (-6.963786F));
      assertNotSame(homeLight6, homeLight5);
      assertNotSame(homeLight6, homeLight0);
      assertNotSame(homeLight6, homeLight1);
      assertNotSame(homeLight6, homeLight4);
      assertNotSame(homeLight6, homeLight2);
      assertNotSame(homeLight6, homeLight3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight4);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight5);
      assertNotSame(homeLight2, homeLight6);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight6.equals((Object)homeLight5));
      assertFalse(homeLight6.equals((Object)homeLight0));
      assertFalse(homeLight6.equals((Object)homeLight1));
      assertFalse(homeLight6.equals((Object)homeLight4));
      assertFalse(homeLight6.equals((Object)homeLight2));
      assertFalse(homeLight6.equals((Object)homeLight3));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight4));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight5));
      assertFalse(homeLight2.equals((Object)homeLight6));
      assertFalse(boolean3);
      assertEquals(0.0F, homeLight6.getHeight(), 0.01F);
      assertTrue(homeLight6.isMovable());
      assertEquals(0.0F, homeLight6.getWidth(), 0.01F);
      assertFalse(homeLight6.isNameVisible());
      assertEquals(0.5F, homeLight6.getPower(), 0.01F);
      assertNull(homeLight6.getCurrency());
      assertFalse(homeLight6.isModelMirrored());
      assertEquals(0.0F, homeLight6.getNameYOffset(), 0.01F);
      assertNull(homeLight6.getColor());
      assertEquals(0.0F, homeLight6.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight6.getAngle(), 0.01F);
      assertEquals("ELEVATION", homeLight6.getCatalogId());
      assertTrue(homeLight6.isTexturable());
      assertEquals("ELEVATION", homeLight6.getName());
      assertFalse(homeLight6.isDoorOrWindow());
      assertFalse(homeLight6.isBackFaceShown());
      assertEquals(0.0F, homeLight6.getDepth(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight6.getDescription());
      assertNull(homeLight6.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight6.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight6.getNameAngle(), 0.01F);
      assertTrue(homeLight6.isVisible());
      assertTrue(homeLight6.isResizable());
      assertTrue(homeLight6.isDeformable());
      assertNull(homeLight6.getShininess());
      assertEquals(0.0F, homeLight6.getX(), 0.01F);
      assertEquals(0.0F, homeLight6.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight6.getY(), 0.01F);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals("ELEVATION", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight2.getDescription());
      assertTrue(homeLight2.isTexturable());
      assertEquals("ELEVATION", homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isMovable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isResizable());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal((-2144186572));
      assertNotNull(bigDecimal0);
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("ELEVATION", "ELEVATION", "NAME_ANGLE", temporaryURLContent0, temporaryURLContent0, 0.6248775F, 0.6248775F, 0, 0.6248775F, true, lightSourceArray0, (float[][]) null, "[9,[9_51,dQ", true, bigDecimal1, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.6248775F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.6248775F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.6248775F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.6248775F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.6248775F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.6248775F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.6248775F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.31243876F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.31243876F, homeLight0.getX(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getGroundElevation(), 0.01F);
      
      BigInteger bigInteger0 = bigDecimal1.toBigIntegerExact();
      assertNotNull(bigInteger0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      boolean boolean0 = homeLight0.isTopLeftPointAt(0, 0.0F, 0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertTrue(boolean0);
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.6248775F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.6248775F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.6248775F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.6248775F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.31243876F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.31243876F, homeLight0.getX(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getGroundElevation(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.6248775F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.6248775F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.6248775F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.6248775F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.31243876F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.31243876F, homeLight0.getX(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.6248775F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.6248775F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("ELEVATION", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.6248775F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.6248775F, homeLight1.getDepth(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight1.getDescription());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.31243876F, homeLight1.getX(), 0.01F);
      assertEquals("ELEVATION", homeLight1.getName());
      assertEquals(0.31243876F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("HNq[}}'9z", temporaryURLContent0, 0.6248775F, 3.4028235E38F);
      assertNotNull(catalogTexture0);
      assertEquals(0.6248775F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getId());
      assertEquals("HNq[}}'9z", catalogTexture0.getName());
      assertEquals(3.4028235E38F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNotNull(homeTexture0);
      assertEquals(0.6248775F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getId());
      assertEquals("HNq[}}'9z", catalogTexture0.getName());
      assertEquals(3.4028235E38F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("HNq[}}'9z", homeTexture0.getName());
      assertEquals(3.4028235E38F, homeTexture0.getHeight(), 0.01F);
      assertEquals(0.6248775F, homeTexture0.getWidth(), 0.01F);
      
      homeLight0.setTexture(homeTexture0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.6248775F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.6248775F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.6248775F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.6248775F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.31243876F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.31243876F, homeLight0.getX(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.6248775F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getId());
      assertEquals("HNq[}}'9z", catalogTexture0.getName());
      assertEquals(3.4028235E38F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("HNq[}}'9z", homeTexture0.getName());
      assertEquals(3.4028235E38F, homeTexture0.getHeight(), 0.01F);
      assertEquals(0.6248775F, homeTexture0.getWidth(), 0.01F);
      
      homeLight1.setModelMirrored(true);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.6248775F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.6248775F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.6248775F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.6248775F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.31243876F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.31243876F, homeLight0.getX(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.6248775F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.6248775F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("ELEVATION", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.6248775F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.6248775F, homeLight1.getDepth(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight1.getDescription());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.31243876F, homeLight1.getX(), 0.01F);
      assertEquals("ELEVATION", homeLight1.getName());
      assertEquals(0.31243876F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      
      homeLight0.setHeight(1.0F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.6248775F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.6248775F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.6248775F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.6248775F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.31243876F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.31243876F, homeLight0.getX(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getGroundElevation(), 0.01F);
      
      homeLight0.setX((-1.0F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.6248775F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.6248775F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.6248775F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.6248775F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getX(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.31243876F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.6248775F, homeLight0.getGroundElevation(), 0.01F);
      
      homeLight1.setNameYOffset(1.0F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.6248775F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.6248775F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.6248775F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.6248775F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getX(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.31243876F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.6248775F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.6248775F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.6248775F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("ELEVATION", homeLight1.getCatalogId());
      assertEquals(1.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.6248775F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.6248775F, homeLight1.getDepth(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight1.getDescription());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.31243876F, homeLight1.getX(), 0.01F);
      assertEquals("ELEVATION", homeLight1.getName());
      assertEquals(0.31243876F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      
      boolean boolean1 = homeLight0.isModelMirrored();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean1);
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.6248775F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.6248775F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.6248775F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.6248775F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getX(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.31243876F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.6248775F, homeLight0.getGroundElevation(), 0.01F);
      
      float float1 = homeLight1.getWidth();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.6248775F, float1, 0.01F);
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.6248775F, catalogLight0.getDepth(), 0.01F);
      assertEquals("ELEVATION", catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.6248775F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("ELEVATION", catalogLight0.getName());
      assertEquals("NAME_ANGLE", catalogLight0.getDescription());
      assertEquals(0.6248775F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.6248775F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeLight0.getX(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.6248775F, homeLight0.getWidth(), 0.01F);
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertEquals("ELEVATION", homeLight0.getName());
      assertEquals(0.31243876F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.6248775F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.6248775F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.6248775F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("ELEVATION", homeLight1.getCatalogId());
      assertEquals(1.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.6248775F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.6248775F, homeLight1.getDepth(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight1.getDescription());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.31243876F, homeLight1.getX(), 0.01F);
      assertEquals("ELEVATION", homeLight1.getName());
      assertEquals(0.31243876F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(110.19351753729158);
      assertNotNull(float0);
      assertEquals(110.19352F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(206.65924F, (-1950.3734F), 3700, 3700);
      assertNotNull(lightSource0);
      assertEquals(206.65924F, lightSource0.getX(), 0.01F);
      assertEquals((-1950.3734F), lightSource0.getY(), 0.01F);
      assertEquals(3700.0F, lightSource0.getZ(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(3700, lightSource0.getColor());
      
      Float float1 = new Float(0.0F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      LightSource lightSource1 = new LightSource(0.0F, 0.0F, (-1950.3734F), 3700, float0);
      assertNotNull(lightSource1);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(110.19352F, lightSource1.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource1.getX(), 0.01F);
      assertEquals((-1950.3734F), lightSource1.getZ(), 0.01F);
      assertEquals(0.0F, lightSource1.getY(), 0.01F);
      assertEquals(3700, lightSource1.getColor());
      
      BigDecimal bigDecimal0 = new BigDecimal((-2144186572));
      assertNotNull(bigDecimal0);
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)20276, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "N}!H(rkTWMDlHlg8Qd", "", temporaryURLContent0, temporaryURLContent0, 3700, 3700, (-805.8F), (-805.8F), false, lightSourceArray0, (float[][]) null, "NAME_ANGLE", true, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((-805.8F), catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-805.8F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertEquals("N}!H(rkTWMDlHlg8Qd", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(3700.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      assertNotNull(furnitureCategory0);
      assertEquals("", furnitureCategory0.getName());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      
      catalogLight0.setCategory(furnitureCategory0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((-805.8F), catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-805.8F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertEquals("N}!H(rkTWMDlHlg8Qd", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(3700.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertEquals("", furnitureCategory0.getName());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((-805.8F), catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-805.8F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertEquals("N}!H(rkTWMDlHlg8Qd", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(3700.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(3700.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals(1850.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(1850.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(3700.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-805.8F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals("N}!H(rkTWMDlHlg8Qd", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      assertNotNull(homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((-805.8F), catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-805.8F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertEquals("N}!H(rkTWMDlHlg8Qd", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(3700.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(3700.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals((-805.8F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals("", homeLight1.getDescription());
      assertEquals((-805.8F), homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(3700.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1850.0F, homeLight1.getX(), 0.01F);
      assertEquals("N}!H(rkTWMDlHlg8Qd", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(1850.0F, homeLight1.getY(), 0.01F);
      assertEquals((-805.8F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      
      homeLight1.setDepth(3700);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((-805.8F), catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-805.8F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertEquals("N}!H(rkTWMDlHlg8Qd", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(3700.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(3700.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals((-805.8F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals("", homeLight1.getDescription());
      assertEquals((-805.8F), homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(3700.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1850.0F, homeLight1.getX(), 0.01F);
      assertEquals("N}!H(rkTWMDlHlg8Qd", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(1850.0F, homeLight1.getY(), 0.01F);
      assertEquals((-805.8F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotNull(homeLight2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((-805.8F), catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-805.8F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertEquals("N}!H(rkTWMDlHlg8Qd", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(3700.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(3700.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals((-805.8F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals("", homeLight1.getDescription());
      assertEquals((-805.8F), homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(3700.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1850.0F, homeLight1.getX(), 0.01F);
      assertEquals("N}!H(rkTWMDlHlg8Qd", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(1850.0F, homeLight1.getY(), 0.01F);
      assertEquals((-805.8F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-805.8F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(1850.0F, homeLight2.getY(), 0.01F);
      assertEquals(1850.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals((-805.8F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals("N}!H(rkTWMDlHlg8Qd", homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(3700.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(3700.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals("", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isMovable());
      assertEquals((-805.8F), homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isDeformable());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      
      float float2 = homeLight2.getDepth();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals(3700.0F, float2, 0.01F);
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((-805.8F), catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-805.8F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertEquals("N}!H(rkTWMDlHlg8Qd", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(3700.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(3700.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals((-805.8F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals("", homeLight1.getDescription());
      assertEquals((-805.8F), homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(3700.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1850.0F, homeLight1.getX(), 0.01F);
      assertEquals("N}!H(rkTWMDlHlg8Qd", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(1850.0F, homeLight1.getY(), 0.01F);
      assertEquals((-805.8F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-805.8F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(1850.0F, homeLight2.getY(), 0.01F);
      assertEquals(1850.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals((-805.8F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals("N}!H(rkTWMDlHlg8Qd", homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(3700.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(3700.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals("", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isMovable());
      assertEquals((-805.8F), homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isDeformable());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      
      homeLight0.setDescription("NAME_ANGLE");
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((-805.8F), catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-805.8F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertEquals("N}!H(rkTWMDlHlg8Qd", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(3700.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(3700.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals(1850.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(1850.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-805.8F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(3700.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-805.8F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isMovable());
      assertEquals("N}!H(rkTWMDlHlg8Qd", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      
      homeLight1.setDescription("");
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((-805.8F), catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-805.8F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertEquals("N}!H(rkTWMDlHlg8Qd", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(3700.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(3700.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals((-805.8F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals("", homeLight1.getDescription());
      assertEquals((-805.8F), homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(3700.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1850.0F, homeLight1.getX(), 0.01F);
      assertEquals("N}!H(rkTWMDlHlg8Qd", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(1850.0F, homeLight1.getY(), 0.01F);
      assertEquals((-805.8F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      
      float float3 = homeLight1.getHeight();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertEquals(4, lightSourceArray0.length);
      assertNotEquals(float3, float2, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((-805.8F), float3, 0.01F);
      assertEquals((byte)52, bigDecimal0.byteValue());
      assertEquals((short)20276, bigDecimal0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((-805.8F), catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-805.8F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getInformation());
      assertEquals("N}!H(rkTWMDlHlg8Qd", catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(3700.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals("NAME_ANGLE", catalogLight0.getCreator());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(3700.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals((-805.8F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals("", homeLight1.getDescription());
      assertEquals((-805.8F), homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(3700.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1850.0F, homeLight1.getX(), 0.01F);
      assertEquals("N}!H(rkTWMDlHlg8Qd", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(1850.0F, homeLight1.getY(), 0.01F);
      assertEquals((-805.8F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal(1302);
      assertNotNull(bigDecimal0);
      assertEquals((short)1302, bigDecimal0.shortValue());
      assertEquals((byte)22, bigDecimal0.byteValue());
      
      int int0 = bigDecimal0.signum();
      assertEquals(1, int0);
      assertEquals((short)1302, bigDecimal0.shortValue());
      assertEquals((byte)22, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight((String) null, "tm>t4|+/(", "tm>t4|+/(", temporaryURLContent0, temporaryURLContent0, 1302, 2367.0F, (-4431.324F), (-4431.324F), true, lightSourceArray0, (float[][]) null, "CATALOG_ID", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1302, bigDecimal0.shortValue());
      assertEquals((byte)22, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals(1302.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("CATALOG_ID", catalogLight0.getCreator());
      assertEquals("tm>t4|+/(", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-4431.324F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-4431.324F), catalogLight0.getElevation(), 0.01F);
      assertEquals(2367.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("tm>t4|+/(", catalogLight0.getName());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short)1302, bigDecimal0.shortValue());
      assertEquals((byte)22, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals(1302.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("CATALOG_ID", catalogLight0.getCreator());
      assertEquals("tm>t4|+/(", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-4431.324F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-4431.324F), catalogLight0.getElevation(), 0.01F);
      assertEquals(2367.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("tm>t4|+/(", catalogLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(651.0F, homeLight0.getX(), 0.01F);
      assertEquals((-4431.324F), homeLight0.getElevation(), 0.01F);
      assertEquals(1183.5F, homeLight0.getY(), 0.01F);
      assertEquals((-4431.324F), homeLight0.getHeight(), 0.01F);
      assertEquals("tm>t4|+/(", homeLight0.getDescription());
      assertEquals(2367.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("tm>t4|+/(", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-4431.324F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(1302.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("Can't create temporary folder ");
      assertNotNull(furnitureCategory0);
      assertEquals("Can't create temporary folder ", furnitureCategory0.getName());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)1302, bigDecimal0.shortValue());
      assertEquals((byte)22, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals(1302.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("CATALOG_ID", catalogLight0.getCreator());
      assertEquals("tm>t4|+/(", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-4431.324F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-4431.324F), catalogLight0.getElevation(), 0.01F);
      assertEquals(2367.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("tm>t4|+/(", catalogLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(651.0F, homeLight0.getX(), 0.01F);
      assertEquals((-4431.324F), homeLight0.getElevation(), 0.01F);
      assertEquals(1183.5F, homeLight0.getY(), 0.01F);
      assertEquals((-4431.324F), homeLight0.getHeight(), 0.01F);
      assertEquals("tm>t4|+/(", homeLight0.getDescription());
      assertEquals(2367.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("tm>t4|+/(", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-4431.324F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(1302.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals("tm>t4|+/(", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-4431.324F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isTexturable());
      assertEquals(1302.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-4431.324F), homeLight1.getElevation(), 0.01F);
      assertEquals(1183.5F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertEquals((-4431.324F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(651.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("tm>t4|+/(", homeLight1.getDescription());
      assertEquals(2367.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      assertNotNull(homeLight2);
      assertEquals(2, lightSourceArray0.length);
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)1302, bigDecimal0.shortValue());
      assertEquals((byte)22, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals(1302.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("CATALOG_ID", catalogLight0.getCreator());
      assertEquals("tm>t4|+/(", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-4431.324F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-4431.324F), catalogLight0.getElevation(), 0.01F);
      assertEquals(2367.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("tm>t4|+/(", catalogLight0.getName());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals((-4431.324F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-4431.324F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(1183.5F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isResizable());
      assertTrue(homeLight2.isMovable());
      assertEquals(651.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(1302.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("tm>t4|+/(", homeLight2.getDescription());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("tm>t4|+/(", homeLight2.getName());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals((-4431.324F), homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertEquals(2367.0F, homeLight2.getDepth(), 0.01F);
      
      boolean boolean0 = homeLight2.isTopRightPointAt(2.0F, (-1383.0F), 2745.525F);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(boolean0);
      assertEquals((short)1302, bigDecimal0.shortValue());
      assertEquals((byte)22, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals(1302.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("CATALOG_ID", catalogLight0.getCreator());
      assertEquals("tm>t4|+/(", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-4431.324F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-4431.324F), catalogLight0.getElevation(), 0.01F);
      assertEquals(2367.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("tm>t4|+/(", catalogLight0.getName());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals((-4431.324F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-4431.324F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(1183.5F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isResizable());
      assertTrue(homeLight2.isMovable());
      assertEquals(651.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(1302.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("tm>t4|+/(", homeLight2.getDescription());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("tm>t4|+/(", homeLight2.getName());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals((-4431.324F), homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertEquals(2367.0F, homeLight2.getDepth(), 0.01F);
      
      TextStyle textStyle0 = homeLight2.getNameStyle();
      assertNull(textStyle0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)1302, bigDecimal0.shortValue());
      assertEquals((byte)22, bigDecimal0.byteValue());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals(1302.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("CATALOG_ID", catalogLight0.getCreator());
      assertEquals("tm>t4|+/(", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-4431.324F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-4431.324F), catalogLight0.getElevation(), 0.01F);
      assertEquals(2367.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getId());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("tm>t4|+/(", catalogLight0.getName());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals((-4431.324F), homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-4431.324F), homeLight2.getGroundElevation(), 0.01F);
      assertEquals(1183.5F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isResizable());
      assertTrue(homeLight2.isMovable());
      assertEquals(651.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(1302.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("tm>t4|+/(", homeLight2.getDescription());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("tm>t4|+/(", homeLight2.getName());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals((-4431.324F), homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertEquals(2367.0F, homeLight2.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      assertNotNull(lightSource0);
      assertEquals(3700, lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(5391.62F, lightSource0.getX(), 0.01F);
      assertEquals((-805.8F), lightSource0.getZ(), 0.01F);
      
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float((-1285.3262F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1285.3262F), (float)float1, 0.01F);
      
      lightSourceArray0[3] = lightSource0;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), (-1285.3262F), 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-1285.3262F), catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-1285.3262F), catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1285.3262F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-1285.3262F), catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1285.3262F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isVisible());
      assertEquals((-1285.3262F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      
      BigDecimal bigDecimal2 = bigDecimal1.setScale(0);
      assertNotNull(bigDecimal2);
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((short)1, bigDecimal2.shortValue());
      assertEquals((byte)1, bigDecimal2.byteValue());
      
      homeLight1.setName("");
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-1285.3262F), catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1285.3262F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isVisible());
      assertEquals((-1285.3262F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      
      homeLight1.setElevation(3700);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-1285.3262F), catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1285.3262F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(3700.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(3700.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isVisible());
      assertEquals((-1285.3262F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotNull(homeLight2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-1285.3262F), catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1285.3262F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(3700.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(3700.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isVisible());
      assertEquals((-1285.3262F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-402.9F), homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(3700.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getDescription());
      assertEquals(3700.0F, homeLight2.getElevation(), 0.01F);
      assertEquals((-805.8F), homeLight2.getDepth(), 0.01F);
      assertEquals((-1285.3262F), homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getCatalogId());
      
      boolean boolean0 = homeLight2.containsPoint((-650.33F), 0.0F, (-269.187F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(boolean0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-1285.3262F), catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1285.3262F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(3700.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(3700.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isVisible());
      assertEquals((-1285.3262F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-402.9F), homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(3700.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getDescription());
      assertEquals(3700.0F, homeLight2.getElevation(), 0.01F);
      assertEquals((-805.8F), homeLight2.getDepth(), 0.01F);
      assertEquals((-1285.3262F), homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getCatalogId());
      
      homeLight1.setX(0.0F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-1285.3262F), catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1285.3262F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(3700.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(3700.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isVisible());
      assertEquals((-1285.3262F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      
      boolean boolean1 = homeLight1.isBackFaceShown();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean1);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-1285.3262F), catalogLight0.getHeight(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1285.3262F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(3700.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(3700.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isVisible());
      assertEquals((-1285.3262F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("rNK4(1w2.#(f!8{L", "rNK4(1w2.#(f!8{L", "rNK4(1w2.#(f!8{L", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "rNK4(1w2.#(f!8{L", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(4730.388F, catalogLight0.getHeight(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(4730.388F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(4730.388F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(4730.388F, catalogLight0.getWidth(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getCreator());
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getDescription());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(4730.388F, catalogLight0.getHeight(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(4730.388F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(4730.388F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(4730.388F, catalogLight0.getWidth(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getCreator());
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(4730.388F, homeLight0.getWidth(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight0.getName());
      assertEquals(4730.388F, homeLight0.getElevation(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(2365.194F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(2365.194F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(4730.388F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(4730.388F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(4730.388F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeLight0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(4730.388F, catalogLight0.getHeight(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(4730.388F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(4730.388F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(4730.388F, catalogLight0.getWidth(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getCreator());
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(4730.388F, homeLight0.getWidth(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight0.getName());
      assertEquals(4730.388F, homeLight0.getElevation(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(2365.194F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(2365.194F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(4730.388F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(4730.388F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(4730.388F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(4730.388F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("rNK4(1w2.#(f!8{L", homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homePieceOfFurniture0.getName());
      assertEquals(4730.388F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(4730.388F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(4730.388F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(2365.194F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2365.194F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(4730.388F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("rNK4(1w2.#(f!8{L", homePieceOfFurniture0.getCatalogId());
      
      Level level0 = homePieceOfFurniture0.getLevel();
      assertNull(level0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(4730.388F, catalogLight0.getHeight(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(4730.388F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(4730.388F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(4730.388F, catalogLight0.getWidth(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getCreator());
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(4730.388F, homeLight0.getWidth(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight0.getName());
      assertEquals(4730.388F, homeLight0.getElevation(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(2365.194F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(2365.194F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(4730.388F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(4730.388F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(4730.388F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(4730.388F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("rNK4(1w2.#(f!8{L", homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homePieceOfFurniture0.getName());
      assertEquals(4730.388F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(4730.388F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(4730.388F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(2365.194F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2365.194F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(4730.388F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("rNK4(1w2.#(f!8{L", homePieceOfFurniture0.getCatalogId());
      
      homeLight0.setLevel((Level) null);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(4730.388F, catalogLight0.getHeight(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(4730.388F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(4730.388F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(4730.388F, catalogLight0.getWidth(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getCreator());
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(4730.388F, homeLight0.getWidth(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight0.getName());
      assertEquals(4730.388F, homeLight0.getElevation(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(2365.194F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(2365.194F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(4730.388F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(4730.388F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(4730.388F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HomeLight homeLight1 = (HomeLight)homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(4730.388F, catalogLight0.getHeight(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(4730.388F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(4730.388F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(4730.388F, catalogLight0.getWidth(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getCreator());
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(4730.388F, homeLight0.getWidth(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight0.getName());
      assertEquals(4730.388F, homeLight0.getElevation(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(2365.194F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(2365.194F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(4730.388F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(4730.388F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(4730.388F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(4730.388F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isDeformable());
      assertEquals(4730.388F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getShininess());
      assertEquals(2365.194F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(2365.194F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(4730.388F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(4730.388F, homeLight1.getWidth(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight1.getName());
      assertEquals("rNK4(1w2.#(f!8{L", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(4730.388F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight1.getCatalogId());
      assertFalse(homeLight1.isNameVisible());
      
      HomeTexture homeTexture0 = homeLight1.getTexture();
      assertNull(homeTexture0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(4730.388F, catalogLight0.getHeight(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(4730.388F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getColor());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(4730.388F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(4730.388F, catalogLight0.getWidth(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getCreator());
      assertEquals("rNK4(1w2.#(f!8{L", catalogLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(4730.388F, homeLight0.getWidth(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight0.getName());
      assertEquals(4730.388F, homeLight0.getElevation(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(2365.194F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(2365.194F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(4730.388F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(4730.388F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(4730.388F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(4730.388F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isDeformable());
      assertEquals(4730.388F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getShininess());
      assertEquals(2365.194F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(2365.194F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(4730.388F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(4730.388F, homeLight1.getWidth(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight1.getName());
      assertEquals("rNK4(1w2.#(f!8{L", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(4730.388F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("rNK4(1w2.#(f!8{L", homeLight1.getCatalogId());
      assertFalse(homeLight1.isNameVisible());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertNotNull(resourceURLContent0);
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-5529.33F), 1463.053F, (-5529.33F), 549.03F, 549.03F);
      assertNotNull(sash0);
      assertEquals(549.03F, sash0.getStartAngle(), 0.01F);
      assertEquals(549.03F, sash0.getEndAngle(), 0.01F);
      assertEquals((-5529.33F), sash0.getXAxis(), 0.01F);
      assertEquals((-5529.33F), sash0.getWidth(), 0.01F);
      assertEquals(1463.053F, sash0.getYAxis(), 0.01F);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(1463.053F, 549.03F, (-1.0F), (-1.0F), 1.0F);
      assertNotNull(sash1);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(549.03F, sash1.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash1.getStartAngle(), 0.01F);
      assertEquals(1.0F, sash1.getEndAngle(), 0.01F);
      assertEquals(1463.053F, sash1.getXAxis(), 0.01F);
      assertEquals((-1.0F), sash1.getWidth(), 0.01F);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-1.0F), (-5529.33F), (-1.0F), 974.062F, 1850.0F);
      assertNotNull(sash2);
      assertFalse(sash2.equals((Object)sash0));
      assertFalse(sash2.equals((Object)sash1));
      assertEquals((-1.0F), sash2.getXAxis(), 0.01F);
      assertEquals((-1.0F), sash2.getWidth(), 0.01F);
      assertEquals(1850.0F, sash2.getEndAngle(), 0.01F);
      assertEquals(974.062F, sash2.getStartAngle(), 0.01F);
      assertEquals((-5529.33F), sash2.getYAxis(), 0.01F);
      
      sashArray0[2] = sash2;
      float[][] floatArray0 = new float[6][1];
      float[] floatArray1 = new float[7];
      floatArray1[0] = 1.0F;
      floatArray1[1] = (-5529.33F);
      floatArray1[2] = 1.0F;
      floatArray1[3] = (-1.0F);
      floatArray1[4] = 1.0F;
      floatArray1[5] = 974.062F;
      floatArray1[6] = (-4294.7F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 1463.053F;
      floatArray2[1] = 549.03F;
      floatArray2[2] = 974.062F;
      floatArray2[3] = 1.0F;
      floatArray2[4] = (-4294.7F);
      floatArray2[5] = 1.0F;
      floatArray2[6] = (-4294.7F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 1463.053F;
      floatArray3[1] = (-4294.7F);
      floatArray3[2] = (-1.0F);
      floatArray3[3] = 1850.0F;
      floatArray3[4] = 1.0F;
      floatArray3[5] = (-1.0F);
      floatArray3[6] = 549.03F;
      floatArray3[7] = (-4294.7F);
      floatArray3[8] = (-1.0F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[6];
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      
      floatArray4[0] = (-4294.7F);
      floatArray4[1] = 549.03F;
      floatArray4[2] = (-1.0F);
      floatArray4[3] = (-4294.7F);
      floatArray4[4] = 974.062F;
      floatArray4[5] = 974.062F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[4];
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      floatArray5[0] = 1850.0F;
      floatArray5[1] = (-4294.7F);
      floatArray5[2] = (-5529.33F);
      floatArray5[3] = 549.03F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[3];
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray3));
      
      floatArray6[0] = (-1.0F);
      floatArray6[1] = (-1686.4663F);
      floatArray6[2] = (-1.0F);
      floatArray0[5] = floatArray6;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-4294.7F), (-1.0F), (-4294.7F), true, (-1.0F), (-1.0F), sashArray0, floatArray0, "nto#`$X", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-4294.7F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-4294.7F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("nto#`$X", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-4294.7F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-4294.7F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("nto#`$X", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-2147.35F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-4294.7F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-4294.7F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-4294.7F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      
      float float0 = homeDoorOrWindow0.getElevation();
      assertEquals(3, sashArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals((-4294.7F), float0, 0.01F);
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-4294.7F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-4294.7F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("nto#`$X", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-2147.35F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-4294.7F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-4294.7F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-4294.7F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 2.4439633F, 811.4F);
      assertNotNull(sash0);
      assertEquals(2.4439633F, sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getYAxis(), 0.01F);
      assertEquals(811.4F, sash0.getEndAngle(), 0.01F);
      assertEquals(0.0F, sash0.getXAxis(), 0.01F);
      assertEquals(0.0F, sash0.getWidth(), 0.01F);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.0F, 811.4F, 2.4439633F, 0.0F, 0.0F);
      assertNotNull(sash1);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(0.0F, sash1.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash1.getXAxis(), 0.01F);
      assertEquals(0.0F, sash1.getEndAngle(), 0.01F);
      assertEquals(2.4439633F, sash1.getWidth(), 0.01F);
      assertEquals(811.4F, sash1.getYAxis(), 0.01F);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(0.0F, 518.0F, 0.0F, 811.4F, (-1.0F));
      assertNotNull(sash2);
      assertFalse(sash2.equals((Object)sash1));
      assertFalse(sash2.equals((Object)sash0));
      assertEquals(811.4F, sash2.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash2.getWidth(), 0.01F);
      assertEquals(0.0F, sash2.getXAxis(), 0.01F);
      assertEquals(518.0F, sash2.getYAxis(), 0.01F);
      assertEquals((-1.0F), sash2.getEndAngle(), 0.01F);
      
      sashArray0[2] = sash2;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, (Content) null, 811.4F, 811.4F, (-2844.6F), 1.0F, true, 811.4F, (-2844.6F), sashArray0, (float[][]) null, (String) null, true, false, false, bigDecimal0, bigDecimal0, "");
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(811.4F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals((-2844.6F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(811.4F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-2844.6F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(811.4F, catalogDoorOrWindow0.getWidth(), 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(811.4F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals((-2844.6F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(811.4F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-2844.6F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(811.4F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(405.7F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(811.4F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(811.4F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(811.4F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(405.7F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-2844.6F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-2844.6F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      
      HomeDoorOrWindow homeDoorOrWindow1 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(811.4F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals((-2844.6F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(811.4F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-2844.6F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(811.4F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(405.7F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(811.4F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(811.4F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(811.4F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(405.7F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-2844.6F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-2844.6F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(811.4F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(811.4F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(811.4F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(405.7F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(405.7F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(1.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-2844.6F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-2844.6F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      
      float[][] floatArray0 = homeDoorOrWindow1.getModelRotation();
      assertNotNull(floatArray0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals(3, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(811.4F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals((-2844.6F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(811.4F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(1.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-2844.6F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(811.4F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(405.7F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(811.4F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(811.4F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(811.4F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(405.7F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-2844.6F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-2844.6F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(811.4F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(811.4F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(811.4F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(405.7F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(405.7F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(1.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-2844.6F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-2844.6F), homeDoorOrWindow1.getWallDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal((double) (-5));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-5), bigDecimal0.shortValue());
      assertEquals((byte) (-5), bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short) (-5), bigDecimal0.shortValue());
      assertEquals((byte) (-5), bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short) (-5), bigDecimal0.shortValue());
      assertEquals((byte) (-5), bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short) (-5), bigDecimal0.shortValue());
      assertEquals((byte) (-5), bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      
      homeLight1.setNameAngle(2441.0833F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short) (-5), bigDecimal0.shortValue());
      assertEquals((byte) (-5), bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(3.2073529F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      
      homeLight0.setNameVisible(true);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short) (-5), bigDecimal0.shortValue());
      assertEquals((byte) (-5), bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      
      HomeLight homeLight2 = homeLight0.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(2, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short) (-5), bigDecimal0.shortValue());
      assertEquals((byte) (-5), bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getCatalogId());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertFalse(homeLight2.isMovable());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight2.getName());
      assertTrue(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      
      homeLight1.setName("p ?=Wx&[j2LNr");
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertEquals(2, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((short) (-5), bigDecimal0.shortValue());
      assertEquals((byte) (-5), bigDecimal0.byteValue());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(3.2073529F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals("p ?=Wx&[j2LNr", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("[9,[9_51,dQ", "NAME_ANGLE", "!|6\"c}", temporaryURLContent0, temporaryURLContent0, (-805.8F), 0, 0.0F, 0, true, lightSourceArray0, (float[][]) null, "", true, (BigDecimal) null, (BigDecimal) null);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-805.8F), catalogLight0.getWidth(), 0.01F);
      assertEquals("!|6\"c}", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getName());
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("4kyt6YrbR10");
      assertNotNull(furnitureCategory0);
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertEquals("4kyt6YrbR10", furnitureCategory0.getName());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-805.8F), catalogLight0.getWidth(), 0.01F);
      assertEquals("!|6\"c}", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getName());
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("!|6\"c}", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-805.8F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-402.9F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      
      HomeLight homeLight1 = new HomeLight(homeLight0);
      assertNotNull(homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-805.8F), catalogLight0.getWidth(), 0.01F);
      assertEquals("!|6\"c}", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getName());
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("!|6\"c}", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-805.8F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-402.9F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals((-805.8F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals("[9,[9_51,dQ", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-402.9F), homeLight1.getX(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight1.getName());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("!|6\"c}", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      
      HomeLight homeLight2 = homeLight0.clone();
      assertNotNull(homeLight2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-805.8F), catalogLight0.getWidth(), 0.01F);
      assertEquals("!|6\"c}", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getName());
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("!|6\"c}", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-805.8F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-402.9F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-805.8F), homeLight2.getWidth(), 0.01F);
      assertEquals((-402.9F), homeLight2.getX(), 0.01F);
      assertEquals("!|6\"c}", homeLight2.getDescription());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight2.getCatalogId());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight2.getName());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getColor());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      
      homeLight0.setNameVisible(true);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-805.8F), catalogLight0.getWidth(), 0.01F);
      assertEquals("!|6\"c}", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getName());
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("!|6\"c}", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-805.8F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-402.9F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      
      BigDecimal bigDecimal2 = homeLight1.getValueAddedTax();
      assertNull(bigDecimal2);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-805.8F), catalogLight0.getWidth(), 0.01F);
      assertEquals("!|6\"c}", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getName());
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("!|6\"c}", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-805.8F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-402.9F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals((-805.8F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals("[9,[9_51,dQ", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-402.9F), homeLight1.getX(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight1.getName());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("!|6\"c}", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      
      homeLight2.setWidth(1844.2783F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-805.8F), catalogLight0.getWidth(), 0.01F);
      assertEquals("!|6\"c}", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getName());
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("!|6\"c}", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-805.8F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-402.9F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-402.9F), homeLight2.getX(), 0.01F);
      assertEquals("!|6\"c}", homeLight2.getDescription());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(1844.2783F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight2.getCatalogId());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight2.getName());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getColor());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      
      boolean boolean0 = homeLight1.isPointAt((-156.0F), (-805.8F), 1850.0F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean0);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-805.8F), catalogLight0.getWidth(), 0.01F);
      assertEquals("!|6\"c}", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getName());
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("!|6\"c}", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-805.8F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-402.9F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals((-805.8F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals("[9,[9_51,dQ", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-402.9F), homeLight1.getX(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight1.getName());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("!|6\"c}", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      
      boolean boolean1 = homeLight2.isNameCenterPointAt(0.0F, 1850.0F, 0.0F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-805.8F), catalogLight0.getWidth(), 0.01F);
      assertEquals("!|6\"c}", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getName());
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("!|6\"c}", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-805.8F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-402.9F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-402.9F), homeLight2.getX(), 0.01F);
      assertEquals("!|6\"c}", homeLight2.getDescription());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(1844.2783F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight2.getCatalogId());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight2.getName());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isMovable());
      assertNull(homeLight2.getColor());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      
      Integer integer0 = homeLight1.getColor();
      assertNull(integer0);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-805.8F), catalogLight0.getWidth(), 0.01F);
      assertEquals("!|6\"c}", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("NAME_ANGLE", catalogLight0.getName());
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("!|6\"c}", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-805.8F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-402.9F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isResizable());
      assertEquals((-805.8F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals("[9,[9_51,dQ", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-402.9F), homeLight1.getX(), 0.01F);
      assertEquals("NAME_ANGLE", homeLight1.getName());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("!|6\"c}", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[5];
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("VAaUE_ADDED_TAX_PERCENTA5E", "VAaUE_ADDED_TAX_PERCENTA5E", "VAaUE_ADDED_TAX_PERCENTA5E", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "VAaUE_ADDED_TAX_PERCENTA5E", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getCreator());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(5, lightSourceArray0.length);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getCreator());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getCatalogId());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      Float float1 = new Float((double) 0.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      homeLight0.setShininess(float1);
      assertEquals(5, lightSourceArray0.length);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getCreator());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getCatalogId());
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getShininess(), 0.01F);
      assertEquals("VAaUE_ADDED_TAX_PERCENTA5E", homeLight0.getDescription());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = new BigDecimal((-13));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-13), bigDecimal0.shortValue());
      assertEquals((byte) (-13), bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "RNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short) (-13), bigDecimal0.shortValue());
      assertEquals((byte) (-13), bigDecimal0.byteValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short) (-13), bigDecimal0.shortValue());
      assertEquals((byte) (-13), bigDecimal0.byteValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short) (-13), bigDecimal0.shortValue());
      assertEquals((byte) (-13), bigDecimal0.byteValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      homeLight0.setY(0.0F);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short) (-13), bigDecimal0.shortValue());
      assertEquals((byte) (-13), bigDecimal0.byteValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      homeLight0.setShininess((Float) null);
      assertEquals(2, lightSourceArray0.length);
      assertEquals((short) (-13), bigDecimal0.shortValue());
      assertEquals((byte) (-13), bigDecimal0.byteValue());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      assertNotNull(float0);
      assertEquals(2344.0F, (float)float0, 0.01F);
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("ELEVATION", "LEVEL", "ELEVATION", temporaryURLContent0, temporaryURLContent0, (-4536.0F), 544.4666F, 3.4028235E38F, (-4536.0F), false, lightSourceArray0, (float[][]) null, "[9,[9_51,dQ", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("ELEVATION", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals("LEVEL", catalogLight0.getName());
      assertEquals((-4536.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(544.4666F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-4536.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertEquals(3.4028235E38F, catalogLight0.getHeight(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("ELEVATION", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals("LEVEL", catalogLight0.getName());
      assertEquals((-4536.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(544.4666F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-4536.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertEquals(3.4028235E38F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals("LEVEL", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals((-2268.0F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-4536.0F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-4536.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-4536.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(272.2333F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("ELEVATION", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(544.4666F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      short short0 = bigDecimal0.shortValueExact();
      assertEquals((short)0, short0);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      
      BigInteger bigInteger1 = bigDecimal1.toBigIntegerExact();
      assertNotNull(bigInteger1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigInteger1.byteValue());
      assertEquals((short)10, bigInteger1.shortValue());
      
      CatalogTexture catalogTexture0 = new CatalogTexture("com.eteks.sweethome3d.model.HomePieceOfFurniture$10", temporaryURLContent0, (-805.8F), (-4536.0F));
      assertNotNull(catalogTexture0);
      assertEquals((-805.8F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$10", catalogTexture0.getName());
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-4536.0F), catalogTexture0.getHeight(), 0.01F);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNotNull(homeTexture0);
      assertEquals((-805.8F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$10", catalogTexture0.getName());
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-4536.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals((-4536.0F), homeTexture0.getHeight(), 0.01F);
      assertEquals((-805.8F), homeTexture0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$10", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      
      homeLight0.setTexture(homeTexture0);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("ELEVATION", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals("LEVEL", catalogLight0.getName());
      assertEquals((-4536.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(544.4666F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-4536.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertEquals(3.4028235E38F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals("LEVEL", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals((-2268.0F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-4536.0F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-4536.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-4536.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(272.2333F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("ELEVATION", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(544.4666F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-805.8F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$10", catalogTexture0.getName());
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-4536.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals((-4536.0F), homeTexture0.getHeight(), 0.01F);
      assertEquals((-805.8F), homeTexture0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$10", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      
      HomeTexture homeTexture1 = homeLight0.getTexture();
      assertNotNull(homeTexture1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(homeTexture1, homeTexture0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("ELEVATION", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals("LEVEL", catalogLight0.getName());
      assertEquals((-4536.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(544.4666F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-4536.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertEquals(3.4028235E38F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals("LEVEL", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals((-2268.0F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-4536.0F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-4536.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-4536.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(272.2333F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("ELEVATION", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(544.4666F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeTexture1.isLeftToRightOriented());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$10", homeTexture1.getName());
      assertEquals((-805.8F), homeTexture1.getWidth(), 0.01F);
      assertEquals((-4536.0F), homeTexture1.getHeight(), 0.01F);
      
      homeLight0.setTexture(homeTexture1);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(homeTexture1, homeTexture0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("ELEVATION", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals("LEVEL", catalogLight0.getName());
      assertEquals((-4536.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(544.4666F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-4536.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertEquals(3.4028235E38F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals("LEVEL", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals((-2268.0F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-4536.0F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-4536.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-4536.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(272.2333F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("ELEVATION", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(544.4666F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeTexture1.isLeftToRightOriented());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$10", homeTexture1.getName());
      assertEquals((-805.8F), homeTexture1.getWidth(), 0.01F);
      assertEquals((-4536.0F), homeTexture1.getHeight(), 0.01F);
      
      float float1 = homeLight0.getAngle();
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals(0.0F, float1, 0.01F);
      assertEquals((byte)0, bigInteger0.byteValue());
      assertEquals((short)0, bigInteger0.shortValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("ELEVATION", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getInformation());
      assertEquals("LEVEL", catalogLight0.getName());
      assertEquals((-4536.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("[9,[9_51,dQ", catalogLight0.getCreator());
      assertEquals(544.4666F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-4536.0F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("ELEVATION", catalogLight0.getId());
      assertEquals(3.4028235E38F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals("LEVEL", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("ELEVATION", homeLight0.getCatalogId());
      assertEquals((-2268.0F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals((-4536.0F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-4536.0F), homeLight0.getElevation(), 0.01F);
      assertEquals((-4536.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(272.2333F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals("ELEVATION", homeLight0.getDescription());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(544.4666F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      Float float1 = new Float((double) (-805.8F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-805.8F), (float)float1, 0.01F);
      
      lightSourceArray0[3] = lightSourceArray0[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("", "#[4)T1oH29{vv`s", "", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0.5F, (-3824.7463F), (-3824.7463F), (-3673.8152F), false, lightSourceArray0, "", (float[][]) null, "#[4)T1oH29{vv`s", false, false, false, bigDecimal0, bigDecimal0, "");
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertEquals((-3673.8152F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getCurrency());
      assertFalse(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.5F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-3824.7463F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("#[4)T1oH29{vv`s", catalogLight0.getName());
      assertEquals("#[4)T1oH29{vv`s", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-3824.7463F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertEquals((-3673.8152F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getCurrency());
      assertFalse(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.5F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-3824.7463F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("#[4)T1oH29{vv`s", catalogLight0.getName());
      assertEquals("#[4)T1oH29{vv`s", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-3824.7463F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals((-3824.7463F), homeLight0.getHeight(), 0.01F);
      assertEquals("#[4)T1oH29{vv`s", homeLight0.getName());
      assertEquals("", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.25F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1912.3732F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals("", homeLight0.getDescription());
      assertEquals((-3673.8152F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-3673.8152F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-3824.7463F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertEquals((-3673.8152F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getCurrency());
      assertFalse(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.5F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-3824.7463F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("#[4)T1oH29{vv`s", catalogLight0.getName());
      assertEquals("#[4)T1oH29{vv`s", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-3824.7463F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals((-3824.7463F), homeLight0.getHeight(), 0.01F);
      assertEquals("#[4)T1oH29{vv`s", homeLight0.getName());
      assertEquals("", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.25F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1912.3732F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals("", homeLight0.getDescription());
      assertEquals((-3673.8152F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-3673.8152F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-3824.7463F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.25F, homeLight1.getX(), 0.01F);
      assertEquals((-3673.8152F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("", homeLight1.getCurrency());
      assertEquals((-3673.8152F), homeLight1.getElevation(), 0.01F);
      assertEquals("", homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-1912.3732F), homeLight1.getY(), 0.01F);
      assertEquals("#[4)T1oH29{vv`s", homeLight1.getName());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertEquals((-3824.7463F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals("", homeLight1.getDescription());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals((-3824.7463F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      
      BigDecimal bigDecimal1 = homeLight1.getValueAddedTaxPercentage();
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertEquals((-3673.8152F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("", catalogLight0.getCurrency());
      assertFalse(catalogLight0.isTexturable());
      assertNull(catalogLight0.getInformation());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.5F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-3824.7463F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("#[4)T1oH29{vv`s", catalogLight0.getName());
      assertEquals("#[4)T1oH29{vv`s", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-3824.7463F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals((-3824.7463F), homeLight0.getHeight(), 0.01F);
      assertEquals("#[4)T1oH29{vv`s", homeLight0.getName());
      assertEquals("", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.25F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1912.3732F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals("", homeLight0.getDescription());
      assertEquals((-3673.8152F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-3673.8152F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-3824.7463F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.25F, homeLight1.getX(), 0.01F);
      assertEquals((-3673.8152F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("", homeLight1.getCurrency());
      assertEquals((-3673.8152F), homeLight1.getElevation(), 0.01F);
      assertEquals("", homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-1912.3732F), homeLight1.getY(), 0.01F);
      assertEquals("#[4)T1oH29{vv`s", homeLight1.getName());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertEquals((-3824.7463F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("", homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals("", homeLight1.getDescription());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals((-3824.7463F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      Integer integer0 = new Integer((-816));
      assertNotNull(integer0);
      assertEquals((-816), (int)integer0);
      
      // Undeclared exception!
      try { 
        homeLight0.setColor(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      Float float0 = new Float(4730.388F);
      assertNotNull(float0);
      assertEquals(4730.388F, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      LightSource lightSource0 = new LightSource(3724.666F, (-1.0F), (-1.0F), 2, float0);
      assertNotNull(lightSource0);
      assertEquals(4730.388F, lightSource0.getDiameter(), 0.01F);
      assertEquals(3724.666F, lightSource0.getX(), 0.01F);
      assertEquals((-1.0F), lightSource0.getZ(), 0.01F);
      assertEquals((-1.0F), lightSource0.getY(), 0.01F);
      assertEquals(2, lightSource0.getColor());
      
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float((double) 2);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2.0F, (float)float1, 0.01F);
      
      LightSource lightSource1 = new LightSource(1698.8F, 1698.8F, (-641.192F), 2, float1);
      assertNotNull(lightSource1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(2, lightSource1.getColor());
      assertEquals(1698.8F, lightSource1.getX(), 0.01F);
      assertEquals((-641.192F), lightSource1.getZ(), 0.01F);
      assertEquals(2.0F, lightSource1.getDiameter(), 0.01F);
      assertEquals(1698.8F, lightSource1.getY(), 0.01F);
      
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(3724.666F, (-0.3F), 1.0F, 2);
      assertNotNull(lightSource2);
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertEquals((-0.3F), lightSource2.getY(), 0.01F);
      assertEquals(2, lightSource2.getColor());
      assertEquals(3724.666F, lightSource2.getX(), 0.01F);
      assertNull(lightSource2.getDiameter());
      assertEquals(1.0F, lightSource2.getZ(), 0.01F);
      
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(1.0F, 3724.666F, 498.291F, 2);
      assertNotNull(lightSource3);
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertFalse(lightSource3.equals((Object)lightSource1));
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertNull(lightSource3.getDiameter());
      assertEquals(498.291F, lightSource3.getZ(), 0.01F);
      assertEquals(1.0F, lightSource3.getX(), 0.01F);
      assertEquals(2, lightSource3.getColor());
      assertEquals(3724.666F, lightSource3.getY(), 0.01F);
      
      lightSourceArray0[3] = lightSource3;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "MOVABLE", "y7O+=%'{", temporaryURLContent0, temporaryURLContent0, 4730.388F, 3724.666F, (-1.0F), 3724.666F, false, lightSourceArray0, (float[][]) null, "Piece isn't resizable", true, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals("Piece isn't resizable", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("MOVABLE", catalogLight0.getName());
      assertEquals("y7O+=%'{", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(3724.666F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(3724.666F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals(4730.388F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals("Piece isn't resizable", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("MOVABLE", catalogLight0.getName());
      assertEquals("y7O+=%'{", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(3724.666F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(3724.666F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals(4730.388F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("y7O+=%'{", homeLight0.getDescription());
      assertEquals(3724.666F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(4730.388F, homeLight0.getWidth(), 0.01F);
      assertEquals("MOVABLE", homeLight0.getName());
      assertEquals(3724.666F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1862.333F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(2365.194F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(3724.666F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      
      homeLight0.setModelMirrored(true);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals("Piece isn't resizable", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("MOVABLE", catalogLight0.getName());
      assertEquals("y7O+=%'{", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(3724.666F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(3724.666F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals(4730.388F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("y7O+=%'{", homeLight0.getDescription());
      assertEquals(3724.666F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(4730.388F, homeLight0.getWidth(), 0.01F);
      assertEquals("MOVABLE", homeLight0.getName());
      assertEquals(3724.666F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1862.333F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(2365.194F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(3724.666F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      
      Integer integer0 = homeLight0.getColor();
      assertNull(integer0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals("Piece isn't resizable", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("MOVABLE", catalogLight0.getName());
      assertEquals("y7O+=%'{", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(3724.666F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(3724.666F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals(4730.388F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("y7O+=%'{", homeLight0.getDescription());
      assertEquals(3724.666F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(4730.388F, homeLight0.getWidth(), 0.01F);
      assertEquals("MOVABLE", homeLight0.getName());
      assertEquals(3724.666F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1862.333F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(2365.194F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(3724.666F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      
      homeLight0.setModelMirrored(false);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals("Piece isn't resizable", catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("MOVABLE", catalogLight0.getName());
      assertEquals("y7O+=%'{", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(3724.666F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-1.0F), catalogLight0.getHeight(), 0.01F);
      assertEquals(3724.666F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals(4730.388F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("y7O+=%'{", homeLight0.getDescription());
      assertEquals(3724.666F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(4730.388F, homeLight0.getWidth(), 0.01F);
      assertEquals("MOVABLE", homeLight0.getName());
      assertEquals(3724.666F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(1862.333F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(2365.194F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(3724.666F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      assertNotNull(lightSource0);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(5391.62F, lightSource0.getX(), 0.01F);
      assertEquals(3700, lightSource0.getColor());
      assertNull(lightSource0.getDiameter());
      assertEquals((-805.8F), lightSource0.getZ(), 0.01F);
      
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(4246.75F, (float)float1, 0.01F);
      
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      assertNotNull(lightSource1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(4246.75F, lightSource1.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource1.getX(), 0.01F);
      assertEquals((-650.33F), lightSource1.getY(), 0.01F);
      assertEquals(4246.75F, lightSource1.getZ(), 0.01F);
      assertEquals(3700, lightSource1.getColor());
      
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      
      BigDecimal bigDecimal2 = bigDecimal0.setScale(13);
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      
      homeLight1.setName("RNWuJ=(K7g@v\t[p'");
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getName());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      
      homeLight1.setElevation(3700);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getName());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals(3700.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(3700.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      
      String string0 = homeLight1.getCatalogId();
      assertNotNull(string0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals("RNWuJ=(K7g@v\t[p'", string0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getName());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals(3700.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(3700.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      assertNotNull(lightSource0);
      assertEquals(0.0F, lightSource0.getY(), 0.01F);
      assertEquals(3700, lightSource0.getColor());
      assertEquals(5391.62F, lightSource0.getX(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals((-805.8F), lightSource0.getZ(), 0.01F);
      
      lightSourceArray0[2] = lightSource0;
      Float float1 = new Float(4246.75F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(4246.75F, (float)float1, 0.01F);
      
      LightSource lightSource1 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float1);
      assertNotNull(lightSource1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(0.0F, lightSource1.getX(), 0.01F);
      assertEquals((-650.33F), lightSource1.getY(), 0.01F);
      assertEquals(3700, lightSource1.getColor());
      assertEquals(4246.75F, lightSource1.getDiameter(), 0.01F);
      assertEquals(4246.75F, lightSource1.getZ(), 0.01F);
      
      lightSourceArray0[3] = lightSource1;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal1);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      homeLight0.setElevation(83.4497F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(83.4497F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(83.4497F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotNull(homeLight1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(83.4497F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(83.4497F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(83.4497F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(4246.75F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(83.4497F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getName());
      
      homeLight0.setMovable(true);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(83.4497F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(83.4497F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      homeLight1.setHeight(0.0F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(83.4497F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(83.4497F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(83.4497F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(83.4497F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getName());
      
      String string0 = homeLight1.getStaircaseCutOutShape();
      assertNull(string0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(83.4497F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(83.4497F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(83.4497F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(83.4497F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getName());
      
      homeLight0.setAngle(524.0F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(2.4956195F, homeLight0.getAngle(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(83.4497F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(83.4497F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      homeLight0.setLevel((Level) null);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(2.4956195F, homeLight0.getAngle(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(83.4497F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(83.4497F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      
      BigDecimal bigDecimal2 = homeLight1.getPrice();
      assertNotNull(bigDecimal2);
      assertSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertEquals(4246.75F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-805.8F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(2.4956195F, homeLight0.getAngle(), 0.01F);
      assertEquals(4246.75F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(83.4497F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(83.4497F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(83.4497F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("RNWuJ=(K7g@v\t[p'", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-805.8F), homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(83.4497F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-402.9F), homeLight1.getY(), 0.01F);
      assertEquals("", homeLight1.getName());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      Float float0 = new Float(473.68286F);
      assertNotNull(float0);
      assertEquals(473.68286F, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(3061.2522F, 2757.1F, 473.68286F, 0);
      assertNotNull(lightSource0);
      assertEquals(3061.2522F, lightSource0.getX(), 0.01F);
      assertEquals(473.68286F, lightSource0.getZ(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(2757.1F, lightSource0.getY(), 0.01F);
      assertEquals(0, lightSource0.getColor());
      
      lightSourceArray0[0] = lightSource0;
      CatalogLight catalogLight0 = new CatalogLight("VALUE_ADDED_TAX_PERCENTA5E", "", "VALUE_ADDED_TAX_PERCENTA5E", temporaryURLContent0, temporaryURLContent0, 0.0F, 1218.7F, 0, 3061.2522F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(1218.7F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(3061.2522F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(1218.7F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(3061.2522F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(3061.2522F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(609.35F, homeLight0.getY(), 0.01F);
      assertEquals(3061.2522F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1218.7F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      homeLight0.setNameVisible(true);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(1218.7F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(3061.2522F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(3061.2522F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(609.35F, homeLight0.getY(), 0.01F);
      assertEquals(3061.2522F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1218.7F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      
      homeLight0.setHeight(0.0F);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(1218.7F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(3061.2522F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(3061.2522F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(609.35F, homeLight0.getY(), 0.01F);
      assertEquals(3061.2522F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1218.7F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      
      Level level0 = homeLight0.getLevel();
      assertNull(level0);
      assertEquals(1, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(1218.7F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(3061.2522F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(3061.2522F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(609.35F, homeLight0.getY(), 0.01F);
      assertEquals(3061.2522F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1218.7F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      
      boolean boolean0 = homeLight0.containsPoint(1206.5261F, 1206.5261F, 0);
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(1218.7F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(3061.2522F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(3061.2522F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(609.35F, homeLight0.getY(), 0.01F);
      assertEquals(3061.2522F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1218.7F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      
      Float float1 = new Float(0.0);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      
      homeLight0.setShininess(float1);
      assertEquals(1, lightSourceArray0.length);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals(1218.7F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", catalogLight0.getId());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(3061.2522F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getShininess(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(3061.2522F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(609.35F, homeLight0.getY(), 0.01F);
      assertEquals(3061.2522F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1218.7F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("VALUE_ADDED_TAX_PERCENTA5E", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", "NNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "NNWuJ=(K7g@v\t[p'", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(4730.388F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(4730.388F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(4730.388F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(4730.388F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(4730.388F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(4730.388F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(4730.388F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(4730.388F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(4730.388F, homeLight0.getElevation(), 0.01F);
      assertEquals(4730.388F, homeLight0.getDepth(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(4730.388F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(2365.194F, homeLight0.getX(), 0.01F);
      assertEquals(4730.388F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(4730.388F, homeLight0.getWidth(), 0.01F);
      assertEquals(2365.194F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      
      homeLight0.setVisible(false);
      assertEquals(4, lightSourceArray0.length);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(4730.388F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(4730.388F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(4730.388F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(4730.388F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(4730.388F, homeLight0.getElevation(), 0.01F);
      assertEquals(4730.388F, homeLight0.getDepth(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(4730.388F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(2365.194F, homeLight0.getX(), 0.01F);
      assertEquals(4730.388F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(4730.388F, homeLight0.getWidth(), 0.01F);
      assertEquals(2365.194F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      
      boolean boolean0 = homeLight0.isModelMirrored();
      assertEquals(4, lightSourceArray0.length);
      assertFalse(boolean0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(4730.388F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(4730.388F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(4730.388F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getCreator());
      assertEquals("NNWuJ=(K7g@v\t[p'", catalogLight0.getDescription());
      assertEquals(4730.388F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getName());
      assertEquals(4730.388F, homeLight0.getElevation(), 0.01F);
      assertEquals(4730.388F, homeLight0.getDepth(), 0.01F);
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getCatalogId());
      assertEquals(4730.388F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(2365.194F, homeLight0.getX(), 0.01F);
      assertEquals(4730.388F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("NNWuJ=(K7g@v\t[p'", homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(4730.388F, homeLight0.getWidth(), 0.01F);
      assertEquals(2365.194F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.7);
      assertNotNull(float0);
      assertEquals(122.7F, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal(0);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("[9,[9_51,dQ", "NAME_ANGLE", "!|6\"c}", temporaryURLContent0, temporaryURLContent0, (-805.8F), 0, 0.0F, 0, true, lightSourceArray0, (float[][]) null, "", true, (BigDecimal) null, (BigDecimal) null);
      assertNotNull(catalogLight0);
      assertEquals(4, lightSourceArray0.length);
      assertNull(catalogLight0.getGrade());
      assertEquals("NAME_ANGLE", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-805.8F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("!|6\"c}", catalogLight0.getDescription());
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("4kyt6YrbR10");
      assertNotNull(furnitureCategory0);
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertEquals("4kyt6YrbR10", furnitureCategory0.getName());
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNotNull(homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertNull(catalogLight0.getGrade());
      assertEquals("NAME_ANGLE", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-805.8F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("!|6\"c}", catalogLight0.getDescription());
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("!|6\"c}", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-402.9F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("NAME_ANGLE", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      
      HomeLight homeLight1 = new HomeLight(homeLight0);
      assertNotNull(homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(catalogLight0.getGrade());
      assertEquals("NAME_ANGLE", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-805.8F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("!|6\"c}", catalogLight0.getDescription());
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("!|6\"c}", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-402.9F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("NAME_ANGLE", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("[9,[9_51,dQ", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-402.9F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals("NAME_ANGLE", homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("!|6\"c}", homeLight1.getDescription());
      assertEquals((-805.8F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      
      HomeLight homeLight2 = new HomeLight(homeLight1);
      assertNotNull(homeLight2);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNull(catalogLight0.getGrade());
      assertEquals("NAME_ANGLE", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-805.8F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("!|6\"c}", catalogLight0.getDescription());
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("!|6\"c}", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-402.9F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("NAME_ANGLE", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("[9,[9_51,dQ", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-402.9F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals("NAME_ANGLE", homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("!|6\"c}", homeLight1.getDescription());
      assertEquals((-805.8F), homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight2.getCatalogId());
      assertEquals("NAME_ANGLE", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals((-402.9F), homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isMovable());
      assertEquals("!|6\"c}", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals((-805.8F), homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      
      homeLight1.setWidth(3700.0F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(catalogLight0.getGrade());
      assertEquals("NAME_ANGLE", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-805.8F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("!|6\"c}", catalogLight0.getDescription());
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("!|6\"c}", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-402.9F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("NAME_ANGLE", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("[9,[9_51,dQ", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-402.9F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals("NAME_ANGLE", homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("!|6\"c}", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(3700.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      
      boolean boolean1 = homeLight0.isPointAt(1850.0F, 1850.0F, 1850.0F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNull(catalogLight0.getGrade());
      assertEquals("NAME_ANGLE", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-805.8F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("!|6\"c}", catalogLight0.getDescription());
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("!|6\"c}", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-402.9F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("NAME_ANGLE", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      
      boolean boolean2 = homeLight0.isNameCenterPointAt(2101.6F, 1850.0F, 1850.0F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNull(catalogLight0.getGrade());
      assertEquals("NAME_ANGLE", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-805.8F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("!|6\"c}", catalogLight0.getDescription());
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("!|6\"c}", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-402.9F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("NAME_ANGLE", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      
      Integer integer0 = homeLight1.getColor();
      assertNull(integer0);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, lightSourceArray0.length);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(catalogLight0.getGrade());
      assertEquals("NAME_ANGLE", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getCreator());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-805.8F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("!|6\"c}", catalogLight0.getDescription());
      assertEquals("[9,[9_51,dQ", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("!|6\"c}", homeLight0.getDescription());
      assertEquals((-805.8F), homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("[9,[9_51,dQ", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-402.9F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("NAME_ANGLE", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("[9,[9_51,dQ", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-402.9F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals("NAME_ANGLE", homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("!|6\"c}", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(3700.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", temporaryURLContent0, temporaryURLContent0, 4730.388F, 4730.388F, 4730.388F, 4730.388F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      boolean boolean0 = homeLight0.isPointAt(4730.388F, (-1946.0059F), 0.5F);
      assertEquals(4730.388F, homeLight0.getWidth(), 0.01F);
      assertFalse(boolean0);
      assertEquals(4730.388F, homeLight0.getDepth(), 0.01F);
      assertEquals(2365.194F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(2365.194F, homeLight0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 4246.75F, 2344, float0);
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float(122.7);
      LightSource lightSource1 = new LightSource((-4536.1626F), 0.0F, 2344, 2344, float1);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(2344, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource2;
      Float float2 = new Float(4246.75F);
      LightSource lightSource3 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float2);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal2 = homeLight0.getValueAddedTax();
      assertNotNull(bigDecimal2);
      
      homeLight0.containsPoint(0.0F, 0.0F, 0.0F);
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      float float3 = homeLight2.getAngle();
      assertEquals(0.0F, float3, 0.01F);
      
      homeLight1.getLevel();
      assertEquals((-402.9F), homeLight0.getY(), 0.01F);
      assertEquals((-805.8F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 4246.75F, 2344, float0);
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float(122.7);
      LightSource lightSource1 = new LightSource((-4536.1626F), 0.0F, 5391.62F, 2344, float1);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(5391.62F, 0.0F, (-805.8F), 3700);
      lightSourceArray0[2] = lightSource2;
      Float float2 = new Float(4246.75F);
      LightSource lightSource3 = new LightSource(0.0F, (-650.33F), 4246.75F, 3700, float2);
      lightSourceArray0[3] = lightSource3;
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("RNWuJ=(K7g@v\t[p'", "", "RNWuJ=(K7g@v\t[p'", temporaryURLContent0, temporaryURLContent0, 0.0F, (-805.8F), 4246.75F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getValueAddedTax();
      homeLight1.setElevation((-1040.273F));
      assertEquals((-1040.273F), homeLight1.getElevation(), 0.01F);
      
      homeLight0.getName();
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((double) 0.0F);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      CatalogLight catalogLight0 = new CatalogLight("ELEVATION", "ELEVATION", "NAME_ANGE", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "[9,[9_51,dQ", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal0.shortValueExact();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setDescription("NAME_ANGE");
      homeLight0.setShininess((Float) null);
      homeLight1.getTexture();
      boolean boolean0 = homeLight0.isBottomRightPointAt((short)0, 0.0F, 0);
      assertFalse(boolean0);
      
      homeLight0.getCurrency();
      homeLight1.getModel();
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float((float) 2344);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", temporaryURLContent0, temporaryURLContent0, 2344, 1.5887189F, (-805.8F), (-805.8F), true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      boolean boolean0 = homeLight0.isTopRightPointAt(1619.8375F, 1.0F, (-805.8F));
      boolean boolean1 = homeLight0.isAtLevel((Level) null);
      assertEquals(1.5887189F, homeLight0.getDepth(), 0.01F);
      assertEquals(2344.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.79435945F, homeLight0.getY(), 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      LightSource[] lightSourceArray0 = new LightSource[4];
      Float float0 = new Float(122.18809766232016);
      BigDecimal bigDecimal0 = new BigDecimal(0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("ELEVATION", "ELEVATION", "NAME_ANGE", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0, 0.0F, true, lightSourceArray0, (float[][]) null, "[9,[9_51,dQ", true, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal1.shortValueExact();
      bigDecimal1.toBigIntegerExact();
      CatalogTexture catalogTexture0 = new CatalogTexture("NAME_ANGE", temporaryURLContent0, 0.0F, 3.4028235E38F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeLight0.setTexture(homeTexture0);
      HomeTexture homeTexture1 = homeLight0.getTexture();
      homeLight0.setTexture(homeTexture1);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
  }
}
