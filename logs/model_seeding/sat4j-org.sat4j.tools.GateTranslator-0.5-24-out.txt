* EvoSuite 1.0.7-SNAPSHOT
* Going to generate test cases for class: org.sat4j.tools.GateTranslator
* Starting Client-0
* Connecting to master process on port 6014
* Analyzing classpath: 
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar
  - bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
* Finished analyzing classpath
* Generating tests for class org.sat4j.tools.GateTranslator
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1235
* Using seed 1550567448689
* Starting evolution
* Initialsss Number of Goals in DynMOSA = 736 / 1235
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.37777777777777777
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.22727272727272727
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.3913612565445026
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.1935483870967742
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.631578947368421
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.47368421052631576
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.19696969696969696
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 200
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
[MASTER] 10:11:59.558 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type class org.sat4j.opt.MaxSatDecorator
[MASTER] 10:11:59.587 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.specs.IConstr
[MASTER] 10:11:59.706 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Found no variables of type interface org.sat4j.minisat.core.ILits
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 286
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.5888888888888889
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.4393939393939394
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.6413612565445026
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.25806451612903225
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.7368421052631579
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.6842105263157895
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.3939393939393939
[MASTER] 10:12:04.074 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for org.sat4j.tools.ManyCore<org.sat4j.tools.ManyCore<org.sat4j.opt.MinOneDecorator>> canUseFunctionalMocks=false, canBeMocked: true
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 371
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.7851851851851852
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.5454545454545454
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.8350785340314136
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.3870967741935484
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 0.8947368421052632
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 0.8947368421052632
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.5151515151515151
[MASTER] 10:12:10.085 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for org.sat4j.tools.ManyCore<org.sat4j.tools.ClausalCardinalitiesDecorator<org.sat4j.opt.MinOneDecorator>> canUseFunctionalMocks=false, canBeMocked: true
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 454
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 544
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8555555555555555
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.6515151515151515
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9175392670157068
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.45161290322580644
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.6212121212121212
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 635
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.8888888888888888
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.7727272727272727
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9463350785340314
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.45161290322580644
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.7424242424242424
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 729
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 822
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9037037037037037
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.8484848484848485
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9581151832460733
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.45161290322580644
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8181818181818182
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 910
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1003
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 0.9629629629629629
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9090909090909091
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.981675392670157
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.45161290322580644
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8787878787878788
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1092
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1181
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1280
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9242424242424242
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9829842931937173
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.45161290322580644
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8939393939393939
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1378
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9242424242424242
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9829842931937173
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.45161290322580644
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8939393939393939
* naaame: 
* naaame: org.evosuite.ShutdownTestWriter
* naaame: org.evosuite.ga.stoppingconditions.ZeroFitnessStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.GlobalTimeStoppingCondition
* naaame: org.evosuite.ga.stoppingconditions.MaxFitnessEvaluationsStoppingCondition
Current fitness evaluations: 1467
* naaame: org.evosuite.ga.stoppingconditions.RMIStoppingCondition
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9242424242424242
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9829842931937173
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.45161290322580644
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8939393939393939
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9242424242424242
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9829842931937173
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.45161290322580644
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8939393939393939
* Search finished after 122s and 14 generations, 19628 statements, best individual has fitness: 42.0
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9242424242424242
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9829842931937173
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.45161290322580644
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8939393939393939
* Minimizing test suite
[MASTER] 10:14:18.559 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 100%
* Total number of goals: 270
* Number of covered goals: 270
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 92%
* Total number of goals: 66
* Number of covered goals: 61
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 50
* Number of covered goals: 50
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 98%
* Total number of goals: 764
* Number of covered goals: 751
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 45%
* Total number of goals: 31
* Number of covered goals: 14
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 19
* Number of covered goals: 19
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 19
* Number of covered goals: 19
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 89%
* Total number of goals: 66
* Number of covered goals: 59
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9242424242424242
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9829842931937173
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.45161290322580644
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8939393939393939
* Generated 99 tests with total length 1328
* Resulting test suite's coverage: 91% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 10:15:01.931 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6822666666666667% of time used, but only 6/99 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 3%
Current fitness function value: class org.evosuite.coverage.line.LineCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.branch.BranchCoverageSuiteFitness ** 0.9242424242424242
Current fitness function value: class org.evosuite.coverage.exception.ExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.mutation.WeakMutationSuiteFitness ** 0.9829842931937173
Current fitness function value: class org.evosuite.coverage.io.output.OutputCoverageSuiteFitness ** 0.45161290322580644
Current fitness function value: class org.evosuite.coverage.method.MethodCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.method.MethodNoExceptionCoverageSuiteFitness ** 1.0
Current fitness function value: class org.evosuite.coverage.cbranch.CBranchSuiteFitness ** 0.8939393939393939
* Compiling and checking tests
[MASTER] 10:16:00.830 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 10:16:00.847 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertNotNull(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

EMARestarts eMARestarts0 = new EMARestarts();
assertNotNull(eMARestarts0);
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, tabuListDecorator0, eMARestarts0);
assertNotNull(solver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.realNumberOfVariables());

eMARestarts0.reset();
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());

VecInt vecInt0 = new VecInt();
assertNotNull(vecInt0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(solver0, vecInt0);
assertNotNull(minimal4CardinalityModel0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.realNumberOfVariables());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(minimal4CardinalityModel0);
assertNotNull(maxSatDecorator0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.realNumberOfVariables());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
assertFalse(maxSatDecorator0.isSolutionOptimal());
assertFalse(maxSatDecorator0.isOptimal());
assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
assertEquals(0, maxSatDecorator0.getNbexpectedclauses());

varOrderHeap0.varDecayActivity();
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

Number number0 = maxSatDecorator0.getObjectiveValue();
assertEquals(0, number0);
assertNotNull(number0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.realNumberOfVariables());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
assertFalse(maxSatDecorator0.isSolutionOptimal());
assertFalse(maxSatDecorator0.isOptimal());
assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
assertEquals(0, maxSatDecorator0.getNbexpectedclauses());

FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
assertNotNull(fileSystemHandling0);

FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0, false);
assertNotNull(fullClauseSelectorSolver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.realNumberOfVariables());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
assertFalse(maxSatDecorator0.isSolutionOptimal());
assertFalse(maxSatDecorator0.isOptimal());
assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());

GateTranslator gateTranslator0 = new GateTranslator(fullClauseSelectorSolver0);
assertNotNull(gateTranslator0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.realNumberOfVariables());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
assertFalse(maxSatDecorator0.isSolutionOptimal());
assertFalse(maxSatDecorator0.isOptimal());
assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());

IConstr[] iConstrArray0 = gateTranslator0.halfOr(0, vecInt0);
assertEquals(0, iConstrArray0.length);
assertNotNull(iConstrArray0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(0, solver0.decisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.getPropagationLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nConstraints());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.nVars());
assertEquals(0, solver0.realNumberOfVariables());
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
assertFalse(maxSatDecorator0.isSolutionOptimal());
assertFalse(maxSatDecorator0.isOptimal());
assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());

gateTranslator0.gateTrue((-2243));

[MASTER] 10:16:04.012 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.NullPointerException: null
[MASTER] 10:16:04.021 [logback-1] WARN  JUnitAnalyzer - Failing test:
 FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
assertNotNull(fixedLengthLearning0);
assertEquals(3, fixedLengthLearning0.getMaxLength());

CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
assertNotNull(cardinalityDataStructureYanMax0);

VarOrderHeap varOrderHeap0 = new VarOrderHeap();
assertNotNull(varOrderHeap0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
assertNotNull(tabuListDecorator0);
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());

EMARestarts eMARestarts0 = new EMARestarts();
assertNotNull(eMARestarts0);
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());

Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, tabuListDecorator0, eMARestarts0);
assertNotNull(solver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nVars());

IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
assertNotNull(iVecInt0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nVars());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());

Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(solver0, iVecInt0);
assertNotNull(minimal4CardinalityModel0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nVars());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());

MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(minimal4CardinalityModel0);
assertNotNull(maxSatDecorator0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nVars());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
assertFalse(maxSatDecorator0.isOptimal());
assertFalse(maxSatDecorator0.isSolutionOptimal());
assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());

Number number0 = maxSatDecorator0.getObjectiveValue();
assertEquals(0, number0);
assertNotNull(number0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nVars());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
assertFalse(maxSatDecorator0.isOptimal());
assertFalse(maxSatDecorator0.isSolutionOptimal());
assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());

FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0, false);
assertNotNull(fullClauseSelectorSolver0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nVars());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
assertFalse(maxSatDecorator0.isOptimal());
assertFalse(maxSatDecorator0.isSolutionOptimal());
assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());

GateTranslator gateTranslator0 = new GateTranslator(fullClauseSelectorSolver0);
assertNotNull(gateTranslator0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nVars());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
assertFalse(maxSatDecorator0.isOptimal());
assertFalse(maxSatDecorator0.isSolutionOptimal());
assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());

IConstr[] iConstrArray0 = gateTranslator0.halfOr(0, iVecInt0);
assertEquals(0, iConstrArray0.length);
assertNotNull(iConstrArray0);
assertEquals(3, fixedLengthLearning0.getMaxLength());
assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
assertFalse(eMARestarts0.shouldRestart());
assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
assertEquals(0, solver0.nConstraints());
assertFalse(solver0.isDBSimplificationAllowed());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.realNumberOfVariables());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(0, solver0.nVars());
assertEquals(0, iVecInt0.size());
assertTrue(iVecInt0.isEmpty());
assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
assertFalse(maxSatDecorator0.isOptimal());
assertFalse(maxSatDecorator0.isSolutionOptimal());
assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'GateTranslator_ESTest' to evosuite-tests
* Done!

* Computation finished
