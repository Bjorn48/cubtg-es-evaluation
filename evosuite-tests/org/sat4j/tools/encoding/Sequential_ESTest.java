/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 16:02:55 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.core.Solver;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.encoding.Sequential;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Sequential_ESTest extends Sequential_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      assertFalse(groupClauseSelectorSolver0.isSatisfiable());
      
      VecInt vecInt0 = new VecInt(2517);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.push((-1));
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals((-1), vecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.last());
      
      IConstr iConstr0 = sequential0.addExactly(groupClauseSelectorSolver0, vecInt0, 1638);
      assertSame(vecInt0, iVecInt0);
      assertNotNull(iConstr0);
      assertFalse(groupClauseSelectorSolver0.isSatisfiable());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals((-1), vecInt0.last());
      assertEquals(2, iConstr0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(solutionCounter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(solutionCounter0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      assertFalse(groupClauseSelectorSolver0.isSatisfiable());
      
      VecInt vecInt0 = new VecInt(2517, 2517);
      assertNotNull(vecInt0);
      assertEquals(2517, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2517, vecInt0.last());
      
      // Undeclared exception!
      sequential0.addExactlyOne(groupClauseSelectorSolver0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addClause(any(org.sat4j.specs.IVecInt.class));
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      assertFalse(groupClauseSelectorSolver0.isSatisfiable());
      
      VecInt vecInt0 = new VecInt(1621);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      // Undeclared exception!
      try { 
        sequential0.addExactlyOne(groupClauseSelectorSolver0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Sequential", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(solutionCounter0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      assertFalse(groupClauseSelectorSolver0.isSatisfiable());
      
      VecInt vecInt0 = new VecInt(2517, (-1792));
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2517, vecInt0.size());
      assertEquals((-1792), vecInt0.last());
      
      // Undeclared exception!
      sequential0.addExactly(groupClauseSelectorSolver0, vecInt0, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      assertNotNull(solver0);
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      // Undeclared exception!
      try { 
        sequential0.addExactly(solver0, (IVecInt) null, 1792);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      assertFalse(groupClauseSelectorSolver0.isSatisfiable());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      // Undeclared exception!
      try { 
        sequential0.addAtMostOne(groupClauseSelectorSolver0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Sequential", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      LexicoDecorator<SolutionCounter> lexicoDecorator0 = new LexicoDecorator<SolutionCounter>(solutionCounter0);
      assertNotNull(lexicoDecorator0);
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(lexicoDecorator0.isOptimal());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      
      // Undeclared exception!
      try { 
        sequential0.addAtMost(lexicoDecorator0, (IVecInt) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      assertNotNull(solutionCounter0);
      assertEquals(0, solutionCounter0.lowerBound());
      
      VecInt vecInt0 = new VecInt(2, 2);
      assertNotNull(vecInt0);
      assertEquals(2, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      
      // Undeclared exception!
      try { 
        sequential0.addAtMost(solutionCounter0, vecInt0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn(1687, 418, (-1), 418, 2).when(solutionCounter0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      assertFalse(groupClauseSelectorSolver0.isSatisfiable());
      
      VecInt vecInt0 = new VecInt(2517, (-1792));
      assertNotNull(vecInt0);
      assertEquals(2517, vecInt0.size());
      assertEquals((-1792), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      sequential0.addAtMost(groupClauseSelectorSolver0, vecInt0, 418);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      assertFalse(groupClauseSelectorSolver0.isSatisfiable());
      
      VecInt vecInt0 = new VecInt(2517, (-1792));
      assertNotNull(vecInt0);
      assertEquals(2517, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1792), vecInt0.last());
      
      // Undeclared exception!
      try { 
        sequential0.addAtMost(groupClauseSelectorSolver0, vecInt0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Sequential", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      assertNotNull(sequential0);
      
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      assertNotNull(groupClauseSelectorSolver0);
      assertFalse(groupClauseSelectorSolver0.isSatisfiable());
      
      VecInt vecInt0 = new VecInt(2517);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.push((-1));
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      assertEquals(1, vecInt0.size());
      assertEquals((-1), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      IConstr iConstr0 = sequential0.addAtMost(groupClauseSelectorSolver0, vecInt0, 1643);
      assertSame(vecInt0, iVecInt0);
      assertNotNull(iConstr0);
      assertFalse(groupClauseSelectorSolver0.isSatisfiable());
      assertEquals(1, vecInt0.size());
      assertEquals((-1), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(solutionCounter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(solutionCounter0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      VecInt vecInt0 = new VecInt(1621, 1621);
      sequential0.addExactlyOne(groupClauseSelectorSolver0, vecInt0);
      assertEquals(1621, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(solutionCounter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(solutionCounter0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      VecInt vecInt0 = new VecInt(2517, (-1792));
      // Undeclared exception!
      sequential0.addAtMostOne(groupClauseSelectorSolver0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(2206);
      IConstr iConstr0 = sequential0.addAtMostOne(groupClauseSelectorSolver0, iVecInt0);
      assertEquals(0, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      VecInt vecInt0 = new VecInt(2517, 2517);
      // Undeclared exception!
      try { 
        sequential0.addAtMostOne((ISolver) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      // Undeclared exception!
      try { 
        sequential0.addExactlyOne(iSolver0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      VecInt vecInt0 = new VecInt(15, 46);
      // Undeclared exception!
      try { 
        sequential0.addExactly(groupClauseSelectorSolver0, vecInt0, 46);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Sequential", e);
      }
  }
}
