/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 16:02:16 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.encoding.Binomial;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Binomial_ESTest extends Binomial_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      iVecInt0.insertFirst(48);
      IConstr iConstr0 = binomial0.addAtMostOne(fullClauseSelectorSolver0, iVecInt0);
      assertEquals(0, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(minimal4InclusionModel0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0).when(minimal4InclusionModel0).nVars();
      ClausalCardinalitiesDecorator<Minimal4InclusionModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4InclusionModel>(minimal4InclusionModel0, (EncodingStrategyAdapter) null);
      GateTranslator gateTranslator0 = new GateTranslator(clausalCardinalitiesDecorator0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(gateTranslator0);
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.clear();
      vecInt0.unsafePush(0);
      IConstr iConstr0 = binomial0.addAtMost(abstractMinimalModel0, vecInt0, 0);
      assertEquals(1, vecInt0.size());
      assertEquals(1, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(minimal4InclusionModel0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(48, 1795, 0).when(minimal4InclusionModel0).nVars();
      ClausalCardinalitiesDecorator<Minimal4InclusionModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4InclusionModel>(minimal4InclusionModel0, (EncodingStrategyAdapter) null);
      Minimal4InclusionModel minimal4InclusionModel1 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel1, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      GateTranslator gateTranslator0 = new GateTranslator(clausalCardinalitiesDecorator0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(gateTranslator0);
      IConstr iConstr0 = binomial0.addExactlyOne(abstractMinimalModel0, iVecInt0);
      assertEquals(2, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(2489, 2782);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      // Undeclared exception!
      binomial0.addExactlyOne(dimacsStringSolver0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        binomial0.addExactlyOne((ISolver) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(minimal4InclusionModel0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      iVecInt0.growTo(1795, (-2586));
      // Undeclared exception!
      try { 
        binomial0.addExactlyOne(fullClauseSelectorSolver0, iVecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0, true);
      VecInt vecInt0 = new VecInt(0);
      vecInt0.pop();
      // Undeclared exception!
      try { 
        binomial0.addExactlyOne(fullClauseSelectorSolver0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      // Undeclared exception!
      try { 
        binomial0.addExactly((ISolver) null, (IVecInt) null, (-1030));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0, true);
      VecInt vecInt0 = new VecInt(0);
      vecInt0.pop();
      // Undeclared exception!
      try { 
        binomial0.addExactly(fullClauseSelectorSolver0, vecInt0, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(minimal4InclusionModel0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      iVecInt0.insertFirst(48);
      // Undeclared exception!
      try { 
        binomial0.addExactly(fullClauseSelectorSolver0, iVecInt0, 1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      ISolver iSolver0 = null;
      VecInt vecInt0 = new VecInt();
      Binomial binomial1 = new Binomial();
      ISolver iSolver1 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(499, 0, 0).when(iVecInt0).size();
      IConstr iConstr0 = binomial1.addAtMostOne(iSolver1, iVecInt0);
      assertEquals(0, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      // Undeclared exception!
      try { 
        binomial0.addAtMostOne((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binomial", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(25, 25);
      // Undeclared exception!
      binomial0.addAtMost((ISolver) null, vecInt0, 25);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn((IVecInt[]) null).when(iVecInt0).subset(anyInt());
      // Undeclared exception!
      try { 
        binomial0.addAtMost(iSolver0, iVecInt0, 296);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binomial", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0, true);
      VecInt vecInt0 = new VecInt(0);
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        binomial0.addAtMost(fullClauseSelectorSolver0, iVecInt0, 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(2772, 18);
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(minimal4InclusionModel0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0, true);
      // Undeclared exception!
      try { 
        binomial0.addAtMost(fullClauseSelectorSolver0, vecInt0, 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      Minimal4InclusionModel minimal4InclusionModel0 = mock(Minimal4InclusionModel.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0, true);
      VecInt vecInt0 = new VecInt(0);
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        binomial0.addAtMost(fullClauseSelectorSolver0, iVecInt0, 2549);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      VecInt vecInt0 = new VecInt();
      vecInt0.growTo(10, 2184);
      // Undeclared exception!
      try { 
        binomial0.addAtLeast((ISolver) null, vecInt0, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binomial", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      VecInt vecInt0 = new VecInt();
      IConstr iConstr0 = binomial0.addAtLeast((ISolver) null, vecInt0, (-1));
      assertEquals(0, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      VecInt vecInt0 = new VecInt();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      try { 
        binomial0.addExactlyOne(iSolver0, vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      VecInt vecInt0 = new VecInt();
      IConstr iConstr0 = binomial0.addExactly((ISolver) null, vecInt0, (-1849));
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
  }
}
