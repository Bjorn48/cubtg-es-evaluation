/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:39:25 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.cnf.CBClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.SizeComparator;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.ILogAble;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SizeComparator_ESTest extends SizeComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-771));
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, (RestartStrategy) null);
      VecInt vecInt0 = (VecInt)solver0.trail;
      Constr constr0 = mixedDataStructureDanielWLConciseBinary0.createUnregisteredClause(vecInt0);
      constr0.incActivity((-720.89));
      int int0 = sizeComparator0.compare(constr0, constr0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-771));
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, (RestartStrategy) null);
      VecInt vecInt0 = (VecInt)solver0.trail;
      Constr constr0 = mixedDataStructureDanielWLConciseBinary0.createUnregisteredClause(vecInt0);
      Constr constr1 = mixedDataStructureDanielWLConciseBinary0.createUnregisteredClause(vecInt0);
      int int0 = sizeComparator0.compare(constr0, constr1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      Constr constr0 = clausalDataStructureWL0.createUnregisteredClause(vecInt0);
      CBClause cBClause0 = new CBClause(vecInt0, (ILits) null);
      int int0 = sizeComparator0.compare(constr0, (Constr) cBClause0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams();
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(userFixedPhaseSelectionStrategy0);
      EMARestarts eMARestarts0 = new EMARestarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, eMARestarts0, iLogAble0);
      VecInt vecInt0 = (VecInt)solver0.implied;
      Constr constr0 = mixedDataStructureDanielWL0.createCardinalityConstraint(vecInt0, 0);
      // Undeclared exception!
      try { 
        sizeComparator0.compare(constr0, constr0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      // Undeclared exception!
      try { 
        sizeComparator0.compare((Constr) null, (Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.SizeComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Constr constr0 = mixedDataStructureSingleWL0.createUnregisteredCardinalityConstraint(vecInt0, 100);
      int int0 = sizeComparator0.compare(constr0, constr0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      Constr constr0 = mixedDataStructureSingleWL0.createUnregisteredCardinalityConstraint(vecInt0, 100);
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      int int0 = sizeComparator0.compare((Constr) originalBinaryClause0, constr0);
      assertEquals((-2), int0);
  }
}
