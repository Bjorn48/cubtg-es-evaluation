/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 21:33:48 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.AspectRatio;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomePrint;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.ObserverCamera;
import com.eteks.sweethome3d.model.PieceOfFurniture;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.net.URL;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Home_ESTest extends Home_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Home home0 = new Home((-1307.6207F));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Room> list0 = home0.getRooms();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VISIBLE;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      
      home0.setSelectedItems(linkedList0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0, linkedList0.size());
      
      List<HomePieceOfFurniture.SortableProperty> list1 = home0.getFurnitureVisibleProperties();
      assertTrue(list1.contains(homePieceOfFurniture_SortableProperty0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(5, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      Wall wall0 = new Wall(3700L, (-2331.1F), (-6.766667F), 3700L, (-571.0F), (-2813.7966F));
      assertEquals(7079.1445F, wall0.getLength(), 0.01F);
      assertEquals(684.44995F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2331.1F), wall0.getYStart(), 0.01F);
      assertEquals(1846.6167F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2813.7966F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7079.1445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-571.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6.766667F), wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallEndAt((-2331.1F), (-2813.7966F), 170.0F);
      assertFalse(boolean0);
      assertEquals(7079.1445F, wall0.getLength(), 0.01F);
      assertEquals(684.44995F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2331.1F), wall0.getYStart(), 0.01F);
      assertEquals(1846.6167F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2813.7966F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7079.1445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-571.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6.766667F), wall0.getXEnd(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint(0.7853982F, 0.0F, 613.9196F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7079.1445F, wall0.getLength(), 0.01F);
      assertEquals(684.44995F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2331.1F), wall0.getYStart(), 0.01F);
      assertEquals(1846.6167F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2813.7966F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7079.1445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-571.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6.766667F), wall0.getXEnd(), 0.01F);
      
      home0.addWall(wall0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertEquals(7079.1445F, wall0.getLength(), 0.01F);
      assertEquals(684.44995F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2331.1F), wall0.getYStart(), 0.01F);
      assertEquals(1846.6167F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2813.7966F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7079.1445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-571.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6.766667F), wall0.getXEnd(), 0.01F);
      
      List<Label> list2 = Home.getLabelsSubList(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      List<Selectable> list3 = Home.duplicate(list2);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertNotNull(list3);
      
      boolean boolean2 = home0.isModified();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      
      boolean boolean3 = home0.isModified();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      
      DimensionLine dimensionLine0 = new DimensionLine((-15.416667F), (-2331.1F), 170.0F, (-1078.1091F), 0.1F);
      assertEquals((-15.416667F), dimensionLine0.getXStart(), 0.01F);
      assertEquals((-1078.1091F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-2331.1F), dimensionLine0.getYStart(), 0.01F);
      assertEquals(1266.6356F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.1F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(170.0F, dimensionLine0.getXEnd(), 0.01F);
      assertNotNull(dimensionLine0);
      
      home0.setFurnitureDescendingSorted(false);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertEquals((-1307.6207F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertNotNull(home1);
      
      List<Camera> list4 = home1.getStoredCameras();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertEquals((-1307.6207F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertNotNull(list4);
      
      home1.setStoredCameras(list4);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertEquals((-1307.6207F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      
      boolean boolean4 = home1.isEmpty();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertEquals((-1307.6207F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      
      List<Selectable> list5 = home1.getSelectedItems();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertTrue(list5.equals((Object)list3));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertEquals((-1307.6207F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertEquals(0, list5.size());
      assertTrue(list5.isEmpty());
      assertNotNull(list5);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      home0.setFurnitureVisibleProperties(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(backgroundImage0);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertNull(observerCamera0.getName());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertNotNull(observerCamera0);
      
      home0.setCamera(observerCamera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertNull(observerCamera0.getName());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      
      List<Room> list1 = home0.getRooms();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      List<Level> list2 = home0.getLevels();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      
      boolean boolean0 = home0.isRecovered();
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      
      float float0 = home0.getWallHeight();
      assertEquals(250.0F, float0, 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(collection0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "cR%5w)Om5:%j~:HuT");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Compass compass0 = home0.getCompass();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertTrue(compass0.isVisible());
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertNotNull(compass0);
      
      compass0.setX(3517.9F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(3517.9F, compass0.getX(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertFalse(linkedList0.contains(compass0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Level level0 = new Level(",mvC-ugQ", (-733.69F), 3700L, 16.75F);
      assertTrue(level0.isVisible());
      assertEquals(",mvC-ugQ", level0.getName());
      assertEquals((-733.69F), level0.getElevation(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(16.75F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertTrue(level0.isVisible());
      assertEquals(",mvC-ugQ", level0.getName());
      assertEquals((-733.69F), level0.getElevation(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(16.75F, level0.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(",mvC-ugQ", level1.getName());
      assertEquals((-733.69F), level1.getElevation(), 0.01F);
      assertEquals(3700.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(16.75F, level1.getHeight(), 0.01F);
      assertNotNull(level1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("TTZ=(j(ACGlJ M7^hd/", propertyChangeListener0);
      assertEquals("TTZ=(j(ACGlJ M7^hd/", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertTrue(level0.isVisible());
      assertEquals(",mvC-ugQ", level0.getName());
      assertEquals((-733.69F), level0.getElevation(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(16.75F, level0.getHeight(), 0.01F);
      assertEquals("TTZ=(j(ACGlJ M7^hd/", propertyChangeListenerProxy0.getPropertyName());
      
      Level level2 = level0.clone();
      assertFalse(level0.equals((Object)level1));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      assertTrue(level0.isVisible());
      assertEquals(",mvC-ugQ", level0.getName());
      assertEquals((-733.69F), level0.getElevation(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(16.75F, level0.getHeight(), 0.01F);
      assertEquals(3700.0F, level2.getFloorThickness(), 0.01F);
      assertEquals((-733.69F), level2.getElevation(), 0.01F);
      assertEquals(16.75F, level2.getHeight(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals(",mvC-ugQ", level2.getName());
      assertNotNull(level2);
      
      level2.setFloorThickness(16.75F);
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      assertTrue(level0.isVisible());
      assertEquals(",mvC-ugQ", level0.getName());
      assertEquals((-733.69F), level0.getElevation(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(16.75F, level0.getHeight(), 0.01F);
      assertEquals(16.75F, level2.getFloorThickness(), 0.01F);
      assertEquals((-733.69F), level2.getElevation(), 0.01F);
      assertEquals(16.75F, level2.getHeight(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals(",mvC-ugQ", level2.getName());
      
      home0.addLevel(level0);
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertTrue(level0.isVisible());
      assertEquals(",mvC-ugQ", level0.getName());
      assertEquals((-733.69F), level0.getElevation(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(16.75F, level0.getHeight(), 0.01F);
      
      home0.addLevel(level1);
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertTrue(level0.isVisible());
      assertEquals(",mvC-ugQ", level0.getName());
      assertEquals((-733.69F), level0.getElevation(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(16.75F, level0.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(",mvC-ugQ", level1.getName());
      assertEquals((-733.69F), level1.getElevation(), 0.01F);
      assertEquals(3700.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(16.75F, level1.getHeight(), 0.01F);
      
      home0.setFurnitureDescendingSorted(false);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      
      boolean boolean0 = home0.isFurnitureDescendingSorted();
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNotNull(home0);
      
      Level level0 = new Level("lGR>%i.kyD/(%O", 0.0F, 3700L, 3700L);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("lGR>%i.kyD/(%O", level0.getName());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      DimensionLine dimensionLine0 = new DimensionLine(0.0F, 3700L, (-2728.9795F), 3737.088F, 3737.088F);
      assertEquals(3737.088F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-2728.9795F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(2729.2314F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3737.088F, dimensionLine0.getOffset(), 0.01F);
      assertNotNull(dimensionLine0);
      
      home0.addDimensionLine(dimensionLine0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3737.088F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-2728.9795F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(2729.2314F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3737.088F, dimensionLine0.getOffset(), 0.01F);
      
      home0.addLevel(level0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("lGR>%i.kyD/(%O", level0.getName());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      
      // Undeclared exception!
      try { 
        home0.clone();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addRoomsListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNotNull(home0);
      
      home0.setBasePlanLocked(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      
      home0.setFurnitureDescendingSorted(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      LinkedList<HomePieceOfFurniture.SortableProperty> linkedList0 = new LinkedList<HomePieceOfFurniture.SortableProperty>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall((-2136.517F), 3700L, 3700L, 3700L, (-2136.517F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(781.74146F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5836.517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2136.517F), wall0.getXStart(), 0.01F);
      assertEquals((-2136.517F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5836.517F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      home0.addWall(wall0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(781.74146F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5836.517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2136.517F), wall0.getXStart(), 0.01F);
      assertEquals((-2136.517F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5836.517F, wall0.getLength(), 0.01F);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      
      List<Level> list0 = home0.getLevels();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      home0.deleteWall(wall0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(781.74146F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5836.517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2136.517F), wall0.getXStart(), 0.01F);
      assertEquals((-2136.517F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5836.517F, wall0.getLength(), 0.01F);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertNotNull(homeEnvironment0);
      
      Home home1 = new Home();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNotNull(home1);
      
      float[][] floatArray0 = new float[2][3];
      float[] floatArray1 = new float[6];
      floatArray1[0] = (-2136.517F);
      floatArray1[1] = (-2136.517F);
      floatArray1[2] = (float) 3700L;
      floatArray1[3] = (-2136.517F);
      floatArray1[4] = (float) 3700L;
      floatArray1[5] = (float) 3700L;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 3700L;
      floatArray2[1] = (-2136.517F);
      floatArray2[2] = 1751.549F;
      floatArray2[3] = 0.0F;
      floatArray2[4] = (-914.5056F);
      floatArray2[5] = (float) 3700L;
      floatArray2[6] = (float) 3700L;
      floatArray2[7] = (float) 3700L;
      floatArray2[8] = (float) 3700L;
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals((-2136.517F), room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(781.74146F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertNotNull(room0);
      
      home1.addRoom(room0);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home0);
      assertEquals(2, floatArray0.length);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals((-2136.517F), room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(781.74146F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      
      boolean boolean1 = home1.isEmpty();
      assertFalse(home1.equals((Object)home0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home0);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      CollectionListener<Room> collectionListener1 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      List<Camera> list0 = home0.getStoredCameras();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      home0.setStoredCameras(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.addSelectionListener(selectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      
      Collection<Wall> collection0 = home0.getWalls();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(collection0);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      
      CollectionListener<DimensionLine> collectionListener2 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addDimensionLinesListener(collectionListener2);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.deleteWall((Wall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      HomePrint homePrint0 = home0.getPrint();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(homePrint0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.addSelectionListener(selectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      
      home0.setName("America/Paramaribo");
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals("America/Paramaribo", home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      Label label0 = new Label("!=FAnu*H8MJO`~", 3700L, 3700L);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("!=FAnu*H8MJO`~", label0.getText());
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertNotNull(label0);
      
      Label label1 = label0.clone();
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("!=FAnu*H8MJO`~", label0.getText());
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(3700.0F, label1.getY(), 0.01F);
      assertEquals(3700.0F, label1.getX(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals("!=FAnu*H8MJO`~", label1.getText());
      assertNotNull(label1);
      
      home0.deleteLabel(label1);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("!=FAnu*H8MJO`~", label0.getText());
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(3700.0F, label1.getY(), 0.01F);
      assertEquals(3700.0F, label1.getX(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals("!=FAnu*H8MJO`~", label1.getText());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNotNull(home0);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeWallsListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.addRoom((Room) null, 1578);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1578, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      float float0 = 50.0F;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ObserverCamera observerCamera0 = new ObserverCamera(3700L, 50.0F, 3700L, 3700L, 50.0F, 3700L);
      assertEquals(3700.0F, observerCamera0.getYaw(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getX(), 0.01F);
      assertEquals(25.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(50.0F, observerCamera0.getPitch(), 0.01F);
      assertNull(observerCamera0.getName());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(3964.2856F, observerCamera0.getHeight(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(62.5F, observerCamera0.getWidth(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getZ(), 0.01F);
      assertNotNull(observerCamera0);
      
      ObserverCamera observerCamera1 = observerCamera0.clone();
      assertFalse(observerCamera1.equals((Object)observerCamera0));
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera1, observerCamera0);
      assertEquals(3700.0F, observerCamera0.getYaw(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getX(), 0.01F);
      assertEquals(25.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(50.0F, observerCamera0.getPitch(), 0.01F);
      assertNull(observerCamera0.getName());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(3964.2856F, observerCamera0.getHeight(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(62.5F, observerCamera0.getWidth(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(3700.0F, observerCamera1.getZ(), 0.01F);
      assertEquals(3700.0F, observerCamera1.getYaw(), 0.01F);
      assertEquals(3700.0F, observerCamera1.getX(), 0.01F);
      assertEquals(25.0F, observerCamera1.getDepth(), 0.01F);
      assertEquals(50.0F, observerCamera1.getPitch(), 0.01F);
      assertFalse(observerCamera1.isFixedSize());
      assertEquals(Camera.Lens.PINHOLE, observerCamera1.getLens());
      assertEquals(3964.2856F, observerCamera1.getHeight(), 0.01F);
      assertEquals(62.5F, observerCamera1.getWidth(), 0.01F);
      assertEquals(1392409281320L, observerCamera1.getTime());
      assertNull(observerCamera1.getName());
      assertEquals(3700.0F, observerCamera1.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera1.getY(), 0.01F);
      assertNotNull(observerCamera1);
      
      boolean boolean1 = linkedList0.add((Camera) observerCamera1);
      assertFalse(observerCamera0.equals((Object)observerCamera1));
      assertFalse(observerCamera1.equals((Object)observerCamera0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera1, observerCamera0);
      assertEquals(1, linkedList0.size());
      assertEquals(3700.0F, observerCamera0.getYaw(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getX(), 0.01F);
      assertEquals(25.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(50.0F, observerCamera0.getPitch(), 0.01F);
      assertNull(observerCamera0.getName());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(3964.2856F, observerCamera0.getHeight(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(62.5F, observerCamera0.getWidth(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(3700.0F, observerCamera1.getZ(), 0.01F);
      assertEquals(3700.0F, observerCamera1.getYaw(), 0.01F);
      assertEquals(3700.0F, observerCamera1.getX(), 0.01F);
      assertEquals(25.0F, observerCamera1.getDepth(), 0.01F);
      assertEquals(50.0F, observerCamera1.getPitch(), 0.01F);
      assertFalse(observerCamera1.isFixedSize());
      assertEquals(Camera.Lens.PINHOLE, observerCamera1.getLens());
      assertEquals(3964.2856F, observerCamera1.getHeight(), 0.01F);
      assertEquals(62.5F, observerCamera1.getWidth(), 0.01F);
      assertEquals(1392409281320L, observerCamera1.getTime());
      assertNull(observerCamera1.getName());
      assertEquals(3700.0F, observerCamera1.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera1.getY(), 0.01F);
      
      home0.setStoredCameras(linkedList0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(1, linkedList0.size());
      
      home0.deselectItem(observerCamera0);
      assertFalse(observerCamera0.equals((Object)observerCamera1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(observerCamera0, observerCamera1);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700.0F, observerCamera0.getYaw(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getX(), 0.01F);
      assertEquals(25.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(50.0F, observerCamera0.getPitch(), 0.01F);
      assertNull(observerCamera0.getName());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(3964.2856F, observerCamera0.getHeight(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(62.5F, observerCamera0.getWidth(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getZ(), 0.01F);
      
      LinkedList<ObserverCamera> linkedList1 = new LinkedList<ObserverCamera>();
      assertFalse(linkedList1.contains(observerCamera0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      boolean boolean2 = linkedList1.offerLast(observerCamera1);
      assertFalse(observerCamera0.equals((Object)observerCamera1));
      assertFalse(observerCamera1.equals((Object)observerCamera0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertFalse(linkedList1.contains(observerCamera0));
      assertTrue(linkedList1.contains(observerCamera1));
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera1, observerCamera0);
      assertEquals(3700.0F, observerCamera0.getYaw(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getX(), 0.01F);
      assertEquals(25.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(50.0F, observerCamera0.getPitch(), 0.01F);
      assertNull(observerCamera0.getName());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(3964.2856F, observerCamera0.getHeight(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(62.5F, observerCamera0.getWidth(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(3700.0F, observerCamera1.getZ(), 0.01F);
      assertEquals(3700.0F, observerCamera1.getYaw(), 0.01F);
      assertEquals(3700.0F, observerCamera1.getX(), 0.01F);
      assertEquals(25.0F, observerCamera1.getDepth(), 0.01F);
      assertEquals(50.0F, observerCamera1.getPitch(), 0.01F);
      assertFalse(observerCamera1.isFixedSize());
      assertEquals(Camera.Lens.PINHOLE, observerCamera1.getLens());
      assertEquals(3964.2856F, observerCamera1.getHeight(), 0.01F);
      assertEquals(62.5F, observerCamera1.getWidth(), 0.01F);
      assertEquals(1392409281320L, observerCamera1.getTime());
      assertNull(observerCamera1.getName());
      assertEquals(3700.0F, observerCamera1.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera1.getY(), 0.01F);
      assertEquals(1, linkedList1.size());
      
      float float1 = (-780.79F);
      boolean boolean3 = observerCamera1.intersectsRectangle(3700L, 3700L, 3700L, (-780.79F));
      assertFalse(observerCamera0.equals((Object)observerCamera1));
      assertFalse(observerCamera1.equals((Object)observerCamera0));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera1, observerCamera0);
      assertEquals(3700.0F, observerCamera0.getYaw(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getX(), 0.01F);
      assertEquals(25.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(50.0F, observerCamera0.getPitch(), 0.01F);
      assertNull(observerCamera0.getName());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(3964.2856F, observerCamera0.getHeight(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(62.5F, observerCamera0.getWidth(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(3700.0F, observerCamera1.getZ(), 0.01F);
      assertEquals(3700.0F, observerCamera1.getYaw(), 0.01F);
      assertEquals(3700.0F, observerCamera1.getX(), 0.01F);
      assertEquals(25.0F, observerCamera1.getDepth(), 0.01F);
      assertEquals(50.0F, observerCamera1.getPitch(), 0.01F);
      assertFalse(observerCamera1.isFixedSize());
      assertEquals(Camera.Lens.PINHOLE, observerCamera1.getLens());
      assertEquals(3964.2856F, observerCamera1.getHeight(), 0.01F);
      assertEquals(62.5F, observerCamera1.getWidth(), 0.01F);
      assertEquals(1392409281320L, observerCamera1.getTime());
      assertNull(observerCamera1.getName());
      assertEquals(3700.0F, observerCamera1.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera1.getY(), 0.01F);
      
      List<Selectable> list0 = Home.duplicate(linkedList1);
      assertFalse(linkedList1.contains(observerCamera0));
      assertTrue(linkedList1.contains(observerCamera1));
      assertEquals(1, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      home0.setModified(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      
      List<Level> list1 = home0.getLevels();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      List<DimensionLine> list2 = Home.getDimensionLinesSubList(list0);
      assertFalse(linkedList1.contains(observerCamera0));
      assertTrue(linkedList1.contains(observerCamera1));
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(1, linkedList1.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list2);
      
      LinkedList<HomePieceOfFurniture> linkedList2 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      List<Selectable> list3 = Home.duplicate(linkedList2);
      assertTrue(list3.equals((Object)list0));
      assertNotSame(list3, list0);
      assertEquals(0, linkedList2.size());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertNotNull(list3);
      
      String string0 = "";
      Class<Label> class0 = Label.class;
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(class0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Label> list0 = Home.getLabelsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNotNull(home0);
      
      Level level0 = new Level("g[v", (-3691.3F), 3700L, 0.0F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-3691.3F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("g[v", level0.getName());
      assertNotNull(level0);
      
      home0.setSelectedLevel(level0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-3691.3F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("g[v", level0.getName());
      
      List<Room> list0 = home0.getRooms();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(backgroundImage0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Compass compass0 = linkedList0.poll();
      assertEquals(0, linkedList0.size());
      assertNull(compass0);
      
      Compass compass1 = new Compass(160.0F, 160.0F, 160.0F);
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals(160.0F, compass1.getDiameter(), 0.01F);
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertEquals(160.0F, compass1.getX(), 0.01F);
      assertEquals(160.0F, compass1.getY(), 0.01F);
      assertNotNull(compass1);
      
      compass1.setX((-86.15806F));
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals((-86.15806F), compass1.getX(), 0.01F);
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals(160.0F, compass1.getDiameter(), 0.01F);
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertEquals(160.0F, compass1.getY(), 0.01F);
      
      boolean boolean0 = linkedList0.add(compass1);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(compass1));
      assertEquals(1, linkedList0.size());
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals((-86.15806F), compass1.getX(), 0.01F);
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals(160.0F, compass1.getDiameter(), 0.01F);
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertEquals(160.0F, compass1.getY(), 0.01F);
      
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertTrue(linkedList0.contains(compass1));
      assertEquals(1, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, false);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      BackgroundImage backgroundImage0 = new BackgroundImage(resourceURLContent0, 0.0F, (-86.15806F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, true);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, backgroundImage0.getScaleDistanceYEnd(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getYOrigin(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScaleDistanceYStart(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScaleDistance(), 0.01F);
      assertEquals((-86.15806F), backgroundImage0.getScaleDistanceXStart(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScaleDistanceXEnd(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getXOrigin(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScale(), 0.01F);
      assertTrue(backgroundImage0.isVisible());
      assertNotNull(backgroundImage0);
      
      home0.setBackgroundImage(backgroundImage0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, backgroundImage0.getScaleDistanceYEnd(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getYOrigin(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScaleDistanceYStart(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScaleDistance(), 0.01F);
      assertEquals((-86.15806F), backgroundImage0.getScaleDistanceXStart(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScaleDistanceXEnd(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getXOrigin(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScale(), 0.01F);
      assertTrue(backgroundImage0.isVisible());
      
      Label label0 = new Label("", (-2899.8F), (-2746.9614F));
      assertEquals((-2746.9614F), label0.getY(), 0.01F);
      assertEquals("", label0.getText());
      assertEquals((-2899.8F), label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertNotNull(label0);
      
      Label label1 = label0.clone();
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertEquals((-2746.9614F), label0.getY(), 0.01F);
      assertEquals("", label0.getText());
      assertEquals((-2899.8F), label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals((-2746.9614F), label1.getY(), 0.01F);
      assertEquals("", label1.getText());
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals((-2899.8F), label1.getX(), 0.01F);
      assertNotNull(label1);
      
      home0.deleteLabel(label1);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-2746.9614F), label0.getY(), 0.01F);
      assertEquals("", label0.getText());
      assertEquals((-2899.8F), label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals((-2746.9614F), label1.getY(), 0.01F);
      assertEquals("", label1.getText());
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals((-2899.8F), label1.getX(), 0.01F);
      
      home0.setFurnitureDescendingSorted(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      
      List<Camera> list1 = home0.getStoredCameras();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      home0.setStoredCameras(list1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      boolean boolean1 = home0.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Label label0 = new Label("Oz=VBn", 2632.018F, 2632.018F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("Oz=VBn", label0.getText());
      assertEquals(2632.018F, label0.getY(), 0.01F);
      assertEquals(2632.018F, label0.getX(), 0.01F);
      assertNotNull(label0);
      
      boolean boolean0 = linkedList0.add(label0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(label0));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("Oz=VBn", label0.getText());
      assertEquals(2632.018F, label0.getY(), 0.01F);
      assertEquals(2632.018F, label0.getX(), 0.01F);
      
      boolean boolean1 = linkedList0.removeLastOccurrence(label0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(linkedList0.contains(label0));
      assertEquals(0, linkedList0.size());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("Oz=VBn", label0.getText());
      assertEquals(2632.018F, label0.getY(), 0.01F);
      assertEquals(2632.018F, label0.getX(), 0.01F);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      boolean boolean2 = linkedList0.add(label0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(linkedList0.contains(label0));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("Oz=VBn", label0.getText());
      assertEquals(2632.018F, label0.getY(), 0.01F);
      assertEquals(2632.018F, label0.getX(), 0.01F);
      
      linkedList0.sort(comparator0);
      assertTrue(linkedList0.contains(label0));
      assertEquals(1, linkedList0.size());
      
      List<HomePieceOfFurniture> list0 = Home.getFurnitureSubList(linkedList0);
      assertTrue(linkedList0.contains(label0));
      assertEquals(1, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLevelsListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      
      Home.Property home_Property0 = Home.Property.NAME;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("%#$L2=8@q", propertyChangeListener0);
      assertEquals("%#$L2=8@q", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.PRICE;
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE, homePieceOfFurniture_SortableProperty0);
      
      Camera camera0 = home0.getTopCamera();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(camera0.getName());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertNotNull(camera0);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(homePieceOfFurniture_SortableProperty0, "STORED_CAMERAS", camera0, (Object) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals("STORED_CAMERAS", propertyChangeEvent0.getPropertyName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(camera0.getName());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertNotNull(propertyChangeEvent0);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals("STORED_CAMERAS", propertyChangeEvent0.getPropertyName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals("%#$L2=8@q", propertyChangeListenerProxy0.getPropertyName());
      assertNull(camera0.getName());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      
      PropertyChangeEvent propertyChangeEvent1 = new PropertyChangeEvent("%#$L2=8@q", "", "Oz=VBn", home_Property0);
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      assertEquals("", propertyChangeEvent1.getPropertyName());
      assertNotNull(propertyChangeEvent1);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent1);
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      assertNotSame(propertyChangeEvent1, propertyChangeEvent0);
      assertEquals("", propertyChangeEvent1.getPropertyName());
      assertEquals("%#$L2=8@q", propertyChangeListenerProxy0.getPropertyName());
      
      home0.removePropertyChangeListener(home_Property0, propertyChangeListenerProxy0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals("%#$L2=8@q", propertyChangeListenerProxy0.getPropertyName());
      
      Camera camera1 = home0.getTopCamera();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertSame(camera1, camera0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(1392409281320L, camera1.getTime());
      assertNull(camera1.getName());
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertNotNull(camera1);
      
      float float0 = home0.getWallHeight();
      assertEquals(250.0F, float0, 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      
      CollectionListener<Label> collectionListener1 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLabelsListener(collectionListener1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNotNull(home0);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      
      // Undeclared exception!
      try { 
        Home.getDimensionLinesSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(home0);
      
      Home.Property home_Property0 = Home.Property.SELECTED_LEVEL;
      home0.removePropertyChangeListener(home_Property0, (PropertyChangeListener) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      
      Collection<Wall> collection0 = home0.getWalls();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(collection0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.ANGLE;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Class<Compass> class0 = Compass.class;
      List<Compass> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<HomeLight> class1 = HomeLight.class;
      List<HomeLight> list1 = Home.getSubList((List<? extends Selectable>) list0, class1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      List<Level> list2 = Home.getLevelsSubList(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertNotNull(list0);
      
      home0.setFurnitureVisibleProperties(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      
      List<Room> list1 = home0.getRooms();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      Class<DimensionLine> class0 = DimensionLine.class;
      List<DimensionLine> list2 = Home.getSubList((List<? extends Selectable>) list1, class0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      List<HomePieceOfFurniture> list3 = Home.getFurnitureSubList(list2);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertNotNull(list3);
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(list3, "cbRc#,=f-&");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(home0);
      
      home0.setFurnitureDescendingSorted(false);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float float0 = 0.0F;
      Home home0 = new Home(0.0F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      float float1 = home0.getWallHeight();
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      
      String string0 = "MODIFIED";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(classLoader0, "Y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource Y
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Home home0 = new Home((-1952.46F));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNotNull(home0);
      
      home0.setModified(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      
      Level level0 = home0.getSelectedLevel();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(level0);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertNotNull(homeEnvironment0);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(backgroundImage0);
      
      home0.setBackgroundImage((BackgroundImage) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      
      Home home1 = new Home();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNotNull(home1);
      
      Compass compass0 = home1.getCompass();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home0);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertNotNull(compass0);
      
      boolean boolean0 = home1.isEmpty();
      assertFalse(home1.equals((Object)home0));
      assertTrue(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home0);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      
      Home home2 = home0.clone();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getName());
      assertFalse(home2.isRecovered());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home2.getWallHeight(), 0.01F);
      assertTrue(home2.isModified());
      assertTrue(home2.isEmpty());
      assertNotNull(home2);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home2.removeFurnitureListener(collectionListener0);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getName());
      assertFalse(home2.isRecovered());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home2.getWallHeight(), 0.01F);
      assertTrue(home2.isModified());
      assertTrue(home2.isEmpty());
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNotNull(collection0);
      
      home2.setModified(true);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getName());
      assertFalse(home2.isRecovered());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home2.getWallHeight(), 0.01F);
      assertTrue(home2.isModified());
      assertTrue(home2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      home0.setModified(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      
      home0.setModified(false);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      
      Level level0 = new Level("BFyUd;76,yCc?", 3700L, 3700L, 3700L);
      assertEquals("BFyUd;76,yCc?", level0.getName());
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals("BFyUd;76,yCc?", level0.getName());
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(3700.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(3700.0F, level1.getElevation(), 0.01F);
      assertEquals(3700.0F, level1.getHeight(), 0.01F);
      assertEquals("BFyUd;76,yCc?", level1.getName());
      assertNotNull(level1);
      
      home0.addLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals("BFyUd;76,yCc?", level0.getName());
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(3700.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(3700.0F, level1.getElevation(), 0.01F);
      assertEquals(3700.0F, level1.getHeight(), 0.01F);
      assertEquals("BFyUd;76,yCc?", level1.getName());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      Collection<Label> collection0 = home0.getLabels();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(collection0);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertNotNull(homeEnvironment0);
      
      home0.removeDimensionLinesListener((CollectionListener<DimensionLine>) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 0.0F, 0.0F, 1024.9335F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1024.9335F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Float float0 = new Float((double) 3700L);
      assertEquals(3700.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Compass compass0 = home0.getCompass();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertNotNull(compass0);
      
      compass0.setX((-2594.35F));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals((-2594.35F), compass0.getX(), 0.01F);
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertFalse(linkedList0.contains(compass0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Compass) null);
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(compass0));
      assertEquals(1, linkedList0.size());
      
      Collection<Label> collection1 = home0.getLabels();
      assertFalse(collection1.equals((Object)collection0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(collection1, collection0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(collection1);
      
      // Undeclared exception!
      try { 
        Home.duplicate(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      System.setCurrentTimeMillis(0L);
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeFurnitureListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Label> list1 = Home.getLabelsSubList(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNotNull(collection0);
      
      HomePrint homePrint0 = home0.getPrint();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(homePrint0);
      
      home0.deleteRoom((Room) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      
      Home.Property home_Property0 = Home.Property.SELECTED_LEVEL;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("GPY\"Q?Q4J87pOFd[6aE", propertyChangeListener0);
      assertEquals("GPY\"Q?Q4J87pOFd[6aE", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(0L, observerCamera0.getTime());
      assertNull(observerCamera0.getName());
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertNotNull(observerCamera0);
      
      Integer integer0 = new Integer(2147483645);
      assertEquals(2147483645, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.compareUnsigned(2147483645, 13427964);
      assertEquals(1, int0);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(observerCamera0, "GPY\"Q?Q4J87pOFd[6aE", collection0, integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals("GPY\"Q?Q4J87pOFd[6aE", propertyChangeEvent0.getPropertyName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(0L, observerCamera0.getTime());
      assertNull(observerCamera0.getName());
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertNotNull(propertyChangeEvent0);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals("GPY\"Q?Q4J87pOFd[6aE", propertyChangeEvent0.getPropertyName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals("GPY\"Q?Q4J87pOFd[6aE", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(0L, observerCamera0.getTime());
      assertNull(observerCamera0.getName());
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals("GPY\"Q?Q4J87pOFd[6aE", propertyChangeEvent0.getPropertyName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals("GPY\"Q?Q4J87pOFd[6aE", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(0L, observerCamera0.getTime());
      assertNull(observerCamera0.getName());
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      
      home0.addPropertyChangeListener(home_Property0, propertyChangeListenerProxy0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals("GPY\"Q?Q4J87pOFd[6aE", propertyChangeListenerProxy0.getPropertyName());
      
      Level level0 = home0.getSelectedLevel();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(level0);
      
      ObserverCamera observerCamera1 = home0.getObserverCamera();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertSame(observerCamera1, observerCamera0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(19.428572F, observerCamera1.getDepth(), 0.01F);
      assertEquals(48.57143F, observerCamera1.getWidth(), 0.01F);
      assertEquals(50.0F, observerCamera1.getY(), 0.01F);
      assertEquals(50.0F, observerCamera1.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera1.getLens());
      assertEquals(170.0F, observerCamera1.getZ(), 0.01F);
      assertEquals(0.19634955F, observerCamera1.getPitch(), 0.01F);
      assertNull(observerCamera1.getName());
      assertEquals(1.0995575F, observerCamera1.getFieldOfView(), 0.01F);
      assertEquals(0L, observerCamera1.getTime());
      assertEquals(5.4977875F, observerCamera1.getYaw(), 0.01F);
      assertFalse(observerCamera1.isFixedSize());
      assertEquals(182.14285F, observerCamera1.getHeight(), 0.01F);
      assertNotNull(observerCamera1);
      
      Camera camera0 = home0.getTopCamera();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(0L, camera0.getTime());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertNotNull(camera0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      
      Collection<Label> collection1 = home0.getLabels();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNotNull(collection1);
      
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        home0.deleteWall((Wall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      Level level0 = home0.getSelectedLevel();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Home home0 = new Home((-1307.6207F));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNotNull(home0);
      
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Room> list0 = home0.getRooms();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.TEXTURE;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(HomePieceOfFurniture.SortableProperty.TEXTURE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      
      home0.setSelectedItems(linkedList0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(HomePieceOfFurniture.SortableProperty.TEXTURE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0, linkedList0.size());
      
      List<HomePieceOfFurniture.SortableProperty> list1 = home0.getFurnitureVisibleProperties();
      assertFalse(list1.contains(homePieceOfFurniture_SortableProperty0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(HomePieceOfFurniture.SortableProperty.TEXTURE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(5, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      Wall wall0 = new Wall(3700L, (-2331.1F), (-6.766667F), 3700L, (-571.0F), (-2813.7966F));
      assertEquals(7079.1445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-6.766667F), wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(7079.1445F, wall0.getLength(), 0.01F);
      assertEquals((-2813.7966F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1846.6167F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-571.0F), wall0.getThickness(), 0.01F);
      assertEquals(684.44995F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2331.1F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallEndAt((-2331.1F), (-2813.7966F), 170.0F);
      assertFalse(boolean0);
      assertEquals(7079.1445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-6.766667F), wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(7079.1445F, wall0.getLength(), 0.01F);
      assertEquals((-2813.7966F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1846.6167F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-571.0F), wall0.getThickness(), 0.01F);
      assertEquals(684.44995F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2331.1F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint(0.7853982F, 0.0F, 613.9196F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(7079.1445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-6.766667F), wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(7079.1445F, wall0.getLength(), 0.01F);
      assertEquals((-2813.7966F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1846.6167F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-571.0F), wall0.getThickness(), 0.01F);
      assertEquals(684.44995F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2331.1F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      
      home0.addWall(wall0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(HomePieceOfFurniture.SortableProperty.TEXTURE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(7079.1445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-6.766667F), wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(7079.1445F, wall0.getLength(), 0.01F);
      assertEquals((-2813.7966F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1846.6167F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-571.0F), wall0.getThickness(), 0.01F);
      assertEquals(684.44995F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2331.1F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      
      Home.Property home_Property0 = Home.Property.MODIFIED;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("/2l9.>@5!eYIk,S)", propertyChangeListener0);
      assertEquals("/2l9.>@5!eYIk,S)", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty1 = HomePieceOfFurniture.SortableProperty.VISIBLE;
      assertFalse(homePieceOfFurniture_SortableProperty1.equals((Object)homePieceOfFurniture_SortableProperty0));
      assertEquals(HomePieceOfFurniture.SortableProperty.VISIBLE, homePieceOfFurniture_SortableProperty1);
      assertNotSame(homePieceOfFurniture_SortableProperty1, homePieceOfFurniture_SortableProperty0);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(home0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty", homePieceOfFurniture_SortableProperty1, list1);
      assertFalse(homePieceOfFurniture_SortableProperty1.equals((Object)homePieceOfFurniture_SortableProperty0));
      assertTrue(list1.contains(homePieceOfFurniture_SortableProperty1));
      assertFalse(list1.contains(homePieceOfFurniture_SortableProperty0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(HomePieceOfFurniture.SortableProperty.TEXTURE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(5, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty", propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertFalse(homePieceOfFurniture_SortableProperty1.equals((Object)homePieceOfFurniture_SortableProperty0));
      assertTrue(list1.contains(homePieceOfFurniture_SortableProperty1));
      assertFalse(list1.contains(homePieceOfFurniture_SortableProperty0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(homePieceOfFurniture_SortableProperty1, homePieceOfFurniture_SortableProperty0);
      assertEquals(HomePieceOfFurniture.SortableProperty.TEXTURE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(5, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals("/2l9.>@5!eYIk,S)", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty", propertyChangeEvent0.getPropertyName());
      
      Wall wall1 = new Wall(3700L, (-571.0F), 54.683334F, 0.0F, 0.7853982F, 170.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.7853982F, wall1.getThickness(), 0.01F);
      assertEquals(54.683334F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3689.766F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-285.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1877.3417F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3689.766F, wall1.getLength(), 0.01F);
      assertEquals(170.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-571.0F), wall1.getYStart(), 0.01F);
      assertEquals(3700.0F, wall1.getXStart(), 0.01F);
      assertNotNull(wall1);
      
      Level level0 = wall1.getLevel();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.7853982F, wall1.getThickness(), 0.01F);
      assertEquals(54.683334F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3689.766F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-285.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1877.3417F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3689.766F, wall1.getLength(), 0.01F);
      assertEquals(170.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-571.0F), wall1.getYStart(), 0.01F);
      assertEquals(3700.0F, wall1.getXStart(), 0.01F);
      assertNull(level0);
      
      home0.deleteLevel((Level) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(HomePieceOfFurniture.SortableProperty.TEXTURE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      
      home0.removePropertyChangeListener(home_Property0, propertyChangeListenerProxy0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(HomePieceOfFurniture.SortableProperty.TEXTURE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals("/2l9.>@5!eYIk,S)", propertyChangeListenerProxy0.getPropertyName());
      
      home0.removePropertyChangeListener(home_Property0, propertyChangeListenerProxy0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(HomePieceOfFurniture.SortableProperty.TEXTURE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals("/2l9.>@5!eYIk,S)", propertyChangeListenerProxy0.getPropertyName());
      
      home0.addSelectionListener((SelectionListener) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(HomePieceOfFurniture.SortableProperty.TEXTURE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      
      List<Selectable> list2 = home0.getSelectedItems();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(HomePieceOfFurniture.SortableProperty.TEXTURE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      HomePrint homePrint0 = home0.getPrint();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(HomePieceOfFurniture.SortableProperty.TEXTURE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(homePrint0);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLevelsListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(HomePieceOfFurniture.SortableProperty.TEXTURE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      
      boolean boolean2 = home0.isFurnitureDescendingSorted();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(HomePieceOfFurniture.SortableProperty.TEXTURE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addWallsListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Home home0 = new Home(1447.9182F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a12[dx");
      assertFalse(boolean0);
      
      home0.setCamera((Camera) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      
      List<Level> list0 = home0.getLevels();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertEquals(1447.9182F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertNotNull(home1);
      
      boolean boolean1 = home0.isRecovered();
      assertFalse(home0.equals((Object)home1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      
      Home home2 = home0.clone();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(1447.9182F, home2.getWallHeight(), 0.01F);
      assertEquals(3700L, home2.getVersion());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isRecovered());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isModified());
      assertNotNull(home2);
      
      float float0 = home2.getWallHeight();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(1447.9182F, float0, 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(1447.9182F, home2.getWallHeight(), 0.01F);
      assertEquals(3700L, home2.getVersion());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isRecovered());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isModified());
      
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "a12[dx");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeRoomsListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      
      HomePrint homePrint0 = home0.getPrint();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(homePrint0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Home home0 = new Home(1447.9182F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      home0.setBasePlanLocked(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      float float0 = home0.getWallHeight();
      assertEquals(1447.9182F, float0, 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "cR%5w)Om5:%j~:HuT");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      boolean boolean0 = home0.isFurnitureDescendingSorted();
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(home0);
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeDimensionLinesListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      
      float[][] floatArray0 = new float[2][6];
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      // Undeclared exception!
      try { 
        Home.getSubList((List<? extends Selectable>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      Level level0 = new Level("\"SLKC!,9TS", 3700L, 3700L, 3700L);
      assertTrue(level0.isVisible());
      assertEquals("\"SLKC!,9TS", level0.getName());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      home0.addLevel(level0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertTrue(level0.isVisible());
      assertEquals("\"SLKC!,9TS", level0.getName());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      
      home0.addLevel(level0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertTrue(level0.isVisible());
      assertEquals("\"SLKC!,9TS", level0.getName());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      
      home0.deleteLevel(level0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertTrue(level0.isVisible());
      assertEquals("\"SLKC!,9TS", level0.getName());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Home home0 = new Home(linkedList0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0, linkedList0.size());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      Collection<Label> collection0 = home0.getLabels();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0, linkedList0.size());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(collection0);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0, linkedList0.size());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      boolean boolean0 = home0.isModified();
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      
      Label label0 = new Label("Nl=*a{q:", 3700L, 0.0F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals("Nl=*a{q:", label0.getText());
      assertEquals(0.0F, label0.getY(), 0.01F);
      assertNotNull(label0);
      
      TextStyle textStyle0 = new TextStyle(0.0F, false, true);
      assertFalse(textStyle0.isBold());
      assertEquals(0.0F, textStyle0.getFontSize(), 0.01F);
      assertTrue(textStyle0.isItalic());
      assertNotNull(textStyle0);
      
      TextStyle textStyle1 = textStyle0.deriveStyle(0.0F);
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle1, textStyle0);
      assertFalse(textStyle0.isBold());
      assertEquals(0.0F, textStyle0.getFontSize(), 0.01F);
      assertTrue(textStyle0.isItalic());
      assertFalse(textStyle1.isBold());
      assertEquals(0.0F, textStyle1.getFontSize(), 0.01F);
      assertTrue(textStyle1.isItalic());
      assertNotNull(textStyle1);
      
      TextStyle textStyle2 = textStyle1.deriveBoldStyle(true);
      assertFalse(textStyle2.equals((Object)textStyle0));
      assertFalse(textStyle2.equals((Object)textStyle1));
      assertSame(textStyle0, textStyle1);
      assertNotSame(textStyle0, textStyle2);
      assertSame(textStyle1, textStyle0);
      assertNotSame(textStyle1, textStyle2);
      assertNotSame(textStyle2, textStyle0);
      assertNotSame(textStyle2, textStyle1);
      assertFalse(textStyle0.isBold());
      assertEquals(0.0F, textStyle0.getFontSize(), 0.01F);
      assertTrue(textStyle0.isItalic());
      assertFalse(textStyle1.isBold());
      assertEquals(0.0F, textStyle1.getFontSize(), 0.01F);
      assertTrue(textStyle1.isItalic());
      assertEquals(0.0F, textStyle2.getFontSize(), 0.01F);
      assertTrue(textStyle2.isBold());
      assertTrue(textStyle2.isItalic());
      assertNotNull(textStyle2);
      
      float[][] floatArray0 = new float[0][0];
      Room room0 = null;
      try {
        room0 = new Room(floatArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Room points must containt at least two points
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      boolean boolean0 = home0.isBasePlanLocked();
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Home home1 = new Home(list0);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNotNull(home1);
      
      Home home2 = home0.clone();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home2.isModified());
      assertEquals(3700L, home2.getVersion());
      assertNull(home2.getName());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isBasePlanLocked());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isRecovered());
      assertTrue(home2.isEmpty());
      assertNotNull(home2);
      
      Home home3 = new Home(list0);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home3.equals((Object)home0));
      assertFalse(home3.equals((Object)home1));
      assertFalse(home3.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(home3.isEmpty());
      assertEquals(250.0F, home3.getWallHeight(), 0.01F);
      assertFalse(home3.isRecovered());
      assertFalse(home3.isBasePlanLocked());
      assertNull(home3.getFurnitureSortedProperty());
      assertFalse(home3.isModified());
      assertNull(home3.getName());
      assertFalse(home3.isFurnitureDescendingSorted());
      assertEquals(3700L, home3.getVersion());
      assertNotNull(home3);
      
      home3.setBasePlanLocked(true);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home3));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home3.equals((Object)home0));
      assertFalse(home3.equals((Object)home1));
      assertFalse(home3.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home3);
      assertNotSame(home0, home2);
      assertNotSame(home3, home0);
      assertNotSame(home3, home1);
      assertNotSame(home3, home2);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(home3.isEmpty());
      assertEquals(250.0F, home3.getWallHeight(), 0.01F);
      assertFalse(home3.isRecovered());
      assertNull(home3.getFurnitureSortedProperty());
      assertFalse(home3.isModified());
      assertTrue(home3.isBasePlanLocked());
      assertNull(home3.getName());
      assertFalse(home3.isFurnitureDescendingSorted());
      assertEquals(3700L, home3.getVersion());
      
      Collection<Wall> collection0 = home1.getWalls();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home3));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home3));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home3);
      assertNotSame(home0, home2);
      assertNotSame(home1, home2);
      assertNotSame(home1, home3);
      assertNotSame(home1, home0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNotNull(collection0);
      
      Home home4 = new Home(3700L);
      assertFalse(home4.equals((Object)home0));
      assertFalse(home4.equals((Object)home3));
      assertFalse(home4.equals((Object)home1));
      assertFalse(home4.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home4.isModified());
      assertFalse(home4.isRecovered());
      assertFalse(home4.isBasePlanLocked());
      assertNull(home4.getFurnitureSortedProperty());
      assertTrue(home4.isEmpty());
      assertNull(home4.getName());
      assertEquals(3700.0F, home4.getWallHeight(), 0.01F);
      assertFalse(home4.isFurnitureDescendingSorted());
      assertEquals(3700L, home4.getVersion());
      assertNotNull(home4);
      
      Home home5 = home3.clone();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home3));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home4));
      assertFalse(home3.equals((Object)home4));
      assertFalse(home3.equals((Object)home0));
      assertFalse(home3.equals((Object)home1));
      assertFalse(home3.equals((Object)home2));
      assertFalse(home5.equals((Object)home2));
      assertFalse(home5.equals((Object)home3));
      assertFalse(home5.equals((Object)home1));
      assertFalse(home5.equals((Object)home4));
      assertFalse(home5.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home3);
      assertNotSame(home0, home5);
      assertNotSame(home0, home2);
      assertNotSame(home0, home4);
      assertNotSame(home3, home4);
      assertNotSame(home3, home0);
      assertNotSame(home3, home5);
      assertNotSame(home3, home1);
      assertNotSame(home3, home2);
      assertNotSame(home5, home2);
      assertNotSame(home5, home3);
      assertNotSame(home5, home1);
      assertNotSame(home5, home4);
      assertNotSame(home5, home0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(home3.isEmpty());
      assertEquals(250.0F, home3.getWallHeight(), 0.01F);
      assertFalse(home3.isRecovered());
      assertNull(home3.getFurnitureSortedProperty());
      assertFalse(home3.isModified());
      assertTrue(home3.isBasePlanLocked());
      assertNull(home3.getName());
      assertFalse(home3.isFurnitureDescendingSorted());
      assertEquals(3700L, home3.getVersion());
      assertFalse(home5.isModified());
      assertEquals(3700L, home5.getVersion());
      assertNull(home5.getName());
      assertEquals(250.0F, home5.getWallHeight(), 0.01F);
      assertFalse(home5.isFurnitureDescendingSorted());
      assertNull(home5.getFurnitureSortedProperty());
      assertTrue(home5.isBasePlanLocked());
      assertFalse(home5.isRecovered());
      assertTrue(home5.isEmpty());
      assertNotNull(home5);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home3));
      assertFalse(home0.equals((Object)home5));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home4));
      assertTrue(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home3);
      assertNotSame(home0, home5);
      assertNotSame(home0, home2);
      assertNotSame(home0, home4);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(home0);
      
      home0.setRecovered(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      
      Level level0 = home0.getSelectedLevel();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(level0);
      
      Collection<Label> collection0 = home0.getLabels();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(collection0);
      
      DimensionLine dimensionLine0 = new DimensionLine(3700L, (-859.2405F), 1.0F, (-264.47382F), 3700L);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(1.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-859.2405F), dimensionLine0.getYStart(), 0.01F);
      assertEquals(3746.5115F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-264.47382F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertNotNull(dimensionLine0);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(1.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-859.2405F), dimensionLine0.getYStart(), 0.01F);
      assertEquals(3746.5115F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-264.47382F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3746.5115F, dimensionLine1.getLength(), 0.01F);
      assertEquals((-859.2405F), dimensionLine1.getYStart(), 0.01F);
      assertEquals(1.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-264.47382F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getXStart(), 0.01F);
      assertNotNull(dimensionLine1);
      
      boolean boolean0 = dimensionLine1.intersectsRectangle((-1141.882F), 0.0F, 0.0F, (-171.215F));
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertFalse(boolean0);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(1.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-859.2405F), dimensionLine0.getYStart(), 0.01F);
      assertEquals(3746.5115F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-264.47382F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3746.5115F, dimensionLine1.getLength(), 0.01F);
      assertEquals((-859.2405F), dimensionLine1.getYStart(), 0.01F);
      assertEquals(1.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-264.47382F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getXStart(), 0.01F);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertTrue(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertNotNull(home1);
      
      home1.setVisualProperty("com.eteks.sweethome3d.model.Home", (Object) null);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertTrue(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      
      home1.setRecovered(false);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Home home0 = new Home(12.65F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(12.65F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNotNull(home0);
      
      home0.setModified(false);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(12.65F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      
      Wall wall0 = new Wall(12.65F, 0.0F, 0.7853982F, (-1355.611F), 0.0F, 12.65F);
      assertEquals(6.717699F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-677.8055F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(12.65F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1355.611F), wall0.getYEnd(), 0.01F);
      assertEquals(12.65F, wall0.getXStart(), 0.01F);
      assertEquals(1355.6628F, wall0.getLength(), 0.01F);
      assertEquals(0.7853982F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1355.6628F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setThickness(0.0F);
      assertEquals(6.717699F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-677.8055F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(12.65F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1355.611F), wall0.getYEnd(), 0.01F);
      assertEquals(12.65F, wall0.getXStart(), 0.01F);
      assertEquals(1355.6628F, wall0.getLength(), 0.01F);
      assertEquals(0.7853982F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1355.6628F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(6.717699F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-677.8055F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(12.65F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1355.611F), wall0.getYEnd(), 0.01F);
      assertEquals(12.65F, wall0.getXStart(), 0.01F);
      assertEquals(1355.6628F, wall0.getLength(), 0.01F);
      assertEquals(0.7853982F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1355.6628F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      home0.addWall(wall0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(12.65F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(6.717699F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-677.8055F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(12.65F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1355.611F), wall0.getYEnd(), 0.01F);
      assertEquals(12.65F, wall0.getXStart(), 0.01F);
      assertEquals(1355.6628F, wall0.getLength(), 0.01F);
      assertEquals(0.7853982F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1355.6628F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(12.65F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(6.717699F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-677.8055F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(12.65F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1355.611F), wall0.getYEnd(), 0.01F);
      assertEquals(12.65F, wall0.getXStart(), 0.01F);
      assertEquals(1355.6628F, wall0.getLength(), 0.01F);
      assertEquals(0.7853982F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1355.6628F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeSelectionListener(selectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(12.65F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      
      List<Room> list1 = home0.getRooms();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(12.65F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      String string0 = "";
      PropertyChangeListener propertyChangeListener1 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListener1);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      assertNotNull(propertyChangeListenerProxy1);
      
      Camera camera0 = new Camera(0.0F, 12.65F, 9.1939F, 3700L, 0.0F, 0.0F);
      assertEquals(12.65F, camera0.getY(), 0.01F);
      assertEquals(9.1939F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(0.0F, camera0.getFieldOfView(), 0.01F);
      assertEquals(0.0F, camera0.getX(), 0.01F);
      assertEquals(3700.0F, camera0.getYaw(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(0.0F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertNotNull(camera0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(list0, "PHOTO_ASPECT_RATIO");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      home0.addWall(wall0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertNotNull(home1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      List<HomePieceOfFurniture> list0 = null;
      Home home0 = null;
      try {
        home0 = new Home((List<HomePieceOfFurniture>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.addLabel((Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNotNull(home0);
      
      Label label0 = new Label("uDAt$$;elTx1TcO5", 3700L, (-2001.6139F));
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("uDAt$$;elTx1TcO5", label0.getText());
      assertEquals((-2001.6139F), label0.getY(), 0.01F);
      assertNotNull(label0);
      
      label0.setAngle((-2001.6139F));
      assertEquals(2.7222214F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals("uDAt$$;elTx1TcO5", label0.getText());
      assertEquals((-2001.6139F), label0.getY(), 0.01F);
      
      Label label1 = label0.clone();
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertEquals(2.7222214F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals("uDAt$$;elTx1TcO5", label0.getText());
      assertEquals((-2001.6139F), label0.getY(), 0.01F);
      assertEquals(2.7222214F, label1.getAngle(), 0.01F);
      assertEquals((-2001.6139F), label1.getY(), 0.01F);
      assertEquals("uDAt$$;elTx1TcO5", label1.getText());
      assertEquals(3700.0F, label1.getX(), 0.01F);
      assertNotNull(label1);
      
      home0.addLabel(label1);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(2.7222214F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals("uDAt$$;elTx1TcO5", label0.getText());
      assertEquals((-2001.6139F), label0.getY(), 0.01F);
      assertEquals(2.7222214F, label1.getAngle(), 0.01F);
      assertEquals((-2001.6139F), label1.getY(), 0.01F);
      assertEquals("uDAt$$;elTx1TcO5", label1.getText());
      assertEquals(3700.0F, label1.getX(), 0.01F);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      
      boolean boolean1 = home0.isRecovered();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      
      LightSource[] lightSourceArray0 = new LightSource[6];
      Float float0 = new Float((-884.336271));
      assertEquals((-884.33624F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      LightSource lightSource0 = new LightSource(3700L, 119.406944F, 3700L, 894, float0);
      assertEquals(3700.0F, lightSource0.getX(), 0.01F);
      assertEquals(119.406944F, lightSource0.getY(), 0.01F);
      assertEquals(3700.0F, lightSource0.getZ(), 0.01F);
      assertEquals(894, lightSource0.getColor());
      assertEquals((-884.33624F), lightSource0.getDiameter(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(1163.6675F, (-1783.5942F), 2583.3154F, 1);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(1, lightSource1.getColor());
      assertEquals(1163.6675F, lightSource1.getX(), 0.01F);
      assertEquals(2583.3154F, lightSource1.getZ(), 0.01F);
      assertEquals((-1783.5942F), lightSource1.getY(), 0.01F);
      assertNull(lightSource1.getDiameter());
      assertNotNull(lightSource1);
      
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource((-1504.9F), 894, (-1504.9F), 1, float0);
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertEquals(894.0F, lightSource2.getY(), 0.01F);
      assertEquals((-884.33624F), lightSource2.getDiameter(), 0.01F);
      assertEquals((-1504.9F), lightSource2.getZ(), 0.01F);
      assertEquals(1, lightSource2.getColor());
      assertEquals((-1504.9F), lightSource2.getX(), 0.01F);
      assertNotNull(lightSource2);
      
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(616.2F, 1163.6675F, 0.0F, 577);
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertFalse(lightSource3.equals((Object)lightSource1));
      assertEquals(616.2F, lightSource3.getX(), 0.01F);
      assertNull(lightSource3.getDiameter());
      assertEquals(0.0F, lightSource3.getZ(), 0.01F);
      assertEquals(1163.6675F, lightSource3.getY(), 0.01F);
      assertEquals(577, lightSource3.getColor());
      assertNotNull(lightSource3);
      
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource((-1783.5942F), 3688.2861F, 0.0F, 577);
      assertFalse(lightSource4.equals((Object)lightSource1));
      assertFalse(lightSource4.equals((Object)lightSource3));
      assertFalse(lightSource4.equals((Object)lightSource0));
      assertFalse(lightSource4.equals((Object)lightSource2));
      assertNull(lightSource4.getDiameter());
      assertEquals(3688.2861F, lightSource4.getY(), 0.01F);
      assertEquals(0.0F, lightSource4.getZ(), 0.01F);
      assertEquals((-1783.5942F), lightSource4.getX(), 0.01F);
      assertEquals(577, lightSource4.getColor());
      assertNotNull(lightSource4);
      
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(3688.2861F, (-2001.6139F), (-2407.0F), 1);
      assertFalse(lightSource5.equals((Object)lightSource1));
      assertFalse(lightSource5.equals((Object)lightSource3));
      assertFalse(lightSource5.equals((Object)lightSource2));
      assertFalse(lightSource5.equals((Object)lightSource4));
      assertFalse(lightSource5.equals((Object)lightSource0));
      assertNull(lightSource5.getDiameter());
      assertEquals((-2407.0F), lightSource5.getZ(), 0.01F);
      assertEquals((-2001.6139F), lightSource5.getY(), 0.01F);
      assertEquals(1, lightSource5.getColor());
      assertEquals(3688.2861F, lightSource5.getX(), 0.01F);
      assertNotNull(lightSource5);
      
      lightSourceArray0[5] = lightSource5;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("FURNITURE_DESCENDING_SORTED", "FURNITURE_DESCENDING_SORTED", "", (Content) null, (Content) null, (Content) null, 3700L, (-2001.6139F), (-2001.6139F), (-2001.6139F), false, lightSourceArray0, "Australia/Lindeman", (float[][]) null, "^#5DW*nNB{i*|1NB(", false, false, false, bigDecimal0, bigDecimal0, "FURNITURE_DESCENDING_SORTED");
      assertEquals(6, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("FURNITURE_DESCENDING_SORTED", catalogLight0.getCurrency());
      assertEquals("FURNITURE_DESCENDING_SORTED", catalogLight0.getName());
      assertEquals("Australia/Lindeman", catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-2001.6139F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals("FURNITURE_DESCENDING_SORTED", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2001.6139F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("^#5DW*nNB{i*|1NB(", catalogLight0.getCreator());
      assertEquals((-2001.6139F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isTexturable());
      assertNotNull(catalogLight0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      assertEquals(6, lightSourceArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("FURNITURE_DESCENDING_SORTED", catalogLight0.getCurrency());
      assertEquals("FURNITURE_DESCENDING_SORTED", catalogLight0.getName());
      assertEquals("Australia/Lindeman", catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-2001.6139F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals("FURNITURE_DESCENDING_SORTED", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2001.6139F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("^#5DW*nNB{i*|1NB(", catalogLight0.getCreator());
      assertEquals((-2001.6139F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isTexturable());
      assertEquals((-1000.80695F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertEquals("Australia/Lindeman", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("FURNITURE_DESCENDING_SORTED", homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2001.6139F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(1850.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-2001.6139F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2001.6139F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(3700.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("FURNITURE_DESCENDING_SORTED", homePieceOfFurniture0.getCatalogId());
      assertEquals("FURNITURE_DESCENDING_SORTED", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2001.6139F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getColor());
      assertNotNull(homePieceOfFurniture0);
      
      home0.addPieceOfFurniture(homePieceOfFurniture0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(6, lightSourceArray0.length);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(3700.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("FURNITURE_DESCENDING_SORTED", catalogLight0.getCurrency());
      assertEquals("FURNITURE_DESCENDING_SORTED", catalogLight0.getName());
      assertEquals("Australia/Lindeman", catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-2001.6139F), catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDeformable());
      assertEquals("FURNITURE_DESCENDING_SORTED", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertEquals((-2001.6139F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("^#5DW*nNB{i*|1NB(", catalogLight0.getCreator());
      assertEquals((-2001.6139F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isTexturable());
      assertEquals((-1000.80695F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertEquals("Australia/Lindeman", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("FURNITURE_DESCENDING_SORTED", homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2001.6139F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(1850.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-2001.6139F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2001.6139F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(3700.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("FURNITURE_DESCENDING_SORTED", homePieceOfFurniture0.getCatalogId());
      assertEquals("FURNITURE_DESCENDING_SORTED", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2001.6139F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getColor());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      Home.Property home_Property0 = Home.Property.BASE_PLAN_LOCKED;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("O!1qC", propertyChangeListener0);
      assertEquals("O!1qC", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      home0.addPropertyChangeListener(home_Property0, propertyChangeListenerProxy0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals("O!1qC", propertyChangeListenerProxy0.getPropertyName());
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertNull(observerCamera0.getName());
      assertNotNull(observerCamera0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      home0.setModified(false);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      
      // Undeclared exception!
      try { 
        Home.getWallsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertNotNull(home1);
      
      Camera camera0 = home1.getCamera();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertNotNull(camera0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      LinkedList<HomePieceOfFurniture.SortableProperty> linkedList0 = new LinkedList<HomePieceOfFurniture.SortableProperty>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      home0.setFurnitureVisibleProperties(linkedList0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture((HomePieceOfFurniture) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      
      Label label0 = new Label(";wl2v5/l5$I)6a", 3700L, 3700L);
      assertEquals(";wl2v5/l5$I)6a", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertNotNull(label0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, false);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      BackgroundImage backgroundImage0 = new BackgroundImage(resourceURLContent0, 0.0F, 0.0F, 646.92F, 374.81F, 3700L, 374.81F, 0.0F, false);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(646.92F, backgroundImage0.getScaleDistanceYStart(), 0.01F);
      assertEquals(374.81F, backgroundImage0.getScaleDistanceXEnd(), 0.01F);
      assertEquals(3700.0F, backgroundImage0.getScaleDistanceYEnd(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScale(), 0.01F);
      assertEquals(374.81F, backgroundImage0.getXOrigin(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getYOrigin(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScaleDistanceXStart(), 0.01F);
      assertFalse(backgroundImage0.isVisible());
      assertEquals(0.0F, backgroundImage0.getScaleDistance(), 0.01F);
      assertNotNull(backgroundImage0);
      
      home0.setBackgroundImage(backgroundImage0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(646.92F, backgroundImage0.getScaleDistanceYStart(), 0.01F);
      assertEquals(374.81F, backgroundImage0.getScaleDistanceXEnd(), 0.01F);
      assertEquals(3700.0F, backgroundImage0.getScaleDistanceYEnd(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScale(), 0.01F);
      assertEquals(374.81F, backgroundImage0.getXOrigin(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getYOrigin(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScaleDistanceXStart(), 0.01F);
      assertFalse(backgroundImage0.isVisible());
      assertEquals(0.0F, backgroundImage0.getScaleDistance(), 0.01F);
      
      Label label1 = label0.clone();
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertEquals(";wl2v5/l5$I)6a", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals(";wl2v5/l5$I)6a", label1.getText());
      assertEquals(3700.0F, label1.getY(), 0.01F);
      assertEquals(3700.0F, label1.getX(), 0.01F);
      assertNotNull(label1);
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeDimensionLinesListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      
      home0.addLabel(label1);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(";wl2v5/l5$I)6a", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals(";wl2v5/l5$I)6a", label1.getText());
      assertEquals(3700.0F, label1.getY(), 0.01F);
      assertEquals(3700.0F, label1.getX(), 0.01F);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      home0.setRecovered(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      
      Class<Compass> class0 = Compass.class;
      // Undeclared exception!
      try { 
        Home.getSubList((List<? extends Selectable>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      Camera camera0 = home0.getCamera();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertNotNull(camera0);
      
      home0.setCamera(camera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertNotNull(home1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Home home0 = new Home(1447.9182F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      Home.Property home_Property0 = Home.Property.BACKGROUND_IMAGE;
      float[][] floatArray0 = new float[7][6];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (float) 3700L;
      floatArray1[1] = (float) 3700L;
      floatArray1[2] = 1447.9182F;
      floatArray1[3] = (float) 3700L;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 3700L;
      floatArray2[1] = (float) 3700L;
      floatArray2[2] = 1447.9182F;
      floatArray2[3] = (float) 3700L;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (float) 3700L;
      floatArray3[1] = (float) 3700L;
      floatArray3[2] = 1447.9182F;
      floatArray3[3] = 1447.9182F;
      floatArray3[4] = (float) 3700L;
      floatArray3[5] = (float) 3700L;
      floatArray3[6] = (float) 3700L;
      floatArray3[7] = 1447.9182F;
      floatArray3[8] = 1447.9182F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[4];
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      
      floatArray4[0] = (-689.93286F);
      floatArray4[1] = 3.1415927F;
      floatArray4[2] = 1447.9182F;
      floatArray4[3] = (float) 3700L;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[1];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray3));
      
      floatArray5[0] = 3.1415927F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[1];
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray1));
      
      floatArray6[0] = (float) 3700L;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[2];
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray1));
      
      floatArray7[0] = 3.1415927F;
      floatArray7[1] = 3.1415927F;
      floatArray0[6] = floatArray7;
      Room room0 = new Room(floatArray0);
      assertEquals(7, floatArray0.length);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(7, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(1505.0336F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertNotNull(room0);
      
      Room room1 = room0.clone();
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(7, floatArray0.length);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(7, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(1505.0336F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(1505.0336F, room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(7, room1.getPointCount());
      assertNull(room1.getCeilingColor());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertNotNull(room1);
      
      home0.addRoom(room1);
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(7, floatArray0.length);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(7, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(1505.0336F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(1505.0336F, room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(7, room1.getPointCount());
      assertNull(room1.getCeilingColor());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2Xk", propertyChangeListener0);
      assertEquals("2Xk", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      home0.addPropertyChangeListener(home_Property0, propertyChangeListenerProxy0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals("2Xk", propertyChangeListenerProxy0.getPropertyName());
      
      home0.setBasePlanLocked(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isBasePlanLocked());
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.addSelectionListener(selectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isBasePlanLocked());
      
      Collection<Wall> collection0 = home0.getWalls();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isBasePlanLocked());
      assertNotNull(collection0);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isBasePlanLocked());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      home0.deleteLevel((Level) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertNotNull(home1);
      
      // Undeclared exception!
      try { 
        Home.getLabelsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      Collection<Label> collection0 = home0.getLabels();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertNotNull(collection0);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertNotNull(homeEnvironment0);
      
      home0.removeDimensionLinesListener((CollectionListener<DimensionLine>) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 0.0F, 0.0F, 1024.9335F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(1024.9335F, wall0.getHeight(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Float float0 = new Float((double) 3700L);
      assertEquals(3700.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = new Integer(1698);
      assertEquals(1698, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1698, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(1024.9335F, wall0.getHeight(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setHeight(float0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1698, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      home0.addWall(wall0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1698, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1698, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1, linkedList0.size());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1698, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3700.0F, wall1.getLength(), 0.01F);
      assertEquals(3700.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(1698, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall1.getHeight(), 0.01F);
      assertEquals(3700.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1850.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3700.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall1.getYStart(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean1 = linkedList0.add(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(wall1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1698, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2, linkedList0.size());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3700.0F, wall1.getLength(), 0.01F);
      assertEquals(3700.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(1698, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall1.getHeight(), 0.01F);
      assertEquals(3700.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1850.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3700.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall1.getYStart(), 0.01F);
      
      boolean boolean2 = linkedList0.add(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(linkedList0.contains(wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1698, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3, linkedList0.size());
      
      Class<HomeFurnitureGroup> class0 = HomeFurnitureGroup.class;
      Wall wall2 = linkedList0.pollFirst();
      assertFalse(wall2.equals((Object)wall1));
      assertTrue(linkedList0.contains(wall2));
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(3700.0F, wall2.getLength(), 0.01F);
      assertEquals(1850.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1698, (int)wall2.getRightSideColor());
      assertEquals(3700.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2, linkedList0.size());
      assertNotNull(wall2);
      
      List<HomeFurnitureGroup> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertTrue(linkedList0.contains(wall2));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(2, linkedList0.size());
      assertNotNull(list0);
      
      List<Wall> list1 = Home.getWallsSubList(list0);
      assertFalse(list1.contains(wall2));
      assertTrue(linkedList0.contains(wall2));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(2, linkedList0.size());
      assertNotNull(list1);
      
      float float1 = home0.getWallHeight();
      assertEquals(250.0F, float1, 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      
      home0.setName("");
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals("", home0.getName());
      
      home0.setName("");
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals("", home0.getName());
      
      List<Camera> list2 = home0.getStoredCameras();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals("", home0.getName());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      Collection<Wall> collection1 = home0.getWalls();
      assertFalse(collection1.contains(wall1));
      assertTrue(collection1.contains(wall2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals("", home0.getName());
      assertNotNull(collection1);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals("", home0.getName());
      assertNull(backgroundImage0);
      
      boolean boolean3 = home0.isBasePlanLocked();
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals("", home0.getName());
      
      boolean boolean4 = home0.isModified();
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals("", home0.getName());
      
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 0.0F, 250.0F, 0.0F, 250.0F);
      assertEquals(3450.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(250.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(250.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertNotNull(dimensionLine0);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(3450.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(250.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(250.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(250.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(250.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals(3450.0F, dimensionLine1.getLength(), 0.01F);
      assertNotNull(dimensionLine1);
      
      Level level0 = dimensionLine1.getLevel();
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(3450.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(250.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(250.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(250.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(250.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals(3450.0F, dimensionLine1.getLength(), 0.01F);
      assertNull(level0);
      
      // Undeclared exception!
      try { 
        home0.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      Level level0 = new Level("m16-g.InXH!s#jc$\"w", 3700L, 3700L, 3700L);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("m16-g.InXH!s#jc$\"w", level0.getName());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      home0.addLevel(level0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("m16-g.InXH!s#jc$\"w", level0.getName());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      
      home0.deleteLevel(level0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("m16-g.InXH!s#jc$\"w", level0.getName());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Home.getWallsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Compass compass0 = home0.getCompass();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertNotNull(compass0);
      
      compass0.setX(3517.9F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(compass0.isVisible());
      assertEquals(3517.9F, compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertFalse(linkedList0.contains(compass0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = linkedList0.add(compass0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(compass0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(compass0.isVisible());
      assertEquals(3517.9F, compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      List<Selectable> list1 = Home.duplicate(linkedList0);
      assertTrue(linkedList0.contains(compass0));
      assertEquals(1, linkedList0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      Label label0 = new Label("GQO)l<b4%:|B", 1.0F, 160.0F);
      assertEquals("GQO)l<b4%:|B", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(1.0F, label0.getX(), 0.01F);
      assertEquals(160.0F, label0.getY(), 0.01F);
      assertNotNull(label0);
      
      Label label1 = label0.clone();
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertEquals("GQO)l<b4%:|B", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(1.0F, label0.getX(), 0.01F);
      assertEquals(160.0F, label0.getY(), 0.01F);
      assertEquals(160.0F, label1.getY(), 0.01F);
      assertEquals(1.0F, label1.getX(), 0.01F);
      assertEquals("GQO)l<b4%:|B", label1.getText());
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertNotNull(label1);
      
      home0.deleteLabel(label1);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals("GQO)l<b4%:|B", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(1.0F, label0.getX(), 0.01F);
      assertEquals(160.0F, label0.getY(), 0.01F);
      assertEquals(160.0F, label1.getY(), 0.01F);
      assertEquals(1.0F, label1.getX(), 0.01F);
      assertEquals("GQO)l<b4%:|B", label1.getText());
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      
      home0.setFurnitureDescendingSorted(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      
      List<Camera> list2 = home0.getStoredCameras();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      // Undeclared exception!
      try { 
        home0.setStoredCameras((List<Camera>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Application Data");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aoh{izx$");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNotNull(home1);
      
      Home home2 = home1.clone();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isModified());
      assertFalse(home2.isRecovered());
      assertNull(home2.getName());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, home2.getVersion());
      assertNotNull(home2);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home2.removeLabelsListener(collectionListener0);
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isModified());
      assertFalse(home2.isRecovered());
      assertNull(home2.getName());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, home2.getVersion());
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean3 = linkedList0.add((Camera) null);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      assertEquals(1, linkedList0.size());
      
      home2.setStoredCameras(linkedList0);
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isModified());
      assertFalse(home2.isRecovered());
      assertNull(home2.getName());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, home2.getVersion());
      assertEquals(1, linkedList0.size());
      
      Home home3 = home0.clone();
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home3.equals((Object)home2));
      assertFalse(home3.equals((Object)home0));
      assertFalse(home3.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home0, home3);
      assertNotSame(home3, home2);
      assertNotSame(home3, home0);
      assertNotSame(home3, home1);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home3.getWallHeight(), 0.01F);
      assertNull(home3.getName());
      assertFalse(home3.isRecovered());
      assertFalse(home3.isModified());
      assertNull(home3.getFurnitureSortedProperty());
      assertFalse(home3.isBasePlanLocked());
      assertTrue(home3.isEmpty());
      assertEquals(3700L, home3.getVersion());
      assertFalse(home3.isFurnitureDescendingSorted());
      assertNotNull(home3);
      
      List<DimensionLine> list0 = null;
      // Undeclared exception!
      try { 
        Home.getRoomsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(home0);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addFurnitureListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      
      List<Room> list0 = home0.getRooms();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Level level0 = home0.getSelectedLevel();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(level0);
      
      home0.setSelectedLevel((Level) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      
      List<DimensionLine> list1 = Home.getDimensionLinesSubList(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      CollectionListener<Label> collectionListener1 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      
      DimensionLine dimensionLine0 = new DimensionLine(1.0F, 1.0F, 1.0F, 3700L, 3700L);
      assertEquals(1.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3699.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(1.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(1.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertNotNull(dimensionLine0);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(1.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3699.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(1.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(1.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(1.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(1.0F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals(3699.0F, dimensionLine1.getLength(), 0.01F);
      assertEquals(1.0F, dimensionLine1.getXEnd(), 0.01F);
      assertNotNull(dimensionLine1);
      
      DimensionLine dimensionLine2 = dimensionLine1.clone();
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertFalse(dimensionLine2.equals((Object)dimensionLine1));
      assertFalse(dimensionLine2.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine0, dimensionLine2);
      assertNotSame(dimensionLine1, dimensionLine2);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertNotSame(dimensionLine2, dimensionLine1);
      assertNotSame(dimensionLine2, dimensionLine0);
      assertEquals(1.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3699.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(1.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(1.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(1.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(1.0F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals(3699.0F, dimensionLine1.getLength(), 0.01F);
      assertEquals(1.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine2.getOffset(), 0.01F);
      assertEquals(1.0F, dimensionLine2.getYStart(), 0.01F);
      assertEquals(1.0F, dimensionLine2.getXStart(), 0.01F);
      assertEquals(3699.0F, dimensionLine2.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine2.getYEnd(), 0.01F);
      assertEquals(1.0F, dimensionLine2.getXEnd(), 0.01F);
      assertNotNull(dimensionLine2);
      
      dimensionLine0.setOffset(3700L);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine0.equals((Object)dimensionLine2));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine0, dimensionLine2);
      assertEquals(1.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3699.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(1.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(1.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      
      dimensionLine0.setYStart(2832.6233F);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine0.equals((Object)dimensionLine2));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine0, dimensionLine2);
      assertEquals(1.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(1.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(867.3767F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(2832.6233F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      
      dimensionLine1.setLengthStyle((TextStyle) null);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine0.equals((Object)dimensionLine2));
      assertFalse(dimensionLine1.equals((Object)dimensionLine2));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine0, dimensionLine2);
      assertNotSame(dimensionLine1, dimensionLine2);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(1.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(1.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(867.3767F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(2832.6233F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(1.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(1.0F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals(3699.0F, dimensionLine1.getLength(), 0.01F);
      assertEquals(1.0F, dimensionLine1.getXEnd(), 0.01F);
      
      home0.addDimensionLine(dimensionLine1);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine0.equals((Object)dimensionLine2));
      assertFalse(dimensionLine1.equals((Object)dimensionLine2));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine0, dimensionLine2);
      assertNotSame(dimensionLine1, dimensionLine2);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(1.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(1.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(867.3767F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(2832.6233F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(1.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(1.0F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals(3699.0F, dimensionLine1.getLength(), 0.01F);
      assertEquals(1.0F, dimensionLine1.getXEnd(), 0.01F);
      
      home0.deleteDimensionLine(dimensionLine1);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine0.equals((Object)dimensionLine2));
      assertFalse(dimensionLine1.equals((Object)dimensionLine2));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine0, dimensionLine2);
      assertNotSame(dimensionLine1, dimensionLine2);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(1.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(1.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(867.3767F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(2832.6233F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(1.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(1.0F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals(3699.0F, dimensionLine1.getLength(), 0.01F);
      assertEquals(1.0F, dimensionLine1.getXEnd(), 0.01F);
      
      boolean boolean0 = home0.isBasePlanLocked();
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      List<Selectable> list0 = home0.getSelectedItems();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNotNull(home0);
      
      home0.setName("m16-g.InXH!s#j$\"w");
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals("m16-g.InXH!s#j$\"w", home0.getName());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      
      home0.setName("m16-g.InXH!s#j$\"w");
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals("m16-g.InXH!s#j$\"w", home0.getName());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(home0);
      
      home0.setRecovered(false);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNotNull(home0);
      
      home0.setName("com.eteks.sweethome3d.model.Home$Property");
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals("com.eteks.sweethome3d.model.Home$Property", home0.getName());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertNotNull(home1);
      
      float[][] floatArray0 = new float[6][5];
      float[] floatArray1 = new float[1];
      floatArray1[0] = (float) 3700L;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 3700L;
      floatArray2[1] = (float) 3700L;
      floatArray2[2] = (float) 3700L;
      floatArray2[3] = (float) 3700L;
      floatArray2[4] = (float) 3700L;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[1];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 1789.8087F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[8];
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      
      floatArray4[0] = 1789.8087F;
      floatArray4[1] = 1789.8087F;
      floatArray4[2] = (float) 3700L;
      floatArray4[3] = (float) 3700L;
      floatArray4[4] = 1789.8087F;
      floatArray4[5] = (float) 3700L;
      floatArray4[6] = 1789.8087F;
      floatArray4[7] = (float) 3700L;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[7];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray1));
      
      floatArray5[0] = (float) 3700L;
      floatArray5[1] = 1789.8087F;
      floatArray5[2] = 1789.8087F;
      floatArray5[3] = 1789.8087F;
      floatArray5[4] = (float) 3700L;
      floatArray5[5] = (float) 3700L;
      floatArray5[6] = (float) 3700L;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[4];
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray1));
      
      floatArray6[0] = 1789.8087F;
      floatArray6[1] = (float) 3700L;
      floatArray6[2] = (float) 3700L;
      floatArray6[3] = (float) 3700L;
      floatArray0[5] = floatArray6;
      Room room0 = new Room(floatArray0);
      assertEquals(6, floatArray0.length);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(2744.9043F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertNotNull(room0);
      
      Room room1 = room0.clone();
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(6, floatArray0.length);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(2744.9043F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(2744.9043F, room1.getXCenter(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertNull(room1.getFloorColor());
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(6, room1.getPointCount());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertNotNull(room1);
      
      // Undeclared exception!
      try { 
        home1.addRoom(room1, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(home0);
      
      Collection<Label> collection0 = home0.getLabels();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(collection0);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertNotNull(homeEnvironment0);
      
      home0.removeDimensionLinesListener((CollectionListener<DimensionLine>) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 0.0F, 0.0F, 1024.9335F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1024.9335F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = new Float((double) 3700L);
      assertEquals(3700.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = new Integer(1698);
      assertEquals(1698, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1698, (int)wall0.getRightSideColor());
      assertEquals(1024.9335F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setHeight(float0);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1698, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      home0.addWall(wall0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1698, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1698, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1, linkedList0.size());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1698, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3700.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3700.0F, wall1.getXStart(), 0.01F);
      assertEquals(3700.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(3700.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall1.getLength(), 0.01F);
      assertEquals(1850.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1698, (int)wall1.getRightSideColor());
      assertNotNull(wall1);
      
      boolean boolean1 = linkedList0.add(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(linkedList0.contains(wall1));
      assertNotSame(wall0, wall1);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1698, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2, linkedList0.size());
      
      Label label0 = new Label("YZyj$.", 0.0F, 2451.6343F);
      assertEquals(2451.6343F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(0.0F, label0.getX(), 0.01F);
      assertEquals("YZyj$.", label0.getText());
      assertNotNull(label0);
      
      Label label1 = new Label("YZyj$.", 1698, 58.70426F);
      assertFalse(label1.equals((Object)label0));
      assertEquals(1698.0F, label1.getX(), 0.01F);
      assertEquals(58.70426F, label1.getY(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals("YZyj$.", label1.getText());
      assertNotNull(label1);
      
      Label label2 = label1.clone();
      assertFalse(label2.equals((Object)label1));
      assertFalse(label2.equals((Object)label0));
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label2, label1);
      assertNotSame(label2, label0);
      assertNotSame(label1, label0);
      assertNotSame(label1, label2);
      assertEquals("YZyj$.", label2.getText());
      assertEquals(58.70426F, label2.getY(), 0.01F);
      assertEquals(1698.0F, label2.getX(), 0.01F);
      assertEquals(0.0F, label2.getAngle(), 0.01F);
      assertEquals(1698.0F, label1.getX(), 0.01F);
      assertEquals(58.70426F, label1.getY(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals("YZyj$.", label1.getText());
      assertNotNull(label2);
      
      home0.deleteLabel(label2);
      assertFalse(label2.equals((Object)label1));
      assertFalse(label2.equals((Object)label0));
      assertFalse(label1.equals((Object)label0));
      assertFalse(label1.equals((Object)label2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(label2, label1);
      assertNotSame(label2, label0);
      assertNotSame(label1, label0);
      assertNotSame(label1, label2);
      assertEquals("YZyj$.", label2.getText());
      assertEquals(58.70426F, label2.getY(), 0.01F);
      assertEquals(1698.0F, label2.getX(), 0.01F);
      assertEquals(0.0F, label2.getAngle(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertEquals(1698.0F, label1.getX(), 0.01F);
      assertEquals(58.70426F, label1.getY(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals("YZyj$.", label1.getText());
      
      home0.setFurnitureDescendingSorted(false);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      
      List<Camera> list0 = home0.getStoredCameras();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      home0.setStoredCameras(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      boolean boolean2 = home0.isEmpty();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      
      List<Level> list1 = home0.getLevels();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      home0.deleteWall(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1698, (int)wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3700.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3700.0F, wall1.getXStart(), 0.01F);
      assertEquals(3700.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(3700.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall1.getLength(), 0.01F);
      assertEquals(1850.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1698, (int)wall1.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertNotNull(list0);
      
      home0.setFurnitureVisibleProperties(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(backgroundImage0);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertNull(observerCamera0.getName());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertNotNull(observerCamera0);
      
      home0.setCamera(observerCamera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertNull(observerCamera0.getName());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      
      List<Room> list1 = home0.getRooms();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      List<Level> list2 = home0.getLevels();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      boolean boolean0 = home0.isRecovered();
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      
      float float0 = home0.getWallHeight();
      assertEquals(250.0F, float0, 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "cR%5w)Om5:%j~:HuT");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertNotNull(list0);
      
      Wall wall0 = new Wall(1022.78F, 3700L, 3700L, 3700L, 1022.78F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2677.22F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2677.22F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1022.78F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2361.3901F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1022.78F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(4899);
      assertEquals(4899, (int)integer0);
      assertNotNull(integer0);
      
      home0.addWall(wall0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2677.22F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2677.22F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1022.78F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2361.3901F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1022.78F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2677.22F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2677.22F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1022.78F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2361.3901F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1022.78F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2677.22F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2677.22F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1022.78F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2361.3901F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1022.78F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2677.22F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2361.3901F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1022.78F, wall1.getThickness(), 0.01F);
      assertEquals(3700.0F, wall1.getYStart(), 0.01F);
      assertEquals(2677.22F, wall1.getLength(), 0.01F);
      assertEquals(3700.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1022.78F, wall1.getXStart(), 0.01F);
      assertEquals(3700.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall1.getXEnd(), 0.01F);
      assertNotNull(wall1);
      
      Wall wall2 = wall1.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2677.22F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2677.22F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1022.78F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2361.3901F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1022.78F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2677.22F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2361.3901F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1022.78F, wall1.getThickness(), 0.01F);
      assertEquals(3700.0F, wall1.getYStart(), 0.01F);
      assertEquals(2677.22F, wall1.getLength(), 0.01F);
      assertEquals(3700.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1022.78F, wall1.getXStart(), 0.01F);
      assertEquals(3700.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall2);
      
      List<Selectable> list1 = Home.duplicate(linkedList0);
      assertFalse(linkedList0.contains(wall1));
      assertTrue(linkedList0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      Home home1 = new Home();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertNotNull(home1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      Compass compass0 = new Compass(1678.8469F, (-649.8611F), 638.53F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals((-649.8611F), compass0.getY(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(1678.8469F, compass0.getX(), 0.01F);
      assertEquals(638.53F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertNotNull(compass0);
      
      Compass compass1 = compass0.clone();
      assertFalse(compass1.equals((Object)compass0));
      assertNotSame(compass0, compass1);
      assertNotSame(compass1, compass0);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals((-649.8611F), compass0.getY(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(1678.8469F, compass0.getX(), 0.01F);
      assertEquals(638.53F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals(1678.8469F, compass1.getX(), 0.01F);
      assertEquals((-649.8611F), compass1.getY(), 0.01F);
      assertEquals(638.53F, compass1.getDiameter(), 0.01F);
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertTrue(compass1.isVisible());
      assertNotNull(compass1);
      
      home0.deselectItem(compass1);
      assertFalse(compass0.equals((Object)compass1));
      assertFalse(compass1.equals((Object)compass0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(compass0, compass1);
      assertNotSame(compass1, compass0);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals((-649.8611F), compass0.getY(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(1678.8469F, compass0.getX(), 0.01F);
      assertEquals(638.53F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals(1678.8469F, compass1.getX(), 0.01F);
      assertEquals((-649.8611F), compass1.getY(), 0.01F);
      assertEquals(638.53F, compass1.getDiameter(), 0.01F);
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertTrue(compass1.isVisible());
      
      Camera camera0 = home0.getCamera();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertNull(camera0.getName());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertNotNull(camera0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Home home1 = new Home(list0);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNotNull(home1);
      
      Level level0 = new Level("SELECTED_LEVEL", 3803.313F, 3803.313F, (-1850.52F));
      assertEquals("SELECTED_LEVEL", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1850.52F), level0.getHeight(), 0.01F);
      assertEquals(3803.313F, level0.getElevation(), 0.01F);
      assertEquals(3803.313F, level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals("SELECTED_LEVEL", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1850.52F), level0.getHeight(), 0.01F);
      assertEquals(3803.313F, level0.getElevation(), 0.01F);
      assertEquals(3803.313F, level0.getFloorThickness(), 0.01F);
      assertEquals(3803.313F, level1.getFloorThickness(), 0.01F);
      assertEquals((-1850.52F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(3803.313F, level1.getElevation(), 0.01F);
      assertEquals("SELECTED_LEVEL", level1.getName());
      assertNotNull(level1);
      
      level1.setFloorThickness(0.0F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals("SELECTED_LEVEL", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1850.52F), level0.getHeight(), 0.01F);
      assertEquals(3803.313F, level0.getElevation(), 0.01F);
      assertEquals(3803.313F, level0.getFloorThickness(), 0.01F);
      assertEquals((-1850.52F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(3803.313F, level1.getElevation(), 0.01F);
      assertEquals("SELECTED_LEVEL", level1.getName());
      
      home1.addLevel(level1);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals("SELECTED_LEVEL", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1850.52F), level0.getHeight(), 0.01F);
      assertEquals(3803.313F, level0.getElevation(), 0.01F);
      assertEquals(3803.313F, level0.getFloorThickness(), 0.01F);
      assertEquals((-1850.52F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(3803.313F, level1.getElevation(), 0.01F);
      assertEquals("SELECTED_LEVEL", level1.getName());
      
      Home home2 = new Home(2182.7F);
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isModified());
      assertEquals(2182.7F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isBasePlanLocked());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isRecovered());
      assertTrue(home2.isEmpty());
      assertNotNull(home2);
      
      Collection<Wall> collection0 = home2.getWalls();
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isModified());
      assertEquals(2182.7F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isBasePlanLocked());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isRecovered());
      assertTrue(home2.isEmpty());
      assertNotNull(collection0);
      
      Home home3 = home1.clone();
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home3.equals((Object)home2));
      assertFalse(home3.equals((Object)home1));
      assertFalse(home3.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home0, home3);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertNotSame(home1, home3);
      assertNotSame(home3, home2);
      assertNotSame(home3, home1);
      assertNotSame(home3, home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home3.isBasePlanLocked());
      assertEquals(3700L, home3.getVersion());
      assertNull(home3.getName());
      assertFalse(home3.isFurnitureDescendingSorted());
      assertEquals(250.0F, home3.getWallHeight(), 0.01F);
      assertNull(home3.getFurnitureSortedProperty());
      assertTrue(home3.isEmpty());
      assertFalse(home3.isRecovered());
      assertFalse(home3.isModified());
      assertNotNull(home3);
      
      long long0 = home3.getVersion();
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home3));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home3));
      assertFalse(home3.equals((Object)home2));
      assertFalse(home3.equals((Object)home1));
      assertFalse(home3.equals((Object)home0));
      assertEquals(3700L, long0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home0, home3);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertNotSame(home1, home3);
      assertNotSame(home3, home2);
      assertNotSame(home3, home1);
      assertNotSame(home3, home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home3.isBasePlanLocked());
      assertEquals(3700L, home3.getVersion());
      assertNull(home3.getName());
      assertFalse(home3.isFurnitureDescendingSorted());
      assertEquals(250.0F, home3.getWallHeight(), 0.01F);
      assertNull(home3.getFurnitureSortedProperty());
      assertTrue(home3.isEmpty());
      assertFalse(home3.isRecovered());
      assertFalse(home3.isModified());
      
      Home home4 = new Home(3700L);
      assertFalse(home4.equals((Object)home2));
      assertFalse(home4.equals((Object)home3));
      assertFalse(home4.equals((Object)home0));
      assertFalse(home4.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home4.getName());
      assertFalse(home4.isRecovered());
      assertFalse(home4.isFurnitureDescendingSorted());
      assertNull(home4.getFurnitureSortedProperty());
      assertFalse(home4.isModified());
      assertTrue(home4.isEmpty());
      assertFalse(home4.isBasePlanLocked());
      assertEquals(3700L, home4.getVersion());
      assertEquals(3700.0F, home4.getWallHeight(), 0.01F);
      assertNotNull(home4);
      
      home4.setName("FURNITURE_SORTED_PROPERTY");
      assertFalse(home4.equals((Object)home2));
      assertFalse(home4.equals((Object)home3));
      assertFalse(home4.equals((Object)home0));
      assertFalse(home4.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home4, home2);
      assertNotSame(home4, home3);
      assertNotSame(home4, home0);
      assertNotSame(home4, home1);
      assertFalse(home4.isRecovered());
      assertFalse(home4.isFurnitureDescendingSorted());
      assertNull(home4.getFurnitureSortedProperty());
      assertFalse(home4.isModified());
      assertEquals("FURNITURE_SORTED_PROPERTY", home4.getName());
      assertTrue(home4.isEmpty());
      assertFalse(home4.isBasePlanLocked());
      assertEquals(3700L, home4.getVersion());
      assertEquals(3700.0F, home4.getWallHeight(), 0.01F);
      
      List<Selectable> list1 = home4.getSelectedItems();
      assertFalse(home4.equals((Object)home2));
      assertFalse(home4.equals((Object)home3));
      assertFalse(home4.equals((Object)home0));
      assertFalse(home4.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home4, home2);
      assertNotSame(home4, home3);
      assertNotSame(home4, home0);
      assertNotSame(home4, home1);
      assertFalse(home4.isRecovered());
      assertFalse(home4.isFurnitureDescendingSorted());
      assertNull(home4.getFurnitureSortedProperty());
      assertFalse(home4.isModified());
      assertEquals("FURNITURE_SORTED_PROPERTY", home4.getName());
      assertTrue(home4.isEmpty());
      assertFalse(home4.isBasePlanLocked());
      assertEquals(3700L, home4.getVersion());
      assertEquals(3700.0F, home4.getWallHeight(), 0.01F);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Label> list0 = Home.getLabelsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Selectable> list1 = Home.duplicate(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNotNull(home0);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture((HomePieceOfFurniture) null, 3419);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = new LinkedList<HomePieceOfFurniture.SortableProperty>();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      home0.setFurnitureVisibleProperties(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      List<Room> list0 = home0.getRooms();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      
      List<Level> list0 = home0.getLevels();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(home0);
      
      home0.setVisualProperty("", "");
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      Collection<Label> collection0 = home0.getLabels();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(collection0);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertNotNull(homeEnvironment0);
      
      home0.removeDimensionLinesListener((CollectionListener<DimensionLine>) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 0.0F, 0.0F, 1024.9335F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1024.9335F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((double) 3700L);
      assertEquals(3700.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = new Integer(1698);
      assertEquals(1698, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setHeight(float0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add(wall0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(wall0));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNotNull(home1);
      
      Home home2 = new Home();
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertFalse(home2.isRecovered());
      assertFalse(home2.isModified());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isBasePlanLocked());
      assertTrue(home2.isEmpty());
      assertEquals(3700L, home2.getVersion());
      assertNotNull(home2);
      
      Compass compass0 = home0.getCompass();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(compass0.isVisible());
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertNotNull(compass0);
      
      Compass compass1 = home0.getCompass();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertSame(compass1, compass0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertEquals(100.0F, compass1.getDiameter(), 0.01F);
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals((-100.0F), compass1.getX(), 0.01F);
      assertEquals(50.0F, compass1.getY(), 0.01F);
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertNotNull(compass1);
      
      Home home3 = new Home();
      assertFalse(home3.equals((Object)home2));
      assertFalse(home3.equals((Object)home0));
      assertFalse(home3.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home3.getWallHeight(), 0.01F);
      assertFalse(home3.isFurnitureDescendingSorted());
      assertNull(home3.getFurnitureSortedProperty());
      assertFalse(home3.isModified());
      assertTrue(home3.isEmpty());
      assertFalse(home3.isRecovered());
      assertEquals(3700L, home3.getVersion());
      assertFalse(home3.isBasePlanLocked());
      assertNull(home3.getName());
      assertNotNull(home3);
      
      String string0 = home3.getName();
      assertFalse(home3.equals((Object)home2));
      assertFalse(home3.equals((Object)home0));
      assertFalse(home3.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home3, home2);
      assertNotSame(home3, home0);
      assertNotSame(home3, home1);
      assertEquals(250.0F, home3.getWallHeight(), 0.01F);
      assertFalse(home3.isFurnitureDescendingSorted());
      assertNull(home3.getFurnitureSortedProperty());
      assertFalse(home3.isModified());
      assertTrue(home3.isEmpty());
      assertFalse(home3.isRecovered());
      assertEquals(3700L, home3.getVersion());
      assertFalse(home3.isBasePlanLocked());
      assertNull(home3.getName());
      assertNull(string0);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home1.removeWallsListener(collectionListener0);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home3));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home3));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home3);
      assertNotSame(home0, home2);
      assertNotSame(home1, home2);
      assertNotSame(home1, home3);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      
      CollectionListener<Wall> collectionListener1 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home1.addWallsListener(collectionListener1);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home3));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home3));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home3);
      assertNotSame(home0, home2);
      assertNotSame(home1, home2);
      assertNotSame(home1, home3);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addDimensionLinesListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Compass compass0 = linkedList0.poll();
      assertEquals(0, linkedList0.size());
      assertNull(compass0);
      
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Home home0 = new Home(linkedList1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0, linkedList1.size());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(0, linkedList1.size());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertNotNull(home1);
      
      // Undeclared exception!
      try { 
        home1.setFurnitureVisibleProperties((List<HomePieceOfFurniture.SortableProperty>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeDimensionLinesListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      
      home0.deletePieceOfFurniture((HomePieceOfFurniture) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      LinkedList<HomePieceOfFurniture.SortableProperty> linkedList0 = new LinkedList<HomePieceOfFurniture.SortableProperty>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      home0.getFurnitureSortedProperty();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      
      boolean boolean0 = home0.isModified();
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float float0 = 0.0F;
      Home home0 = new Home(0.0F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      Home.Property home_Property0 = Home.Property.BASE_PLAN_LOCKED;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("(BV;GDc'", propertyChangeListener0);
      assertEquals("(BV;GDc'", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      home0.addPropertyChangeListener(home_Property0, propertyChangeListenerProxy0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertEquals("(BV;GDc'", propertyChangeListenerProxy0.getPropertyName());
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addDimensionLinesListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      
      List<Camera> list0 = home0.getStoredCameras();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertNotNull(home1);
      
      home1.setName("(BV;GDc'");
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertEquals("(BV;GDc'", home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      
      // Undeclared exception!
      try { 
        home1.addDimensionLine((DimensionLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNotNull(home0);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeFurnitureListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isEmpty());
      assertNotNull(home1);
      
      LinkedList<ObserverCamera> linkedList0 = new LinkedList<ObserverCamera>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      LinkedList<DimensionLine> linkedList1 = new LinkedList<DimensionLine>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<HomePieceOfFurniture> list1 = Home.getFurnitureSubList(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(list1, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      Object object0 = home0.getVisualProperty("");
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(home0);
      
      float[][] floatArray0 = new float[2][8];
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 435.03033F, 435.03033F, 3700L, 3700L);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(4617.3643F, dimensionLine0.getLength(), 0.01F);
      assertEquals(435.03033F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(435.03033F, dimensionLine0.getYStart(), 0.01F);
      assertNotNull(dimensionLine0);
      
      Level level0 = dimensionLine0.getLevel();
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(4617.3643F, dimensionLine0.getLength(), 0.01F);
      assertEquals(435.03033F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(435.03033F, dimensionLine0.getYStart(), 0.01F);
      assertNull(level0);
      
      home0.setSelectedLevel((Level) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      
      Room room0 = new Room(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertNotNull(room0);
      
      home0.addRoom(room0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(2, floatArray0.length);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      home0.setFurnitureDescendingSorted(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<ObserverCamera> linkedList0 = new LinkedList<ObserverCamera>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW;
      Home home0 = new Home(0.0F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNotNull(home0);
      
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty1 = home0.getFurnitureSortedProperty();
      assertEquals(HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW, homePieceOfFurniture_SortableProperty1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertSame(homePieceOfFurniture_SortableProperty1, homePieceOfFurniture_SortableProperty0);
      assertEquals(3700L, home0.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<ObserverCamera> linkedList0 = new LinkedList<ObserverCamera>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      List<HomePieceOfFurniture> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Home home0 = new Home(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNotNull(home1);
      
      // Undeclared exception!
      try { 
        home1.addPieceOfFurniture((HomePieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      Level level0 = new Level("\"SLKC!,9TS", 3700L, 3700L, 3700L);
      assertEquals("\"SLKC!,9TS", level0.getName());
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      home0.addLevel(level0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals("\"SLKC!,9TS", level0.getName());
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNotNull(home1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      List<Camera> list0 = home0.getStoredCameras();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      List<HomePieceOfFurniture> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Home home0 = new Home(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      List<Room> list1 = home0.getRooms();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(collection0);
      
      float[][] floatArray0 = new float[3][9];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (float) 3700L;
      floatArray1[1] = (float) 3700L;
      floatArray1[2] = (float) 3700L;
      floatArray1[3] = (float) 3700L;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = (float) 3700L;
      floatArray2[2] = (float) 3700L;
      floatArray2[3] = 0.0F;
      floatArray2[4] = (float) 3700L;
      floatArray2[5] = (float) 3700L;
      floatArray2[6] = (float) 3700L;
      floatArray2[7] = (float) 3700L;
      floatArray2[8] = (float) 3700L;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[8];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (float) 3700L;
      floatArray3[1] = (float) 3700L;
      floatArray3[2] = (float) 3700L;
      floatArray3[3] = 0.0F;
      floatArray3[4] = (float) 3700L;
      floatArray3[5] = 0.0F;
      floatArray3[6] = (float) 3700L;
      floatArray3[7] = (float) 3700L;
      floatArray0[2] = floatArray3;
      Room room0 = new Room(floatArray0);
      assertEquals(3, floatArray0.length);
      assertNull(room0.getCeilingColor());
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(1850.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(3700.0F, room0.getYCenter(), 0.01F);
      assertNotNull(room0);
      
      home0.deleteRoom(room0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3, floatArray0.length);
      assertEquals(0, linkedList0.size());
      assertNull(room0.getCeilingColor());
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(1850.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(3700.0F, room0.getYCenter(), 0.01F);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Home home0 = new Home(1447.9182F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      home0.setBasePlanLocked(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.addSelectionListener(selectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      
      List<Camera> list0 = home0.getStoredCameras();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNotNull(collection0);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNull(backgroundImage0);
      
      boolean boolean0 = home0.isBasePlanLocked();
      assertTrue(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      
      boolean boolean1 = home0.isModified();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      
      Camera camera0 = home0.getCamera();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertNull(camera0.getName());
      assertNotNull(camera0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      home0.deleteRoom((Room) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Home home0 = new Home(1447.9182F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertNotNull(dimensionLine0);
      
      home0.addDimensionLine(dimensionLine0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a12[dx");
      assertFalse(boolean0);
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeDimensionLinesListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      
      home0.setBasePlanLocked(false);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      
      home0.setFurnitureDescendingSorted(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<Selectable> list1 = Home.duplicate(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      Collection<Label> collection0 = home0.getLabels();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertNull(observerCamera0.getName());
      assertNotNull(observerCamera0);
      
      home0.setCamera(observerCamera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertNull(observerCamera0.getName());
      
      Home home1 = home0.clone();
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Home home0 = new Home((-1307.6207F));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Room> list0 = home0.getRooms();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<HomePieceOfFurniture.SortableProperty> list1 = home0.getFurnitureVisibleProperties();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(5, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      home0.setFurnitureVisibleProperties(list1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(5, list1.size());
      assertFalse(list1.isEmpty());
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(backgroundImage0);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertNotNull(observerCamera0);
      
      home0.setCamera(observerCamera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      
      List<Room> list2 = home0.getRooms();
      assertTrue(list2.equals((Object)list0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(list2, list0);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      
      List<Level> list3 = home0.getLevels();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertNotNull(list3);
      
      boolean boolean0 = home0.isRecovered();
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      
      float float0 = home0.getWallHeight();
      assertEquals((-1307.6207F), float0, 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1307.6207F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.addRoom((Room) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNotNull(home0);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLevelsListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertNotNull(home1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      Level level0 = new Level("\"SLKC!,9TS", 3700L, 3803.313F, 3700L);
      assertEquals(3803.313F, level0.getFloorThickness(), 0.01F);
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals("\"SLKC!,9TS", level0.getName());
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      home0.addLevel(level0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3803.313F, level0.getFloorThickness(), 0.01F);
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals("\"SLKC!,9TS", level0.getName());
      assertTrue(level0.isVisible());
      
      float[][] floatArray0 = new float[2][8];
      float[] floatArray1 = new float[1];
      floatArray1[0] = (float) 3700L;
      float[] floatArray2 = new float[6];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 3803.313F;
      floatArray2[2] = (float) 3700L;
      floatArray2[3] = 3803.313F;
      floatArray2[4] = (float) 3700L;
      floatArray2[5] = (-2431.0F);
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      assertEquals(2, floatArray0.length);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(1901.6565F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNotNull(room0);
      
      home0.addRoom(room0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(2, floatArray0.length);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(1901.6565F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      
      home0.deleteRoom(room0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(2, floatArray0.length);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(1901.6565F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      
      // Undeclared exception!
      try { 
        Home.Property.valueOf("V%b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Home.Property.V%b
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      HomePrint.PaperOrientation homePrint_PaperOrientation0 = HomePrint.PaperOrientation.PORTRAIT;
      Float float0 = new Float(2271.9F);
      assertEquals(2271.9F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      HomePrint homePrint0 = new HomePrint(homePrint_PaperOrientation0, 2271.9F, 0.0F, 3700L, 1336.9647F, 3700L, 0.0F, false, false, false, float0, "%`&dQ_", "%`&dQ_");
      assertEquals(1336.9647F, homePrint0.getPaperLeftMargin(), 0.01F);
      assertEquals(3700.0F, homePrint0.getPaperTopMargin(), 0.01F);
      assertEquals(0.0F, homePrint0.getPaperRightMargin(), 0.01F);
      assertEquals("%`&dQ_", homePrint0.getFooterFormat());
      assertFalse(homePrint0.isPlanPrinted());
      assertFalse(homePrint0.isFurniturePrinted());
      assertEquals("%`&dQ_", homePrint0.getHeaderFormat());
      assertEquals(HomePrint.PaperOrientation.PORTRAIT, homePrint0.getPaperOrientation());
      assertEquals(3700.0F, homePrint0.getPaperBottomMargin(), 0.01F);
      assertEquals(2271.9F, homePrint0.getPlanScale(), 0.01F);
      assertEquals(0.0F, homePrint0.getPaperHeight(), 0.01F);
      assertEquals(2271.9F, homePrint0.getPaperWidth(), 0.01F);
      assertFalse(homePrint0.isView3DPrinted());
      assertNotNull(homePrint0);
      
      home0.setPrint(homePrint0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(1336.9647F, homePrint0.getPaperLeftMargin(), 0.01F);
      assertEquals(3700.0F, homePrint0.getPaperTopMargin(), 0.01F);
      assertEquals(0.0F, homePrint0.getPaperRightMargin(), 0.01F);
      assertEquals("%`&dQ_", homePrint0.getFooterFormat());
      assertFalse(homePrint0.isPlanPrinted());
      assertFalse(homePrint0.isFurniturePrinted());
      assertEquals("%`&dQ_", homePrint0.getHeaderFormat());
      assertEquals(HomePrint.PaperOrientation.PORTRAIT, homePrint0.getPaperOrientation());
      assertEquals(3700.0F, homePrint0.getPaperBottomMargin(), 0.01F);
      assertEquals(2271.9F, homePrint0.getPlanScale(), 0.01F);
      assertEquals(0.0F, homePrint0.getPaperHeight(), 0.01F);
      assertEquals(2271.9F, homePrint0.getPaperWidth(), 0.01F);
      assertFalse(homePrint0.isView3DPrinted());
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertNull(observerCamera0.getName());
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertNotNull(observerCamera0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNotNull(home0);
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 3700L, 3700L, 3700L);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      home0.addWall(wall0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      home0.deleteWall(wall0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      
      home0.setName((String) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      
      home0.setName((String) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNotNull(home0);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Home home1 = new Home(list0);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertNotNull(home1);
      
      Level level0 = new Level("SELECTED_LEVEL", 3803.313F, 3803.313F, (-1850.52F));
      assertEquals(3803.313F, level0.getElevation(), 0.01F);
      assertEquals(3803.313F, level0.getFloorThickness(), 0.01F);
      assertEquals("SELECTED_LEVEL", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1850.52F), level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(3803.313F, level0.getElevation(), 0.01F);
      assertEquals(3803.313F, level0.getFloorThickness(), 0.01F);
      assertEquals("SELECTED_LEVEL", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1850.52F), level0.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1850.52F), level1.getHeight(), 0.01F);
      assertEquals(3803.313F, level1.getFloorThickness(), 0.01F);
      assertEquals(3803.313F, level1.getElevation(), 0.01F);
      assertEquals("SELECTED_LEVEL", level1.getName());
      assertNotNull(level1);
      
      home1.addLevel(level1);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3803.313F, level0.getElevation(), 0.01F);
      assertEquals(3803.313F, level0.getFloorThickness(), 0.01F);
      assertEquals("SELECTED_LEVEL", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1850.52F), level0.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1850.52F), level1.getHeight(), 0.01F);
      assertEquals(3803.313F, level1.getFloorThickness(), 0.01F);
      assertEquals(3803.313F, level1.getElevation(), 0.01F);
      assertEquals("SELECTED_LEVEL", level1.getName());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Home home0 = new Home((-1952.46F));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertNotNull(home0);
      
      home0.setModified(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      
      Level level0 = home0.getSelectedLevel();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertNull(level0);
      
      home0.setSelectedLevel((Level) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      
      String string0 = home0.getName();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertNull(string0);
      
      Label label0 = new Label((String) null, 2563.1104F, 5459.0F);
      assertEquals(2563.1104F, label0.getX(), 0.01F);
      assertNull(label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(5459.0F, label0.getY(), 0.01F);
      assertNotNull(label0);
      
      label0.setAngle((-1952.46F));
      assertEquals(1.6106696F, label0.getAngle(), 0.01F);
      assertEquals(2563.1104F, label0.getX(), 0.01F);
      assertNull(label0.getText());
      assertEquals(5459.0F, label0.getY(), 0.01F);
      
      boolean boolean0 = label0.intersectsRectangle(1040.6724F, (-3495.53F), 0.0F, (-3495.53F));
      assertFalse(boolean0);
      assertEquals(1.6106696F, label0.getAngle(), 0.01F);
      assertEquals(2563.1104F, label0.getX(), 0.01F);
      assertNull(label0.getText());
      assertEquals(5459.0F, label0.getY(), 0.01F);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertEquals((-1952.46F), home1.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isModified());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertNotNull(home1);
      
      home1.addLabelsListener((CollectionListener<Label>) null);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertEquals((-1952.46F), home1.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isModified());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      
      Label label1 = label0.clone();
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertEquals(1.6106696F, label0.getAngle(), 0.01F);
      assertEquals(2563.1104F, label0.getX(), 0.01F);
      assertNull(label0.getText());
      assertEquals(5459.0F, label0.getY(), 0.01F);
      assertEquals(2563.1104F, label1.getX(), 0.01F);
      assertEquals(1.6106696F, label1.getAngle(), 0.01F);
      assertNull(label1.getText());
      assertEquals(5459.0F, label1.getY(), 0.01F);
      assertNotNull(label1);
      
      Level level1 = label1.getLevel();
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertEquals(1.6106696F, label0.getAngle(), 0.01F);
      assertEquals(2563.1104F, label0.getX(), 0.01F);
      assertNull(label0.getText());
      assertEquals(5459.0F, label0.getY(), 0.01F);
      assertEquals(2563.1104F, label1.getX(), 0.01F);
      assertEquals(1.6106696F, label1.getAngle(), 0.01F);
      assertNull(label1.getText());
      assertEquals(5459.0F, label1.getY(), 0.01F);
      assertNull(level1);
      
      home1.deleteLevel((Level) null);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertEquals((-1952.46F), home1.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isModified());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      
      List<Camera> list0 = home0.getStoredCameras();
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Home home2 = home0.clone();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(3700L, home2.getVersion());
      assertTrue(home2.isModified());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertEquals((-1952.46F), home2.getWallHeight(), 0.01F);
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isRecovered());
      assertNotNull(home2);
      
      List<HomePieceOfFurniture> list1 = home2.getFurniture();
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(3700L, home2.getVersion());
      assertTrue(home2.isModified());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertEquals((-1952.46F), home2.getWallHeight(), 0.01F);
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isRecovered());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      Collection<Label> collection0 = home0.getLabels();
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(collection0.contains(label1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertNotNull(collection0);
      
      Home home3 = new Home();
      assertFalse(home3.equals((Object)home2));
      assertFalse(home3.equals((Object)home0));
      assertFalse(home3.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home3.isModified());
      assertEquals(3700L, home3.getVersion());
      assertFalse(home3.isRecovered());
      assertTrue(home3.isEmpty());
      assertFalse(home3.isFurnitureDescendingSorted());
      assertNull(home3.getFurnitureSortedProperty());
      assertEquals(250.0F, home3.getWallHeight(), 0.01F);
      assertNull(home3.getName());
      assertFalse(home3.isBasePlanLocked());
      assertNotNull(home3);
      
      String string1 = home3.getName();
      assertFalse(home3.equals((Object)home2));
      assertFalse(home3.equals((Object)home0));
      assertFalse(home3.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home3, home2);
      assertNotSame(home3, home0);
      assertNotSame(home3, home1);
      assertFalse(home3.isModified());
      assertEquals(3700L, home3.getVersion());
      assertFalse(home3.isRecovered());
      assertTrue(home3.isEmpty());
      assertFalse(home3.isFurnitureDescendingSorted());
      assertNull(home3.getFurnitureSortedProperty());
      assertEquals(250.0F, home3.getWallHeight(), 0.01F);
      assertNull(home3.getName());
      assertFalse(home3.isBasePlanLocked());
      assertNull(string1);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeWallsListener(collectionListener0);
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home3));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home0, home3);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      
      home0.setFurnitureDescendingSorted(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Home home0 = new Home(1447.9182F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(home0);
      
      home0.setBasePlanLocked(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isBasePlanLocked());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      
      Collection<Wall> collection0 = home0.getWalls();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isBasePlanLocked());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(collection0);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isBasePlanLocked());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      
      Wall wall0 = new Wall(3700L, 1447.9182F, 1.0995575F, 1447.9182F, 1260.26F, 2867.0F);
      assertEquals(3698.9004F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0995575F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1447.9182F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1850.5498F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3698.9004F, wall0.getLength(), 0.01F);
      assertEquals(2867.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1260.26F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1447.9182F, wall0.getYEnd(), 0.01F);
      assertEquals(1447.9182F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3698.9004F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0995575F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1447.9182F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1850.5498F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3698.9004F, wall0.getLength(), 0.01F);
      assertEquals(2867.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1260.26F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1447.9182F, wall0.getYEnd(), 0.01F);
      assertEquals(1447.9182F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall1.getXStart(), 0.01F);
      assertEquals(1447.9182F, wall1.getYEnd(), 0.01F);
      assertEquals(2867.0F, wall1.getHeight(), 0.01F);
      assertEquals(1260.26F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3698.9004F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1447.9182F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3698.9004F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0995575F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1447.9182F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1850.5498F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotNull(wall1);
      
      home0.deleteWall(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isBasePlanLocked());
      assertEquals(1447.9182F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3698.9004F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0995575F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1447.9182F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1850.5498F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3698.9004F, wall0.getLength(), 0.01F);
      assertEquals(2867.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1260.26F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1447.9182F, wall0.getYEnd(), 0.01F);
      assertEquals(1447.9182F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall1.getXStart(), 0.01F);
      assertEquals(1447.9182F, wall1.getYEnd(), 0.01F);
      assertEquals(2867.0F, wall1.getHeight(), 0.01F);
      assertEquals(1260.26F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3698.9004F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1447.9182F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3698.9004F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0995575F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1447.9182F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1850.5498F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      
      home0.addRoomsListener((CollectionListener<Room>) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      try {
        homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Home home0 = new Home(0.7853982F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(0.7853982F, home1.getWallHeight(), 0.01F);
      assertNotNull(home1);
      
      List<Camera> list0 = home1.getStoredCameras();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(0.7853982F, home1.getWallHeight(), 0.01F);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home1.addFurnitureListener(collectionListener0);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(0.7853982F, home1.getWallHeight(), 0.01F);
      
      boolean boolean0 = home0.isRecovered();
      assertFalse(home0.equals((Object)home1));
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      
      Collection<Wall> collection0 = home1.getWalls();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(0.7853982F, home1.getWallHeight(), 0.01F);
      assertNotNull(collection0);
      
      Label label0 = new Label("", 3700L, 3700L);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals("", label0.getText());
      assertNotNull(label0);
      
      home0.addLabel(label0);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals("", label0.getText());
      
      CollectionListener<Wall> collectionListener1 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home1.removeWallsListener(collectionListener1);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(0.7853982F, home1.getWallHeight(), 0.01F);
      
      home0.setModified(true);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      
      List<Level> list1 = home1.getLevels();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(0.7853982F, home1.getWallHeight(), 0.01F);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      CollectionListener<Wall> collectionListener2 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.setRecovered(false);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      
      home1.removeWallsListener(collectionListener2);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(0.7853982F, home1.getWallHeight(), 0.01F);
      
      home1.getFurnitureSortedProperty();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(0.7853982F, home1.getWallHeight(), 0.01F);
      
      home0.setName("g{|xcH[?eQgPYu/tz");
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertEquals("g{|xcH[?eQgPYu/tz", home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      
      boolean boolean1 = home0.isBasePlanLocked();
      assertFalse(home0.equals((Object)home1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertEquals("g{|xcH[?eQgPYu/tz", home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      
      Home home2 = new Home(0.0F);
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(0.0F, home2.getWallHeight(), 0.01F);
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isRecovered());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isModified());
      assertEquals(3700L, home2.getVersion());
      assertNull(home2.getName());
      assertFalse(home2.isBasePlanLocked());
      assertNotNull(home2);
      
      ObserverCamera observerCamera0 = home2.getObserverCamera();
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(0.0F, home2.getWallHeight(), 0.01F);
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isRecovered());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isModified());
      assertEquals(3700L, home2.getVersion());
      assertNull(home2.getName());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertNull(observerCamera0.getName());
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertNotNull(observerCamera0);
      
      home0.setVisualProperty("", observerCamera0);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.7853982F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertEquals("g{|xcH[?eQgPYu/tz", home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(0.0F, home2.getWallHeight(), 0.01F);
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isRecovered());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isModified());
      assertEquals(3700L, home2.getVersion());
      assertNull(home2.getName());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertNull(observerCamera0.getName());
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      Level level0 = new Level("\"SLKC!,9TS", 3700L, 3803.313F, 3700L);
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertEquals(3803.313F, level0.getFloorThickness(), 0.01F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals("\"SLKC!,9TS", level0.getName());
      assertNotNull(level0);
      
      home0.addLevel(level0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertEquals(3803.313F, level0.getFloorThickness(), 0.01F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals("\"SLKC!,9TS", level0.getName());
      
      home0.addLevel(level0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertEquals(3803.313F, level0.getFloorThickness(), 0.01F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals("\"SLKC!,9TS", level0.getName());
      
      List<Camera> list0 = home0.getStoredCameras();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      home0.deleteLevel(level0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertEquals(3803.313F, level0.getFloorThickness(), 0.01F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals("\"SLKC!,9TS", level0.getName());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      home0.deleteRoom((Room) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      
      home0.setFurnitureDescendingSorted(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertNotNull(observerCamera0);
      
      home0.setBasePlanLocked(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      
      home0.setBasePlanLocked(false);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Class<HomeFurnitureGroup> class0 = HomeFurnitureGroup.class;
      List<HomeFurnitureGroup> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Room> list1 = Home.getRoomsSubList(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addDimensionLinesListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      
      home0.setRecovered(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      
      Class<Compass> class1 = Compass.class;
      // Undeclared exception!
      try { 
        Home.getSubList((List<? extends Selectable>) null, class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      CollectionListener<Room> collectionListener1 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      List<Camera> list0 = home0.getStoredCameras();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      home0.setStoredCameras(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      home0.removeRoomsListener(collectionListener1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      
      home0.removeWallsListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      
      Level level0 = home0.getSelectedLevel();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNull(level0);
      
      Collection<Label> collection0 = home0.getLabels();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(collection0);
      
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 59.433887F, 1786.2878F, 1845.0F, 566.6916F);
      assertEquals(1845.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(1786.2878F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(59.433887F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(2617.3538F, dimensionLine0.getLength(), 0.01F);
      assertEquals(566.6916F, dimensionLine0.getOffset(), 0.01F);
      assertNotNull(dimensionLine0);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(1845.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(1786.2878F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(59.433887F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(2617.3538F, dimensionLine0.getLength(), 0.01F);
      assertEquals(566.6916F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(2617.3538F, dimensionLine1.getLength(), 0.01F);
      assertEquals(1845.0F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals(566.6916F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(1786.2878F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals(59.433887F, dimensionLine1.getYStart(), 0.01F);
      assertNotNull(dimensionLine1);
      
      boolean boolean0 = dimensionLine1.intersectsRectangle(2966.787F, 1786.2878F, 59.433887F, 566.6916F);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertTrue(boolean0);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(1845.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(1786.2878F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(59.433887F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(2617.3538F, dimensionLine0.getLength(), 0.01F);
      assertEquals(566.6916F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(2617.3538F, dimensionLine1.getLength(), 0.01F);
      assertEquals(1845.0F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals(566.6916F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(1786.2878F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals(59.433887F, dimensionLine1.getYStart(), 0.01F);
      
      home0.setVisualProperty("IB.r+Y:Zb$o@)r,'#", dimensionLine1);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1845.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(1786.2878F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(59.433887F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(2617.3538F, dimensionLine0.getLength(), 0.01F);
      assertEquals(566.6916F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(2617.3538F, dimensionLine1.getLength(), 0.01F);
      assertEquals(1845.0F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals(566.6916F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(1786.2878F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals(59.433887F, dimensionLine1.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Home home0 = null;
      try {
        home0 = new Home((List<HomePieceOfFurniture>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Compass compass0 = linkedList0.poll();
      assertEquals(0, linkedList0.size());
      assertNull(compass0);
      
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(home0);
      
      Class<HomePieceOfFurniture.SortableProperty> class0 = HomePieceOfFurniture.SortableProperty.class;
      List<HomePieceOfFurniture.SortableProperty> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      home0.setFurnitureVisibleProperties(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0, linkedList0.size());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(backgroundImage0);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertNotNull(observerCamera0);
      
      home0.setCamera(observerCamera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      
      List<Room> list1 = home0.getRooms();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      List<Level> list2 = home0.getLevels();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Home home1 = new Home(linkedList1);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0, linkedList1.size());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertNotNull(home1);
      
      Home home2 = home1.clone();
      assertFalse(home1.equals((Object)home0));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertEquals(0, linkedList1.size());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertNull(home2.getFurnitureSortedProperty());
      assertNull(home2.getName());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isBasePlanLocked());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isRecovered());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isModified());
      assertNotNull(home2);
      
      boolean boolean0 = home2.isRecovered();
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertEquals(0, linkedList1.size());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertNull(home2.getFurnitureSortedProperty());
      assertNull(home2.getName());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isBasePlanLocked());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isRecovered());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isModified());
      
      float float0 = home2.getWallHeight();
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(250.0F, float0, 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertEquals(0, linkedList1.size());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertNull(home2.getFurnitureSortedProperty());
      assertNull(home2.getName());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isBasePlanLocked());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isRecovered());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isModified());
      
      LinkedList<HomePieceOfFurniture> linkedList2 = new LinkedList<HomePieceOfFurniture>();
      assertTrue(linkedList2.equals((Object)linkedList1));
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      String string0 = "";
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Level> list0 = Home.getLevelsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Class<Label> class0 = Label.class;
      List<Label> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Room> list1 = Home.getRoomsSubList(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      HomePrint homePrint0 = home0.getPrint();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertNull(homePrint0);
      
      home0.setPrint((HomePrint) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      
      home0.deleteRoom((Room) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      Home.Property home_Property0 = Home.Property.CAMERA;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      home0.removePropertyChangeListener(home_Property0, propertyChangeListenerProxy0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      
      Collection<Label> collection0 = home0.getLabels();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(collection0);
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.addSelectionListener(selectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      
      home0.setFurnitureDescendingSorted(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      
      Collection<Wall> collection1 = home0.getWalls();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(collection1);
      
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<HomePieceOfFurniture> list0 = Home.getFurnitureSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      UnaryOperator<Room> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      linkedList0.replaceAll(unaryOperator0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<Label> list1 = Home.getLabelsSubList(linkedList1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      List<Selectable> list2 = Home.duplicate(list1);
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list2);
      
      boolean boolean0 = home0.isModified();
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      
      boolean boolean1 = home0.isModified();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      
      DimensionLine dimensionLine0 = new DimensionLine((-15.416667F), (-15.416667F), (-15.416667F), 3700L, 0.0F);
      assertEquals(3715.4167F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-15.416667F), dimensionLine0.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-15.416667F), dimensionLine0.getXStart(), 0.01F);
      assertEquals((-15.416667F), dimensionLine0.getXEnd(), 0.01F);
      assertNotNull(dimensionLine0);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(3715.4167F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-15.416667F), dimensionLine0.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-15.416667F), dimensionLine0.getXStart(), 0.01F);
      assertEquals((-15.416667F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-15.416667F), dimensionLine1.getXStart(), 0.01F);
      assertEquals(3715.4167F, dimensionLine1.getLength(), 0.01F);
      assertEquals((-15.416667F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-15.416667F), dimensionLine1.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getOffset(), 0.01F);
      assertNotNull(dimensionLine1);
      
      home0.addDimensionLine(dimensionLine1);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3715.4167F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-15.416667F), dimensionLine0.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-15.416667F), dimensionLine0.getXStart(), 0.01F);
      assertEquals((-15.416667F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-15.416667F), dimensionLine1.getXStart(), 0.01F);
      assertEquals(3715.4167F, dimensionLine1.getLength(), 0.01F);
      assertEquals((-15.416667F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-15.416667F), dimensionLine1.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getOffset(), 0.01F);
      
      Camera camera0 = home0.getCamera();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertNotNull(camera0);
      
      boolean boolean2 = home0.isRecovered();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLevelsListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      
      List<Room> list3 = home0.getRooms();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertNotNull(list3);
      
      List<DimensionLine> list4 = Home.getDimensionLinesSubList(list1);
      assertFalse(list4.contains(dimensionLine0));
      assertEquals(0, linkedList0.size());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list4);
      
      List<Selectable> list5 = Home.duplicate(list4);
      assertTrue(list5.equals((Object)list2));
      assertFalse(list4.contains(dimensionLine0));
      assertNotSame(list5, list2);
      assertEquals(0, linkedList0.size());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list5.size());
      assertTrue(list5.isEmpty());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list5);
      
      boolean boolean3 = home0.isRecovered();
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      
      Compass compass0 = home0.getCompass();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertNotNull(compass0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNotNull(home0);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeWallsListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      
      String string0 = "~e-%O@pIt'^8";
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("~e-%O@pIt'^8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.~e-%O@pIt'^8
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNotNull(home0);
      
      Compass compass0 = home0.getCompass();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertNotNull(compass0);
      
      compass0.setX(4.0F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(4.0F, compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertFalse(linkedList0.contains(compass0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(compass0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(compass0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(4.0F, compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(1, linkedList0.size());
      
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertTrue(linkedList0.contains(compass0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Home home1 = new Home();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertNotNull(home1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      home0.removeSelectionListener((SelectionListener) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertNotNull(dimensionLine0);
      
      home0.addDimensionLine(dimensionLine0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertNotNull(home1);
      
      Label label0 = new Label("Africa/Dar_es_Salaam", (-15.783333F), (-15.783333F));
      assertEquals((-15.783333F), label0.getY(), 0.01F);
      assertEquals("Africa/Dar_es_Salaam", label0.getText());
      assertEquals((-15.783333F), label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertNotNull(label0);
      
      Label label1 = new Label("Africa/Dar_es_Salaam", (-15.783333F), (-100.0F));
      assertFalse(label1.equals((Object)label0));
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals((-100.0F), label1.getY(), 0.01F);
      assertEquals((-15.783333F), label1.getX(), 0.01F);
      assertEquals("Africa/Dar_es_Salaam", label1.getText());
      assertNotNull(label1);
      
      Label label2 = label1.clone();
      assertFalse(label1.equals((Object)label0));
      assertFalse(label2.equals((Object)label0));
      assertFalse(label2.equals((Object)label1));
      assertNotSame(label1, label2);
      assertNotSame(label1, label0);
      assertNotSame(label2, label0);
      assertNotSame(label2, label1);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals((-100.0F), label1.getY(), 0.01F);
      assertEquals((-15.783333F), label1.getX(), 0.01F);
      assertEquals("Africa/Dar_es_Salaam", label1.getText());
      assertEquals((-100.0F), label2.getY(), 0.01F);
      assertEquals(0.0F, label2.getAngle(), 0.01F);
      assertEquals("Africa/Dar_es_Salaam", label2.getText());
      assertEquals((-15.783333F), label2.getX(), 0.01F);
      assertNotNull(label2);
      
      home0.deleteLabel(label1);
      assertFalse(home0.equals((Object)home1));
      assertFalse(label1.equals((Object)label2));
      assertFalse(label1.equals((Object)label0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(label1, label2);
      assertNotSame(label1, label0);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals((-100.0F), label1.getY(), 0.01F);
      assertEquals((-15.783333F), label1.getX(), 0.01F);
      assertEquals("Africa/Dar_es_Salaam", label1.getText());
      
      home1.setFurnitureDescendingSorted(true);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      
      boolean boolean0 = home1.isEmpty();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      
      List<Level> list0 = home0.getLevels();
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Home home2 = new Home();
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isRecovered());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isModified());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(3700L, home2.getVersion());
      assertNull(home2.getName());
      assertNotNull(home2);
      
      Wall wall0 = new Wall((-100.0F), 955.0F, (-1067.0F), 3700L, 1447.9182F, (-804.3F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-804.3F), wall0.getHeight(), 0.01F);
      assertEquals(2910.346F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1067.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2327.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-583.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(955.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1447.9182F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-100.0F), wall0.getXStart(), 0.01F);
      assertEquals(2910.346F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      home2.deleteWall(wall0);
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isRecovered());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isModified());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(3700L, home2.getVersion());
      assertNull(home2.getName());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-804.3F), wall0.getHeight(), 0.01F);
      assertEquals(2910.346F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1067.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2327.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-583.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(955.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1447.9182F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-100.0F), wall0.getXStart(), 0.01F);
      assertEquals(2910.346F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      Collection<Label> collection0 = home0.getLabels();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(collection0);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertNotNull(homeEnvironment0);
      
      home0.removeDimensionLinesListener((CollectionListener<DimensionLine>) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 0.0F, 0.0F, 1024.9335F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1024.9335F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((double) 3700L);
      assertEquals(3700.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      home0.addWall(wall0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(3700.0F, wall1.getHeight(), 0.01F);
      assertEquals(3700.0F, wall1.getLength(), 0.01F);
      assertEquals(1850.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall1.getXStart(), 0.01F);
      assertEquals(3700.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3700.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3700.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean1 = linkedList0.add(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2, linkedList0.size());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(3700.0F, wall1.getHeight(), 0.01F);
      assertEquals(3700.0F, wall1.getLength(), 0.01F);
      assertEquals(1850.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall1.getXStart(), 0.01F);
      assertEquals(3700.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3700.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3700.0F, wall1.getXArcCircleCenter(), 0.01F);
      
      boolean boolean2 = linkedList0.add(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(linkedList0.contains(wall0));
      assertNotSame(wall0, wall1);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3, linkedList0.size());
      
      Class<HomeFurnitureGroup> class0 = HomeFurnitureGroup.class;
      List<HomeFurnitureGroup> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals(3, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<Wall> list1 = Home.getWallsSubList(list0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertEquals(3, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      float float1 = home0.getWallHeight();
      assertEquals(250.0F, float1, 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      
      home0.setName("");
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals("", home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      
      home0.setName("");
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals("", home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      
      Collection<Wall> collection1 = home0.getWalls();
      assertFalse(collection1.contains(wall1));
      assertTrue(collection1.contains(wall0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals("", home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(collection1);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals("", home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      
      home0.setName("");
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals("", home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      
      Float float2 = new Float(86400.0);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(86400.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall1.setArcExtent(float2);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall1.getHeight(), 0.01F);
      assertEquals((-41864.48F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1850.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall1.getXStart(), 0.01F);
      assertEquals(3700.0F, wall1.getYStart(), 0.01F);
      assertEquals(3.94001485E9F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3700.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(86400.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      HomePrint.PaperOrientation homePrint_PaperOrientation0 = HomePrint.PaperOrientation.LANDSCAPE;
      HomePrint homePrint0 = new HomePrint(homePrint_PaperOrientation0, 3700L, 0.0F, 0.19634955F, 3700L, 3700L, 3700L, false, true, true, float0, "", "");
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals(3700.0F, homePrint0.getPaperRightMargin(), 0.01F);
      assertEquals(0.0F, homePrint0.getPaperHeight(), 0.01F);
      assertEquals(3700.0F, homePrint0.getPaperBottomMargin(), 0.01F);
      assertEquals("", homePrint0.getHeaderFormat());
      assertEquals(3700.0F, homePrint0.getPaperLeftMargin(), 0.01F);
      assertEquals(HomePrint.PaperOrientation.LANDSCAPE, homePrint0.getPaperOrientation());
      assertTrue(homePrint0.isView3DPrinted());
      assertEquals(3700.0F, homePrint0.getPlanScale(), 0.01F);
      assertEquals(0.19634955F, homePrint0.getPaperTopMargin(), 0.01F);
      assertEquals("", homePrint0.getFooterFormat());
      assertTrue(homePrint0.isPlanPrinted());
      assertEquals(3700.0F, homePrint0.getPaperWidth(), 0.01F);
      assertFalse(homePrint0.isFurniturePrinted());
      assertNotNull(homePrint0);
      
      home0.setPrint(homePrint0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals("", home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700.0F, homePrint0.getPaperRightMargin(), 0.01F);
      assertEquals(0.0F, homePrint0.getPaperHeight(), 0.01F);
      assertEquals(3700.0F, homePrint0.getPaperBottomMargin(), 0.01F);
      assertEquals("", homePrint0.getHeaderFormat());
      assertEquals(3700.0F, homePrint0.getPaperLeftMargin(), 0.01F);
      assertEquals(HomePrint.PaperOrientation.LANDSCAPE, homePrint0.getPaperOrientation());
      assertTrue(homePrint0.isView3DPrinted());
      assertEquals(3700.0F, homePrint0.getPlanScale(), 0.01F);
      assertEquals(0.19634955F, homePrint0.getPaperTopMargin(), 0.01F);
      assertEquals("", homePrint0.getFooterFormat());
      assertTrue(homePrint0.isPlanPrinted());
      assertEquals(3700.0F, homePrint0.getPaperWidth(), 0.01F);
      assertFalse(homePrint0.isFurniturePrinted());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      home0.setBasePlanLocked(false);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.offer((Wall) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      List<Label> list0 = Home.getLabelsSubList(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.setSelectedItems((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      float[][] floatArray0 = new float[2][8];
      Room room0 = new Room(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNotNull(room0);
      
      home0.addRoom(room0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(2, floatArray0.length);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<HomeDoorOrWindow> linkedList0 = new LinkedList<HomeDoorOrWindow>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Class<HomeDoorOrWindow> class0 = HomeDoorOrWindow.class;
      List<HomeDoorOrWindow> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<HomePieceOfFurniture> list1 = Home.getFurnitureSubList(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      List<DimensionLine> list2 = Home.getDimensionLinesSubList(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Home home1 = new Home(list0);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertNotNull(home1);
      
      Class<Label> class0 = Label.class;
      List<Label> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      List<DimensionLine> list2 = Home.getDimensionLinesSubList(list1);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      Home home2 = home1.clone();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertTrue(home2.isEmpty());
      assertNull(home2.getFurnitureSortedProperty());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isBasePlanLocked());
      assertFalse(home2.isModified());
      assertNull(home2.getName());
      assertFalse(home2.isRecovered());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNotNull(home2);
      
      boolean boolean0 = home0.isBasePlanLocked();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      
      Class<Label> class1 = Label.class;
      List<Label> list3 = Home.getSubList((List<? extends Selectable>) list0, class1);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertTrue(list3.equals((Object)list1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertSame(class1, class0);
      assertNotSame(list3, list1);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertNotNull(list3);
      
      boolean boolean1 = home0.isFurnitureDescendingSorted();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      
      float[][] floatArray0 = new float[0][1];
      Room room0 = null;
      try {
        room0 = new Room(floatArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Room points must containt at least two points
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Compass compass0 = home0.getCompass();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertNotNull(compass0);
      
      compass0.setX(3517.9F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(3517.9F, compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertFalse(linkedList0.contains(compass0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(compass0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(compass0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(3517.9F, compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(1, linkedList0.size());
      
      List<Selectable> list1 = Home.duplicate(linkedList0);
      assertTrue(linkedList0.contains(compass0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      DimensionLine dimensionLine0 = new DimensionLine(821.67F, (-1689.32F), 0.1F, 3700L, 0.1F);
      assertEquals(5451.582F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-1689.32F), dimensionLine0.getYStart(), 0.01F);
      assertEquals(0.1F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(821.67F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(0.1F, dimensionLine0.getXEnd(), 0.01F);
      assertNotNull(dimensionLine0);
      
      home0.setFurnitureDescendingSorted(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertNotNull(home1);
      
      List<Camera> list2 = home0.getStoredCameras();
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      home1.setStoredCameras(list2);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      
      boolean boolean1 = home0.isEmpty();
      assertFalse(home0.equals((Object)home1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      
      Home home2 = home0.clone();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isModified());
      assertFalse(home2.isRecovered());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isBasePlanLocked());
      assertTrue(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, home2.getVersion());
      assertNull(home2.getName());
      assertNotNull(home2);
      
      List<Selectable> list3 = home2.getSelectedItems();
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertTrue(list3.equals((Object)list1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isModified());
      assertFalse(home2.isRecovered());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isBasePlanLocked());
      assertTrue(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, home2.getVersion());
      assertNull(home2.getName());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertNotNull(list3);
      
      List<Selectable> list4 = Home.duplicate(list3);
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list4.equals((Object)list3));
      assertTrue(list4.equals((Object)list1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertNotSame(list4, list1);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isModified());
      assertFalse(home2.isRecovered());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isBasePlanLocked());
      assertTrue(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, home2.getVersion());
      assertNull(home2.getName());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertNotNull(list4);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Home home0 = new Home((-1.0F));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1.0F), home0.getWallHeight(), 0.01F);
      assertNotNull(home0);
      
      home0.setBasePlanLocked(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1.0F), home0.getWallHeight(), 0.01F);
      
      home0.setRecovered(false);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1.0F), home0.getWallHeight(), 0.01F);
      
      HomePrint homePrint0 = home0.getPrint();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1.0F), home0.getWallHeight(), 0.01F);
      assertNull(homePrint0);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1.0F), home0.getWallHeight(), 0.01F);
      assertNotNull(collection0);
      
      Camera camera0 = home0.getTopCamera();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1.0F), home0.getWallHeight(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertNotNull(camera0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<HomePieceOfFurniture> list0 = Home.getFurnitureSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      boolean boolean0 = home0.isRecovered();
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertNotNull(home1);
      
      Label label0 = new Label("Asia/Yekaterinburg", 18.383333F, 3700L);
      assertEquals("Asia/Yekaterinburg", label0.getText());
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(18.383333F, label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertNotNull(label0);
      
      label0.setX(68.0F);
      assertEquals("Asia/Yekaterinburg", label0.getText());
      assertEquals(68.0F, label0.getX(), 0.01F);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      
      Label label1 = label0.clone();
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertEquals("Asia/Yekaterinburg", label0.getText());
      assertEquals(68.0F, label0.getX(), 0.01F);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals("Asia/Yekaterinburg", label1.getText());
      assertEquals(68.0F, label1.getX(), 0.01F);
      assertEquals(3700.0F, label1.getY(), 0.01F);
      assertNotNull(label1);
      
      label1.setAngle(5459.0F);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertEquals("Asia/Yekaterinburg", label0.getText());
      assertEquals(68.0F, label0.getX(), 0.01F);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("Asia/Yekaterinburg", label1.getText());
      assertEquals(68.0F, label1.getX(), 0.01F);
      assertEquals(5.195153F, label1.getAngle(), 0.01F);
      assertEquals(3700.0F, label1.getY(), 0.01F);
      
      boolean boolean0 = label1.intersectsRectangle(3700L, 18.383333F, 3700L, 0.0F);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertFalse(boolean0);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertEquals("Asia/Yekaterinburg", label0.getText());
      assertEquals(68.0F, label0.getX(), 0.01F);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("Asia/Yekaterinburg", label1.getText());
      assertEquals(68.0F, label1.getX(), 0.01F);
      assertEquals(5.195153F, label1.getAngle(), 0.01F);
      assertEquals(3700.0F, label1.getY(), 0.01F);
      
      home0.addLabelsListener((CollectionListener<Label>) null);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      
      Level level0 = label1.getLevel();
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertEquals("Asia/Yekaterinburg", label0.getText());
      assertEquals(68.0F, label0.getX(), 0.01F);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("Asia/Yekaterinburg", label1.getText());
      assertEquals(68.0F, label1.getX(), 0.01F);
      assertEquals(5.195153F, label1.getAngle(), 0.01F);
      assertEquals(3700.0F, label1.getY(), 0.01F);
      assertNull(level0);
      
      DimensionLine dimensionLine0 = new DimensionLine((-3539.221F), 3700L, 0.0F, (-1078.1091F), 68.0F);
      assertEquals(0.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-1078.1091F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(5946.126F, dimensionLine0.getLength(), 0.01F);
      assertEquals(68.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-3539.221F), dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertNotNull(dimensionLine0);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(0.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-1078.1091F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(5946.126F, dimensionLine0.getLength(), 0.01F);
      assertEquals(68.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-3539.221F), dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-1078.1091F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals((-3539.221F), dimensionLine1.getXStart(), 0.01F);
      assertEquals(5946.126F, dimensionLine1.getLength(), 0.01F);
      assertEquals(68.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getYStart(), 0.01F);
      assertNotNull(dimensionLine1);
      
      home1.addDimensionLine(dimensionLine0);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(0.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-1078.1091F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(5946.126F, dimensionLine0.getLength(), 0.01F);
      assertEquals(68.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-3539.221F), dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      
      Camera camera0 = home1.getCamera();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertNotNull(camera0);
      
      Home home2 = new Home();
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home2.isEmpty());
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isModified());
      assertFalse(home2.isRecovered());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, home2.getVersion());
      assertNull(home2.getName());
      assertNotNull(home2);
      
      boolean boolean1 = home2.isRecovered();
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertTrue(home2.isEmpty());
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isModified());
      assertFalse(home2.isRecovered());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, home2.getVersion());
      assertNull(home2.getName());
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLevelsListener(collectionListener0);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      
      List<Room> list0 = home1.getRooms();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertNull(home1.getName());
      assertNotNull(list0);
      
      List<DimensionLine> list1 = Home.getDimensionLinesSubList(list0);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertFalse(list1.contains(dimensionLine1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      List<Selectable> list2 = Home.duplicate(list0);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertNull(home1.getName());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertNotNull(dimensionLine0);
      
      home0.addDimensionLine(dimensionLine0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNotNull(home0);
      
      Wall wall0 = new Wall(3700L, 3517.0557F, (-833.2776F), 0.0F, 3517.0557F, (-833.2776F));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1758.5278F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals((-833.2776F), wall0.getXEnd(), 0.01F);
      assertEquals(5737.62F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1433.3612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-833.2776F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3517.0557F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5737.62F, wall0.getLength(), 0.01F);
      assertEquals(3517.0557F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer((-37));
      assertEquals((-37), (int)integer0);
      assertNotNull(integer0);
      
      home0.addWall(wall0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1758.5278F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals((-833.2776F), wall0.getXEnd(), 0.01F);
      assertEquals(5737.62F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1433.3612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-833.2776F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3517.0557F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5737.62F, wall0.getLength(), 0.01F);
      assertEquals(3517.0557F, wall0.getThickness(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1758.5278F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals((-833.2776F), wall0.getXEnd(), 0.01F);
      assertEquals(5737.62F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1433.3612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-833.2776F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3517.0557F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5737.62F, wall0.getLength(), 0.01F);
      assertEquals(3517.0557F, wall0.getThickness(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      Wall wall1 = wall0.getWallAtEnd();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1758.5278F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals((-833.2776F), wall0.getXEnd(), 0.01F);
      assertEquals(5737.62F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1433.3612F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-833.2776F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3517.0557F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5737.62F, wall0.getLength(), 0.01F);
      assertEquals(3517.0557F, wall0.getThickness(), 0.01F);
      assertNull(wall1);
      
      Level level0 = new Level("^[OB+kMpS{H0P|%,]u", (-4897.0F), 3517.0557F, 500.0F);
      assertEquals((-4897.0F), level0.getElevation(), 0.01F);
      assertEquals(3517.0557F, level0.getFloorThickness(), 0.01F);
      assertEquals(500.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("^[OB+kMpS{H0P|%,]u", level0.getName());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-4897.0F), level0.getElevation(), 0.01F);
      assertEquals(3517.0557F, level0.getFloorThickness(), 0.01F);
      assertEquals(500.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("^[OB+kMpS{H0P|%,]u", level0.getName());
      assertEquals("^[OB+kMpS{H0P|%,]u", level1.getName());
      assertEquals((-4897.0F), level1.getElevation(), 0.01F);
      assertEquals(3517.0557F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(500.0F, level1.getHeight(), 0.01F);
      assertNotNull(level1);
      
      level1.setFloorThickness(0.0F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-4897.0F), level0.getElevation(), 0.01F);
      assertEquals(3517.0557F, level0.getFloorThickness(), 0.01F);
      assertEquals(500.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("^[OB+kMpS{H0P|%,]u", level0.getName());
      assertEquals("^[OB+kMpS{H0P|%,]u", level1.getName());
      assertEquals((-4897.0F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(500.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      
      home0.addLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-4897.0F), level0.getElevation(), 0.01F);
      assertEquals(3517.0557F, level0.getFloorThickness(), 0.01F);
      assertEquals(500.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("^[OB+kMpS{H0P|%,]u", level0.getName());
      assertEquals("^[OB+kMpS{H0P|%,]u", level1.getName());
      assertEquals((-4897.0F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(500.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      
      // Undeclared exception!
      try { 
        home0.clone();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Home home0 = new Home((-1952.46F));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      home0.setModified(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      
      Level level0 = home0.getSelectedLevel();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(level0);
      
      home0.setSelectedLevel((Level) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      
      String string0 = home0.getName();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(string0);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertNotNull(homeEnvironment0);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(backgroundImage0);
      
      home0.setBackgroundImage((BackgroundImage) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      
      Label label0 = new Label((String) null, (-2899.8F), 5.4977875F);
      assertNull(label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(5.4977875F, label0.getY(), 0.01F);
      assertEquals((-2899.8F), label0.getX(), 0.01F);
      assertNotNull(label0);
      
      Label label1 = label0.clone();
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertNull(label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(5.4977875F, label0.getY(), 0.01F);
      assertEquals((-2899.8F), label0.getX(), 0.01F);
      assertNull(label1.getText());
      assertEquals(5.4977875F, label1.getY(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals((-2899.8F), label1.getX(), 0.01F);
      assertNotNull(label1);
      
      home0.deleteLabel(label1);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(5.4977875F, label0.getY(), 0.01F);
      assertEquals((-2899.8F), label0.getX(), 0.01F);
      assertNull(label1.getText());
      assertEquals(5.4977875F, label1.getY(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals((-2899.8F), label1.getX(), 0.01F);
      
      home0.setFurnitureDescendingSorted(false);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      
      List<Camera> list0 = home0.getStoredCameras();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      home0.setStoredCameras(list0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addRoomsListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      
      home0.setName("");
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals("", home0.getName());
      
      Long long0 = Long.getLong("\u0003_");
      assertNull(long0);
      
      String string0 = home0.getName();
      assertEquals("", string0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals("", home0.getName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      // Undeclared exception!
      try { 
        Home.getFurnitureSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      home0.setBackgroundImage((BackgroundImage) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertNotNull(observerCamera0);
      
      home0.setCamera(observerCamera0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      Wall wall0 = null;
      // Undeclared exception!
      try { 
        home0.addWall((Wall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      home0.addWall(wall0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Label label0 = new Label("[`3n:", (-3663.3516F), 0.0F);
      assertEquals((-3663.3516F), label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("[`3n:", label0.getText());
      assertEquals(0.0F, label0.getY(), 0.01F);
      assertNotNull(label0);
      
      boolean boolean1 = label0.intersectsRectangle(2926.398F, (-929.0F), 2926.398F, 0.0F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((-3663.3516F), label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("[`3n:", label0.getText());
      assertEquals(0.0F, label0.getY(), 0.01F);
      
      boolean boolean2 = linkedList0.add(label0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(linkedList0.contains(label0));
      assertEquals(1, linkedList0.size());
      assertEquals((-3663.3516F), label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("[`3n:", label0.getText());
      assertEquals(0.0F, label0.getY(), 0.01F);
      
      List<Room> list0 = Home.getRoomsSubList(linkedList0);
      assertTrue(linkedList0.contains(label0));
      assertEquals(1, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Object[] objectArray0 = linkedList0.toArray();
      assertTrue(linkedList0.contains(label0));
      assertEquals(1, objectArray0.length);
      assertEquals(1, linkedList0.size());
      assertNotNull(objectArray0);
      
      Class<HomeDoorOrWindow> class0 = HomeDoorOrWindow.class;
      List<HomeDoorOrWindow> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      assertTrue(linkedList0.contains(label0));
      assertEquals(1, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertNotNull(homeEnvironment0);
      
      List<DimensionLine> list2 = Home.getDimensionLinesSubList(linkedList0);
      assertTrue(linkedList0.contains(label0));
      assertEquals(1, linkedList0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      
      List<Wall> list3 = Home.getWallsSubList(list2);
      assertTrue(linkedList0.contains(label0));
      assertEquals(1, linkedList0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertNotNull(list3);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 2926.398F, (-3663.3516F), 0.0F);
      assertEquals((-3663.3516F), sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getXAxis(), 0.01F);
      assertEquals(0.0F, sash0.getYAxis(), 0.01F);
      assertEquals(2926.398F, sash0.getWidth(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("[`3n:", temporaryURLContent0, temporaryURLContent0, 1.0F, (-3285.599F), 1.0995575F, 3700L, true, 3700L, 2926.398F, sashArray0, (Integer) null, (float[][]) null, true, 0.0F, false);
      assertEquals(1, sashArray0.length);
      assertEquals(3700.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1.0995575F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2926.398F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals("[`3n:", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-3285.599F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(3700.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      assertEquals(3700.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1.0995575F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2926.398F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals("[`3n:", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-3285.599F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(3700.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1642.7996F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("[`3n:", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(2926.398F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-3285.599F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(3700.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1.0995575F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      assertEquals(3700.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1.0995575F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2926.398F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals("[`3n:", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-3285.599F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(3700.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1642.7996F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("[`3n:", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(2926.398F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-3285.599F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(3700.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1.0995575F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1.0995575F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(3700.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1642.7996F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("[`3n:", homeDoorOrWindow1.getName());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-3285.599F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(2926.398F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow1);
      
      HomeDoorOrWindow homeDoorOrWindow2 = (HomeDoorOrWindow)homeDoorOrWindow1.clone();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(1, sashArray0.length);
      assertEquals(3700.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1.0995575F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2926.398F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals("[`3n:", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getId());
      assertEquals(1.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-3285.599F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(3700.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1642.7996F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("[`3n:", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(2926.398F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-3285.599F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(3700.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1.0995575F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1.0995575F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(3700.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1642.7996F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("[`3n:", homeDoorOrWindow1.getName());
      assertEquals(1.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-3285.599F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(2926.398F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals(1.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals((-1642.7996F), homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(1.0995575F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals("[`3n:", homeDoorOrWindow2.getName());
      assertTrue(homeDoorOrWindow2.isMovable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertEquals(2926.398F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow2.isVisible());
      assertNull(homeDoorOrWindow2.getShininess());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals((-3285.599F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow2.getDescription());
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isBackFaceShown());
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertNull(homeDoorOrWindow2.getCatalogId());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow2);
      
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture((HomePieceOfFurniture) homeDoorOrWindow2, 977);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 977, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        Home.duplicate((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Compass compass0 = home0.getCompass();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertNotNull(compass0);
      
      compass0.setX(3517.9F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(3517.9F, compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertFalse(linkedList0.contains(compass0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = linkedList0.add(compass0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(compass0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(3517.9F, compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(1, linkedList0.size());
      
      List<Selectable> list1 = Home.duplicate(linkedList0);
      assertTrue(linkedList0.contains(compass0));
      assertEquals(1, linkedList0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      Label label0 = new Label("GQO)l<b4%:|B", 1.0F, 160.0F);
      assertEquals("GQO)l<b4%:|B", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(1.0F, label0.getX(), 0.01F);
      assertEquals(160.0F, label0.getY(), 0.01F);
      assertNotNull(label0);
      
      Label label1 = label0.clone();
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertEquals("GQO)l<b4%:|B", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(1.0F, label0.getX(), 0.01F);
      assertEquals(160.0F, label0.getY(), 0.01F);
      assertEquals("GQO)l<b4%:|B", label1.getText());
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals(1.0F, label1.getX(), 0.01F);
      assertEquals(160.0F, label1.getY(), 0.01F);
      assertNotNull(label1);
      
      HomePrint homePrint0 = home0.getPrint();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(homePrint0);
      
      home0.setPrint((HomePrint) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      
      boolean boolean2 = linkedList0.add(compass0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(linkedList0.contains(compass0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(3517.9F, compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(2, linkedList0.size());
      
      home0.deleteLabel(label1);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals("GQO)l<b4%:|B", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(1.0F, label0.getX(), 0.01F);
      assertEquals(160.0F, label0.getY(), 0.01F);
      assertEquals("GQO)l<b4%:|B", label1.getText());
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals(1.0F, label1.getX(), 0.01F);
      assertEquals(160.0F, label1.getY(), 0.01F);
      
      home0.setFurnitureDescendingSorted(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      
      List<Camera> list2 = home0.getStoredCameras();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      // Undeclared exception!
      try { 
        home0.setStoredCameras((List<Camera>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture((HomePieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      Label label0 = new Label(";wl2v5/l5$I)6a", 3700L, 3700L);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(";wl2v5/l5$I)6a", label0.getText());
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertNotNull(label0);
      
      Label label1 = label0.clone();
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(";wl2v5/l5$I)6a", label0.getText());
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(3700.0F, label1.getY(), 0.01F);
      assertEquals(3700.0F, label1.getX(), 0.01F);
      assertEquals(";wl2v5/l5$I)6a", label1.getText());
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertNotNull(label1);
      
      home0.addLabel(label1);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(";wl2v5/l5$I)6a", label0.getText());
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(3700.0F, label1.getY(), 0.01F);
      assertEquals(3700.0F, label1.getX(), 0.01F);
      assertEquals(";wl2v5/l5$I)6a", label1.getText());
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.addDimensionLine((DimensionLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNotNull(home0);
      
      Level level0 = new Level("\"SLKC!,9TS", 3700L, 3803.313F, 3700L);
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals("\"SLKC!,9TS", level0.getName());
      assertEquals(3803.313F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      home0.addLevel(level0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals("\"SLKC!,9TS", level0.getName());
      assertEquals(3803.313F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      
      float[][] floatArray0 = new float[2][8];
      float[] floatArray1 = new float[1];
      floatArray1[0] = (float) 3700L;
      float[] floatArray2 = new float[6];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 3803.313F;
      floatArray2[2] = (float) 3700L;
      Room room0 = new Room(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertNotNull(room0);
      
      home0.addRoom(room0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(2, floatArray0.length);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      
      // Undeclared exception!
      try { 
        home0.clone();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertNotNull(dimensionLine0);
      
      dimensionLine0.setYStart(0.0F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getLength(), 0.01F);
      
      home0.addDimensionLine(dimensionLine0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getLength(), 0.01F);
      
      Level level0 = new Level("{O>DyGV", (-156.4764F), 3700L, 0.0F);
      assertEquals("{O>DyGV", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-156.4764F), level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("FURNITURE_DESCENDING_SORTED", propertyChangeListener0);
      assertEquals("FURNITURE_DESCENDING_SORTED", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals("{O>DyGV", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-156.4764F), level0.getElevation(), 0.01F);
      assertEquals("FURNITURE_DESCENDING_SORTED", propertyChangeListenerProxy0.getPropertyName());
      
      home0.addLevel(level0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertEquals("{O>DyGV", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-156.4764F), level0.getElevation(), 0.01F);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertNotNull(collection0);
      
      // Undeclared exception!
      try { 
        home0.clone();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNotNull(home0);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLabelsListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      
      home0.setFurnitureDescendingSorted(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Home home0 = new Home((-1952.46F));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNotNull(home0);
      
      home0.setModified(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Compass compass0 = new Compass(3700L, (-1952.46F), (-1952.46F));
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals((-1952.46F), compass0.getDiameter(), 0.01F);
      assertEquals((-1952.46F), compass0.getY(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertNotNull(compass0);
      
      boolean boolean1 = linkedList0.add(compass0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(compass0));
      assertEquals(1, linkedList0.size());
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals((-1952.46F), compass0.getDiameter(), 0.01F);
      assertEquals((-1952.46F), compass0.getY(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertTrue(linkedList0.contains(compass0));
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Label label0 = new Label("GQO)l<b4%:|B", (-473.819F), (-473.819F));
      assertEquals("GQO)l<b4%:|B", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals((-473.819F), label0.getX(), 0.01F);
      assertEquals((-473.819F), label0.getY(), 0.01F);
      assertNotNull(label0);
      
      Label label1 = label0.clone();
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertEquals("GQO)l<b4%:|B", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals((-473.819F), label0.getX(), 0.01F);
      assertEquals((-473.819F), label0.getY(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals((-473.819F), label1.getX(), 0.01F);
      assertEquals((-473.819F), label1.getY(), 0.01F);
      assertEquals("GQO)l<b4%:|B", label1.getText());
      assertNotNull(label1);
      
      HomePrint homePrint0 = home0.getPrint();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(homePrint0);
      
      home0.setPrint((HomePrint) null);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      
      boolean boolean2 = linkedList0.add(compass0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(linkedList0.contains(compass0));
      assertEquals(2, linkedList0.size());
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals((-1952.46F), compass0.getDiameter(), 0.01F);
      assertEquals((-1952.46F), compass0.getY(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      
      Home home1 = home0.clone();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals((-1952.46F), home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertNotNull(home1);
      
      home1.deleteLabel(label0);
      assertFalse(home0.equals((Object)home1));
      assertFalse(label0.equals((Object)label1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(label0, label1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals("GQO)l<b4%:|B", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals((-473.819F), label0.getX(), 0.01F);
      assertEquals((-473.819F), label0.getY(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals((-1952.46F), home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      
      home1.setFurnitureDescendingSorted(false);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals((-1952.46F), home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      
      List<Camera> list1 = home1.getStoredCameras();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals((-1952.46F), home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      Home home2 = home0.clone();
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertFalse(home2.isRecovered());
      assertNull(home2.getName());
      assertNull(home2.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home2.getWallHeight(), 0.01F);
      assertFalse(home2.isBasePlanLocked());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, home2.getVersion());
      assertTrue(home2.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNotNull(home2);
      
      home2.setName("HLof2,Ow[Q");
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertFalse(home2.isRecovered());
      assertEquals("HLof2,Ow[Q", home2.getName());
      assertNull(home2.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home2.getWallHeight(), 0.01F);
      assertFalse(home2.isBasePlanLocked());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, home2.getVersion());
      assertTrue(home2.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      
      Collection<Wall> collection0 = home0.getWalls();
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNotNull(collection0);
      
      long long0 = home2.getVersion();
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertEquals(3700L, long0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertFalse(home2.isRecovered());
      assertEquals("HLof2,Ow[Q", home2.getName());
      assertNull(home2.getFurnitureSortedProperty());
      assertEquals((-1952.46F), home2.getWallHeight(), 0.01F);
      assertFalse(home2.isBasePlanLocked());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, home2.getVersion());
      assertTrue(home2.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      
      Home home3 = new Home();
      assertFalse(home3.equals((Object)home1));
      assertFalse(home3.equals((Object)home2));
      assertFalse(home3.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home3.isRecovered());
      assertEquals(250.0F, home3.getWallHeight(), 0.01F);
      assertFalse(home3.isModified());
      assertFalse(home3.isBasePlanLocked());
      assertNull(home3.getFurnitureSortedProperty());
      assertTrue(home3.isEmpty());
      assertEquals(3700L, home3.getVersion());
      assertNull(home3.getName());
      assertFalse(home3.isFurnitureDescendingSorted());
      assertNotNull(home3);
      
      home3.setName((String) null);
      assertFalse(home3.equals((Object)home1));
      assertFalse(home3.equals((Object)home2));
      assertFalse(home3.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home3, home1);
      assertNotSame(home3, home2);
      assertNotSame(home3, home0);
      assertFalse(home3.isRecovered());
      assertEquals(250.0F, home3.getWallHeight(), 0.01F);
      assertFalse(home3.isModified());
      assertFalse(home3.isBasePlanLocked());
      assertNull(home3.getFurnitureSortedProperty());
      assertTrue(home3.isEmpty());
      assertEquals(3700L, home3.getVersion());
      assertNull(home3.getName());
      assertFalse(home3.isFurnitureDescendingSorted());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      
      String string0 = home0.getName();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Random.setNextRandom(255);
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(home0);
      
      Home.Property home_Property0 = Home.Property.NAME;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(home_Property0, (String) null, home0, home_Property0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      
      String string0 = propertyChangeEvent0.toString();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(propertyChangeEvent0.getPropertyName());
      assertNotNull(string0);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNull(propertyChangeEvent0.getPropertyName());
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNull(propertyChangeEvent0.getPropertyName());
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNull(propertyChangeEvent0.getPropertyName());
      
      List<Selectable> list0 = home0.getSelectedItems();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      home0.addPropertyChangeListener(home_Property0, propertyChangeListenerProxy0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Home home1 = new Home((-316.31738F));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals((-316.31738F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertNotNull(home1);
      
      Compass compass0 = home1.getCompass();
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home0);
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals((-316.31738F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertNotNull(compass0);
      
      boolean boolean0 = linkedList0.add(compass0);
      assertFalse(home1.equals((Object)home0));
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(compass0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home0);
      assertEquals(1, linkedList0.size());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals((-316.31738F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      
      Compass compass1 = linkedList0.pollLast();
      assertFalse(linkedList0.contains(compass1));
      assertSame(compass1, compass0);
      assertTrue(compass1.isVisible());
      assertEquals((-100.0F), compass1.getX(), 0.01F);
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals(100.0F, compass1.getDiameter(), 0.01F);
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertEquals(50.0F, compass1.getY(), 0.01F);
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals(0, linkedList0.size());
      assertNotNull(compass1);
      
      home0.setSelectedItems(linkedList0);
      assertFalse(home0.equals((Object)home1));
      assertFalse(linkedList0.contains(compass1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Random.setNextRandom(15);
      List<HomePieceOfFurniture.SortableProperty> list1 = home0.getFurnitureVisibleProperties();
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(5, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      home0.setName("'");
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertEquals("'", home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      
      home0.setName("com.eteks.sweethome3d.model.HomePieceOfFurniture$6");
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$6", home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      
      List<Level> list2 = home0.getLevels();
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$6", home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$6", home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(collection0);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$6", home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(backgroundImage0);
      
      Class<HomeFurnitureGroup> class0 = HomeFurnitureGroup.class;
      List<HomeFurnitureGroup> list3 = Home.getSubList((List<? extends Selectable>) list0, class0);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$6", home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertNotNull(list3);
      
      List<Label> list4 = Home.getLabelsSubList(list3);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$6", home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertNotNull(list4);
      
      String string1 = home0.getName();
      assertFalse(home0.equals((Object)home1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$6", string1);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$6", home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNotNull(string1);
      
      List<DimensionLine> list5 = Home.getDimensionLinesSubList(list0);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$6", home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list5.isEmpty());
      assertEquals(0, list5.size());
      assertNotNull(list5);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertNotNull(dimensionLine0);
      
      home0.deleteDimensionLine(dimensionLine0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      
      DimensionLine dimensionLine1 = new DimensionLine(3700L, 3700L, 3700L, 3700L, 3700L);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertEquals(3700.0F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getLength(), 0.01F);
      assertNotNull(dimensionLine1);
      
      long long0 = new Long(3700L);
      assertEquals(3700L, long0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      home0.setModified(true);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertNotNull(homeEnvironment0);
      
      List<Selectable> list0 = home0.getSelectedItems();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLevelsListener(collectionListener0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      
      home0.getFurnitureSortedProperty();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      
      boolean boolean0 = home0.isModified();
      assertTrue(boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      
      Class<HomeFurnitureGroup> class0 = HomeFurnitureGroup.class;
      List<HomeFurnitureGroup> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNotNull(home0);
      
      Level level0 = new Level("\"SLKC!,9TS", 3700L, 3700L, 3700L);
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals("\"SLKC!,9TS", level0.getName());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      home0.addLevel(level0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals("\"SLKC!,9TS", level0.getName());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 3700L;
      Label label0 = new Label((String) null, 3700L, 3700L);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertNull(label0.getText());
      assertNotNull(label0);
      
      label0.setAngle(3700L);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(5.4870396F, label0.getAngle(), 0.01F);
      assertNull(label0.getText());
      
      Label label1 = label0.clone();
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(5.4870396F, label0.getAngle(), 0.01F);
      assertNull(label0.getText());
      assertEquals(5.4870396F, label1.getAngle(), 0.01F);
      assertEquals(3700.0F, label1.getY(), 0.01F);
      assertEquals(3700.0F, label1.getX(), 0.01F);
      assertNull(label1.getText());
      assertNotNull(label1);
      
      home0.addLabel(label1);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(5.4870396F, label0.getAngle(), 0.01F);
      assertNull(label0.getText());
      assertEquals(5.4870396F, label1.getAngle(), 0.01F);
      assertEquals(3700.0F, label1.getY(), 0.01F);
      assertEquals(3700.0F, label1.getX(), 0.01F);
      assertNull(label1.getText());
      
      // Undeclared exception!
      try { 
        home0.clone();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Home home0 = new Home(48.616665F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(home0.isEmpty());
      assertEquals(48.616665F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNotNull(home0);
      
      DimensionLine dimensionLine0 = new DimensionLine(48.616665F, 0.0F, 3700L, (-717.0F), 0.0F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(48.616665F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3721.114F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-717.0F), dimensionLine0.getYEnd(), 0.01F);
      assertNotNull(dimensionLine0);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(48.616665F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3721.114F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-717.0F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(48.616665F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-717.0F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(3721.114F, dimensionLine1.getLength(), 0.01F);
      assertNotNull(dimensionLine1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      dimensionLine0.setYEnd((-398.6F));
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertEquals((-398.6F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(48.616665F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3673.0752F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      
      dimensionLine1.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals((-398.6F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(48.616665F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3673.0752F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(48.616665F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-717.0F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(3721.114F, dimensionLine1.getLength(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      home0.addDimensionLine(dimensionLine1);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertEquals(48.616665F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals((-398.6F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(48.616665F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3673.0752F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(48.616665F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-717.0F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(3721.114F, dimensionLine1.getLength(), 0.01F);
      
      Camera camera0 = home0.getCamera();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(48.616665F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(camera0.getName());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertNotNull(camera0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNotNull(home0);
      
      DimensionLine dimensionLine0 = null;
      // Undeclared exception!
      try { 
        home0.deleteDimensionLine((DimensionLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.setStoredCameras((List<Camera>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Home home0 = new Home();
      Label label0 = new Label((String) null, 3700L, (-2001.6139F));
      Label label1 = label0.clone();
      home0.addLabel(label1);
      Home home1 = home0.clone();
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home1.removeWallsListener(collectionListener0);
      home1.setBasePlanLocked(true);
      boolean boolean0 = home1.isEmpty();
      assertTrue(home1.isBasePlanLocked());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Home home0 = new Home();
      home0.setRecovered(true);
      long long0 = home0.getVersion();
      assertTrue(home0.isRecovered());
      assertEquals(3700L, long0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Home home0 = new Home(1447.9182F);
      home0.setBasePlanLocked(true);
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.addSelectionListener(selectionListener0);
      home0.getWalls();
      long long0 = home0.getVersion();
      assertTrue(home0.isBasePlanLocked());
      assertEquals(3700L, long0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      linkedList0.poll();
      Compass compass0 = new Compass(160.0F, 160.0F, 160.0F);
      compass0.setX((-86.15806F));
      linkedList0.add(compass0);
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertEquals(0, list0.size());
      
      Home home0 = new Home(0.0F);
      List<HomePieceOfFurniture> list1 = home0.getFurniture();
      Home home1 = new Home(list1);
      List<DimensionLine> list2 = Home.getDimensionLinesSubList(list1);
      home1.isBasePlanLocked();
      home0.setRecovered(false);
      home0.getFurniture();
      Home.getLabelsSubList(list2);
      home1.getWalls();
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home1.addLabelsListener(collectionListener0);
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Home home0 = new Home();
      home0.getFurnitureVisibleProperties();
      Compass compass0 = home0.getCompass();
      compass0.setX(3517.9F);
      Integer integer0 = new Integer((-1053));
      Wall wall0 = new Wall(160.0F, 160.0F, 160.0F, 3517.9F, 0.0F);
      Float float0 = new Float((float) (-1053));
      wall0.setHeight(float0);
      Wall wall1 = wall0.clone();
      Home home1 = new Home();
      Home home2 = home1.clone();
      home2.addWall(wall1);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall1);
      home0.clone();
      Home home3 = new Home();
      home3.getCompass();
      home0.getCompass();
      home0.clone();
      home1.getLabels();
      // Undeclared exception!
      try { 
        Home.Property.valueOf("[3b]X3(AFw!s{hu5B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Home.Property.[3b]X3(AFw!s{hu5B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Home home0 = new Home();
      Compass compass0 = home0.getCompass();
      compass0.setX(3700L);
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      linkedList0.add(compass0);
      Home.duplicate(linkedList0);
      Label label0 = new Label("", (-68.933F), 3517.9F);
      label0.clone();
      home0.deleteLabel(label0);
      home0.setFurnitureDescendingSorted(true);
      List<Camera> list0 = home0.getStoredCameras();
      home0.setStoredCameras(list0);
      home0.isEmpty();
      Home home1 = home0.clone();
      home1.getCompass();
      home1.isFurnitureDescendingSorted();
      home0.getStoredCameras();
      assertTrue(home0.isFurnitureDescendingSorted());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Home home0 = new Home();
      home0.getEnvironment();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.setFurnitureVisibleProperties((List<HomePieceOfFurniture.SortableProperty>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Home home0 = new Home();
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      home0.setFurnitureVisibleProperties(list0);
      home0.getBackgroundImage();
      home0.setBasePlanLocked(true);
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.addSelectionListener(selectionListener0);
      // Undeclared exception!
      try { 
        home0.deleteLabel((Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Home home0 = new Home();
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeDimensionLinesListener(collectionListener0);
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 3700L, 3700L, 3700L);
      Integer integer0 = new Integer((-1053));
      Wall wall1 = wall0.clone();
      home0.addWall(wall1);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall1);
      Home home1 = home0.clone();
      Home home2 = new Home();
      home2.getCompass();
      Compass compass0 = home2.getCompass();
      assertTrue(compass0.isVisible());
      
      Home home3 = home0.clone();
      home1.getLabels();
      long long0 = home3.getVersion();
      assertEquals(3700L, long0);
      
      home2.getLabels();
      float[][] floatArray0 = new float[5][7];
      float[] floatArray1 = new float[8];
      floatArray1[0] = (float) 3700L;
      floatArray1[1] = (float) 3700L;
      floatArray1[2] = (float) 3700L;
      floatArray1[3] = 13.75F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = (float) 3700L;
      floatArray1[6] = (float) (-1053);
      floatArray1[7] = (float) 3700L;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[0] = 3979.15F;
      floatArray2[1] = (float) 3700L;
      floatArray2[2] = (float) 3700L;
      floatArray2[3] = (float) 3700L;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = (float) 3700L;
      floatArray3[1] = (float) (-1053);
      floatArray3[2] = (float) (-1053);
      floatArray3[3] = (float) 3700L;
      floatArray3[4] = (float) 3700L;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[5];
      floatArray4[0] = 3979.15F;
      floatArray4[1] = 3979.15F;
      floatArray4[2] = 3979.15F;
      floatArray4[3] = (float) 3700L;
      floatArray4[4] = 13.75F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[0];
      floatArray0[4] = floatArray5;
      Room room0 = new Room(floatArray0);
      Room room1 = room0.clone();
      home1.addRoom(room1, 0);
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Home home0 = new Home(1447.9182F);
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      String string0 = "a12[dx";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a12[dx");
      home0.setCamera(observerCamera0);
      home0.getRooms();
      home0.getLevels();
      Home home1 = home0.clone();
      home1.isRecovered();
      home1.getWallHeight();
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      linkedList0.poll();
      Compass compass0 = new Compass(160.0F, 160.0F, 160.0F);
      compass0.setX((-86.15806F));
      linkedList0.add(compass0);
      List<Selectable> list0 = Home.duplicate(linkedList0);
      Home home0 = new Home(0.0F);
      List<HomePieceOfFurniture> list1 = home0.getFurniture();
      Home home1 = new Home(list1);
      List<DimensionLine> list2 = Home.getDimensionLinesSubList(list1);
      Class<DimensionLine> class0 = DimensionLine.class;
      Home.getSubList((List<? extends Selectable>) list0, class0);
      Class<Compass> class1 = Compass.class;
      Home.getSubList((List<? extends Selectable>) linkedList0, class1);
      Class<HomeDoorOrWindow> class2 = HomeDoorOrWindow.class;
      Home.getSubList((List<? extends Selectable>) list2, class2);
      List<Wall> list3 = Home.getWallsSubList(linkedList0);
      assertEquals(0, list3.size());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Home home0 = new Home();
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      home0.setSelectedItems(linkedList0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Home home0 = new Home();
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      Home home1 = new Home(list0);
      Level level0 = new Level("SELECTED_LEVEL", 3803.313F, 3803.313F, (-1850.52F));
      Level level1 = level0.clone();
      level1.setFloorThickness(0.0F);
      home1.addLevel(level1);
      home1.addLevel(level1);
      home0.setFurnitureDescendingSorted(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        Home.getLevelsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Home home0 = new Home(1447.9182F);
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 3700L, 3700L, 3700L, 3700L);
      home0.addDimensionLine(dimensionLine0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a12[dx");
      home0.getRooms();
      home0.getLevels();
      Home home1 = home0.clone();
      home1.isRecovered();
      List<HomePieceOfFurniture.SortableProperty> list0 = home1.getFurnitureVisibleProperties();
      home1.setFurnitureVisibleProperties(list0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String string0 = "";
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Home home0 = new Home((-1032.0F));
      Home home1 = home0.clone();
      List<HomePieceOfFurniture> list0 = home1.getFurniture();
      Home home2 = new Home(list0);
      home1.getSelectedItems();
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(list0, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Home home0 = new Home(1447.9182F);
      home0.setBasePlanLocked(true);
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.addSelectionListener(selectionListener0);
      home0.getWalls();
      List<Camera> list0 = home0.getStoredCameras();
      home0.setStoredCameras(list0);
      home0.isEmpty();
      home0.getVisualProperty((String) null);
      assertTrue(home0.isBasePlanLocked());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Home home0 = new Home();
      float[][] floatArray0 = new float[8][8];
      Room room0 = new Room(floatArray0);
      home0.addRoom(room0);
      home0.deleteRoom(room0);
      assertTrue(home0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Home home0 = new Home();
      home0.deletePieceOfFurniture((HomePieceOfFurniture) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Home home0 = new Home((-1952.46F));
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeDimensionLinesListener(collectionListener0);
      assertTrue(home0.isEmpty());
      
      Wall wall0 = new Wall((-1952.46F), (-1020.7F), (-1020.7F), 3700L, (-2433.4F), (-1020.7F));
      Float float0 = new Float((double) 3700L);
      Integer integer0 = new Integer(1698);
      Float float1 = new Float((-1020.7F));
      wall0.setHeight(float1);
      home0.addWall(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall wall1 = wall0.clone();
      wall1.setYStart(17.483334F);
      linkedList0.add(wall1);
      linkedList0.add(wall1);
      linkedList0.pollFirst();
      Class<HomeFurnitureGroup> class0 = HomeFurnitureGroup.class;
      Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      Home.getWallsSubList(linkedList0);
      home0.getWallHeight();
      home0.setName("");
      List<Camera> list0 = home0.getStoredCameras();
      home0.setStoredCameras(list0);
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      
      List<HomePieceOfFurniture> list1 = home0.getFurniture();
      Home home1 = new Home(list1);
      home1.clone();
      List<Room> list2 = home1.getRooms();
      Home.getRoomsSubList(list2);
      assertEquals((-1952.46F), home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Home home0 = new Home();
      Compass compass0 = home0.getCompass();
      assertTrue(compass0.isVisible());
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      home0.setStoredCameras(linkedList0);
      Home home1 = new Home();
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
  }
}
