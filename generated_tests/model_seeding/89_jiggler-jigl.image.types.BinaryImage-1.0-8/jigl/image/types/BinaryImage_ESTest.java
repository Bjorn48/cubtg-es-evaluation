/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 00:05:29 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.ImageProducer;
import javax.swing.JLayeredPane;
import jigl.image.Image;
import jigl.image.ROI;
import jigl.image.types.BinaryImage;
import jigl.image.types.ComplexImage;
import jigl.image.types.GrayImage;
import jigl.image.types.ImageKernel;
import jigl.image.types.KernelType;
import jigl.image.types.PowerImage;
import jigl.image.types.RealGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryImage_ESTest extends BinaryImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[][] byteArray0 = new byte[7][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(7, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(7, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertEquals(28, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(7, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(7, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals(28, binaryImage1.count());
      assertEquals(7, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = new BinaryImage();
      // Undeclared exception!
      try { 
        binaryImage1.difference(binaryImage2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      byte[][] byteArray0 = new byte[19][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.compliment();
      BinaryImage binaryImage1 = new BinaryImage(byteArray0);
      binaryImage1.intersection(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      // Undeclared exception!
      try { 
        binaryImage0.get((-1235), (-1235));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-28);
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-37);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(3286, 3286, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage0.difference(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[][] byteArray0 = new byte[0][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      BinaryImage binaryImage2 = binaryImage1.intersection(binaryImage0);
      binaryImage0.Y();
      binaryImage0.getJavaImage();
      binaryImage0.difference(binaryImage1);
      byte byte0 = (byte) (-65);
      Byte byte1 = new Byte((byte) (-71));
      byte1.byteValue();
      ROI rOI0 = new ROI();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ly();
      // Undeclared exception!
      try { 
        binaryImage2.set(0, 0, (Byte) (byte) (-71), rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.Y();
      BinaryImage binaryImage1 = binaryImage0.union(binaryImage0);
      binaryImage1.toString();
      binaryImage1.shift(1, 0);
      binaryImage0.shift(0, 1111);
      binaryImage1.union(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((byte[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[][] byteArray0 = new byte[0][9];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage1.getJavaImage();
      binaryImage0.Y();
      Byte byte0 = binaryImage0.max();
      binaryImage1.Y();
      binaryImage0.union(binaryImage1);
      int int0 = 9;
      // Undeclared exception!
      try { 
        binaryImage0.set(0, 9, byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      BinaryImage binaryImage2 = binaryImage1.intersection(binaryImage0);
      binaryImage2.toString();
      binaryImage0.Y();
      binaryImage1.shift(1, 1);
      ROI rOI0 = new ROI();
      rOI0.X();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      BinaryImage binaryImage3 = new BinaryImage(1, 1);
      binaryImage2.X();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2697, 2697);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      byte[][] byteArray0 = new byte[8][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      ROI rOI0 = new ROI();
      rOI0.X();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      binaryImage1.shift((-634), 155);
      BinaryImage binaryImage2 = new BinaryImage(binaryImage1);
      binaryImage0.shift(0, 1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.shift(0, 0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 2800;
      BinaryImage binaryImage0 = new BinaryImage(16, 2800);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(16, binaryImage0.X());
      assertEquals(2800, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(16, binaryImage0.X());
      assertEquals(2800, binaryImage0.Y());
      assertEquals(2800, binaryImage1.Y());
      assertEquals(16, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      // Undeclared exception!
      binaryImage0.intersection(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(672, 672);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(672, binaryImage0.Y());
      assertEquals(672, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(672, binaryImage0.Y());
      assertEquals(672, binaryImage0.X());
      assertEquals(672, binaryImage1.X());
      assertEquals(672, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      // Undeclared exception!
      binaryImage1.shift(4895, 672);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(35, 35);
      assertEquals(35, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(35, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      ROI rOI0 = new ROI(240, 854, 240, 854);
      assertEquals(1, rOI0.Y());
      assertEquals(854, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(240, rOI0.lx());
      assertEquals(854, rOI0.ly());
      assertEquals(240, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(854, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(240, rOI0.lx());
      assertEquals(854, rOI0.ly());
      assertEquals(240, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(1, rOI0.Y());
      assertEquals(854, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(240, rOI0.lx());
      assertEquals(854, rOI0.ly());
      assertEquals(240, rOI0.ux());
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(854, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(240, rOI0.lx());
      assertEquals(854, rOI0.ly());
      assertEquals(240, rOI0.ux());
      assertEquals(1, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 854
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      int int0 = binaryImage0.Y();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, int0);
      
      byte byte0 = (byte)98;
      Byte byte1 = new Byte((byte)98);
      assertEquals((byte)98, (byte)byte1);
      assertNotNull(byte1);
      assertTrue(byte1.equals((Object)byte0));
      
      byte byte2 = byte1.byteValue();
      assertEquals((byte)98, byte2);
      assertTrue(byte1.equals((Object)byte0));
      assertTrue(byte2 == byte0);
      
      // Undeclared exception!
      try { 
        binaryImage0.clear((Byte) (byte)98);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(72, 72);
      assertEquals(72, binaryImage0.X());
      assertEquals(72, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.shift(72, 72);
      assertEquals(72, binaryImage0.X());
      assertEquals(72, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(72, binaryImage1.Y());
      assertEquals(72, binaryImage1.X());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      byte[][] byteArray0 = new byte[5][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(5, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(5, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals(5, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(5, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(5, byteArray0.length);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      Image image0 = binaryImage1.copy(rOI0);
      assertEquals(5, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(5, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, image0.Y());
      assertEquals(1, image0.X());
      assertEquals(5, byteArray0.length);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotNull(image0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[][] byteArray0 = new byte[7][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals(7, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(7, byteArray0.length);
      assertNotNull(binaryImage0);
      
      int int0 = binaryImage0.count();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals(7, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(7, byteArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-1);
      BinaryImage binaryImage0 = new BinaryImage(2506, 0, byteArray0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2506, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertArrayEquals(new byte[] {(byte) (-1)}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
      
      // Undeclared exception!
      try { 
        binaryImage0.get((-73), (-73));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      byte[][] byteArray0 = new byte[13][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(13, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(13, byteArray0.length);
      assertNotNull(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      byte[][] byteArray0 = new byte[5][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(0, binaryImage0.count());
      assertEquals(5, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(5, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertEquals(5, binaryImage0.Y());
      assertEquals(20, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(5, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(20, binaryImage1.count());
      assertEquals(5, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = binaryImage0.intersection(binaryImage1);
      assertEquals(5, binaryImage0.Y());
      assertEquals(20, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(5, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(20, binaryImage1.count());
      assertEquals(20, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(5, binaryImage2.Y());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(5, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertNotNull(binaryImage2);
      
      BinaryImage binaryImage3 = binaryImage2.compliment();
      assertEquals(0, binaryImage0.count());
      assertEquals(5, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(5, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(5, binaryImage2.Y());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage3.count());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(5, binaryImage3.Y());
      assertEquals(4, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(5, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage3);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage2);
      assertNotNull(binaryImage3);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.intersection(binaryImage0);
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = binaryImage0.shift((-1662), 0);
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(4, binaryImage2.X());
      assertEquals(1, byteArray0.length);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotNull(binaryImage2);
      
      BinaryImage binaryImage3 = binaryImage0.shift(0, 117);
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(4, binaryImage3.X());
      assertEquals(1, byteArray0.length);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage0);
      assertNotNull(binaryImage3);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      byte[][] byteArray0 = new byte[5][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(5, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(5, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals(5, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(5, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals(5, byteArray0.length);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      rOI0.setROI(1, 1, (-1525), 1);
      assertEquals(1, rOI0.lx());
      assertEquals((-1525), rOI0.ux());
      assertEquals(1527, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.Y());
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertNotNull(binaryImage0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = byte0.byteValue();
      assertEquals((byte) (-1), byte1);
      
      // Undeclared exception!
      try { 
        binaryImage0.set(4913, 0, (Byte) (byte) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      byte[][] byteArray0 = new byte[7][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(7, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(7, byteArray0.length);
      assertNotNull(binaryImage0);
      
      Image image0 = binaryImage0.copy();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(7, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, image0.X());
      assertEquals(7, image0.Y());
      assertEquals(7, byteArray0.length);
      assertNotSame(binaryImage0, image0);
      assertNotNull(image0);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertEquals(28, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(7, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(7, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(28, binaryImage1.count());
      assertEquals(7, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      
      BinaryImage binaryImage2 = binaryImage1.shift(0, 0);
      assertEquals(28, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(7, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(7, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(28, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(7, binaryImage2.Y());
      assertEquals(28, binaryImage2.count());
      assertEquals(4, binaryImage2.X());
      assertEquals(7, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image0));
      
      // Undeclared exception!
      try { 
        binaryImage1.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(255, 148);
      assertEquals(148, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(255, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals(148, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(255, binaryImage0.X());
      assertEquals(148, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(255, binaryImage1.X());
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      // Undeclared exception!
      binaryImage1.count();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((-54), (-54));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
      
      int int0 = binaryImage0.Y();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals(1, byteArray0.length);
      assertEquals(1, int0);
      
      BinaryImage binaryImage1 = binaryImage0.difference(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals(1, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = new BinaryImage(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      
      BinaryImage binaryImage3 = binaryImage2.difference(binaryImage1);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(1, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(4, binaryImage3.X());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage3);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage2);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      
      Image image0 = binaryImage2.copy();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(4, image0.X());
      assertEquals(1, image0.Y());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotNull(image0);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      
      int int1 = binaryImage2.Y();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(1, byteArray0.length);
      assertEquals(1, int1);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertTrue(int1 == int0);
      
      int int2 = binaryImage3.count();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(1, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(4, binaryImage3.X());
      assertEquals(1, byteArray0.length);
      assertEquals(0, int2);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, image0);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)image0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      BinaryImage binaryImage4 = binaryImage3.shift(0, 0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(1, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(4, binaryImage3.X());
      assertEquals(4, binaryImage4.X());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(0, binaryImage4.count());
      assertEquals(1, binaryImage4.Y());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage4);
      assertSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertSame(binaryImage3, binaryImage4);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, image0);
      assertNotSame(binaryImage4, image0);
      assertNotSame(binaryImage4, binaryImage0);
      assertSame(binaryImage4, binaryImage3);
      assertNotSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage2);
      assertNotNull(binaryImage4);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)image0));
      assertFalse(binaryImage4.equals((Object)image0));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      byte[][] byteArray0 = new byte[5][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(5, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(5, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(5, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(5, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(5, byteArray0.length);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      BinaryImage binaryImage2 = binaryImage1.shift((-634), 155);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(5, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(5, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(5, binaryImage2.Y());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(5, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      
      BinaryImage binaryImage3 = new BinaryImage(binaryImage1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(5, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(5, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(5, binaryImage3.Y());
      assertEquals(4, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(0, binaryImage3.count());
      assertEquals(5, byteArray0.length);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      
      String string0 = binaryImage3.toString();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(5, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(5, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(5, binaryImage3.Y());
      assertEquals(4, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(0, binaryImage3.count());
      assertEquals(5, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage1, binaryImage3);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotNull(string0);
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      
      BinaryImage binaryImage4 = binaryImage0.shift(9, 1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(5, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(5, binaryImage4.Y());
      assertEquals(4, binaryImage4.X());
      assertEquals(0, binaryImage4.count());
      assertEquals(5, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage4, binaryImage1);
      assertNotSame(binaryImage4, binaryImage3);
      assertSame(binaryImage4, binaryImage0);
      assertNotSame(binaryImage4, binaryImage2);
      assertNotNull(binaryImage4);
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      
      // Undeclared exception!
      try { 
        binaryImage2.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      BinaryImage binaryImage2 = binaryImage1.intersection(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      
      int int0 = binaryImage0.Y();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals(1, byteArray0.length);
      assertEquals(1, int0);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      
      BinaryImage binaryImage3 = binaryImage0.difference(binaryImage1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage3.Y());
      assertEquals(4, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(0, binaryImage3.count());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      
      Byte byte0 = Byte.valueOf((byte) (-65));
      assertEquals((byte) (-65), (byte)byte0);
      assertNotNull(byte0);
      
      Integer integer0 = new Integer((byte) (-65));
      assertEquals((-65), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      BinaryImage binaryImage4 = binaryImage1.shift((byte) (-65), 160);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(1, binaryImage4.Y());
      assertEquals(0, binaryImage4.count());
      assertEquals(4, binaryImage4.X());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage4, binaryImage0);
      assertSame(binaryImage4, binaryImage2);
      assertSame(binaryImage4, binaryImage1);
      assertNotSame(binaryImage4, binaryImage3);
      assertNotNull(binaryImage4);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      
      BinaryImage binaryImage5 = binaryImage4.shift(2783, 3286);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(1, binaryImage4.Y());
      assertEquals(0, binaryImage4.count());
      assertEquals(4, binaryImage4.X());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(1, binaryImage5.Y());
      assertEquals(0, binaryImage5.count());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals(4, binaryImage5.X());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage0, binaryImage5);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage5);
      assertNotSame(binaryImage4, binaryImage0);
      assertSame(binaryImage4, binaryImage2);
      assertSame(binaryImage4, binaryImage5);
      assertSame(binaryImage4, binaryImage1);
      assertNotSame(binaryImage4, binaryImage3);
      assertNotSame(binaryImage5, binaryImage0);
      assertSame(binaryImage5, binaryImage1);
      assertNotSame(binaryImage5, binaryImage3);
      assertSame(binaryImage5, binaryImage4);
      assertSame(binaryImage5, binaryImage2);
      assertNotNull(binaryImage5);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage5.equals((Object)binaryImage0));
      assertFalse(binaryImage5.equals((Object)binaryImage3));
      
      BinaryImage binaryImage6 = new BinaryImage(binaryImage4);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(1, binaryImage4.Y());
      assertEquals(0, binaryImage4.count());
      assertEquals(4, binaryImage4.X());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals((byte)0, (byte)binaryImage6.min());
      assertEquals(4, binaryImage6.X());
      assertEquals((byte)1, (byte)binaryImage6.max());
      assertEquals(1, binaryImage6.Y());
      assertEquals(0, binaryImage6.count());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage6);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage0.equals((Object)binaryImage5));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage6.equals((Object)binaryImage4));
      assertFalse(binaryImage6.equals((Object)binaryImage2));
      assertFalse(binaryImage6.equals((Object)binaryImage0));
      assertFalse(binaryImage6.equals((Object)binaryImage5));
      assertFalse(binaryImage6.equals((Object)binaryImage1));
      assertFalse(binaryImage6.equals((Object)binaryImage3));
      
      BinaryImage binaryImage7 = binaryImage2.shift((-1), (-1));
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(4, binaryImage7.X());
      assertEquals((byte)1, (byte)binaryImage7.max());
      assertEquals((byte)0, (byte)binaryImage7.min());
      assertEquals(0, binaryImage7.count());
      assertEquals(1, binaryImage7.Y());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage0, binaryImage5);
      assertNotSame(binaryImage0, binaryImage6);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage7);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage7);
      assertNotSame(binaryImage1, binaryImage6);
      assertSame(binaryImage1, binaryImage5);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage6);
      assertSame(binaryImage2, binaryImage4);
      assertSame(binaryImage2, binaryImage5);
      assertSame(binaryImage2, binaryImage7);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage3);
      assertSame(binaryImage7, binaryImage2);
      assertNotSame(binaryImage7, binaryImage3);
      assertSame(binaryImage7, binaryImage4);
      assertNotSame(binaryImage7, binaryImage0);
      assertSame(binaryImage7, binaryImage1);
      assertSame(binaryImage7, binaryImage5);
      assertNotSame(binaryImage7, binaryImage6);
      assertNotNull(binaryImage7);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage0.equals((Object)binaryImage6));
      assertFalse(binaryImage0.equals((Object)binaryImage5));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)binaryImage6));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage6));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage7.equals((Object)binaryImage3));
      assertFalse(binaryImage7.equals((Object)binaryImage0));
      assertFalse(binaryImage7.equals((Object)binaryImage6));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(854, 854, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((GrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      BinaryImage binaryImage2 = new BinaryImage(byteArray0);
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.count());
      assertEquals(4, binaryImage2.X());
      assertEquals(1, binaryImage2.Y());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      
      BinaryImage binaryImage3 = binaryImage0.intersection(binaryImage2);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.count());
      assertEquals(4, binaryImage2.X());
      assertEquals(1, binaryImage2.Y());
      assertEquals(1, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(4, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage0);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      
      String string0 = binaryImage0.toString();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotNull(string0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      
      BinaryImage binaryImage4 = binaryImage3.shift((-539), (-539));
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.count());
      assertEquals(4, binaryImage2.X());
      assertEquals(1, binaryImage2.Y());
      assertEquals(1, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(4, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(4, binaryImage4.X());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(0, binaryImage4.count());
      assertEquals(1, binaryImage4.Y());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage4);
      assertNotSame(binaryImage2, binaryImage0);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage4);
      assertSame(binaryImage4, binaryImage3);
      assertNotSame(binaryImage4, binaryImage2);
      assertNotSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage0);
      assertNotNull(binaryImage4);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      
      BinaryImage binaryImage5 = binaryImage4.shift((-539), (-539));
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.count());
      assertEquals(4, binaryImage2.X());
      assertEquals(1, binaryImage2.Y());
      assertEquals(1, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(4, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(4, binaryImage4.X());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(0, binaryImage4.count());
      assertEquals(1, binaryImage4.Y());
      assertEquals(4, binaryImage5.X());
      assertEquals(1, binaryImage5.Y());
      assertEquals(0, binaryImage5.count());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage5);
      assertSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage5);
      assertNotSame(binaryImage2, binaryImage4);
      assertNotSame(binaryImage2, binaryImage0);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage5);
      assertSame(binaryImage3, binaryImage4);
      assertSame(binaryImage4, binaryImage5);
      assertSame(binaryImage4, binaryImage3);
      assertNotSame(binaryImage4, binaryImage2);
      assertNotSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage0);
      assertNotSame(binaryImage5, binaryImage1);
      assertSame(binaryImage5, binaryImage0);
      assertSame(binaryImage5, binaryImage3);
      assertSame(binaryImage5, binaryImage4);
      assertNotSame(binaryImage5, binaryImage2);
      assertNotNull(binaryImage5);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)binaryImage4));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage5.equals((Object)binaryImage1));
      assertFalse(binaryImage5.equals((Object)binaryImage2));
      
      BinaryImage binaryImage6 = new BinaryImage(binaryImage2);
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.count());
      assertEquals(4, binaryImage2.X());
      assertEquals(1, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage6.max());
      assertEquals(4, binaryImage6.X());
      assertEquals((byte)0, (byte)binaryImage6.min());
      assertEquals(1, binaryImage6.Y());
      assertEquals(0, binaryImage6.count());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage6);
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)binaryImage5));
      assertFalse(binaryImage2.equals((Object)binaryImage4));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage6.equals((Object)binaryImage1));
      assertFalse(binaryImage6.equals((Object)binaryImage5));
      assertFalse(binaryImage6.equals((Object)binaryImage4));
      assertFalse(binaryImage6.equals((Object)binaryImage2));
      assertFalse(binaryImage6.equals((Object)binaryImage3));
      assertFalse(binaryImage6.equals((Object)binaryImage0));
      
      BinaryImage binaryImage7 = binaryImage5.shift((-539), 2428);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.count());
      assertEquals(4, binaryImage2.X());
      assertEquals(1, binaryImage2.Y());
      assertEquals(1, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(4, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(4, binaryImage4.X());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(0, binaryImage4.count());
      assertEquals(1, binaryImage4.Y());
      assertEquals(4, binaryImage5.X());
      assertEquals(1, binaryImage5.Y());
      assertEquals(0, binaryImage5.count());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals(1, binaryImage7.Y());
      assertEquals(0, binaryImage7.count());
      assertEquals(4, binaryImage7.X());
      assertEquals((byte)0, (byte)binaryImage7.min());
      assertEquals((byte)1, (byte)binaryImage7.max());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage6);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage7);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage5);
      assertSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage2, binaryImage6);
      assertNotSame(binaryImage2, binaryImage7);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage5);
      assertNotSame(binaryImage2, binaryImage4);
      assertNotSame(binaryImage2, binaryImage0);
      assertSame(binaryImage3, binaryImage7);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage6);
      assertSame(binaryImage3, binaryImage5);
      assertSame(binaryImage3, binaryImage4);
      assertSame(binaryImage4, binaryImage5);
      assertSame(binaryImage4, binaryImage7);
      assertSame(binaryImage4, binaryImage3);
      assertNotSame(binaryImage4, binaryImage6);
      assertNotSame(binaryImage4, binaryImage2);
      assertNotSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage0);
      assertNotSame(binaryImage5, binaryImage1);
      assertNotSame(binaryImage5, binaryImage6);
      assertSame(binaryImage5, binaryImage0);
      assertSame(binaryImage5, binaryImage3);
      assertSame(binaryImage5, binaryImage4);
      assertSame(binaryImage5, binaryImage7);
      assertNotSame(binaryImage5, binaryImage2);
      assertNotSame(binaryImage7, binaryImage2);
      assertSame(binaryImage7, binaryImage3);
      assertNotSame(binaryImage7, binaryImage1);
      assertSame(binaryImage7, binaryImage0);
      assertNotSame(binaryImage7, binaryImage6);
      assertSame(binaryImage7, binaryImage5);
      assertSame(binaryImage7, binaryImage4);
      assertNotNull(binaryImage7);
      assertFalse(binaryImage0.equals((Object)binaryImage6));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage6));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)binaryImage5));
      assertFalse(binaryImage2.equals((Object)binaryImage4));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage6));
      assertFalse(binaryImage4.equals((Object)binaryImage6));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage5.equals((Object)binaryImage1));
      assertFalse(binaryImage5.equals((Object)binaryImage6));
      assertFalse(binaryImage5.equals((Object)binaryImage2));
      assertFalse(binaryImage7.equals((Object)binaryImage2));
      assertFalse(binaryImage7.equals((Object)binaryImage1));
      assertFalse(binaryImage7.equals((Object)binaryImage6));
      
      BinaryImage binaryImage8 = binaryImage0.compliment();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(1, binaryImage8.Y());
      assertEquals(4, binaryImage8.X());
      assertEquals(4, binaryImage8.count());
      assertEquals((byte)1, (byte)binaryImage8.max());
      assertEquals((byte)0, (byte)binaryImage8.min());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage6);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage8);
      assertSame(binaryImage0, binaryImage7);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage5);
      assertSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage8, binaryImage5);
      assertSame(binaryImage8, binaryImage4);
      assertSame(binaryImage8, binaryImage7);
      assertSame(binaryImage8, binaryImage3);
      assertNotSame(binaryImage8, binaryImage6);
      assertSame(binaryImage8, binaryImage0);
      assertNotSame(binaryImage8, binaryImage1);
      assertNotSame(binaryImage8, binaryImage2);
      assertNotNull(binaryImage8);
      assertFalse(binaryImage0.equals((Object)binaryImage6));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage8.equals((Object)binaryImage6));
      assertFalse(binaryImage8.equals((Object)binaryImage1));
      assertFalse(binaryImage8.equals((Object)binaryImage2));
      
      BinaryImage binaryImage9 = binaryImage6.union(binaryImage3);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(4, binaryImage2.count());
      assertEquals(4, binaryImage2.X());
      assertEquals(1, binaryImage2.Y());
      assertEquals(1, binaryImage3.Y());
      assertEquals(4, binaryImage3.count());
      assertEquals(4, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage6.max());
      assertEquals(4, binaryImage6.X());
      assertEquals((byte)0, (byte)binaryImage6.min());
      assertEquals(4, binaryImage6.count());
      assertEquals(1, binaryImage6.Y());
      assertEquals((byte)0, (byte)binaryImage9.min());
      assertEquals(4, binaryImage9.X());
      assertEquals((byte)1, (byte)binaryImage9.max());
      assertEquals(4, binaryImage9.count());
      assertEquals(1, binaryImage9.Y());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage6);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage8);
      assertNotSame(binaryImage0, binaryImage9);
      assertSame(binaryImage0, binaryImage7);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage5);
      assertSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage2, binaryImage6);
      assertNotSame(binaryImage2, binaryImage7);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage5);
      assertNotSame(binaryImage2, binaryImage4);
      assertNotSame(binaryImage2, binaryImage8);
      assertNotSame(binaryImage2, binaryImage9);
      assertNotSame(binaryImage2, binaryImage0);
      assertSame(binaryImage3, binaryImage7);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage9);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage6);
      assertSame(binaryImage3, binaryImage5);
      assertSame(binaryImage3, binaryImage4);
      assertSame(binaryImage3, binaryImage8);
      assertNotSame(binaryImage6, binaryImage1);
      assertSame(binaryImage6, binaryImage9);
      assertNotSame(binaryImage6, binaryImage5);
      assertNotSame(binaryImage6, binaryImage4);
      assertNotSame(binaryImage6, binaryImage8);
      assertNotSame(binaryImage6, binaryImage2);
      assertNotSame(binaryImage6, binaryImage3);
      assertNotSame(binaryImage6, binaryImage0);
      assertNotSame(binaryImage6, binaryImage7);
      assertNotSame(binaryImage9, binaryImage8);
      assertNotSame(binaryImage9, binaryImage2);
      assertNotSame(binaryImage9, binaryImage5);
      assertNotSame(binaryImage9, binaryImage4);
      assertNotSame(binaryImage9, binaryImage7);
      assertNotSame(binaryImage9, binaryImage1);
      assertNotSame(binaryImage9, binaryImage3);
      assertSame(binaryImage9, binaryImage6);
      assertNotSame(binaryImage9, binaryImage0);
      assertNotNull(binaryImage9);
      assertFalse(binaryImage0.equals((Object)binaryImage6));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage6));
      assertFalse(binaryImage2.equals((Object)binaryImage7));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)binaryImage5));
      assertFalse(binaryImage2.equals((Object)binaryImage4));
      assertFalse(binaryImage2.equals((Object)binaryImage8));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage6));
      assertFalse(binaryImage6.equals((Object)binaryImage1));
      assertFalse(binaryImage6.equals((Object)binaryImage5));
      assertFalse(binaryImage6.equals((Object)binaryImage4));
      assertFalse(binaryImage6.equals((Object)binaryImage8));
      assertFalse(binaryImage6.equals((Object)binaryImage2));
      assertFalse(binaryImage6.equals((Object)binaryImage3));
      assertFalse(binaryImage6.equals((Object)binaryImage0));
      assertFalse(binaryImage6.equals((Object)binaryImage7));
      assertFalse(binaryImage9.equals((Object)binaryImage8));
      assertFalse(binaryImage9.equals((Object)binaryImage2));
      assertFalse(binaryImage9.equals((Object)binaryImage5));
      assertFalse(binaryImage9.equals((Object)binaryImage4));
      assertFalse(binaryImage9.equals((Object)binaryImage7));
      assertFalse(binaryImage9.equals((Object)binaryImage1));
      assertFalse(binaryImage9.equals((Object)binaryImage3));
      assertFalse(binaryImage9.equals((Object)binaryImage0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertNotNull(binaryImage0);
      
      Byte byte0 = binaryImage0.min();
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      // Undeclared exception!
      try { 
        binaryImage1.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
      
      // Undeclared exception!
      try { 
        binaryImage0.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(2979, 16);
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(2979, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      Byte byte0 = Byte.valueOf((byte) (-68));
      assertEquals((byte) (-68), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        binaryImage0.clear(byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(1658, 1658);
      assertEquals(1658, binaryImage0.Y());
      assertEquals(1658, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(byteArray0);
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(4, binaryImage1.X());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      // Undeclared exception!
      try { 
        binaryImage0.union(binaryImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(byteArray0);
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      BinaryImage binaryImage2 = new BinaryImage(binaryImage1);
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(1, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      
      BinaryImage binaryImage3 = new BinaryImage(byteArray0);
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(1, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(4, binaryImage3.X());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      
      BinaryImage binaryImage4 = binaryImage1.intersection(binaryImage3);
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(1, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(4, binaryImage3.X());
      assertEquals(4, binaryImage4.X());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(0, binaryImage4.count());
      assertEquals(1, binaryImage4.Y());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage4);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage4, binaryImage2);
      assertNotSame(binaryImage4, binaryImage3);
      assertSame(binaryImage4, binaryImage1);
      assertNotSame(binaryImage4, binaryImage0);
      assertNotNull(binaryImage4);
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      
      ImageProducer imageProducer0 = binaryImage3.getJavaImage();
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(1, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(4, binaryImage3.X());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage4);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotNull(imageProducer0);
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage4));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      
      BinaryImage binaryImage5 = new BinaryImage(binaryImage1);
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals(4, binaryImage5.X());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals(0, binaryImage5.count());
      assertEquals(1, binaryImage5.Y());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage5);
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage5.equals((Object)binaryImage2));
      assertFalse(binaryImage5.equals((Object)binaryImage1));
      assertFalse(binaryImage5.equals((Object)binaryImage4));
      assertFalse(binaryImage5.equals((Object)binaryImage0));
      assertFalse(binaryImage5.equals((Object)binaryImage3));
      
      BinaryImage binaryImage6 = binaryImage5.difference(binaryImage1);
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals(4, binaryImage5.X());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals(0, binaryImage5.count());
      assertEquals(1, binaryImage5.Y());
      assertEquals((byte)0, (byte)binaryImage6.min());
      assertEquals(4, binaryImage6.X());
      assertEquals((byte)1, (byte)binaryImage6.max());
      assertEquals(1, binaryImage6.Y());
      assertEquals(0, binaryImage6.count());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, binaryImage6);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage1, binaryImage5);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage5, binaryImage2);
      assertNotSame(binaryImage5, binaryImage1);
      assertNotSame(binaryImage5, binaryImage4);
      assertNotSame(binaryImage5, binaryImage0);
      assertSame(binaryImage5, binaryImage6);
      assertNotSame(binaryImage5, binaryImage3);
      assertNotSame(binaryImage6, binaryImage0);
      assertNotSame(binaryImage6, binaryImage1);
      assertNotSame(binaryImage6, binaryImage4);
      assertSame(binaryImage6, binaryImage5);
      assertNotSame(binaryImage6, binaryImage2);
      assertNotSame(binaryImage6, binaryImage3);
      assertNotNull(binaryImage6);
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)binaryImage5));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage5.equals((Object)binaryImage2));
      assertFalse(binaryImage5.equals((Object)binaryImage1));
      assertFalse(binaryImage5.equals((Object)binaryImage4));
      assertFalse(binaryImage5.equals((Object)binaryImage0));
      assertFalse(binaryImage5.equals((Object)binaryImage3));
      assertFalse(binaryImage6.equals((Object)binaryImage0));
      assertFalse(binaryImage6.equals((Object)binaryImage1));
      assertFalse(binaryImage6.equals((Object)binaryImage4));
      assertFalse(binaryImage6.equals((Object)binaryImage2));
      assertFalse(binaryImage6.equals((Object)binaryImage3));
      
      Image image0 = binaryImage2.copy();
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(1, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, image0.Y());
      assertEquals(4, image0.X());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, binaryImage6);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage1, binaryImage5);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage2, binaryImage6);
      assertNotSame(binaryImage2, binaryImage5);
      assertNotSame(binaryImage2, image0);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage4);
      assertNotSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotNull(image0);
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)binaryImage6));
      assertFalse(binaryImage1.equals((Object)binaryImage5));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage6));
      assertFalse(binaryImage2.equals((Object)binaryImage5));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage4));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ComplexImage complexImage0 = mock(ComplexImage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(complexImage0).X();
      doReturn(0).when(complexImage0).Y();
      PowerImage powerImage0 = new PowerImage(complexImage0);
      assertEquals(32767.0F, powerImage0.min(), 0.01F);
      assertEquals(0.0, powerImage0.sqrSum(), 0.01);
      assertEquals(0, powerImage0.Y());
      assertEquals(0, powerImage0.X());
      assertEquals(0.0F, powerImage0.absSum(), 0.01F);
      assertEquals(0.0F, powerImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), powerImage0.max(), 0.01F);
      assertNotNull(powerImage0);
      
      BinaryImage binaryImage0 = new BinaryImage(powerImage0);
      assertEquals(32767.0F, powerImage0.min(), 0.01F);
      assertEquals(0.0, powerImage0.sqrSum(), 0.01);
      assertEquals(0, powerImage0.Y());
      assertEquals(0, powerImage0.X());
      assertEquals(0.0F, powerImage0.absSum(), 0.01F);
      assertEquals(0.0F, powerImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), powerImage0.max(), 0.01F);
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertNotNull(binaryImage0);
      
      int int0 = binaryImage0.X();
      assertEquals(32767.0F, powerImage0.min(), 0.01F);
      assertEquals(0.0, powerImage0.sqrSum(), 0.01);
      assertEquals(0, powerImage0.Y());
      assertEquals(0, powerImage0.X());
      assertEquals(0.0F, powerImage0.absSum(), 0.01F);
      assertEquals(0.0F, powerImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), powerImage0.max(), 0.01F);
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.intersection(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertNotNull(binaryImage0);
      
      Byte[][] byteArray0 = binaryImage0.getData();
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 8;
      intArray0[1] = 8;
      intArray0[2] = 8;
      intArray0[3] = 8;
      intArray0[4] = 8;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(8, 8, intArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage1.count());
      assertEquals(1, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = new BinaryImage(byteArray0);
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      
      BinaryImage binaryImage3 = binaryImage1.intersection(binaryImage2);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(4, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(1, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage1);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
      
      Image image0 = binaryImage0.copy();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, image0.Y());
      assertEquals(4, image0.X());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, image0);
      assertNotNull(image0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(4, binaryImage1.X());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      BinaryImage binaryImage2 = binaryImage1.intersection(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(1, binaryImage2.Y());
      assertEquals(4, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      
      int int0 = binaryImage0.Y();
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, byteArray0.length);
      assertEquals(1, int0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotNull(imageProducer0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      
      BinaryImage binaryImage3 = new BinaryImage(binaryImage2);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(1, binaryImage2.Y());
      assertEquals(4, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(4, binaryImage3.X());
      assertEquals(0, binaryImage3.count());
      assertEquals(1, binaryImage3.Y());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      
      int int1 = binaryImage0.Y();
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, byteArray0.length);
      assertEquals(1, int1);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertTrue(int1 == int0);
      
      Byte byte0 = binaryImage0.max();
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, byteArray0.length);
      assertEquals((byte)1, (byte)byte0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotNull(byte0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      
      int int2 = binaryImage3.Y();
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(1, binaryImage2.Y());
      assertEquals(4, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(4, binaryImage3.X());
      assertEquals(0, binaryImage3.count());
      assertEquals(1, binaryImage3.Y());
      assertEquals(1, byteArray0.length);
      assertEquals(1, int2);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage1, binaryImage3);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage2, binaryImage3);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      BinaryImage binaryImage4 = binaryImage3.union(binaryImage1);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(1, binaryImage2.Y());
      assertEquals(4, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(4, binaryImage3.X());
      assertEquals(0, binaryImage3.count());
      assertEquals(1, binaryImage3.Y());
      assertEquals(0, binaryImage4.count());
      assertEquals(4, binaryImage4.X());
      assertEquals(1, binaryImage4.Y());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage1, binaryImage3);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage4);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertSame(binaryImage3, binaryImage4);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage3);
      assertNotSame(binaryImage4, binaryImage2);
      assertNotSame(binaryImage4, binaryImage0);
      assertNotNull(binaryImage4);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      
      int int3 = 9;
      // Undeclared exception!
      try { 
        binaryImage1.set(9, (int) (byte) (-65), byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -65
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PowerImage powerImage0 = new PowerImage(755, 755);
      assertEquals(755, powerImage0.Y());
      assertEquals(755, powerImage0.X());
      assertNotNull(powerImage0);
      
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(powerImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.shift(0, 0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      
      ROI rOI0 = new ROI(240, 854, 240, 854);
      assertEquals(854, rOI0.ly());
      assertEquals(240, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(854, rOI0.uy());
      assertEquals(240, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(854, rOI0.ly());
      assertEquals(240, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(854, rOI0.uy());
      assertEquals(240, rOI0.lx());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(854, rOI0.ly());
      assertEquals(240, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(854, rOI0.uy());
      assertEquals(240, rOI0.lx());
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.X();
      assertEquals(854, rOI0.ly());
      assertEquals(240, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(854, rOI0.uy());
      assertEquals(240, rOI0.lx());
      assertEquals(1, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      // Undeclared exception!
      try { 
        binaryImage1.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[][] byteArray0 = new byte[7][3];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)11;
      byteArray1[1] = (byte)9;
      byteArray1[2] = (byte)20;
      byteArray1[3] = (byte)21;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)44;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)93;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[8];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte)9;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)11;
      byteArray2[5] = (byte)21;
      byteArray2[6] = (byte)0;
      byteArray2[7] = (byte)0;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[6];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)20;
      byteArray3[1] = (byte)11;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)20;
      byteArray3[4] = (byte) (-6);
      byteArray3[5] = (byte)20;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[0];
      assertFalse(byteArray4.equals((Object)byteArray3));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[8];
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray3));
      
      byteArray5[0] = (byte) (-105);
      byteArray5[1] = (byte)0;
      byteArray5[2] = (byte)9;
      byteArray5[3] = (byte)0;
      byteArray5[4] = (byte)11;
      byteArray5[5] = (byte)44;
      byteArray5[6] = (byte)0;
      byteArray5[7] = (byte) (-6);
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[6];
      assertFalse(byteArray6.equals((Object)byteArray5));
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray3));
      
      byteArray6[0] = (byte) (-6);
      byteArray6[1] = (byte)11;
      byteArray6[2] = (byte) (-105);
      byteArray6[3] = (byte) (-105);
      byteArray6[4] = (byte) (-105);
      byteArray6[5] = (byte)0;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[1];
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray1));
      
      byteArray7[0] = (byte) (-105);
      byteArray0[6] = byteArray7;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1636, 255);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(255, binaryImage0.Y());
      assertEquals(1636, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      binaryImage0.getJavaImage();
      binaryImage0.getJavaImage();
      int int0 = (-1215);
      int int1 = 1357;
      binaryImage0.copy();
      BinaryImage binaryImage1 = binaryImage0.shift(int0, int1);
      BinaryImage binaryImage2 = binaryImage1.clear();
      int int2 = 1;
      int int3 = (-634);
      byte byte0 = (byte) (-25);
      Byte byte1 = Byte.valueOf(byte0);
      Byte.toUnsignedInt(byte0);
      Byte.toUnsignedLong(byte0);
      ROI rOI0 = null;
      binaryImage2.set(int2, int3, byte1, rOI0);
      binaryImage1.Y();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((BinaryImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[][] byteArray0 = new byte[7][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(0, binaryImage0.count());
      assertEquals(7, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(7, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertEquals(7, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(28, binaryImage0.count());
      assertEquals(28, binaryImage1.count());
      assertEquals(7, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(7, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = binaryImage1.compliment();
      assertEquals(0, binaryImage0.count());
      assertEquals(7, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(7, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(7, binaryImage2.Y());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(7, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotNull(binaryImage2);
      
      ImageKernel imageKernel0 = null;
      try {
        imageKernel0 = new ImageKernel((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      byte[][] byteArray0 = new byte[2][3];
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte)0;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      byte[][] byteArray0 = new byte[7][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(0, binaryImage0.count());
      assertEquals(7, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(7, byteArray0.length);
      assertNotNull(binaryImage0);
      
      // Undeclared exception!
      try { 
        binaryImage0.intersection((BinaryImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
      
      int int0 = binaryImage0.Y();
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, byteArray0.length);
      assertEquals(1, int0);
      
      BinaryImage binaryImage1 = new BinaryImage();
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      BinaryImage binaryImage2 = new BinaryImage(binaryImage0);
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(1, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(4, binaryImage2.X());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      
      BinaryImage binaryImage3 = binaryImage2.compliment();
      assertEquals(4, binaryImage0.X());
      assertEquals(4, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(4, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(4, binaryImage3.count());
      assertEquals(4, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(1, binaryImage3.Y());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      
      int int1 = binaryImage3.count();
      assertEquals(4, binaryImage0.X());
      assertEquals(4, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(4, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(4, binaryImage3.count());
      assertEquals(4, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(1, binaryImage3.Y());
      assertEquals(1, byteArray0.length);
      assertEquals(4, int1);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage0);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((-3936), (-3936), (byte[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.shift((-4), (-4));
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(4, binaryImage1.X());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      BinaryImage binaryImage2 = new BinaryImage(byteArray0);
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      
      BinaryImage binaryImage3 = binaryImage0.intersection(binaryImage2);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals(4, binaryImage3.X());
      assertEquals(0, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(1, binaryImage3.Y());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage0);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      
      String string0 = binaryImage0.toString();
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertNotNull(string0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      
      BinaryImage binaryImage4 = new BinaryImage(binaryImage3);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals(4, binaryImage3.X());
      assertEquals(0, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(1, binaryImage3.Y());
      assertEquals(1, binaryImage4.Y());
      assertEquals(0, binaryImage4.count());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(4, binaryImage4.X());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage4);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      
      BinaryImage binaryImage5 = binaryImage1.difference(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals(4, binaryImage5.X());
      assertEquals(1, binaryImage5.Y());
      assertEquals(0, binaryImage5.count());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage5);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage5);
      assertNotSame(binaryImage5, binaryImage2);
      assertNotSame(binaryImage5, binaryImage3);
      assertSame(binaryImage5, binaryImage1);
      assertNotSame(binaryImage5, binaryImage4);
      assertNotSame(binaryImage5, binaryImage0);
      assertNotNull(binaryImage5);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage1.equals((Object)binaryImage4));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage5.equals((Object)binaryImage2));
      assertFalse(binaryImage5.equals((Object)binaryImage3));
      assertFalse(binaryImage5.equals((Object)binaryImage4));
      assertFalse(binaryImage5.equals((Object)binaryImage0));
      
      Image image0 = binaryImage4.copy();
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals(4, binaryImage3.X());
      assertEquals(0, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(1, binaryImage3.Y());
      assertEquals(1, binaryImage4.Y());
      assertEquals(0, binaryImage4.count());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(4, binaryImage4.X());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(1, image0.Y());
      assertEquals(4, image0.X());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage5);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage2, binaryImage4);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, image0);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage5);
      assertNotSame(binaryImage3, binaryImage5);
      assertNotSame(binaryImage3, image0);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage4);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage4, binaryImage0);
      assertNotSame(binaryImage4, binaryImage5);
      assertNotSame(binaryImage4, binaryImage2);
      assertNotSame(binaryImage4, binaryImage3);
      assertNotSame(binaryImage4, binaryImage1);
      assertNotSame(binaryImage4, image0);
      assertNotNull(image0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage5));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage2.equals((Object)binaryImage4));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage5));
      assertFalse(binaryImage3.equals((Object)binaryImage5));
      assertFalse(binaryImage3.equals((Object)binaryImage4));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage5));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      
      int int0 = binaryImage2.Y();
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals(1, byteArray0.length);
      assertEquals(1, int0);
      assertNotSame(binaryImage2, binaryImage4);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, image0);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage5);
      assertFalse(binaryImage2.equals((Object)binaryImage4));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage5));
      
      int int1 = binaryImage5.count();
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals(4, binaryImage5.X());
      assertEquals(1, binaryImage5.Y());
      assertEquals(0, binaryImage5.count());
      assertEquals(1, byteArray0.length);
      assertEquals(0, int1);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage5);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage1, binaryImage5);
      assertNotSame(binaryImage5, binaryImage2);
      assertNotSame(binaryImage5, binaryImage3);
      assertSame(binaryImage5, binaryImage1);
      assertNotSame(binaryImage5, binaryImage4);
      assertNotSame(binaryImage5, image0);
      assertNotSame(binaryImage5, binaryImage0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage5));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage1.equals((Object)binaryImage4));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage5.equals((Object)binaryImage2));
      assertFalse(binaryImage5.equals((Object)binaryImage3));
      assertFalse(binaryImage5.equals((Object)binaryImage4));
      assertFalse(binaryImage5.equals((Object)image0));
      assertFalse(binaryImage5.equals((Object)binaryImage0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(1, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
      
      // Undeclared exception!
      try { 
        binaryImage0.union((BinaryImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BinaryImage binaryImage0 = new BinaryImage(0, 447, byteArray0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(447, binaryImage0.Y());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(binaryImage0);
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = byte0.byteValue();
      assertEquals((byte) (-1), byte1);
      
      // Undeclared exception!
      try { 
        binaryImage0.clear((Byte) (byte) (-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Byte byte0 = new Byte((byte)80);
      assertEquals((byte)80, (byte)byte0);
      assertNotNull(byte0);
      
      BinaryImage binaryImage0 = new BinaryImage((byte)80, 86);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(80, binaryImage0.X());
      assertEquals(86, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(80, binaryImage0.X());
      assertEquals(86, binaryImage0.Y());
      assertEquals(80, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(86, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      binaryImage1.set(6, 1, byte0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(80, binaryImage0.X());
      assertEquals(86, binaryImage0.Y());
      assertEquals(1, binaryImage1.count());
      assertEquals(80, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(86, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      BinaryImage binaryImage2 = binaryImage1.intersection(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(4, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      
      int int0 = binaryImage2.Y();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(4, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, binaryImage2.Y());
      assertEquals(1, byteArray0.length);
      assertEquals(1, int0);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)55;
      byteArray1[1] = (byte)3;
      BinaryImage binaryImage3 = null;
      try {
        binaryImage3 = new BinaryImage(1, 427, byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 427
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = binaryImage0.difference(binaryImage1);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.Y());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertNotNull(binaryImage2);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
      
      // Undeclared exception!
      try { 
        binaryImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(2393, 16, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[][] byteArray0 = new byte[12][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(12, binaryImage0.Y());
      assertEquals(12, byteArray0.length);
      assertNotNull(binaryImage0);
      
      Byte byte0 = new Byte((byte)113);
      assertEquals((byte)113, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        binaryImage0.set((int) (byte)113, (int) (byte)113, byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 113
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-19);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte) (-1);
      BinaryImage binaryImage0 = new BinaryImage(8, 0, byteArray0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(8, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-19), (byte)0, (byte)0, (byte) (-1), (byte)112, (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(binaryImage0);
      
      Byte byte0 = binaryImage0.min();
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(8, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-19), (byte)0, (byte)0, (byte) (-1), (byte)112, (byte) (-1)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals((byte)0, (byte)byte0);
      assertNotNull(byte0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(1138, 1138, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      Image image0 = binaryImage0.copy();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, image0.X());
      assertEquals(0, image0.Y());
      assertNotSame(binaryImage0, image0);
      assertNotNull(image0);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      
      Byte byte0 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte0);
      assertNotNull(byte0);
      
      byte byte1 = byte0.byteValue();
      assertEquals((byte) (-1), byte1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.ly();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      
      int int4 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int4);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      
      int int5 = rOI0.lx();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int5);
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      
      int int6 = rOI0.uy();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int6);
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      
      int int7 = rOI0.ly();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int7);
      assertTrue(int7 == int6);
      assertTrue(int7 == int0);
      assertTrue(int7 == int5);
      assertTrue(int7 == int1);
      assertTrue(int7 == int3);
      assertTrue(int7 == int2);
      assertTrue(int7 == int4);
      
      BinaryImage binaryImage2 = binaryImage1.shift(0, 0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, image0);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image0));
      
      // Undeclared exception!
      try { 
        binaryImage2.get(4, 1473);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[][] byteArray0 = new byte[12][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(12, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals(12, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(7, 7);
      assertEquals(7, binaryImage1.Y());
      assertEquals(7, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      // Undeclared exception!
      try { 
        binaryImage0.intersection(binaryImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1610, 1610);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1610, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1610, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(1610, 1610);
      assertEquals(1610, binaryImage1.X());
      assertEquals(1610, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      // Undeclared exception!
      binaryImage0.difference(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      byte[][] byteArray0 = new byte[0][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, byteArray0.length);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      BinaryImage binaryImage2 = binaryImage1.intersection(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      
      int int0 = binaryImage0.Y();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, byteArray0.length);
      assertEquals(0, int0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotNull(imageProducer0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      
      BinaryImage binaryImage3 = binaryImage0.difference(binaryImage1);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(0, binaryImage3.count());
      assertEquals(0, binaryImage3.X());
      assertEquals(0, binaryImage3.Y());
      assertEquals(0, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage3);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      
      byte byte0 = (byte) (-65);
      Byte byte1 = Byte.valueOf((byte) (-65));
      assertEquals((byte) (-65), (byte)byte1);
      assertNotNull(byte1);
      
      int int1 = Byte.toUnsignedInt((byte) (-65));
      assertEquals(191, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        binaryImage1.clear(byte1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      // Undeclared exception!
      try { 
        binaryImage0.clear((Byte) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      byte[][] byteArray0 = new byte[7][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(7, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(7, byteArray0.length);
      assertNotNull(binaryImage0);
      
      String string0 = binaryImage0.toString();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(7, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(7, byteArray0.length);
      assertNotNull(string0);
      
      BinaryImage binaryImage1 = binaryImage0.shift(2, 2);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(7, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(7, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(7, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      
      int int0 = binaryImage0.count();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(7, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(7, byteArray0.length);
      assertEquals(0, int0);
      assertSame(binaryImage0, binaryImage1);
      
      Byte byte0 = binaryImage0.get(0, 0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(7, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(7, byteArray0.length);
      assertEquals((byte)0, (byte)byte0);
      assertSame(binaryImage0, binaryImage1);
      assertNotNull(byte0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      byte[][] byteArray0 = new byte[0][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, byteArray0.length);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      BinaryImage binaryImage2 = binaryImage1.intersection(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotNull(imageProducer0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      
      BinaryImage binaryImage3 = new BinaryImage(binaryImage1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage3.Y());
      assertEquals(0, binaryImage3.X());
      assertEquals(0, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(0, byteArray0.length);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      
      BinaryImage binaryImage4 = binaryImage1.difference(binaryImage3);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage3.Y());
      assertEquals(0, binaryImage3.X());
      assertEquals(0, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(0, binaryImage4.Y());
      assertEquals(0, binaryImage4.X());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(0, binaryImage4.count());
      assertEquals(0, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage1, binaryImage3);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage4);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage1);
      assertSame(binaryImage4, binaryImage1);
      assertNotSame(binaryImage4, binaryImage3);
      assertSame(binaryImage4, binaryImage2);
      assertNotSame(binaryImage4, binaryImage0);
      assertNotNull(binaryImage4);
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      
      Image image0 = binaryImage0.copy();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, image0.Y());
      assertEquals(0, image0.X());
      assertEquals(0, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage4);
      assertNotNull(image0);
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      
      int int0 = binaryImage1.Y();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, byteArray0.length);
      assertEquals(0, int0);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage3);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      int int1 = binaryImage1.count();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, byteArray0.length);
      assertEquals(0, int1);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage3);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)17;
      BinaryImage binaryImage0 = new BinaryImage(0, 3, byteArray0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(3, binaryImage0.Y());
      assertArrayEquals(new byte[] {(byte)44, (byte) (-1), (byte)0, (byte)46, (byte)17}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(binaryImage0);
      
      // Undeclared exception!
      try { 
        binaryImage0.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(4, binaryImage0.X());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.union(binaryImage0);
      assertEquals(4, binaryImage0.X());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(4, binaryImage0.X());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertEquals(4, binaryImage0.X());
      assertEquals(4, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage1.count());
      assertEquals(4, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertEquals(4, binaryImage0.X());
      assertEquals(4, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertNotNull(imageProducer0);
      
      int int0 = binaryImage1.Y();
      assertEquals(4, binaryImage0.X());
      assertEquals(4, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage1.count());
      assertEquals(4, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, byteArray0.length);
      assertEquals(1, int0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      
      Byte byte0 = binaryImage1.max();
      assertEquals(4, binaryImage0.X());
      assertEquals(4, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage1.count());
      assertEquals(4, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, byteArray0.length);
      assertEquals((byte)1, (byte)byte0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(byte0);
      
      int int1 = binaryImage0.Y();
      assertEquals(4, binaryImage0.X());
      assertEquals(4, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, byteArray0.length);
      assertEquals(1, int1);
      assertSame(binaryImage0, binaryImage1);
      assertTrue(int1 == int0);
      
      BinaryImage binaryImage2 = new BinaryImage();
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.X());
      assertNotNull(binaryImage2);
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      
      BinaryImage binaryImage3 = new BinaryImage(binaryImage2);
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage3.X());
      assertEquals(0, binaryImage3.Y());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(0, binaryImage3.count());
      assertNotNull(binaryImage3);
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      
      BinaryImage binaryImage4 = binaryImage2.union(binaryImage3);
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage3.X());
      assertEquals(0, binaryImage3.Y());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(0, binaryImage3.count());
      assertEquals(0, binaryImage4.Y());
      assertEquals(0, binaryImage4.X());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(0, binaryImage4.count());
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage3);
      assertSame(binaryImage2, binaryImage4);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage4);
      assertNotSame(binaryImage4, binaryImage1);
      assertNotSame(binaryImage4, binaryImage3);
      assertNotSame(binaryImage4, binaryImage0);
      assertSame(binaryImage4, binaryImage2);
      assertNotNull(binaryImage4);
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      
      byte byte1 = (byte) (-1);
      Byte byte2 = new Byte((byte) (-1));
      assertEquals((byte) (-1), (byte)byte2);
      assertNotNull(byte2);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byte byte3 = byte2.byteValue();
      assertEquals((byte) (-1), byte3);
      assertTrue(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      assertTrue(byte3 == byte1);
      
      // Undeclared exception!
      try { 
        binaryImage4.set(9, 85, (Byte) (byte) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.shift((-9), (-9));
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        binaryImage1.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      int int0 = binaryImage0.count();
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte[][] byteArray0 = new byte[7][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(7, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(7, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertEquals(7, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(28, binaryImage0.count());
      assertEquals(28, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(7, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(7, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = new BinaryImage(byteArray0);
      assertEquals(0, binaryImage2.count());
      assertEquals(4, binaryImage2.X());
      assertEquals(7, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(7, byteArray0.length);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      
      BinaryImage binaryImage3 = binaryImage1.difference(binaryImage2);
      assertEquals(7, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(28, binaryImage0.count());
      assertEquals(28, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(7, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(4, binaryImage2.X());
      assertEquals(7, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(28, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(7, binaryImage3.Y());
      assertEquals(4, binaryImage3.X());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(7, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage3);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage1);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      
      BinaryImage binaryImage4 = binaryImage1.intersection(binaryImage2);
      assertEquals(7, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(7, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(4, binaryImage2.X());
      assertEquals(7, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(4, binaryImage4.X());
      assertEquals(7, binaryImage4.Y());
      assertEquals(0, binaryImage4.count());
      assertEquals(7, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage4);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage2, binaryImage4);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage3);
      assertSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage3);
      assertNotSame(binaryImage4, binaryImage2);
      assertSame(binaryImage4, binaryImage0);
      assertNotNull(binaryImage4);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      
      int int0 = binaryImage1.count();
      assertEquals(7, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(7, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(7, byteArray0.length);
      assertEquals(0, int0);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage4);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage3);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      Byte byte0 = new Byte((byte)80);
      assertEquals((byte)80, (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        binaryImage0.set((int) (byte)80, (int) (byte)80, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.shift((-529), (-529));
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.X());
      assertEquals(4, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      byte[][] byteArray0 = new byte[0][9];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      
      ImageProducer imageProducer0 = binaryImage1.getJavaImage();
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(imageProducer0);
      
      int int0 = binaryImage0.Y();
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, byteArray0.length);
      assertEquals(0, int0);
      assertSame(binaryImage0, binaryImage1);
      
      Byte byte0 = binaryImage0.max();
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, byteArray0.length);
      assertEquals((byte)1, (byte)byte0);
      assertSame(binaryImage0, binaryImage1);
      assertNotNull(byte0);
      
      int int1 = binaryImage1.Y();
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, byteArray0.length);
      assertEquals(0, int1);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertTrue(int1 == int0);
      
      BinaryImage binaryImage2 = binaryImage0.union(binaryImage1);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, byteArray0.length);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotNull(binaryImage2);
      
      Image image0 = binaryImage1.copy();
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, image0.X());
      assertEquals(0, image0.Y());
      assertEquals(0, byteArray0.length);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertNotNull(image0);
      
      BinaryImage binaryImage3 = binaryImage0.intersection((BinaryImage) null);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(0, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(0, binaryImage3.X());
      assertEquals(0, byteArray0.length);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, image0);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)image0));
      
      BinaryImage binaryImage4 = binaryImage1.shift(0, 0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(0, binaryImage4.X());
      assertEquals(0, binaryImage4.count());
      assertEquals(0, binaryImage4.Y());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(0, byteArray0.length);
      assertSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage0);
      assertSame(binaryImage4, binaryImage3);
      assertNotSame(binaryImage4, image0);
      assertSame(binaryImage4, binaryImage2);
      assertNotNull(binaryImage4);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage4.equals((Object)image0));
      
      ImageProducer imageProducer1 = binaryImage4.getJavaImage();
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(0, binaryImage4.X());
      assertEquals(0, binaryImage4.count());
      assertEquals(0, binaryImage4.Y());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(0, byteArray0.length);
      assertSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage0);
      assertSame(binaryImage4, binaryImage3);
      assertNotSame(binaryImage4, image0);
      assertSame(binaryImage4, binaryImage2);
      assertNotSame(imageProducer1, imageProducer0);
      assertNotNull(imageProducer1);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage4.equals((Object)image0));
      assertFalse(imageProducer1.equals((Object)imageProducer0));
      
      BinaryImage binaryImage5 = binaryImage4.intersection(binaryImage3);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(0, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(0, binaryImage3.X());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(0, binaryImage4.X());
      assertEquals(0, binaryImage4.count());
      assertEquals(0, binaryImage4.Y());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals(0, binaryImage5.count());
      assertEquals(0, binaryImage5.X());
      assertEquals(0, binaryImage5.Y());
      assertEquals(0, byteArray0.length);
      assertSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage5);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage5);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage5);
      assertSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage4);
      assertSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, image0);
      assertSame(binaryImage4, binaryImage5);
      assertSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage0);
      assertSame(binaryImage4, binaryImage3);
      assertNotSame(binaryImage4, image0);
      assertSame(binaryImage4, binaryImage2);
      assertNotSame(binaryImage5, image0);
      assertSame(binaryImage5, binaryImage2);
      assertSame(binaryImage5, binaryImage0);
      assertSame(binaryImage5, binaryImage4);
      assertSame(binaryImage5, binaryImage3);
      assertSame(binaryImage5, binaryImage1);
      assertNotNull(binaryImage5);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)image0));
      assertFalse(binaryImage4.equals((Object)image0));
      assertFalse(binaryImage5.equals((Object)image0));
      
      ImageProducer imageProducer2 = binaryImage1.getJavaImage();
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, byteArray0.length);
      assertSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage5);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage5);
      assertSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, image0);
      assertNotSame(imageProducer2, imageProducer0);
      assertNotSame(imageProducer2, imageProducer1);
      assertNotNull(imageProducer2);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(imageProducer2.equals((Object)imageProducer0));
      assertFalse(imageProducer2.equals((Object)imageProducer1));
      
      PowerImage powerImage0 = new PowerImage(770, 770);
      assertEquals(770, powerImage0.X());
      assertEquals(770, powerImage0.Y());
      assertNotNull(powerImage0);
      
      PowerImage powerImage1 = new PowerImage(powerImage0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      Image image0 = binaryImage0.copy();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, image0.Y());
      assertEquals(0, image0.X());
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotNull(image0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      BinaryImage binaryImage2 = binaryImage1.intersection(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(1, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(4, binaryImage2.X());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      
      int int0 = binaryImage0.Y();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, byteArray0.length);
      assertEquals(1, int0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      
      BinaryImage binaryImage3 = binaryImage0.difference(binaryImage1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(4, binaryImage3.X());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(0, binaryImage3.count());
      assertEquals(1, binaryImage3.Y());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      
      Byte byte0 = Byte.valueOf((byte) (-65));
      assertEquals((byte) (-65), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = Byte.valueOf((byte) (-116));
      assertEquals((byte) (-116), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      Byte byte2 = new Byte((byte)98);
      assertEquals((byte)98, (byte)byte2);
      assertNotNull(byte2);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byte byte3 = byte2.byteValue();
      assertEquals((byte)98, byte3);
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte2.equals((Object)byte0));
      
      byte byte4 = ((Byte)(byte)98).byteValue();
      assertEquals((byte)98, byte4);
      assertTrue(byte4 == byte3);
      
      Byte byte5 = Byte.valueOf((byte) (-112));
      assertEquals((byte) (-112), (byte)byte5);
      assertNotNull(byte5);
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
      
      long long0 = Byte.toUnsignedLong((byte)16);
      assertEquals(16L, long0);
      
      binaryImage0.set(0, 0, byte5);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(byte5.equals((Object)byte2));
      assertFalse(byte5.equals((Object)byte1));
      assertFalse(byte5.equals((Object)byte4));
      assertFalse(byte5.equals((Object)byte0));
      assertFalse(byte5.equals((Object)byte3));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      KernelType kernelType0 = KernelType.PREWITT_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertEquals(3, imageKernel0.Y());
      assertEquals(1.0F, imageKernel0.max(), 0.01F);
      assertEquals((-1.0F), imageKernel0.min(), 0.01F);
      assertEquals(6.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(6.0, imageKernel0.sqrSum(), 0.01);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertNotNull(imageKernel0);
      
      RealGrayImage realGrayImage0 = imageKernel0.multiply(0.0F);
      assertEquals(3, imageKernel0.Y());
      assertEquals(-0.0F, imageKernel0.max(), 0.01F);
      assertEquals(-0.0F, imageKernel0.min(), 0.01F);
      assertEquals(0.0, imageKernel0.sqrSum(), 0.01);
      assertEquals(0.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(-0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(-0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(3, realGrayImage0.X());
      assertEquals(3, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertSame(imageKernel0, realGrayImage0);
      assertSame(realGrayImage0, imageKernel0);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.multiply(948.2F);
      assertEquals(3, imageKernel0.Y());
      assertEquals(-0.0F, imageKernel0.max(), 0.01F);
      assertEquals(-0.0F, imageKernel0.min(), 0.01F);
      assertEquals(0.0, imageKernel0.sqrSum(), 0.01);
      assertEquals(0.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(-0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(-0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(3, realGrayImage0.X());
      assertEquals(3, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(3, realGrayImage1.Y());
      assertEquals(-0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(3, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(-0.0F, realGrayImage1.min(), 0.01F);
      assertSame(imageKernel0, realGrayImage1);
      assertSame(imageKernel0, realGrayImage0);
      assertSame(realGrayImage0, imageKernel0);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, imageKernel0);
      assertNotNull(realGrayImage1);
      
      ImageKernel imageKernel1 = new ImageKernel(kernelType0);
      assertEquals(6.0F, imageKernel1.absSum(), 0.01F);
      assertEquals((-1.0F), imageKernel1.min(), 0.01F);
      assertEquals(1.0F, imageKernel1.max(), 0.01F);
      assertEquals(0.0F, imageKernel1.addSum(), 0.01F);
      assertEquals(6.0, imageKernel1.sqrSum(), 0.01);
      assertEquals(3, imageKernel1.X());
      assertEquals(3, imageKernel1.Y());
      assertNotNull(imageKernel1);
      assertFalse(imageKernel1.equals((Object)imageKernel0));
      assertFalse(imageKernel1.equals((Object)realGrayImage0));
      assertFalse(imageKernel1.equals((Object)realGrayImage1));
      
      RealGrayImage realGrayImage2 = imageKernel1.multiply(948.2F);
      assertEquals(5394499.5, imageKernel1.sqrSum(), 0.01);
      assertEquals((-948.2F), imageKernel1.min(), 0.01F);
      assertEquals(948.2F, imageKernel1.max(), 0.01F);
      assertEquals(0.0F, imageKernel1.addSum(), 0.01F);
      assertEquals(3, imageKernel1.X());
      assertEquals(5689.2F, imageKernel1.absSum(), 0.01F);
      assertEquals(3, imageKernel1.Y());
      assertEquals(3, realGrayImage2.Y());
      assertEquals(948.2F, realGrayImage2.max(), 0.01F);
      assertEquals((-948.2F), realGrayImage2.min(), 0.01F);
      assertEquals(5689.2F, realGrayImage2.absSum(), 0.01F);
      assertEquals(3, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(5394499.5, realGrayImage2.sqrSum(), 0.01);
      assertSame(imageKernel1, realGrayImage2);
      assertNotSame(imageKernel1, imageKernel0);
      assertNotSame(imageKernel1, realGrayImage0);
      assertNotSame(imageKernel1, realGrayImage1);
      assertNotSame(realGrayImage2, imageKernel0);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertSame(realGrayImage2, imageKernel1);
      assertNotNull(realGrayImage2);
      assertFalse(imageKernel1.equals((Object)imageKernel0));
      assertFalse(imageKernel1.equals((Object)realGrayImage0));
      assertFalse(imageKernel1.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)imageKernel0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      
      RealGrayImage realGrayImage3 = realGrayImage2.multiply(820.55426F);
      assertEquals((-778049.56F), imageKernel1.min(), 0.01F);
      assertEquals(778049.56F, imageKernel1.max(), 0.01F);
      assertEquals(3.632166862848E12, imageKernel1.sqrSum(), 0.01);
      assertEquals(0.0F, imageKernel1.addSum(), 0.01F);
      assertEquals(3, imageKernel1.X());
      assertEquals(4668297.5F, imageKernel1.absSum(), 0.01F);
      assertEquals(3, imageKernel1.Y());
      assertEquals(4668297.5F, realGrayImage2.absSum(), 0.01F);
      assertEquals(3, realGrayImage2.Y());
      assertEquals((-778049.56F), realGrayImage2.min(), 0.01F);
      assertEquals(3, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(3.632166862848E12, realGrayImage2.sqrSum(), 0.01);
      assertEquals(778049.56F, realGrayImage2.max(), 0.01F);
      assertEquals(4668297.5F, realGrayImage3.absSum(), 0.01F);
      assertEquals(3, realGrayImage3.Y());
      assertEquals((-778049.56F), realGrayImage3.min(), 0.01F);
      assertEquals(778049.56F, realGrayImage3.max(), 0.01F);
      assertEquals(3.632166862848E12, realGrayImage3.sqrSum(), 0.01);
      assertEquals(3, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertSame(imageKernel1, realGrayImage2);
      assertSame(imageKernel1, realGrayImage3);
      assertNotSame(imageKernel1, imageKernel0);
      assertNotSame(imageKernel1, realGrayImage0);
      assertNotSame(imageKernel1, realGrayImage1);
      assertNotSame(realGrayImage2, imageKernel0);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertSame(realGrayImage2, imageKernel1);
      assertNotSame(realGrayImage3, imageKernel0);
      assertSame(realGrayImage3, realGrayImage2);
      assertSame(realGrayImage3, imageKernel1);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotNull(realGrayImage3);
      assertFalse(imageKernel1.equals((Object)imageKernel0));
      assertFalse(imageKernel1.equals((Object)realGrayImage0));
      assertFalse(imageKernel1.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)imageKernel0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)imageKernel0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      
      BinaryImage binaryImage1 = new BinaryImage(realGrayImage3);
      assertEquals((-778049.56F), imageKernel1.min(), 0.01F);
      assertEquals(778049.56F, imageKernel1.max(), 0.01F);
      assertEquals(3.632166862848E12, imageKernel1.sqrSum(), 0.01);
      assertEquals(0.0F, imageKernel1.addSum(), 0.01F);
      assertEquals(3, imageKernel1.X());
      assertEquals(4668297.5F, imageKernel1.absSum(), 0.01F);
      assertEquals(3, imageKernel1.Y());
      assertEquals(4668297.5F, realGrayImage2.absSum(), 0.01F);
      assertEquals(3, realGrayImage2.Y());
      assertEquals((-778049.56F), realGrayImage2.min(), 0.01F);
      assertEquals(3, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(3.632166862848E12, realGrayImage2.sqrSum(), 0.01);
      assertEquals(778049.56F, realGrayImage2.max(), 0.01F);
      assertEquals(4668297.5F, realGrayImage3.absSum(), 0.01F);
      assertEquals(3, realGrayImage3.Y());
      assertEquals((-778049.56F), realGrayImage3.min(), 0.01F);
      assertEquals(778049.56F, realGrayImage3.max(), 0.01F);
      assertEquals(3.632166862848E12, realGrayImage3.sqrSum(), 0.01);
      assertEquals(3, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(3, binaryImage1.Y());
      assertEquals(3, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(3, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertNotNull(binaryImage1);
      assertFalse(imageKernel1.equals((Object)imageKernel0));
      assertFalse(imageKernel1.equals((Object)realGrayImage0));
      assertFalse(imageKernel1.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)imageKernel0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)imageKernel0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      Byte byte0 = Byte.valueOf((byte) (-75));
      assertEquals((byte) (-75), (byte)byte0);
      assertNotNull(byte0);
      
      Byte byte1 = Byte.valueOf((byte) (-25));
      assertEquals((byte) (-25), (byte)byte1);
      assertNotNull(byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      // Undeclared exception!
      try { 
        binaryImage1.clear(byte1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.shift(0, 0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      
      ROI rOI0 = new ROI(27, (-1032), 2442, 1592);
      assertEquals((-1032), rOI0.uy());
      assertEquals(2625, rOI0.Y());
      assertEquals(27, rOI0.ux());
      assertEquals(1592, rOI0.ly());
      assertEquals(2416, rOI0.X());
      assertEquals(2442, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals((-1032), rOI0.uy());
      assertEquals(2625, rOI0.Y());
      assertEquals(27, rOI0.ux());
      assertEquals(1592, rOI0.ly());
      assertEquals(2416, rOI0.X());
      assertEquals(2442, rOI0.lx());
      assertEquals(2416, int0);
      
      int int1 = rOI0.Y();
      assertEquals((-1032), rOI0.uy());
      assertEquals(2625, rOI0.Y());
      assertEquals(27, rOI0.ux());
      assertEquals(1592, rOI0.ly());
      assertEquals(2416, rOI0.X());
      assertEquals(2442, rOI0.lx());
      assertEquals(2625, int1);
      assertFalse(int1 == int0);
      
      int int2 = rOI0.X();
      assertEquals((-1032), rOI0.uy());
      assertEquals(2625, rOI0.Y());
      assertEquals(27, rOI0.ux());
      assertEquals(1592, rOI0.ly());
      assertEquals(2416, rOI0.X());
      assertEquals(2442, rOI0.lx());
      assertEquals(2416, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        binaryImage1.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      BinaryImage binaryImage2 = new BinaryImage(byteArray0);
      assertEquals(1, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      
      BinaryImage binaryImage3 = binaryImage0.intersection(binaryImage2);
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage3.count());
      assertEquals(1, binaryImage3.Y());
      assertEquals(4, binaryImage3.X());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(1, byteArray0.length);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage3);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      
      String string0 = binaryImage0.toString();
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, byteArray0.length);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotNull(string0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      
      BinaryImage binaryImage4 = binaryImage3.shift((-539), (-539));
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage3.count());
      assertEquals(1, binaryImage3.Y());
      assertEquals(4, binaryImage3.X());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(1, binaryImage4.Y());
      assertEquals(0, binaryImage4.count());
      assertEquals(4, binaryImage4.X());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(1, byteArray0.length);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage4);
      assertNotSame(binaryImage2, binaryImage3);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage4);
      assertNotSame(binaryImage3, binaryImage2);
      assertSame(binaryImage4, binaryImage0);
      assertNotSame(binaryImage4, binaryImage2);
      assertSame(binaryImage4, binaryImage3);
      assertNotSame(binaryImage4, binaryImage1);
      assertNotNull(binaryImage4);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      
      BinaryImage binaryImage5 = binaryImage4.shift((-539), (-539));
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage3.count());
      assertEquals(1, binaryImage3.Y());
      assertEquals(4, binaryImage3.X());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(1, binaryImage4.Y());
      assertEquals(0, binaryImage4.count());
      assertEquals(4, binaryImage4.X());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(1, binaryImage5.Y());
      assertEquals(0, binaryImage5.count());
      assertEquals(4, binaryImage5.X());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals(1, byteArray0.length);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage5);
      assertSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage5);
      assertNotSame(binaryImage2, binaryImage4);
      assertNotSame(binaryImage2, binaryImage3);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage4);
      assertSame(binaryImage3, binaryImage5);
      assertNotSame(binaryImage3, binaryImage2);
      assertSame(binaryImage4, binaryImage0);
      assertSame(binaryImage4, binaryImage5);
      assertNotSame(binaryImage4, binaryImage2);
      assertSame(binaryImage4, binaryImage3);
      assertNotSame(binaryImage4, binaryImage1);
      assertSame(binaryImage5, binaryImage3);
      assertNotSame(binaryImage5, binaryImage1);
      assertNotSame(binaryImage5, binaryImage2);
      assertSame(binaryImage5, binaryImage4);
      assertSame(binaryImage5, binaryImage0);
      assertNotNull(binaryImage5);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage4));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage5.equals((Object)binaryImage1));
      assertFalse(binaryImage5.equals((Object)binaryImage2));
      
      BinaryImage binaryImage6 = new BinaryImage(binaryImage2);
      assertEquals(1, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(4, binaryImage6.X());
      assertEquals((byte)1, (byte)binaryImage6.max());
      assertEquals((byte)0, (byte)binaryImage6.min());
      assertEquals(1, binaryImage6.Y());
      assertEquals(0, binaryImage6.count());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage6);
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage5));
      assertFalse(binaryImage2.equals((Object)binaryImage4));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage6.equals((Object)binaryImage2));
      assertFalse(binaryImage6.equals((Object)binaryImage3));
      assertFalse(binaryImage6.equals((Object)binaryImage0));
      assertFalse(binaryImage6.equals((Object)binaryImage5));
      assertFalse(binaryImage6.equals((Object)binaryImage1));
      assertFalse(binaryImage6.equals((Object)binaryImage4));
      
      BinaryImage binaryImage7 = binaryImage5.shift((-539), 2428);
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage3.count());
      assertEquals(1, binaryImage3.Y());
      assertEquals(4, binaryImage3.X());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(1, binaryImage4.Y());
      assertEquals(0, binaryImage4.count());
      assertEquals(4, binaryImage4.X());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(1, binaryImage5.Y());
      assertEquals(0, binaryImage5.count());
      assertEquals(4, binaryImage5.X());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals(0, binaryImage7.count());
      assertEquals((byte)0, (byte)binaryImage7.min());
      assertEquals(4, binaryImage7.X());
      assertEquals((byte)1, (byte)binaryImage7.max());
      assertEquals(1, binaryImage7.Y());
      assertEquals(1, byteArray0.length);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage5);
      assertSame(binaryImage0, binaryImage7);
      assertNotSame(binaryImage0, binaryImage6);
      assertSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage5);
      assertNotSame(binaryImage2, binaryImage6);
      assertNotSame(binaryImage2, binaryImage4);
      assertNotSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage7);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage6);
      assertSame(binaryImage3, binaryImage7);
      assertSame(binaryImage3, binaryImage4);
      assertSame(binaryImage3, binaryImage5);
      assertNotSame(binaryImage3, binaryImage2);
      assertSame(binaryImage4, binaryImage0);
      assertSame(binaryImage4, binaryImage5);
      assertNotSame(binaryImage4, binaryImage6);
      assertNotSame(binaryImage4, binaryImage2);
      assertSame(binaryImage4, binaryImage3);
      assertNotSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage7);
      assertSame(binaryImage5, binaryImage3);
      assertNotSame(binaryImage5, binaryImage1);
      assertNotSame(binaryImage5, binaryImage2);
      assertSame(binaryImage5, binaryImage7);
      assertNotSame(binaryImage5, binaryImage6);
      assertSame(binaryImage5, binaryImage4);
      assertSame(binaryImage5, binaryImage0);
      assertSame(binaryImage7, binaryImage3);
      assertNotSame(binaryImage7, binaryImage1);
      assertSame(binaryImage7, binaryImage0);
      assertSame(binaryImage7, binaryImage5);
      assertNotSame(binaryImage7, binaryImage2);
      assertNotSame(binaryImage7, binaryImage6);
      assertSame(binaryImage7, binaryImage4);
      assertNotNull(binaryImage7);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage6));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage5));
      assertFalse(binaryImage2.equals((Object)binaryImage6));
      assertFalse(binaryImage2.equals((Object)binaryImage4));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage6));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage6));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage5.equals((Object)binaryImage1));
      assertFalse(binaryImage5.equals((Object)binaryImage2));
      assertFalse(binaryImage5.equals((Object)binaryImage6));
      assertFalse(binaryImage7.equals((Object)binaryImage1));
      assertFalse(binaryImage7.equals((Object)binaryImage2));
      assertFalse(binaryImage7.equals((Object)binaryImage6));
      
      BinaryImage binaryImage8 = binaryImage0.compliment();
      assertEquals(1, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(4, binaryImage0.count());
      assertEquals(4, binaryImage8.count());
      assertEquals(1, binaryImage8.Y());
      assertEquals((byte)0, (byte)binaryImage8.min());
      assertEquals(4, binaryImage8.X());
      assertEquals((byte)1, (byte)binaryImage8.max());
      assertEquals(1, byteArray0.length);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage5);
      assertSame(binaryImage0, binaryImage7);
      assertSame(binaryImage0, binaryImage8);
      assertNotSame(binaryImage0, binaryImage6);
      assertSame(binaryImage0, binaryImage4);
      assertSame(binaryImage8, binaryImage0);
      assertSame(binaryImage8, binaryImage3);
      assertNotSame(binaryImage8, binaryImage1);
      assertSame(binaryImage8, binaryImage7);
      assertSame(binaryImage8, binaryImage5);
      assertNotSame(binaryImage8, binaryImage6);
      assertSame(binaryImage8, binaryImage4);
      assertNotSame(binaryImage8, binaryImage2);
      assertNotNull(binaryImage8);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage6));
      assertFalse(binaryImage8.equals((Object)binaryImage1));
      assertFalse(binaryImage8.equals((Object)binaryImage6));
      assertFalse(binaryImage8.equals((Object)binaryImage2));
      
      BinaryImage binaryImage9 = binaryImage0.difference(binaryImage1);
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(4, binaryImage9.X());
      assertEquals((byte)0, (byte)binaryImage9.min());
      assertEquals((byte)1, (byte)binaryImage9.max());
      assertEquals(1, binaryImage9.Y());
      assertEquals(0, binaryImage9.count());
      assertEquals(1, byteArray0.length);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage9);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage5);
      assertSame(binaryImage0, binaryImage7);
      assertSame(binaryImage0, binaryImage8);
      assertNotSame(binaryImage0, binaryImage6);
      assertSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage1, binaryImage7);
      assertNotSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage1, binaryImage5);
      assertNotSame(binaryImage1, binaryImage8);
      assertNotSame(binaryImage1, binaryImage9);
      assertNotSame(binaryImage1, binaryImage6);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, binaryImage2);
      assertSame(binaryImage9, binaryImage4);
      assertSame(binaryImage9, binaryImage5);
      assertSame(binaryImage9, binaryImage8);
      assertSame(binaryImage9, binaryImage7);
      assertNotSame(binaryImage9, binaryImage6);
      assertSame(binaryImage9, binaryImage0);
      assertSame(binaryImage9, binaryImage3);
      assertNotSame(binaryImage9, binaryImage1);
      assertNotSame(binaryImage9, binaryImage2);
      assertNotNull(binaryImage9);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage6));
      assertFalse(binaryImage1.equals((Object)binaryImage7));
      assertFalse(binaryImage1.equals((Object)binaryImage4));
      assertFalse(binaryImage1.equals((Object)binaryImage5));
      assertFalse(binaryImage1.equals((Object)binaryImage8));
      assertFalse(binaryImage1.equals((Object)binaryImage6));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage9.equals((Object)binaryImage6));
      assertFalse(binaryImage9.equals((Object)binaryImage1));
      assertFalse(binaryImage9.equals((Object)binaryImage2));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(imageProducer0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[][] byteArray0 = new byte[0][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, byteArray0.length);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      BinaryImage binaryImage2 = binaryImage1.intersection(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      
      int int0 = binaryImage0.Y();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, byteArray0.length);
      assertEquals(0, int0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotNull(imageProducer0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      
      BinaryImage binaryImage3 = binaryImage0.difference(binaryImage1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(0, binaryImage3.Y());
      assertEquals(0, binaryImage3.count());
      assertEquals(0, binaryImage3.X());
      assertEquals(0, byteArray0.length);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      
      int int1 = binaryImage0.X();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, byteArray0.length);
      assertEquals(0, int1);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertTrue(int1 == int0);
      
      BinaryImage binaryImage4 = binaryImage0.shift((-2206), 364);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(0, binaryImage4.Y());
      assertEquals(0, binaryImage4.count());
      assertEquals(0, binaryImage4.X());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(0, byteArray0.length);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage4, binaryImage1);
      assertSame(binaryImage4, binaryImage3);
      assertSame(binaryImage4, binaryImage0);
      assertNotSame(binaryImage4, binaryImage2);
      assertNotNull(binaryImage4);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      byte[][] byteArray0 = new byte[7][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(7, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(7, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertEquals(28, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(7, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage1.X());
      assertEquals(7, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(28, binaryImage1.count());
      assertEquals(7, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = binaryImage0.intersection(binaryImage0);
      assertEquals(28, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(7, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage2.X());
      assertEquals(7, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(28, binaryImage2.count());
      assertEquals(7, byteArray0.length);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotNull(binaryImage2);
      
      // Undeclared exception!
      try { 
        binaryImage0.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[][] byteArray0 = new byte[5][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(5, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(5, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals(5, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(5, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(5, byteArray0.length);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      Image image0 = binaryImage0.copy(rOI0);
      assertEquals(5, binaryImage0.Y());
      assertEquals(4, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, image0.Y());
      assertEquals(1, image0.X());
      assertEquals(5, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertNotNull(image0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      byte[][] byteArray0 = new byte[1][8];
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)70;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage1 = new BinaryImage(byteArray0);
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(1, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(1, binaryImage1.X());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      BinaryImage binaryImage2 = binaryImage1.shift((byte)70, (byte)70);
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(1, binaryImage2.X());
      assertEquals(1, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, byteArray0.length);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[][] byteArray0 = new byte[16][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.Y());
      assertEquals(16, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.shift(12, 12);
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(16, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(16, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[][] byteArray0 = new byte[19][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals(19, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(19, byteArray0.length);
      assertNotNull(binaryImage0);
      
      KernelType kernelType0 = KernelType.PREWITT_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals((-1.0F), imageKernel0.min(), 0.01F);
      assertEquals(6.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(1.0F, imageKernel0.max(), 0.01F);
      assertEquals(6.0, imageKernel0.sqrSum(), 0.01);
      assertEquals(3, imageKernel0.X());
      assertEquals(3, imageKernel0.Y());
      assertNotNull(imageKernel0);
      
      RealGrayImage realGrayImage0 = imageKernel0.multiply(0.0F);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(-0.0F, imageKernel0.min(), 0.01F);
      assertEquals(0.0, imageKernel0.sqrSum(), 0.01);
      assertEquals(0.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(-0.0F, imageKernel0.max(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertEquals(3, imageKernel0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(-0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(3, realGrayImage0.Y());
      assertEquals(-0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(3, realGrayImage0.X());
      assertSame(imageKernel0, realGrayImage0);
      assertSame(realGrayImage0, imageKernel0);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.multiply(948.2F);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(-0.0F, imageKernel0.min(), 0.01F);
      assertEquals(0.0, imageKernel0.sqrSum(), 0.01);
      assertEquals(0.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(-0.0F, imageKernel0.max(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertEquals(3, imageKernel0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(-0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(3, realGrayImage0.Y());
      assertEquals(-0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(3, realGrayImage0.X());
      assertEquals(-0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(3, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(3, realGrayImage1.X());
      assertEquals(-0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertSame(imageKernel0, realGrayImage1);
      assertSame(imageKernel0, realGrayImage0);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage0, imageKernel0);
      assertSame(realGrayImage1, imageKernel0);
      assertSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      
      RealGrayImage realGrayImage2 = imageKernel0.multiply(579.9242F);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(-0.0F, imageKernel0.min(), 0.01F);
      assertEquals(0.0, imageKernel0.sqrSum(), 0.01);
      assertEquals(0.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(-0.0F, imageKernel0.max(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertEquals(3, imageKernel0.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(-0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(-0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(3, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(3, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertSame(imageKernel0, realGrayImage1);
      assertSame(imageKernel0, realGrayImage0);
      assertSame(imageKernel0, realGrayImage2);
      assertSame(realGrayImage2, imageKernel0);
      assertSame(realGrayImage2, realGrayImage1);
      assertSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      
      RealGrayImage realGrayImage3 = realGrayImage2.multiply(948.2F);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(-0.0F, imageKernel0.min(), 0.01F);
      assertEquals(0.0, imageKernel0.sqrSum(), 0.01);
      assertEquals(0.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(-0.0F, imageKernel0.max(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertEquals(3, imageKernel0.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(-0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(-0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(3, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(3, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(-0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(3, realGrayImage3.X());
      assertEquals(3, realGrayImage3.Y());
      assertEquals(-0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertSame(imageKernel0, realGrayImage1);
      assertSame(imageKernel0, realGrayImage0);
      assertSame(imageKernel0, realGrayImage2);
      assertSame(imageKernel0, realGrayImage3);
      assertSame(realGrayImage2, realGrayImage3);
      assertSame(realGrayImage2, imageKernel0);
      assertSame(realGrayImage2, realGrayImage1);
      assertSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage3, imageKernel0);
      assertSame(realGrayImage3, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage2);
      assertSame(realGrayImage3, realGrayImage1);
      assertNotNull(realGrayImage3);
      
      RealGrayImage realGrayImage4 = realGrayImage3.multiply(820.55426F);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(-0.0F, imageKernel0.min(), 0.01F);
      assertEquals(0.0, imageKernel0.sqrSum(), 0.01);
      assertEquals(0.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(-0.0F, imageKernel0.max(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertEquals(3, imageKernel0.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(-0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(-0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(3, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(3, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(-0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(3, realGrayImage3.X());
      assertEquals(3, realGrayImage3.Y());
      assertEquals(-0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(-0.0F, realGrayImage4.max(), 0.01F);
      assertEquals(3, realGrayImage4.X());
      assertEquals(3, realGrayImage4.Y());
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(-0.0F, realGrayImage4.min(), 0.01F);
      assertSame(imageKernel0, realGrayImage1);
      assertSame(imageKernel0, realGrayImage0);
      assertSame(imageKernel0, realGrayImage2);
      assertSame(imageKernel0, realGrayImage3);
      assertSame(imageKernel0, realGrayImage4);
      assertSame(realGrayImage2, realGrayImage3);
      assertSame(realGrayImage2, imageKernel0);
      assertSame(realGrayImage2, realGrayImage1);
      assertSame(realGrayImage2, realGrayImage4);
      assertSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage3, imageKernel0);
      assertSame(realGrayImage3, realGrayImage0);
      assertSame(realGrayImage3, realGrayImage2);
      assertSame(realGrayImage3, realGrayImage4);
      assertSame(realGrayImage3, realGrayImage1);
      assertSame(realGrayImage4, realGrayImage3);
      assertSame(realGrayImage4, imageKernel0);
      assertSame(realGrayImage4, realGrayImage2);
      assertSame(realGrayImage4, realGrayImage1);
      assertSame(realGrayImage4, realGrayImage0);
      assertNotNull(realGrayImage4);
      
      BinaryImage binaryImage1 = new BinaryImage(realGrayImage4);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(-0.0F, imageKernel0.min(), 0.01F);
      assertEquals(0.0, imageKernel0.sqrSum(), 0.01);
      assertEquals(0.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(-0.0F, imageKernel0.max(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertEquals(3, imageKernel0.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(-0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(-0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(3, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(3, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(-0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(3, realGrayImage3.X());
      assertEquals(3, realGrayImage3.Y());
      assertEquals(-0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(-0.0F, realGrayImage4.max(), 0.01F);
      assertEquals(3, realGrayImage4.X());
      assertEquals(3, realGrayImage4.Y());
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(-0.0F, realGrayImage4.min(), 0.01F);
      assertEquals(3, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(3, binaryImage1.X());
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      // Undeclared exception!
      try { 
        binaryImage0.union(binaryImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      byte[][] byteArray0 = new byte[7][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(0, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals(7, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(7, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertEquals(28, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals(7, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(7, binaryImage1.Y());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(28, binaryImage1.count());
      assertEquals(7, byteArray0.length);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
      
      int int0 = binaryImage0.count();
      assertEquals(28, binaryImage0.count());
      assertEquals(4, binaryImage0.X());
      assertEquals(7, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(7, byteArray0.length);
      assertEquals(28, int0);
      assertSame(binaryImage0, binaryImage1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      int int0 = binaryImage0.X();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, int0);
      
      Byte byte0 = Byte.valueOf((byte) (-25));
      assertEquals((byte) (-25), (byte)byte0);
      assertNotNull(byte0);
      
      // Undeclared exception!
      try { 
        binaryImage0.set(0, 0, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      
      BinaryImage binaryImage2 = binaryImage1.intersection(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(1, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      
      int int0 = binaryImage0.Y();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, byteArray0.length);
      assertEquals(1, int0);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, byteArray0.length);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotNull(imageProducer0);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      
      BinaryImage binaryImage3 = binaryImage0.difference(binaryImage1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(4, binaryImage3.X());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(0, binaryImage3.count());
      assertEquals(1, binaryImage3.Y());
      assertEquals(1, byteArray0.length);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      
      byte byte0 = (byte) (-65);
      Byte byte1 = Byte.valueOf((byte) (-65));
      assertEquals((byte) (-65), (byte)byte1);
      assertNotNull(byte1);
      
      int int1 = Byte.toUnsignedInt((byte) (-65));
      assertEquals(191, int1);
      assertFalse(int1 == int0);
      
      BinaryImage binaryImage4 = binaryImage3.shift(3286, (-539));
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(4, binaryImage3.X());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(0, binaryImage3.count());
      assertEquals(1, binaryImage3.Y());
      assertEquals(4, binaryImage4.X());
      assertEquals(0, binaryImage4.count());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(1, binaryImage4.Y());
      assertEquals(1, byteArray0.length);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage3);
      assertSame(binaryImage3, binaryImage4);
      assertNotSame(binaryImage3, binaryImage1);
      assertSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage2);
      assertSame(binaryImage4, binaryImage0);
      assertNotSame(binaryImage4, binaryImage1);
      assertNotSame(binaryImage4, binaryImage2);
      assertSame(binaryImage4, binaryImage3);
      assertNotNull(binaryImage4);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      
      BinaryImage binaryImage5 = binaryImage2.shift(3286, 3286);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(4, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(4, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(1, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals(0, binaryImage5.count());
      assertEquals(4, binaryImage5.X());
      assertEquals(1, binaryImage5.Y());
      assertEquals(1, byteArray0.length);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage5);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage4);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage3);
      assertSame(binaryImage1, binaryImage5);
      assertNotSame(binaryImage2, binaryImage4);
      assertNotSame(binaryImage2, binaryImage3);
      assertSame(binaryImage2, binaryImage5);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage5, binaryImage3);
      assertNotSame(binaryImage5, binaryImage4);
      assertSame(binaryImage5, binaryImage2);
      assertNotSame(binaryImage5, binaryImage0);
      assertSame(binaryImage5, binaryImage1);
      assertNotNull(binaryImage5);
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)binaryImage4));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)binaryImage4));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage5.equals((Object)binaryImage3));
      assertFalse(binaryImage5.equals((Object)binaryImage4));
      assertFalse(binaryImage5.equals((Object)binaryImage0));
      
      ROI rOI0 = new ROI(240, 854, 240, 854);
      assertEquals(854, rOI0.ly());
      assertEquals(240, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(854, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(240, rOI0.lx());
      assertNotNull(rOI0);
      
      int int2 = rOI0.X();
      assertEquals(854, rOI0.ly());
      assertEquals(240, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(854, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(240, rOI0.lx());
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.Y();
      assertEquals(854, rOI0.ly());
      assertEquals(240, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(854, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(240, rOI0.lx());
      assertEquals(1, int3);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      
      int int4 = rOI0.X();
      assertEquals(854, rOI0.ly());
      assertEquals(240, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(854, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(240, rOI0.lx());
      assertEquals(1, int4);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      
      // Undeclared exception!
      try { 
        binaryImage1.set((-25), 1, byte1, rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.union(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotNull(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[][] byteArray0 = new byte[7][8];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[6];
      assertFalse(byteArray3.equals((Object)byteArray1));
      assertFalse(byteArray3.equals((Object)byteArray2));
      
      byteArray3[0] = (byte)73;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte) (-6);
      byteArray3[5] = (byte)5;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[4];
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray3));
      
      byteArray4[0] = (byte) (-76);
      byteArray4[1] = (byte)73;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte) (-6);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[3];
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray3));
      assertFalse(byteArray5.equals((Object)byteArray4));
      
      byteArray5[0] = (byte)5;
      byteArray5[1] = (byte)0;
      byteArray5[2] = (byte)0;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[7];
      assertFalse(byteArray6.equals((Object)byteArray4));
      assertFalse(byteArray6.equals((Object)byteArray2));
      assertFalse(byteArray6.equals((Object)byteArray1));
      assertFalse(byteArray6.equals((Object)byteArray3));
      assertFalse(byteArray6.equals((Object)byteArray5));
      
      byteArray6[0] = (byte)5;
      byteArray6[1] = (byte) (-76);
      byteArray6[2] = (byte)0;
      byteArray6[3] = (byte)0;
      byteArray6[4] = (byte)0;
      byteArray6[5] = (byte) (-1);
      byteArray6[6] = (byte)0;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[4];
      assertFalse(byteArray7.equals((Object)byteArray3));
      assertFalse(byteArray7.equals((Object)byteArray2));
      assertFalse(byteArray7.equals((Object)byteArray6));
      assertFalse(byteArray7.equals((Object)byteArray5));
      assertFalse(byteArray7.equals((Object)byteArray4));
      assertFalse(byteArray7.equals((Object)byteArray1));
      
      byteArray7[0] = (byte) (-6);
      byteArray7[1] = (byte)0;
      byteArray7[2] = (byte)0;
      byteArray7[3] = (byte)0;
      byteArray0[6] = byteArray7;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[][] byteArray0 = new byte[28][4];
      BinaryImage binaryImage0 = new BinaryImage(2900, 2900);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(2900, binaryImage0.X());
      assertEquals(2900, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      // Undeclared exception!
      binaryImage0.compliment();
  }
}
