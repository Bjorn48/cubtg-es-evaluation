/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:25:42 GMT 2019
 */

package org.sat4j.tools.xplain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.IVisualizationTool;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.xplain.QuickXplainStrategy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuickXplainStrategy_ESTest extends QuickXplainStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      MaxSatDecorator maxSatDecorator0 = mock(MaxSatDecorator.class, new ViolatedAssumptionAnswer());
      doReturn("", "8pO%BDQt$4").when(maxSatDecorator0).getLogPrefix();
      doReturn(true, true).when(maxSatDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true, false, false, true).when(maxSatDecorator0).isVerbose();
      doReturn(vecInt0, vecInt0).when(maxSatDecorator0).unsatExplanation();
      NegationDecorator<MaxSatDecorator> negationDecorator0 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = Integer.valueOf(921);
      hashMap0.put(integer0, "");
      IVecInt iVecInt0 = quickXplainStrategy0.explain(negationDecorator0, hashMap0, vecInt0);
      vecInt0.pushAll(iVecInt0);
      quickXplainStrategy0.explain(negationDecorator0, hashMap0, iVecInt0);
      assertEquals(1, vecInt0.size());
      assertEquals((-921), vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      HashMap<Integer, MaxSatDecorator> hashMap0 = new HashMap<Integer, MaxSatDecorator>();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      // Undeclared exception!
      try { 
        quickXplainStrategy0.explain(dimacsOutputSolver0, hashMap0, iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        quickXplainStrategy0.explain((ISolver) null, hashMap0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.xplain.QuickXplainStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      HashMap<Integer, MaxSatDecorator> hashMap0 = new HashMap<Integer, MaxSatDecorator>();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      iVecInt0.pop();
      // Undeclared exception!
      try { 
        quickXplainStrategy0.explain(dimacsOutputSolver0, hashMap0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      MaxSatDecorator maxSatDecorator0 = mock(MaxSatDecorator.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", (String) null, (String) null).when(maxSatDecorator0).getLogPrefix();
      doReturn(true, true, true).when(maxSatDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true, true, true, true, true).when(maxSatDecorator0).isVerbose();
      doReturn(iVecInt0, iVecInt0).when(maxSatDecorator0).unsatExplanation();
      NegationDecorator<MaxSatDecorator> negationDecorator0 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      Integer integer0 = IVisualizationTool.NOTGOOD;
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put(integer0, "");
      IVecInt iVecInt1 = quickXplainStrategy0.explain(negationDecorator0, hashMap0, iVecInt0);
      IVecInt iVecInt2 = quickXplainStrategy0.explain(negationDecorator0, hashMap0, iVecInt1);
      assertFalse(iVecInt2.equals((Object)iVecInt1));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      MaxSatDecorator maxSatDecorator0 = mock(MaxSatDecorator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(maxSatDecorator0).getLogPrefix();
      doReturn(true, true).when(maxSatDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true, false, false, false).when(maxSatDecorator0).isVerbose();
      doReturn(iVecInt0).when(maxSatDecorator0).unsatExplanation();
      NegationDecorator<MaxSatDecorator> negationDecorator0 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = Integer.valueOf(921);
      hashMap0.put(integer0, "");
      IVecInt iVecInt1 = quickXplainStrategy0.explain(negationDecorator0, hashMap0, iVecInt0);
      assertEquals((-921), iVecInt1.last());
      assertEquals(1, iVecInt1.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      VecInt vecInt0 = new VecInt();
      MaxSatDecorator maxSatDecorator0 = mock(MaxSatDecorator.class, new ViolatedAssumptionAnswer());
      doReturn("").when(maxSatDecorator0).getLogPrefix();
      doReturn(false).when(maxSatDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, true).when(maxSatDecorator0).isVerbose();
      doReturn(vecInt0).when(maxSatDecorator0).unsatExplanation();
      NegationDecorator<MaxSatDecorator> negationDecorator0 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      IVecInt iVecInt0 = quickXplainStrategy0.explain(negationDecorator0, hashMap0, vecInt0);
      assertEquals(0, iVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      MaxSatDecorator maxSatDecorator0 = mock(MaxSatDecorator.class, new ViolatedAssumptionAnswer());
      doReturn("", "").when(maxSatDecorator0).getLogPrefix();
      doReturn(true).when(maxSatDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true, true).when(maxSatDecorator0).isVerbose();
      doReturn(iVecInt0).when(maxSatDecorator0).unsatExplanation();
      NegationDecorator<MaxSatDecorator> negationDecorator0 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      // Undeclared exception!
      try { 
        quickXplainStrategy0.explain(negationDecorator0, hashMap0, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      String string0 = quickXplainStrategy0.toString();
      assertEquals("QuickXplain (AAAI 2004 version) minimization strategy", string0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      QuickXplainStrategy quickXplainStrategy0 = new QuickXplainStrategy();
      quickXplainStrategy0.cancelExplanationComputation();
      assertEquals("QuickXplain (AAAI 2004 version) minimization strategy", quickXplainStrategy0.toString());
  }
}
