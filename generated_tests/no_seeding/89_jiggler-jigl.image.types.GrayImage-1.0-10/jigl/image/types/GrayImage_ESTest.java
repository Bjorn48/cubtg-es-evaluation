/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 00:30:49 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.ImageProducer;
import javax.swing.JLayeredPane;
import jigl.image.Image;
import jigl.image.InterpolationMethod;
import jigl.image.ROI;
import jigl.image.types.GrayImage;
import jigl.image.types.InterpolatedGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GrayImage_ESTest extends GrayImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      grayImage0.min();
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage(2095, (-230));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1854);
      assertEquals(1854, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(grayImage0);
      
      Integer integer0 = grayImage0.min();
      assertEquals(1854, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertNull(integer0);
      
      long long0 = grayImage0.sqrSum();
      assertEquals(1854, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try { 
        grayImage0.multiply(8, 1624, 461);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      GrayImage grayImage1 = new GrayImage(intArray0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        grayImage0.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 255;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      int int1 = 762;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(762, 255);
      Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
      // Undeclared exception!
      interpolatedGrayImage0.clear(integer1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(6, 6);
      grayImage0.min();
      ROI rOI0 = new ROI();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(6, 0, 6, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(4, 0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      interpolatedGrayImage1.clear(integer0);
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[4];
      intArray1[1] = (-2408);
      intArray1[2] = 0;
      int int0 = 7;
      GrayImage grayImage0 = new GrayImage(intArray0);
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[][] intArray0 = new int[0][5];
      GrayImage grayImage0 = new GrayImage(intArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      GrayImage grayImage1 = grayImage0.multiply(1610);
      int int0 = (-78);
      int int1 = (-291);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        grayImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1505);
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-693);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      grayImage0.median(255);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      short[][] shortArray0 = new short[1][3];
      short[] shortArray1 = new short[3];
      shortArray1[0] = (short)3071;
      shortArray1[1] = (short)1436;
      shortArray1[2] = (short) (-1751);
      shortArray0[0] = shortArray1;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1854);
      grayImage0.min();
      grayImage0.min();
      ROI rOI0 = new ROI();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.add(1833, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short[][] shortArray0 = new short[0][5];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      grayImage0.addSum();
      InterpolatedGrayImage interpolatedGrayImage0 = null;
      try {
        interpolatedGrayImage0 = new InterpolatedGrayImage((-466), 1825);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((short[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 255;
      GrayImage grayImage0 = new GrayImage(255, 255);
      // Undeclared exception!
      try { 
        grayImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      int[][] intArray0 = new int[1][4];
      int[] intArray1 = new int[1];
      intArray1[0] = (-2408);
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      ROI rOI0 = new ROI(255, 5243, 722, 255);
      grayImage0.getJavaImage();
      GrayImage grayImage1 = grayImage0.copy();
      grayImage0.sqrSum();
      // Undeclared exception!
      try { 
        grayImage1.subtract((-2408), (-2408), 50);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2408
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1847);
      grayImage0.min();
      grayImage0.sqrSum();
      grayImage0.toString();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      interpolatedGrayImage0.min();
      GrayImage grayImage1 = interpolatedGrayImage0.subtract((-1595));
      ROI rOI0 = new ROI((-1595), (-1114), 0, (-1595));
      // Undeclared exception!
      try { 
        grayImage1.subtract(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1595
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        grayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      int[][] intArray0 = new int[1][4];
      int[] intArray1 = new int[1];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      ROI rOI0 = new ROI(255, 5243, 722, 0);
      grayImage0.getJavaImage();
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage(5243, 5243, intArray1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 255;
      GrayImage grayImage0 = new GrayImage(255, 255);
      int int1 = 1854;
      GrayImage grayImage1 = new GrayImage(255, 255);
      // Undeclared exception!
      try { 
        grayImage0.multiply(255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      short[][] shortArray0 = new short[8][5];
      short[] shortArray1 = new short[4];
      shortArray1[0] = (short)6;
      shortArray1[1] = (short)0;
      shortArray1[2] = (short)1741;
      shortArray1[3] = (short)578;
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[1];
      shortArray2[0] = (short)0;
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[1];
      shortArray3[0] = (short)6;
      shortArray0[2] = shortArray3;
      short[] shortArray4 = new short[6];
      shortArray4[0] = (short)3120;
      shortArray4[1] = (short)6;
      shortArray4[2] = (short)578;
      shortArray4[3] = (short)1741;
      shortArray4[4] = (short)578;
      shortArray4[5] = (short)6;
      shortArray0[3] = shortArray4;
      short[] shortArray5 = new short[8];
      shortArray5[0] = (short)1741;
      shortArray5[1] = (short)0;
      shortArray5[2] = (short)0;
      shortArray5[3] = (short)480;
      shortArray5[4] = (short)1741;
      shortArray5[5] = (short)0;
      shortArray5[6] = (short)578;
      shortArray5[7] = (short)6;
      shortArray0[4] = shortArray5;
      short[] shortArray6 = new short[1];
      shortArray6[0] = (short)578;
      shortArray0[5] = shortArray6;
      short[] shortArray7 = new short[0];
      shortArray0[6] = shortArray7;
      short[] shortArray8 = new short[3];
      shortArray8[0] = (short)3120;
      shortArray8[1] = (short)3120;
      shortArray8[2] = (short)480;
      shortArray0[7] = shortArray8;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1854);
      grayImage0.addbuffer(0, 1854, 1854, 0, 0);
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        grayImage0.subtract(1854, 255, 1854, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(628, 628, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      ROI rOI0 = new ROI(0, 0, 0, 1646);
      // Undeclared exception!
      try { 
        grayImage0.divide((Image<Integer>) interpolatedGrayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      // Undeclared exception!
      try { 
        grayImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1854);
      grayImage0.addbuffer(0, 1854, 1854, 0, 0);
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        grayImage0.subtract(1854, 255, 10, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[][] intArray0 = new int[3][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      // Undeclared exception!
      try { 
        grayImage0.addSum();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1854);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(1854, grayImage0.Y());
      assertNotNull(grayImage0);
      
      Integer integer0 = grayImage0.min();
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(1854, grayImage0.Y());
      assertNull(integer0);
      
      long long0 = grayImage0.sqrSum();
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(1854, grayImage0.Y());
      assertEquals(0L, long0);
      
      String string0 = grayImage0.toString();
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(1854, grayImage0.Y());
      assertNotNull(string0);
      assertEquals("0:1854\n", string0);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(1854, grayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(1854, interpolatedGrayImage0.Y());
      assertNotNull(interpolatedGrayImage0);
      
      Integer integer1 = interpolatedGrayImage0.min();
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(1854, grayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(1854, interpolatedGrayImage0.Y());
      assertNull(integer1);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.subtract((-1595));
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(1854, grayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(1854, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(1854, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1801);
      grayImage0.min();
      ROI rOI0 = new ROI();
      grayImage0.toString();
      rOI0.setROI((-3218), 0, (-3218), (-2661));
      long long0 = new Integer(1801);
      grayImage0.median(0);
      // Undeclared exception!
      try { 
        grayImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2661
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1812);
      grayImage0.min();
      grayImage0.sqrSum();
      grayImage0.toString();
      grayImage0.median(0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 255;
      GrayImage grayImage0 = new GrayImage(255, 255);
      ROI rOI0 = new ROI(255, 255, 255, 255);
      int int1 = (-424);
      grayImage0.toString();
      rOI0.setROI(int0, int0, int1, int0);
      ROI rOI1 = new ROI();
      GrayImage grayImage1 = new GrayImage();
      grayImage1.getJavaImage();
      grayImage0.copy();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      GrayImage grayImage1 = new GrayImage(intArray0);
      ROI rOI0 = new ROI();
      grayImage0.multiply((Image<Integer>) grayImage1, rOI0, rOI0);
      InterpolatedGrayImage interpolatedGrayImage0 = null;
      try {
        interpolatedGrayImage0 = new InterpolatedGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      short[][] shortArray0 = new short[0][5];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      grayImage0.absSum();
      grayImage0.addSum();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 5);
      grayImage0.addbuffer(0, 6, 0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        grayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 255;
      GrayImage grayImage0 = new GrayImage(255, 255);
      // Undeclared exception!
      grayImage0.max();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      ROI rOI0 = new ROI();
      grayImage0.copy(rOI0);
      // Undeclared exception!
      try { 
        grayImage0.addbuffer((-1), 746, Integer.MIN_VALUE, 2538, 1836);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short) (-693);
      shortArray0[2] = (short) (-693);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      grayImage0.median((-1));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Q4cw!>'GY[ 8?%kiE?";
      stringArray0[1] = "jigl.image.types.GrayImage";
      stringArray0[2] = "";
      stringArray0[3] = "UbSf?HkD, Vy1w";
      stringArray0[4] = "image fetch aborted or errored";
      stringArray0[5] = "2HBHGFg*^I%1({1j2";
      stringArray0[6] = "";
      // Undeclared exception!
      try { 
        GrayImage.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1812);
      grayImage0.min();
      ROI rOI0 = new ROI();
      grayImage0.toString();
      grayImage0.sqrSum();
      grayImage0.median(0);
      // Undeclared exception!
      try { 
        grayImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      GrayImage grayImage1 = new GrayImage(intArray0);
      int[] intArray1 = new int[3];
      intArray1[0] = 1810;
      intArray1[1] = 1851;
      intArray1[2] = 1810;
      GrayImage grayImage2 = null;
      try {
        grayImage2 = new GrayImage(2967, 946, intArray1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int int0 = 1854;
      GrayImage grayImage0 = new GrayImage(6, 1854);
      // Undeclared exception!
      grayImage0.addbuffer(6, 1854, 1854, 6, 6);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2585;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2585;
      intArray0[4] = 0;
      intArray0[5] = 4;
      intArray0[6] = 12;
      intArray0[7] = 0;
      intArray0[8] = 0;
      GrayImage grayImage0 = new GrayImage(2585, 0, intArray0);
      grayImage0.subtract(2585);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)16;
      shortArray0[1] = (short)3;
      shortArray0[2] = (short) (-1309);
      short short0 = (short) (-543);
      shortArray0[3] = (short) (-543);
      shortArray0[4] = (short) (-521);
      shortArray0[5] = (short) (-561);
      shortArray0[6] = (short)0;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(1, 1, shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[4];
      intArray1[1] = (-2408);
      intArray1[2] = 0;
      GrayImage grayImage0 = new GrayImage(intArray0);
      int int0 = 746;
      // Undeclared exception!
      try { 
        grayImage0.addbuffer(2576, 746, 0, 0, 746);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1864);
      grayImage0.min();
      grayImage0.sqrSum();
      GrayImage grayImage1 = new GrayImage(grayImage0);
      ROI rOI0 = new ROI(168, 1864, 3489, (-1712));
      GrayImage grayImage2 = null;
      try {
        grayImage2 = new GrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1864);
      grayImage0.min();
      grayImage0.sqrSum();
      grayImage0.toString();
      grayImage0.median(359);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 0;
      int int1 = 6;
      GrayImage grayImage0 = new GrayImage(6, 6);
      grayImage0.min();
      ROI rOI0 = new ROI();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.set(0, 0, integer0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[][] intArray0 = new int[2][5];
      GrayImage grayImage0 = new GrayImage(intArray0);
      // Undeclared exception!
      try { 
        grayImage0.byteSize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      grayImage0.multiply(1610);
      grayImage0.copy();
      GrayImage grayImage1 = new GrayImage(5, 0);
      // Undeclared exception!
      try { 
        grayImage0.subtract(1610, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(1853, 128);
      assertEquals(128, grayImage0.Y());
      assertEquals(1853, grayImage0.X());
      assertNotNull(grayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        grayImage0.clip(1853, 128, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 2585;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2585;
      intArray0[4] = 0;
      intArray0[5] = 4;
      intArray0[6] = 12;
      intArray0[7] = 0;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((java.awt.Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1864);
      grayImage0.min();
      grayImage0.sqrSum();
      grayImage0.toString();
      ROI rOI0 = new ROI(1864, 1864, 0, 8);
      // Undeclared exception!
      try { 
        grayImage0.subtract(0, 359, Integer.MIN_VALUE, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[][] intArray0 = new int[3][8];
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(intArray0);
      int int1 = 924;
      ROI rOI0 = new ROI(7, (-2408), 924, 3180);
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      short[] shortArray0 = new short[8];
      shortArray0[2] = (short) (-693);
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      // Undeclared exception!
      try { 
        grayImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      // Undeclared exception!
      grayImage0.addbuffer(255, 255, 2046);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      int int0 = 1646;
      ROI rOI0 = new ROI(1412, 4, 1412, 255);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      // Undeclared exception!
      try { 
        grayImage0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(255, 255);
      assertEquals(255, grayImage0.X());
      assertEquals(255, grayImage0.Y());
      assertNotNull(grayImage0);
      
      // Undeclared exception!
      grayImage0.byteSize();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = (-2408);
      intArray1[2] = (-3517);
      intArray1[3] = 7;
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      grayImage0.max();
      GrayImage grayImage1 = grayImage0.addbuffer(10, 0, 0, 7, 1830);
      grayImage1.subtract(0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1854);
      grayImage0.min();
      grayImage0.min();
      ROI rOI0 = new ROI();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      // Undeclared exception!
      try { 
        grayImage0.divide((Image<Integer>) interpolatedGrayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(4, 0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      interpolatedGrayImage0.min();
      interpolatedGrayImage1.addbuffer(1847, 1, (-357), 4, 0);
      InterpolatedGrayImage interpolatedGrayImage3 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage1);
      interpolatedGrayImage2.subtract((-627));
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedGrayImage2.byteSize(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(8, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.multiply(1610);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 0;
      int int1 = 1854;
      GrayImage grayImage0 = new GrayImage(0, 1854);
      GrayImage grayImage1 = grayImage0.addbuffer(0, 1854, 1854, 0, 0);
      ROI rOI0 = null;
      int int2 = (-184);
      int int3 = 621;
      ROI rOI1 = new ROI();
      ROI rOI2 = new ROI(1854, 609, (-184), 621);
      // Undeclared exception!
      try { 
        grayImage0.add((Image<Integer>) grayImage1, rOI1, rOI2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -184
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1864);
      grayImage0.copy();
      grayImage0.min();
      grayImage0.sqrSum();
      grayImage0.toString();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      int int0 = 255;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1864, 255);
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      // Undeclared exception!
      interpolatedGrayImage0.clear(integer1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((-39), (-39), (int[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1847);
      grayImage0.min();
      grayImage0.sqrSum();
      grayImage0.toString();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      interpolatedGrayImage0.min();
      GrayImage grayImage1 = interpolatedGrayImage0.subtract((-1595));
      // Undeclared exception!
      try { 
        grayImage1.get(0, 1548);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1864);
      GrayImage grayImage1 = grayImage0.copy();
      grayImage0.min();
      grayImage0.sqrSum();
      grayImage0.toString();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      interpolatedGrayImage0.min();
      grayImage0.addbuffer(0, 0, 3991, 3, 1847);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(grayImage1);
      interpolatedGrayImage0.subtract(1847);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        grayImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      ROI rOI0 = new ROI(3180, 0, 8, (-2408));
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      grayImage0.max();
      ROI rOI0 = new ROI(3180, 0, 8, (-2408));
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      intArray0[0] = 0;
      int int1 = (-2408);
      intArray0[1] = (-2408);
      int int2 = (-3495);
      intArray0[2] = (-3495);
      int[][] intArray1 = new int[8][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      GrayImage grayImage0 = new GrayImage(intArray1);
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage(grayImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 255;
      GrayImage grayImage0 = new GrayImage(255, 255);
      ROI rOI0 = new ROI(255, 673, 255, 255);
      int int1 = (-424);
      rOI0.setROI(673, 255, (-424), 255);
      // Undeclared exception!
      try { 
        grayImage0.median((-680), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-1018);
      shortArray0[1] = (short)8;
      shortArray0[2] = (short)2414;
      GrayImage grayImage0 = new GrayImage(0, 0, shortArray0);
      GrayImage grayImage1 = new GrayImage(grayImage0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage1);
      interpolatedGrayImage0.divide((Image<Integer>) grayImage1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[4];
      intArray1[1] = (-2408);
      intArray1[2] = 0;
      GrayImage grayImage0 = new GrayImage(intArray0);
      ROI rOI0 = new ROI(1809, 0, 2607, (-2408));
      // Undeclared exception!
      try { 
        grayImage0.sqrSum();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1854);
      grayImage0.min();
      grayImage0.sqrSum();
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[7];
      intArray1[0] = 1852;
      intArray1[1] = 0;
      intArray1[2] = 1854;
      intArray1[3] = 1836;
      intArray1[4] = 0;
      intArray1[5] = 1854;
      intArray1[6] = 1854;
      intArray0[0] = intArray1;
      GrayImage grayImage1 = new GrayImage(intArray0);
      ROI rOI0 = new ROI(1854, 2826, 0, 1836);
      // Undeclared exception!
      try { 
        grayImage1.add(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1836
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 0;
      int int1 = (-3517);
      int[][] intArray1 = new int[2][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      GrayImage grayImage0 = new GrayImage(intArray1);
      int int2 = (-3879);
      // Undeclared exception!
      try { 
        grayImage0.byteSize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      grayImage0.subtract(1610);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      InterpolatedGrayImage interpolatedGrayImage0 = null;
      try {
        interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 1812;
      GrayImage grayImage0 = new GrayImage(1, 1812);
      grayImage0.min();
      // Undeclared exception!
      try { 
        grayImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = (-1631);
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((-1631), (-1631));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short) (-1505);
      shortArray0[1] = (short) (-693);
      shortArray0[2] = (short)1851;
      shortArray0[3] = (short) (-693);
      shortArray0[4] = (short) (-1505);
      shortArray0[5] = (short) (-1505);
      shortArray0[6] = (short) (-1505);
      shortArray0[7] = (short) (-693);
      shortArray0[8] = (short) (-693);
      GrayImage grayImage0 = new GrayImage(1221, (short)0, shortArray0);
      assertArrayEquals(new short[] {(short) (-1505), (short) (-693), (short)1851, (short) (-693), (short) (-1505), (short) (-1505), (short) (-1505), (short) (-693), (short) (-693)}, shortArray0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(1221, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertNotNull(grayImage0);
      assertEquals(9, shortArray0.length);
      
      grayImage0.median(1221);
      assertArrayEquals(new short[] {(short) (-1505), (short) (-693), (short)1851, (short) (-693), (short) (-1505), (short) (-1505), (short) (-1505), (short) (-693), (short) (-693)}, shortArray0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(1221, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(9, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      short[][] shortArray0 = new short[1][5];
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 35;
      int int1 = 1856;
      GrayImage grayImage0 = new GrayImage(35, 1856);
      assertEquals(35, grayImage0.X());
      assertEquals(1856, grayImage0.Y());
      assertNotNull(grayImage0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      int int2 = (-1595);
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      grayImage0.copy();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1854);
      assertEquals(0, grayImage0.addSum());
      assertEquals(1854, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertNotNull(grayImage0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      GrayImage grayImage1 = new GrayImage(grayImage0);
      assertEquals(1854, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(1854, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotNull(grayImage1);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      rOI1.setROI(1854, 0, 0, 247);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(247, rOI1.ly());
      assertEquals(1855, rOI1.X());
      assertEquals(1854, rOI1.lx());
      assertEquals(248, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      
      ROI rOI2 = new ROI();
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertNotNull(rOI2);
      
      long long0 = grayImage1.sqrSum();
      assertEquals(0, grayImage0.addSum());
      assertEquals(1854, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(1854, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(0L, long0);
      
      String string0 = grayImage1.toString();
      assertEquals(0, grayImage0.addSum());
      assertEquals(1854, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(1854, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(string0);
      assertEquals("0:1854\n", string0);
      
      // Undeclared exception!
      try { 
        grayImage0.clip((-4208), 32767, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 2594);
      assertEquals(0, grayImage0.absSum());
      assertEquals(2594, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertNotNull(grayImage0);
      
      GrayImage grayImage1 = grayImage0.multiply(0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(2594, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(2594, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      
      GrayImage grayImage2 = grayImage0.copy();
      assertEquals(0, grayImage0.absSum());
      assertEquals(2594, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.X());
      assertEquals(2594, grayImage2.Y());
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertNotNull(grayImage2);
      
      GrayImage grayImage3 = new GrayImage(2594, 1845);
      assertEquals(2594, grayImage3.X());
      assertEquals(1845, grayImage3.Y());
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertNotNull(grayImage3);
      
      // Undeclared exception!
      try { 
        grayImage3.addbuffer((-32768), 1845, (-32768));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(1848, 1848);
      assertEquals(1848, grayImage0.X());
      assertEquals(1848, grayImage0.Y());
      assertNotNull(grayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        grayImage0.subtract(1848, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertNotNull(grayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertNotNull(interpolatedGrayImage0);
      
      Integer integer0 = interpolatedGrayImage0.max();
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 1864;
      GrayImage grayImage0 = new GrayImage(0, 1864);
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1864, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertNotNull(grayImage0);
      
      GrayImage grayImage1 = new GrayImage(1864, 0);
      assertEquals(1864, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotNull(grayImage1);
      
      Integer integer0 = grayImage1.min();
      assertEquals(1864, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage1, grayImage0);
      assertNull(integer0);
      
      long long0 = grayImage0.sqrSum();
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1864, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertNotSame(grayImage0, grayImage1);
      assertEquals(0L, long0);
      
      ROI rOI0 = new ROI((-1595), 0, (-1595), 1864);
      assertEquals((-1595), rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(1865, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1864, rOI0.ly());
      assertEquals((-1595), rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        grayImage1.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertNotNull(grayImage0);
      assertEquals(0, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.subtract(1610);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertEquals(0, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        grayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      short[][] shortArray0 = new short[0][5];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertNotNull(grayImage0);
      assertEquals(0, shortArray0.length);
      
      int int0 = grayImage0.absSum();
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, int0);
      assertEquals(0, shortArray0.length);
      
      int int1 = grayImage0.addSum();
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, shortArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage0 = null;
      try {
        interpolatedGrayImage0 = new InterpolatedGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertNotNull(grayImage0);
      assertEquals(0, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.multiply(1610);
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertEquals(0, intArray0.length);
      
      GrayImage grayImage2 = grayImage0.copy();
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertNotNull(grayImage2);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.toString((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 21;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(4, 21);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(21, interpolatedGrayImage0.Y());
      assertEquals(4, interpolatedGrayImage0.X());
      assertNotNull(interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(21, interpolatedGrayImage0.Y());
      assertEquals(4, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(21, interpolatedGrayImage1.Y());
      assertEquals(4, interpolatedGrayImage1.X());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertNotNull(interpolatedGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage1);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(21, interpolatedGrayImage0.Y());
      assertEquals(4, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(21, interpolatedGrayImage1.Y());
      assertEquals(4, interpolatedGrayImage1.X());
      assertEquals(21, interpolatedGrayImage2.Y());
      assertEquals(4, interpolatedGrayImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotNull(interpolatedGrayImage2);
      
      Integer integer0 = interpolatedGrayImage2.min();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(21, interpolatedGrayImage0.Y());
      assertEquals(4, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(21, interpolatedGrayImage1.Y());
      assertEquals(4, interpolatedGrayImage1.X());
      assertEquals(21, interpolatedGrayImage2.Y());
      assertEquals(4, interpolatedGrayImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNull(integer0);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[][] intArray1 = new int[2][5];
      intArray1[0] = intArray0;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.util.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      short[][] shortArray0 = new short[0][5];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertNotNull(grayImage0);
      assertEquals(0, shortArray0.length);
      
      int int0 = grayImage0.absSum();
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, int0);
      assertEquals(0, shortArray0.length);
      
      int int1 = grayImage0.addSum();
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, shortArray0.length);
      
      int int2 = 3082;
      int int3 = 1;
      GrayImage grayImage1 = grayImage0.addbuffer(8, 1, 667);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(5336, grayImage1.addSum());
      assertEquals(3559112L, grayImage1.sqrSum());
      assertEquals(1, grayImage1.Y());
      assertEquals(5336, grayImage1.absSum());
      assertEquals(8, grayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertEquals(0, shortArray0.length);
      
      // Undeclared exception!
      grayImage1.addbuffer(3082, 1824, 1831);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(grayImage0);
      
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = (-2408);
      intArray1[2] = 0;
      int int0 = 7;
      intArray1[3] = 7;
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(1, grayImage0.Y());
      assertEquals(4, grayImage0.X());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      Integer integer0 = grayImage0.min();
      assertEquals(1, grayImage0.Y());
      assertEquals(4, grayImage0.X());
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals((-2408), (int)integer0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(255, 255);
      assertEquals(255, grayImage0.Y());
      assertEquals(255, grayImage0.X());
      assertNotNull(grayImage0);
      
      ROI rOI0 = new ROI(255, 673, 255, 255);
      assertEquals(1, rOI0.X());
      assertEquals(419, rOI0.Y());
      assertEquals(255, rOI0.lx());
      assertEquals(673, rOI0.ly());
      assertEquals(255, rOI0.uy());
      assertEquals(255, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        grayImage0.multiply(255, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1851);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1851, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertNotNull(grayImage0);
      
      Integer integer0 = grayImage0.min();
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1851, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertNull(integer0);
      
      long long0 = grayImage0.sqrSum();
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1851, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, long0);
      
      int int0 = (-3879);
      int int1 = 1162;
      int int2 = (-3164);
      ROI rOI0 = new ROI(1162, 1624, (-3164), 16);
      assertEquals(4327, rOI0.X());
      assertEquals(1609, rOI0.Y());
      assertEquals((-3164), rOI0.ux());
      assertEquals(16, rOI0.uy());
      assertEquals(1624, rOI0.ly());
      assertEquals(1162, rOI0.lx());
      assertNotNull(rOI0);
      
      int int3 = 8;
      int int4 = 100;
      int int5 = 378;
      int int6 = 6;
      int int7 = (-1305);
      int int8 = 1822;
      // Undeclared exception!
      try { 
        grayImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3164
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 0;
      int int1 = 1854;
      GrayImage grayImage0 = new GrayImage(0, 1854);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1854, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(grayImage0);
      
      Integer integer0 = grayImage0.min();
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1854, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertNull(integer0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        grayImage0.add((Image<Integer>) null, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(4, 0);
      assertEquals(4, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertNotNull(interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertEquals(4, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(4, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertNotNull(interpolatedGrayImage1);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertEquals(4, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(4, image0.X());
      assertEquals(0, image0.Y());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, image0);
      assertNotNull(image0);
      
      Image<Integer> image1 = interpolatedGrayImage1.clear(integer0);
      assertEquals(4, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(4, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(4, image1.X());
      assertEquals(0, image1.Y());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)image0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(image1.equals((Object)image0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, image0);
      assertNotSame(interpolatedGrayImage0, image1);
      assertNotSame(interpolatedGrayImage1, image0);
      assertSame(interpolatedGrayImage1, image1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(image1, image0);
      assertNotNull(image1);
      
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2513;
      shortArray0[1] = (short) (-258);
      shortArray0[2] = (short) (-258);
      shortArray0[3] = (short)759;
      shortArray0[4] = (short)1804;
      shortArray0[5] = (short) (-2484);
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((-39), (-39), shortArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertNotNull(grayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertNotNull(interpolatedGrayImage0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Image<Integer> image0 = interpolatedGrayImage0.clear(integer0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, image0.X());
      assertEquals(0, image0.Y());
      assertSame(interpolatedGrayImage0, image0);
      assertNotNull(image0);
      
      int int0 = 1648;
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[4];
      int int0 = 737;
      intArray1[0] = 737;
      int int1 = (-2408);
      intArray1[1] = (-2408);
      intArray1[2] = (-3517);
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(1, grayImage0.Y());
      assertEquals(4, grayImage0.X());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      int int2 = 3180;
      int int3 = (-3879);
      // Undeclared exception!
      try { 
        grayImage0.byteSize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[4];
      int int0 = 0;
      intArray1[0] = 0;
      intArray1[1] = (-2408);
      intArray1[2] = (-3517);
      intArray1[3] = 7;
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(4, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      short[][] shortArray0 = new short[0][5];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertNotNull(grayImage0);
      assertEquals(0, shortArray0.length);
      
      int int0 = grayImage0.absSum();
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, int0);
      assertEquals(0, shortArray0.length);
      
      int int1 = grayImage0.addSum();
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, shortArray0.length);
      
      GrayImage grayImage1 = grayImage0.addbuffer(0, 6, 0);
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(6, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertEquals(0, shortArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage0 = null;
      try {
        interpolatedGrayImage0 = new InterpolatedGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 3219;
      GrayImage grayImage0 = new GrayImage(3219, 3219);
      assertEquals(3219, grayImage0.Y());
      assertEquals(3219, grayImage0.X());
      assertNotNull(grayImage0);
      
      // Undeclared exception!
      grayImage0.min();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1864);
      assertEquals(1864, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(grayImage0);
      
      Integer integer0 = grayImage0.min();
      assertEquals(1864, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertNull(integer0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertEquals(1864, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1864, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertNotNull(interpolatedGrayImage0);
      
      // Undeclared exception!
      try { 
        grayImage0.divide((Image<Integer>) interpolatedGrayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(8, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      int int0 = (-580);
      int int1 = 1825;
      ROI rOI0 = new ROI((-580), 1825, (-580), (-580));
      assertEquals(2406, rOI0.Y());
      assertEquals((-580), rOI0.uy());
      assertEquals((-580), rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals((-580), rOI0.lx());
      assertEquals(1825, rOI0.ly());
      assertNotNull(rOI0);
      
      int int2 = 1131;
      ROI rOI1 = new ROI(7, 1825, 1131, 1131);
      assertEquals(7, rOI1.ux());
      assertEquals(1125, rOI1.X());
      assertEquals(1825, rOI1.ly());
      assertEquals(1131, rOI1.uy());
      assertEquals(695, rOI1.Y());
      assertEquals(1131, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      GrayImage grayImage1 = new GrayImage(1131, 12);
      assertEquals(1131, grayImage1.X());
      assertEquals(12, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotNull(grayImage1);
      
      // Undeclared exception!
      try { 
        grayImage0.multiply((Image<Integer>) grayImage1, rOI1, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1131
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1864);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1864, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(grayImage0);
      
      GrayImage grayImage1 = grayImage0.copy();
      assertEquals(0, grayImage0.X());
      assertEquals(1864, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(1864, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      
      Integer integer0 = grayImage0.min();
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1864, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertNotSame(grayImage0, grayImage1);
      assertNull(integer0);
      
      long long0 = grayImage0.sqrSum();
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1864, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertNotSame(grayImage0, grayImage1);
      assertEquals(0L, long0);
      
      String string0 = grayImage0.toString();
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1864, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertNotSame(grayImage0, grayImage1);
      assertNotNull(string0);
      assertEquals("0:1864\n", string0);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(1864, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(1864, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertNotNull(interpolatedGrayImage0);
      
      Integer integer1 = interpolatedGrayImage0.min();
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1864, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(1864, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertNotSame(grayImage0, grayImage1);
      assertNull(integer1);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.subtract(1102);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1864, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(1864, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(1864, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertNotSame(grayImage0, grayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[4];
      intArray1[1] = (-2408);
      intArray1[2] = 0;
      int int0 = 7;
      intArray1[3] = 7;
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(4, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI(0, 3, 7, 1823);
      assertEquals(1823, rOI0.ly());
      assertEquals(8, rOI0.X());
      assertEquals(3, rOI0.uy());
      assertEquals(7, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(1821, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        grayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = (-2408);
      intArray1[2] = (-3517);
      intArray1[3] = 7;
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(1, grayImage0.Y());
      assertEquals(4, grayImage0.X());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      int int0 = 3180;
      ROI rOI0 = new ROI(0, 3180, 0, (-3879));
      assertEquals(1, rOI0.X());
      assertEquals((-3879), rOI0.uy());
      assertEquals(3180, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(7060, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int1 = 2058;
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(255, 1847);
      assertEquals(1847, grayImage0.Y());
      assertEquals(255, grayImage0.X());
      assertNotNull(grayImage0);
      
      // Undeclared exception!
      grayImage0.min();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1847);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(1847, grayImage0.Y());
      assertNotNull(grayImage0);
      
      long long0 = grayImage0.sqrSum();
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(1847, grayImage0.Y());
      assertEquals(0L, long0);
      
      String string0 = grayImage0.toString();
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(1847, grayImage0.Y());
      assertNotNull(string0);
      assertEquals("0:1847\n", string0);
      
      ROI rOI0 = new ROI(8, 1501, 1830, 1847);
      assertEquals(1830, rOI0.lx());
      assertEquals(347, rOI0.Y());
      assertEquals(1501, rOI0.uy());
      assertEquals(1847, rOI0.ly());
      assertEquals(1823, rOI0.X());
      assertEquals(8, rOI0.ux());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI(8, 1830, 1830, 1847);
      assertEquals(1823, rOI1.X());
      assertEquals(18, rOI1.Y());
      assertEquals(8, rOI1.ux());
      assertEquals(1847, rOI1.ly());
      assertEquals(1830, rOI1.lx());
      assertEquals(1830, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      // Undeclared exception!
      try { 
        grayImage0.subtract(1827, 0, 1830, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1835
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = (-2408);
      intArray1[2] = (-3517);
      intArray1[3] = 7;
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(4, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI(0, 3180, 0, (-3879));
      assertEquals(7060, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(3180, rOI0.ly());
      assertEquals((-3879), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        grayImage0.subtract((-3517));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      short[][] shortArray0 = new short[0][5];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertNotNull(grayImage0);
      assertEquals(0, shortArray0.length);
      
      int int0 = grayImage0.addSum();
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, int0);
      assertEquals(0, shortArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3898, 5);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(5, interpolatedGrayImage0.Y());
      assertEquals(3898, interpolatedGrayImage0.X());
      assertNotNull(interpolatedGrayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.Y());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0, shortArray0.length);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.divide((Image<Integer>) interpolatedGrayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 0;
      int int1 = 1854;
      GrayImage grayImage0 = new GrayImage(0, 1854);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(1854, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertNotNull(grayImage0);
      
      int int2 = 2738;
      // Undeclared exception!
      try { 
        grayImage0.median(2738, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((java.awt.Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int int0 = 255;
      GrayImage grayImage0 = new GrayImage(255, 255);
      assertEquals(255, grayImage0.X());
      assertEquals(255, grayImage0.Y());
      assertNotNull(grayImage0);
      
      int int1 = 0;
      int int2 = 3991;
      ROI rOI0 = new ROI(255, 0, 3991, 255);
      assertEquals(3991, rOI0.lx());
      assertEquals(256, rOI0.Y());
      assertEquals(3737, rOI0.X());
      assertEquals(255, rOI0.ly());
      assertEquals(255, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int3 = (-1238);
      rOI0.setROI((-1238), 3991, (-424), 3991);
      assertEquals(815, rOI0.X());
      assertEquals(3991, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals((-1238), rOI0.ux());
      assertEquals(3991, rOI0.uy());
      assertEquals((-424), rOI0.lx());
      
      rOI0.setROI(255, 255, (-1238), 0);
      assertEquals(256, rOI0.Y());
      assertEquals(255, rOI0.lx());
      assertEquals((-1238), rOI0.ux());
      assertEquals(255, rOI0.ly());
      assertEquals(1494, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        grayImage0.multiply(255, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1238
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = (-2408);
      intArray1[2] = (-3517);
      int int0 = 7;
      intArray1[3] = 7;
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(1, grayImage0.Y());
      assertEquals(4, grayImage0.X());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      int int1 = 11;
      // Undeclared exception!
      try { 
        grayImage0.addSum();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = (-2408);
      intArray1[2] = 0;
      intArray1[3] = 7;
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(1, grayImage0.Y());
      assertEquals(4, grayImage0.X());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI(0, 4, 0, 1919);
      assertEquals(1919, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1916, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        grayImage0.multiply((-3188), 1680, 7, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1684
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertNotNull(grayImage0);
      
      // Undeclared exception!
      try { 
        grayImage0.subtract(0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, (short[]) null);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertNotNull(grayImage0);
      
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertNotNull(grayImage0);
      
      String string0 = grayImage0.toString();
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertNotNull(string0);
      assertEquals("0:0\n", string0);
      
      Integer integer0 = grayImage0.max();
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      short[][] shortArray0 = new short[0][5];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertNotNull(grayImage0);
      assertEquals(0, shortArray0.length);
      
      int int0 = grayImage0.absSum();
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, int0);
      assertEquals(0, shortArray0.length);
      
      int int1 = grayImage0.addSum();
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, shortArray0.length);
      
      int int2 = 6;
      GrayImage grayImage1 = grayImage0.addbuffer(6, 0, 6);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(6, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertEquals(0, shortArray0.length);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        grayImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      short[][] shortArray0 = new short[0][5];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertNotNull(grayImage0);
      assertEquals(0, shortArray0.length);
      
      int int0 = grayImage0.absSum();
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, int0);
      assertEquals(0, shortArray0.length);
      
      int int1 = grayImage0.addSum();
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, shortArray0.length);
      
      int int2 = 3082;
      int int3 = 3898;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3898, 5);
      assertEquals(5, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3898, interpolatedGrayImage0.X());
      assertNotNull(interpolatedGrayImage0);
      
      int int4 = 1822;
      GrayImage grayImage1 = grayImage0.addbuffer(0, 0, 1822);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertEquals(0, shortArray0.length);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      GrayImage grayImage2 = interpolatedGrayImage0.copy(rOI0);
      assertEquals(5, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3898, interpolatedGrayImage0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, grayImage2.X());
      assertEquals(1, grayImage2.Y());
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertNotNull(grayImage2);
      
      // Undeclared exception!
      try { 
        grayImage2.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertNotNull(grayImage0);
      assertEquals(0, intArray0.length);
      
      GrayImage grayImage1 = new GrayImage(intArray0);
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotNull(grayImage1);
      assertEquals(0, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        grayImage1.clip(175, (-1024), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 255;
      GrayImage grayImage0 = new GrayImage(255, 255);
      assertEquals(255, grayImage0.Y());
      assertEquals(255, grayImage0.X());
      assertNotNull(grayImage0);
      
      int int1 = 0;
      ROI rOI0 = new ROI(255, 0, 3991, 255);
      assertEquals(255, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(256, rOI0.Y());
      assertEquals(255, rOI0.ly());
      assertEquals(3991, rOI0.lx());
      assertEquals(3737, rOI0.X());
      assertNotNull(rOI0);
      
      int int2 = (-424);
      rOI0.setROI(0, 3991, (-424), 3991);
      assertEquals(425, rOI0.X());
      assertEquals(3991, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals((-424), rOI0.ux());
      assertEquals(3991, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        grayImage0.multiply(255, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3991
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-693);
      shortArray0[1] = (short) (-693);
      shortArray0[2] = (short) (-693);
      shortArray0[3] = (short) (-693);
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(0, 274, shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertNotNull(grayImage0);
      
      Integer integer0 = grayImage0.min();
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertNull(integer0);
      
      long long0 = grayImage0.sqrSum();
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, long0);
      
      String string0 = grayImage0.toString();
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertNotNull(string0);
      assertEquals("0:0\n", string0);
      
      ROI rOI0 = new ROI(0, 0, 0, 8);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(8, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(9, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        grayImage0.subtract(0, 0, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1854);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1854, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertNotNull(grayImage0);
      
      GrayImage grayImage1 = grayImage0.multiply((-891));
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1854, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(1854, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      
      GrayImage grayImage2 = grayImage0.copy();
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1854, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(1854, grayImage2.Y());
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertNotNull(grayImage2);
      
      GrayImage grayImage3 = new GrayImage(0, 1846);
      assertEquals(0, grayImage3.absSum());
      assertEquals(1846, grayImage3.Y());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertNotNull(grayImage3);
      
      // Undeclared exception!
      try { 
        grayImage3.subtract(0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      short[][] shortArray0 = new short[0][5];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertNotNull(grayImage0);
      assertEquals(0, shortArray0.length);
      
      int int0 = grayImage0.absSum();
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, int0);
      assertEquals(0, shortArray0.length);
      
      int int1 = grayImage0.addSum();
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, shortArray0.length);
      
      int int2 = 6;
      int int3 = 3082;
      int int4 = 5;
      // Undeclared exception!
      grayImage0.addbuffer(3082, 2840, 5);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1854);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(1854, grayImage0.Y());
      assertNotNull(grayImage0);
      
      Integer integer0 = grayImage0.min();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(1854, grayImage0.Y());
      assertNull(integer0);
      
      long long0 = grayImage0.sqrSum();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(1854, grayImage0.Y());
      assertEquals(0L, long0);
      
      ROI rOI0 = new ROI((-1054), 0, 8, (-1054));
      assertEquals(0, rOI0.ly());
      assertEquals(1055, rOI0.Y());
      assertEquals((-1054), rOI0.uy());
      assertEquals(8, rOI0.lx());
      assertEquals((-1054), rOI0.ux());
      assertEquals(1063, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        grayImage0.subtract(313, 321, (-1680), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -733
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = (-2408);
      intArray1[2] = (-3517);
      int int0 = (-32768);
      int int1 = (-478);
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(8, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage0 = null;
      try {
        interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertNotNull(grayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertNotNull(interpolatedGrayImage0);
      
      ROI rOI0 = new ROI(1648, 4, 0, 1646);
      assertEquals(1649, rOI0.X());
      assertEquals(1643, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertEquals(1648, rOI0.lx());
      assertEquals(1646, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        grayImage0.divide((Image<Integer>) interpolatedGrayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(8, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      int int1 = 3180;
      int int2 = 2;
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        grayImage0.median(2, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertNotNull(grayImage0);
      
      Integer integer0 = grayImage0.min();
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertNull(integer0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      String string0 = grayImage0.toString();
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertNotNull(string0);
      assertEquals("0:0\n", string0);
      
      grayImage0.median(0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      
      // Undeclared exception!
      try { 
        grayImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertNotNull(grayImage0);
      
      // Undeclared exception!
      try { 
        grayImage0.addbuffer((-944), 2, 2585, (-1), 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int[][] intArray0 = new int[0][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertNotNull(grayImage0);
      assertEquals(0, intArray0.length);
      
      int int0 = 1610;
      int int1 = 711;
      int int2 = 2585;
      int int3 = 746;
      // Undeclared exception!
      grayImage0.addbuffer(int0, int1, int0, int2, int3);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int[][] intArray0 = new int[1][4];
      int[] intArray1 = new int[1];
      intArray1[0] = (-2408);
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(5798464L, grayImage0.sqrSum());
      assertEquals(2408, grayImage0.absSum());
      assertEquals((-2408), grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(1, grayImage0.X());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI(255, 5243, 722, 5);
      assertEquals(722, rOI0.lx());
      assertEquals(255, rOI0.ux());
      assertEquals(5243, rOI0.ly());
      assertEquals(5, rOI0.uy());
      assertEquals(5239, rOI0.Y());
      assertEquals(468, rOI0.X());
      assertNotNull(rOI0);
      
      ImageProducer imageProducer0 = grayImage0.getJavaImage();
      assertEquals(5798464L, grayImage0.sqrSum());
      assertEquals(2408, grayImage0.absSum());
      assertEquals((-2408), grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(1, grayImage0.X());
      assertNotNull(imageProducer0);
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.copy();
      assertEquals(5798464L, grayImage0.sqrSum());
      assertEquals(2408, grayImage0.absSum());
      assertEquals((-2408), grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(1, grayImage0.X());
      assertEquals(5798464L, grayImage1.sqrSum());
      assertEquals(1, grayImage1.X());
      assertEquals(1, grayImage1.Y());
      assertEquals((-2408), grayImage1.addSum());
      assertEquals(2408, grayImage1.absSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1854);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1854, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertNotNull(grayImage0);
      
      Integer integer0 = grayImage0.min();
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1854, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertNull(integer0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        grayImage0.add((Image<Integer>) null, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[][] intArray0 = new int[1][8];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(1, grayImage0.Y());
      assertEquals(8, grayImage0.X());
      assertNotNull(grayImage0);
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI((-580), 1825, (-580), (-580));
      assertEquals(2406, rOI0.Y());
      assertEquals((-580), rOI0.uy());
      assertEquals((-580), rOI0.ux());
      assertEquals(1825, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals((-580), rOI0.lx());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI(7, 1825, 1131, 1131);
      assertEquals(1131, rOI1.lx());
      assertEquals(695, rOI1.Y());
      assertEquals(1125, rOI1.X());
      assertEquals(1825, rOI1.ly());
      assertEquals(1131, rOI1.uy());
      assertEquals(7, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      GrayImage grayImage1 = new GrayImage(1131, 12);
      assertEquals(12, grayImage1.Y());
      assertEquals(1131, grayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotNull(grayImage1);
      
      // Undeclared exception!
      try { 
        grayImage0.multiply((Image<Integer>) grayImage1, rOI1, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1131
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      // Undeclared exception!
      try { 
        GrayImage.main((String[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(16, 16);
      assertEquals(16, interpolatedGrayImage0.X());
      assertEquals(16, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertNotNull(interpolatedGrayImage0);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract(16, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(1, 63);
      assertEquals(63, grayImage0.Y());
      assertEquals(1, grayImage0.X());
      assertNotNull(grayImage0);
      
      Integer integer0 = grayImage0.min();
      assertEquals(63, grayImage0.Y());
      assertEquals(1, grayImage0.X());
      assertNull(integer0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(12, 16);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(16, interpolatedGrayImage0.Y());
      assertEquals(12, interpolatedGrayImage0.X());
      assertNotNull(interpolatedGrayImage0);
      
      GrayImage grayImage1 = interpolatedGrayImage0.copy(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(16, interpolatedGrayImage0.Y());
      assertEquals(12, interpolatedGrayImage0.X());
      assertEquals(1, grayImage1.X());
      assertEquals(1, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(2, 1, 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int[][] intArray0 = new int[3][8];
      int[] intArray1 = new int[8];
      intArray1[1] = (-2408);
      intArray1[2] = 0;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(8, grayImage0.X());
      assertEquals(3, grayImage0.Y());
      assertNotNull(grayImage0);
      assertEquals(3, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.copy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 1854);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1854, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertNotNull(grayImage0);
      
      GrayImage grayImage1 = grayImage0.multiply((-891));
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1854, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(1854, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotNull(grayImage1);
      
      GrayImage grayImage2 = grayImage0.copy();
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1854, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(1854, grayImage2.Y());
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertNotNull(grayImage2);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        grayImage0.subtract(1854, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(762, 255);
      assertEquals(762, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(255, interpolatedGrayImage0.Y());
      assertNotNull(interpolatedGrayImage0);
      
      int[][] intArray0 = new int[0][0];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertNotNull(grayImage0);
      assertEquals(0, intArray0.length);
      
      ROI rOI0 = new ROI(5243, 1814, 762, 1937);
      assertEquals(5243, rOI0.lx());
      assertEquals(1814, rOI0.uy());
      assertEquals(124, rOI0.Y());
      assertEquals(4482, rOI0.X());
      assertEquals(762, rOI0.ux());
      assertEquals(1937, rOI0.ly());
      assertNotNull(rOI0);
      
      GrayImage grayImage1 = new GrayImage(interpolatedGrayImage0);
  }
}
