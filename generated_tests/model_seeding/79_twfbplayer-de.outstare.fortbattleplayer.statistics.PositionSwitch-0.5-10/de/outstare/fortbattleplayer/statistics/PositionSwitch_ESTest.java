/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 18:39:22 GMT 2019
 */

package de.outstare.fortbattleplayer.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.impl.SimpleArea;
import de.outstare.fortbattleplayer.model.impl.SimpleCombatant;
import de.outstare.fortbattleplayer.model.impl.SimpleSector;
import de.outstare.fortbattleplayer.statistics.PositionSwitch;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PositionSwitch_ESTest extends PositionSwitch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 14, false, 31, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-16), 1006, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 14, simpleArea0, true);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 100, "w6#LXP", characterClass0, (Weapon) null, "u{_bxc ;c gDS:Y");
      PositionSwitch positionSwitch0 = new PositionSwitch(1200, simpleCombatant0, simpleCombatant0);
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, 1006, "de.outstare.fortbattleplayer.model.impl.SimpleBattleField", characterClass0, (Weapon) null, "}n");
      PositionSwitch positionSwitch1 = new PositionSwitch(1200, simpleCombatant1, positionSwitch0.player2);
      int int0 = positionSwitch0.compareTo(positionSwitch1);
      assertEquals(1200, positionSwitch1.round);
      assertEquals(19, int0);
      assertFalse(positionSwitch1.equals((Object)positionSwitch0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 14, false, 31, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-16), 1006, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 14, simpleArea0, true);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 100, "w6#LXP", characterClass0, (Weapon) null, "u{_bxc ;c gDS:Y");
      PositionSwitch positionSwitch0 = new PositionSwitch(1200, simpleCombatant0, simpleCombatant0);
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, 1006, "de.outstare.fortbattleplayer.model.impl.SimpleBattleField", characterClass0, (Weapon) null, "}n");
      PositionSwitch positionSwitch1 = new PositionSwitch(1200, simpleCombatant1, positionSwitch0.player2);
      positionSwitch1.hashCode();
      assertEquals(1200, positionSwitch1.round);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(300, 300).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch(300, combatant0, combatant0);
      // Undeclared exception!
      try { 
        positionSwitch0.compareTo((PositionSwitch) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.PositionSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PositionSwitch positionSwitch0 = null;
      try {
        positionSwitch0 = new PositionSwitch(0, (Combatant) null, (Combatant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.PositionSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch((-2592), combatant0, combatant0);
      assertEquals((-2592), positionSwitch0.round);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn((-721), 3790, 3790, 4348).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch((-721), combatant0, combatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch(5, positionSwitch0.player2, positionSwitch0.player1);
      boolean boolean0 = positionSwitch0.equals(positionSwitch1);
      assertFalse(positionSwitch1.equals((Object)positionSwitch0));
      assertEquals(5, positionSwitch1.round);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn((-743), (-743)).when(combatant0)._health();
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleSector simpleSector0 = new SimpleSector(120, true, true, 224, 120, true, (-743), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-2572), 224, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-2572), simpleArea0, true);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 120, "", characterClass0, (Weapon) null, "");
      PositionSwitch positionSwitch0 = new PositionSwitch(224, combatant0, combatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch((-885), simpleCombatant0, simpleCombatant0);
      boolean boolean0 = positionSwitch1.equals(positionSwitch0);
      assertEquals((-885), positionSwitch1.round);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn((-721), (-721), 0, 0).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch((-721), combatant0, combatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch((-129), positionSwitch0.player1, positionSwitch0.player2);
      int int0 = positionSwitch0.compareTo(positionSwitch1);
      assertEquals((-129), positionSwitch1.round);
      assertEquals((-1), int0);
      assertFalse(positionSwitch1.equals((Object)positionSwitch0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn((-721), 2028).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch((-721), combatant0, combatant0);
      int int0 = positionSwitch0.compareTo(positionSwitch0);
      assertEquals((-721), positionSwitch0.round);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn((-721), 2028, (-721), 120).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch((-721), combatant0, combatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch((-721), positionSwitch0.player1, positionSwitch0.player1);
      boolean boolean0 = positionSwitch0.equals(positionSwitch1);
      assertEquals((-721), positionSwitch1.round);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 14, false, 31, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-16), 1006, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 14, simpleArea0, true);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 100, "w6#LXP", characterClass0, (Weapon) null, "u{_bxc ;c gDS:Y");
      PositionSwitch positionSwitch0 = new PositionSwitch(1200, simpleCombatant0, simpleCombatant0);
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, 1006, "de.outstare.fortbattleplayer.model.impl.SimpleBattleField", characterClass0, (Weapon) null, "}n");
      PositionSwitch positionSwitch1 = new PositionSwitch(1200, simpleCombatant1, positionSwitch0.player2);
      int int0 = positionSwitch1.compareTo(positionSwitch0);
      assertEquals((-19), int0);
      assertFalse(positionSwitch0.equals((Object)positionSwitch1));
      assertEquals(1200, positionSwitch1.round);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 14, false, 31, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-16), 1006, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 14, simpleArea0, true);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 100, "w6#LXP", characterClass0, (Weapon) null, "u{_bxc ;c gDS:Y");
      PositionSwitch positionSwitch0 = new PositionSwitch(1200, simpleCombatant0, simpleCombatant0);
      boolean boolean0 = positionSwitch0.equals("}n");
      assertEquals(1200, positionSwitch0.round);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn((-721), 2028).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch((-721), combatant0, combatant0);
      boolean boolean0 = positionSwitch0.equals((Object) null);
      assertEquals((-721), positionSwitch0.round);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 14, false, 31, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-16), 1006, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 14, simpleArea0, true);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 100, "w6#LXP", characterClass0, (Weapon) null, "u{_bxc ;c gDS:Y");
      PositionSwitch positionSwitch0 = new PositionSwitch(1200, simpleCombatant0, simpleCombatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch(0, positionSwitch0.player1, positionSwitch0.player2);
      int int0 = positionSwitch0.compareTo(positionSwitch1);
      assertEquals(0, positionSwitch1.round);
      assertFalse(positionSwitch1.equals((Object)positionSwitch0));
      assertEquals(1, int0);
  }
}
