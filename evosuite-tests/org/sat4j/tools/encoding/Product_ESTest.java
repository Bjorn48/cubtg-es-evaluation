/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:29:08 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.Product;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Product_ESTest extends Product_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Product product0 = new Product();
      VecInt vecInt0 = new VecInt(37, 4917);
      // Undeclared exception!
      try { 
        product0.addAtMostNonOpt((ISolver) null, vecInt0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Product product0 = new Product();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst((-258));
      IVecInt iVecInt0 = vecInt0.push((-258));
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, false);
      GateTranslator gateTranslator0 = new GateTranslator(maxSatDecorator0);
      vecInt0.push((-258));
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(maxSatDecorator0, iVecInt0, solutionFoundListener0);
      product0.addExactlyOne(abstractMinimalModel0, iVecInt0);
      vecInt0.push((-1));
      IVecInt iVecInt1 = vecInt0.push((-1));
      product0.addExactlyOne(gateTranslator0, iVecInt1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Product product0 = new Product();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        product0.addAtMostNonOpt(iSolver0, iVecInt0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Product product0 = new Product();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(0, 0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      product0.addExactly(iSolver0, readOnlyVecInt0, 0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      VecInt vecInt0 = new VecInt();
      Product product0 = new Product();
      try { 
        product0.addExactlyOne(iSolver0, vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Product product0 = new Product();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      VecInt vecInt0 = new VecInt(3042, 3042);
      // Undeclared exception!
      product0.addExactlyOne(dimacsStringSolver0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Product product0 = new Product();
      VecInt vecInt0 = new VecInt();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(statisticsSolver0, false);
      // Undeclared exception!
      try { 
        product0.addExactlyOne(maxSatDecorator0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Product product0 = new Product();
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        product0.addExactlyOne((ISolver) null, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Product product0 = new Product();
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams(1167);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, fixedPeriodRestarts0, mUSLauncher0);
      NegationDecorator<Solver<ClausalDataStructureWL>> negationDecorator0 = new NegationDecorator<Solver<ClausalDataStructureWL>>(solver0);
      VecInt vecInt0 = new VecInt(3100);
      IVecInt iVecInt0 = vecInt0.push(3271);
      // Undeclared exception!
      try { 
        product0.addExactlyOne(negationDecorator0, iVecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Product product0 = new Product();
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams(679, 679);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, naturalStaticOrder0, miniSATRestarts0);
      VecInt vecInt0 = new VecInt(679, 0);
      // Undeclared exception!
      try { 
        product0.addExactlyOne(solver0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Product product0 = new Product();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      IVecInt iVecInt0 = VecInt.EMPTY;
      try { 
        product0.addExactly(iSolver0, iVecInt0, 50);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Product product0 = new Product();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupClauseSelectorSolver<DimacsOutputSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0);
      VecInt vecInt0 = new VecInt(3119, 3119);
      // Undeclared exception!
      product0.addExactly(groupClauseSelectorSolver0, vecInt0, 3119);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Product product0 = new Product();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      FullClauseSelectorSolver<DimacsOutputSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0, false);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      // Undeclared exception!
      try { 
        product0.addExactly(fullClauseSelectorSolver0, iVecInt0, (-2047));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 2047
         //
         verifyException("org.sat4j.tools.DimacsOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Product product0 = new Product();
      VecInt vecInt0 = new VecInt(7);
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        product0.addExactly((ISolver) null, iVecInt0, 7);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Product product0 = new Product();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsOutputSolver0);
      iVecInt0.push(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, varOrderHeap0, fixedPeriodRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      // Undeclared exception!
      try { 
        product0.addExactly(iSolver0, iVecInt0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>((-775));
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams((-1.0), 0);
      PureOrder pureOrder0 = new PureOrder(17);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, pureOrder0, miniSATRestarts0);
      VecInt vecInt0 = new VecInt(679, 679);
      Product product0 = new Product();
      product0.addAtLeastOne(solver0, vecInt0);
      try { 
        product0.addAtMostOne(solver0, vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Product product0 = new Product();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupClauseSelectorSolver<DimacsOutputSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0);
      VecInt vecInt0 = new VecInt(3119, 3119);
      // Undeclared exception!
      product0.addAtMostOne(groupClauseSelectorSolver0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Product product0 = new Product();
      VecInt vecInt0 = new VecInt(3119, 3119);
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      // Undeclared exception!
      try { 
        product0.addAtMostOne(statisticsSolver0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Product product0 = new Product();
      // Undeclared exception!
      try { 
        product0.addAtMostOne((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Product product0 = new Product();
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams(817.6311278661, 679);
      PureOrder pureOrder0 = new PureOrder(Integer.MAX_VALUE);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, pureOrder0, miniSATRestarts0);
      VecInt vecInt0 = new VecInt(603, Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        product0.addAtMostOne(solver0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Product product0 = new Product();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      FullClauseSelectorSolver<DimacsOutputSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0, true);
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        product0.addAtMostOne(fullClauseSelectorSolver0, vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Product product0 = new Product();
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams(0.0, 1048);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, varOrderHeap0, miniSATRestarts0);
      VecInt vecInt0 = new VecInt(233, 0);
      // Undeclared exception!
      try { 
        product0.addAtMostOne(solver0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Product product0 = new Product();
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, fixedPeriodRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      ModelIterator modelIterator0 = new ModelIterator(iSolver0, 1L);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver0);
      try { 
        product0.addAtMostNonOpt(modelIterator0, iVecInt0, (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Product product0 = new Product();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      VecInt vecInt0 = new VecInt(3119, 3119);
      // Undeclared exception!
      product0.addAtMostNonOpt(dimacsOutputSolver0, vecInt0, 3119);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Product product0 = new Product();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(672);
      // Undeclared exception!
      try { 
        product0.addAtMostNonOpt(dimacsStringSolver0, (IVecInt) null, 672);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Product", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Product product0 = new Product();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupClauseSelectorSolver<DimacsOutputSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0);
      VecInt vecInt0 = new VecInt(3119, 3119);
      // Undeclared exception!
      try { 
        product0.addAtMostNonOpt(groupClauseSelectorSolver0, vecInt0, (-1127));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Product", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Product product0 = new Product();
      VecInt vecInt0 = new VecInt(3119, 3119);
      vecInt0.push(679);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(negationDecorator0, vecInt0, checkMUSSolutionListener0);
      // Undeclared exception!
      try { 
        product0.addAtMostNonOpt(abstractMinimalModel0, vecInt0, 3119);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Product product0 = new Product();
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams(817.6311278661, 2116);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, varOrderHeap0, miniSATRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      VecInt vecInt0 = new VecInt(18, 18);
      product0.addAtMostNonOpt(iSolver0, vecInt0, 17);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0, true);
      // Undeclared exception!
      try { 
        product0.addAtMostNonOpt(maxSatDecorator0, vecInt0, 17);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Product product0 = new Product();
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams(817.6311278661, 2116);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, varOrderHeap0, miniSATRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      VecInt vecInt0 = new VecInt(18, 18);
      product0.addAtMostOne(iSolver0, vecInt0);
      assertEquals(18, iSolver0.nVars());
      assertEquals(52, solver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Product product0 = new Product();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      VecInt vecInt0 = new VecInt(8, 6);
      // Undeclared exception!
      try { 
        product0.addAtMostNonOpt(dimacsOutputSolver0, vecInt0, 6);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 6
         //
         verifyException("org.sat4j.tools.DimacsOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Product product0 = new Product();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      VecInt vecInt0 = new VecInt(21, 21);
      product0.addAtMostNonOpt(dimacsOutputSolver0, vecInt0, 1);
      assertEquals(10, dimacsOutputSolver0.nVars());
      assertEquals(10, dimacsOutputSolver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Product product0 = new Product();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupClauseSelectorSolver<DimacsOutputSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0);
      VecInt vecInt0 = new VecInt();
      IConstr iConstr0 = product0.addAtMostNonOpt(groupClauseSelectorSolver0, vecInt0, (-831));
      assertEquals(0, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Product product0 = new Product();
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams(817.6311278661, 2116);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, varOrderHeap0, miniSATRestarts0);
      VecInt vecInt0 = new VecInt(18, 18);
      IConstr iConstr0 = product0.addAtMostNonOpt(solver0, vecInt0, 2116);
      assertEquals(0, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Product product0 = new Product();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      // Undeclared exception!
      try { 
        product0.addExactly(dimacsOutputSolver0, (IVecInt) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }
}
