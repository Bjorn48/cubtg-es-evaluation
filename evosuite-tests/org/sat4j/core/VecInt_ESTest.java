/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:31:52 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.EmptyVecInt;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IVecInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VecInt_ESTest extends VecInt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      VecInt vecInt0 = new VecInt(361, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1160;
      intArray0[2] = (-1442);
      // Undeclared exception!
      try { 
        vecInt0.copyTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt(0);
      vecInt1.containsAt(0, 0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      int int0 = 2;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort((-1), (-1), comparator0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.sortUnique();
      iVecInt0.containsAt((-1));
      iVecInt0.shrink(2);
      int int1 = (-2788);
      // Undeclared exception!
      try { 
        iVecInt0.moveTo(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3167, 3167);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.iterator();
      vecInt0.selectionSort(3167, 3167, comparator0);
      vecInt0.last();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      // Undeclared exception!
      try { 
        vecInt0.moveTo2(readOnlyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      VecInt vecInt0 = new VecInt(492);
      vecInt0.insertFirst(492);
      VecInt vecInt1 = new VecInt(0);
      vecInt1.pushAll(vecInt0);
      vecInt0.hashCode();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      VecInt vecInt0 = new VecInt(93, 93);
      vecInt0.sortUnique();
      vecInt0.isEmpty();
      vecInt0.containsAt(93);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(0, (-1), comparator0);
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      IVecInt iVecInt0 = emptyVecInt0.clone();
      // Undeclared exception!
      try { 
        vecInt0.moveTo2(iVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0);
      vecInt0.growTo(5, (-1454));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(0, 0, comparator0);
      vecInt0.containsAt(0);
      // Undeclared exception!
      try { 
        vecInt0.growTo(1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.moveTo(intArray0);
      vecInt0.clone();
      vecInt0.moveTo(intArray0);
      vecInt0.indexOf(0);
      vecInt0.unsafePush(0);
      VecInt vecInt1 = new VecInt(0, 0);
      vecInt0.equals(vecInt1);
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = (VecInt)vecInt0.pop();
      vecInt1.moveTo2(vecInt0);
      vecInt1.toString();
      vecInt0.clear();
      vecInt1.unsafePush(1);
      vecInt0.hashCode();
      vecInt1.indexOf((-477));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.toString();
      int int0 = 0;
      // Undeclared exception!
      try { 
        vecInt0.remove(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = (-1125);
      vecInt0.shrink((-1125));
      // Undeclared exception!
      try { 
        vecInt0.containsAt((-1125), (-1125));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1124
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.iterator();
      int int0 = 0;
      VecInt vecInt1 = new VecInt(0);
      int int1 = 1838;
      vecInt1.pop();
      // Undeclared exception!
      try { 
        vecInt1.copyTo((IVecInt) vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      VecInt vecInt0 = new VecInt(15, 15);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.pop();
      vecInt0.sort(comparator0);
      vecInt0.size();
      vecInt0.toString();
      int int0 = 3;
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.sort(3, 1323, comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 663
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = 0;
      // Undeclared exception!
      try { 
        vecInt0.delete(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      vecInt0.moveTo((IVecInt) vecInt1);
      vecInt1.push(0);
      vecInt0.shrinkTo(0);
      vecInt1.sortUnique();
      vecInt0.isEmpty();
      vecInt1.containsAt(0);
      vecInt1.shrink(0);
      vecInt0.sort();
      vecInt0.indexOf((-5494));
      vecInt1.last();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      vecInt0.sortUnique();
      vecInt0.isEmpty();
      vecInt0.containsAt(472);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 10;
      intArray0[2] = (-2907);
      intArray0[3] = 1;
      VecInt vecInt0 = new VecInt(1, (-2907));
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = new VecInt();
      vecInt1.growTo(0, 1692);
      vecInt1.iterator();
      VecInt vecInt3 = new VecInt();
      VecInt vecInt4 = new VecInt();
      VecInt vecInt5 = new VecInt();
      VecInt vecInt6 = new VecInt();
      VecInt vecInt7 = new VecInt();
      vecInt7.pop();
      vecInt1.isSubsetOf(vecInt0);
      vecInt0.isSubsetOf(vecInt7);
      vecInt5.pop();
      // Undeclared exception!
      try { 
        vecInt3.remove(1);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 361;
      intArray0[0] = 361;
      intArray0[3] = 2;
      intArray0[4] = 15;
      intArray0[5] = 361;
      intArray0[6] = 361;
      intArray0[7] = 361;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.remove(2);
      vecInt0.sortUnique();
      vecInt0.isEmpty();
      vecInt0.shrink(8);
      vecInt0.sort();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 5;
      VecInt vecInt0 = new VecInt(5);
      int int1 = 0;
      int int2 = 215;
      VecInt vecInt1 = new VecInt(0, 215);
      IVecInt iVecInt0 = vecInt1.pop();
      iVecInt0.toArray();
      vecInt1.clear();
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      emptyVecInt0.size();
      // Undeclared exception!
      try { 
        emptyVecInt0.push(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1874);
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      vecInt0.clear();
      int int0 = 3555;
      vecInt0.growTo(3555, 3555);
      vecInt0.push(0);
      VecInt vecInt1 = new VecInt();
      int int1 = (-190);
      vecInt1.push((-190));
      vecInt1.last();
      vecInt1.last();
      // Undeclared exception!
      try { 
        vecInt1.set((-190), 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.toString();
      VecInt vecInt1 = new VecInt();
      vecInt0.isSubsetOf(vecInt1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2495, 2988);
      vecInt0.toString();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      vecInt0.containsAt(721);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[4];
      intArray0[0] = 1363;
      intArray0[1] = 101;
      intArray0[2] = 1363;
      intArray0[3] = 56;
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.sortUnique();
      vecInt1.hashCode();
      vecInt1.sortUnique();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[7];
      intArray0[0] = 313;
      intArray0[1] = (-1416);
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = (-770);
      intArray0[6] = 1;
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.remove(1);
      IVecInt iVecInt0 = vecInt1.push(2);
      vecInt0.sort(313, 313);
      vecInt0.isEmpty();
      vecInt0.copyTo(iVecInt0);
      VecInt vecInt2 = new VecInt(intArray0);
      vecInt2.equals(vecInt1);
      vecInt0.isSubsetOf(vecInt2);
      vecInt2.isSubsetOf(vecInt0);
      VecInt vecInt3 = new VecInt(1, (-770));
      vecInt3.containsAt(1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort((-1), (-1), comparator0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 1;
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.sortUnique();
      iVecInt0.contains(1);
      iVecInt0.containsAt(2);
      VecInt vecInt2 = new VecInt();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt2.sort(2, (-2788), comparator1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      int int0 = 0;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      vecInt0.shrinkTo(0);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      vecInt0.moveTo(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.set(0, 895);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      iVecInt0.shrinkTo((-2072));
      int int0 = (-57);
      // Undeclared exception!
      try { 
        vecInt0.insertFirst((-57));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2072
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.contains((-410));
      vecInt0.containsAt(0);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.containsAt(2, 0);
      vecInt0.subset(856);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.clone();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-3257);
      intArray0[0] = (-3257);
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.moveTo(2329, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      vecInt0.moveTo((IVecInt) vecInt1);
      vecInt0.shrinkTo(0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      vecInt1.moveTo(intArray0);
      vecInt0.clone();
      vecInt0.moveTo(intArray0);
      VecInt vecInt2 = new VecInt();
      vecInt0.clear();
      vecInt0.clear();
      vecInt0.growTo(0, 602);
      VecInt vecInt3 = (VecInt)vecInt2.push(15);
      vecInt2.iterator();
      vecInt0.indexOf(0);
      vecInt1.unsafePush(46);
      VecInt vecInt4 = new VecInt(0, (-1899));
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt2);
      vecInt1.equals(readOnlyVecInt0);
      vecInt3.isSubsetOf(vecInt4);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.moveTo(intArray0);
      vecInt0.clone();
      vecInt1.moveTo(intArray0);
      VecInt vecInt2 = new VecInt();
      vecInt2.clear();
      vecInt2.clear();
      vecInt2.growTo(0, 0);
      vecInt2.push(1094);
      vecInt2.iterator();
      vecInt2.indexOf(0);
      vecInt1.unsafePush(2);
      VecInt vecInt3 = null;
      try {
        vecInt3 = new VecInt((-1), 346);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 4956;
      VecInt vecInt0 = new VecInt(4956);
      int int1 = 2;
      int int2 = 4934;
      vecInt0.insertFirst(4934);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(4934, 0, comparator0);
      vecInt0.toString();
      // Undeclared exception!
      vecInt0.selectionSort(2, 4956);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3226);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.remove(0);
      vecInt0.sortUnique();
      vecInt0.sortUnique();
      vecInt0.contains(480);
      IVecInt iVecInt0 = vecInt0.push((-3226));
      vecInt0.sort(480, (-3226));
      vecInt0.containsAt(0);
      vecInt0.isEmpty();
      vecInt0.copyTo(iVecInt0);
      vecInt0.pop();
      IVecInt iVecInt1 = vecInt0.clone();
      iVecInt1.clone();
      iVecInt1.moveTo((IVecInt) vecInt0);
      // Undeclared exception!
      try { 
        iVecInt0.copyTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.isEmpty();
      vecInt0.containsAt(793);
      vecInt0.subset(5);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 2029;
      intArray0[4] = 3511;
      intArray0[5] = 753;
      intArray0[6] = (-317);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.containsAt(846, 0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      vecInt0.moveTo(intArray0);
      VecInt vecInt1 = new VecInt();
      vecInt1.push(15);
      vecInt1.iterator();
      vecInt0.unsafePush(46);
      VecInt vecInt2 = new VecInt(0, 0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt1);
      vecInt0.equals(readOnlyVecInt0);
      // Undeclared exception!
      try { 
        vecInt1.sort(0, 602);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 301
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1834, 1834);
      vecInt0.equals("!7f'#");
      vecInt0.toString();
      vecInt0.pop();
      vecInt0.delete(15);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = 2139;
      intArray1[2] = 0;
      intArray1[3] = 2782;
      intArray1[4] = (-1);
      vecInt0.moveTo(intArray1);
      int int0 = 2399;
      vecInt0.iterator();
      int int1 = 0;
      vecInt0.shrinkTo(2);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(1, 1, comparator0);
      // Undeclared exception!
      try { 
        vecInt0.ensure(2381);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      vecInt0.clear();
      vecInt0.copyTo(intArray0);
      vecInt0.toArray();
      // Undeclared exception!
      try { 
        vecInt0.pushAll((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 15;
      VecInt vecInt0 = new VecInt(15);
      vecInt0.shrink(15);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      VecInt vecInt1 = (VecInt)vecInt0.pop();
      vecInt1.equals("");
      vecInt0.sort(comparator0);
      vecInt0.size();
      vecInt0.toString();
      // Undeclared exception!
      try { 
        vecInt1.insertFirst(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      VecInt vecInt0 = new VecInt(376, 0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.sort((-193), 134, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -30
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1874);
      intArray0[2] = (-1874);
      intArray0[3] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.get((-1874));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-361), (-361), (-361), (-2692), (-361)).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      vecInt0.subset((-361));
      vecInt0.toString();
      vecInt0.equals("0,0,0,0,0,0,0,0");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 2339;
      VecInt vecInt0 = new VecInt(2339, 2339);
      vecInt0.insertFirst(2339);
      int[] intArray0 = null;
      VecInt vecInt1 = null;
      try {
        vecInt1 = new VecInt((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0, 0);
      IVecInt iVecInt0 = vecInt0.clone();
      vecInt0.moveTo(iVecInt0);
      vecInt0.iterator();
      int int1 = 0;
      // Undeclared exception!
      try { 
        vecInt0.moveTo(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(0, 0, comparator0);
      vecInt0.shrink(0);
      // Undeclared exception!
      try { 
        vecInt0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      VecInt vecInt0 = new VecInt(15, 15);
      int int0 = 5;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(15, 4816, 4816, 20, 5).when(comparator0).compare(anyInt() , anyInt());
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.sort(comparator0);
      vecInt0.size();
      vecInt0.toString();
      IVecInt iVecInt1 = iVecInt0.clone();
      iVecInt0.moveTo(iVecInt1);
      iVecInt1.moveTo(iVecInt0);
      VecInt vecInt1 = new VecInt();
      int[] intArray0 = new int[0];
      VecInt vecInt2 = new VecInt(intArray0);
      VecInt vecInt3 = new VecInt();
      vecInt3.clear();
      VecInt vecInt4 = new VecInt();
      vecInt4.ensure(150);
      vecInt0.sort();
      VecInt vecInt5 = new VecInt();
      vecInt5.size();
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      // Undeclared exception!
      try { 
        emptyVecInt0.push((-1128));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sortUnique();
      vecInt0.isEmpty();
      vecInt0.containsAt(2);
      vecInt0.shrink((-1095));
      // Undeclared exception!
      try { 
        vecInt0.sort();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 547
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = 1;
      vecInt0.insertFirst(1);
      int int1 = (-668);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        vecInt0.set(1, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = (VecInt)vecInt0.pop();
      vecInt1.moveTo2(vecInt0);
      vecInt1.toString();
      vecInt0.clear();
      vecInt0.subset((-1));
      vecInt0.sort();
      vecInt0.ensure(1038);
      int[] intArray0 = new int[9];
      intArray0[0] = 451;
      intArray0[1] = 1038;
      intArray0[2] = 451;
      intArray0[3] = (-1);
      intArray0[4] = 451;
      intArray0[5] = (-1);
      intArray0[6] = (-1);
      intArray0[7] = (-1);
      intArray0[8] = 1038;
      vecInt0.moveTo(intArray0);
      VecInt vecInt2 = new VecInt();
      VecInt vecInt3 = new VecInt();
      VecInt vecInt4 = new VecInt();
      vecInt4.isEmpty();
      Object object0 = new Object();
      vecInt0.equals(vecInt1);
      vecInt3.selectionSort(336, (-1), (Comparator<Integer>) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = (VecInt)vecInt0.pop();
      vecInt1.moveTo2(vecInt0);
      vecInt1.toString();
      vecInt0.clear();
      vecInt1.unsafePush(1);
      vecInt0.subset(1);
      vecInt0.sort();
      vecInt1.ensure(451);
      VecInt vecInt2 = null;
      // Undeclared exception!
      try { 
        vecInt1.isSubsetOf((VecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      vecInt0.equals(readOnlyVecInt0);
      // Undeclared exception!
      try { 
        vecInt0.set(1, 15);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      VecInt vecInt0 = new VecInt(376, 0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.hashCode();
      vecInt0.sortUnique();
      vecInt0.unsafeGet(10);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      vecInt0.equals(readOnlyVecInt0);
      vecInt0.toString();
      vecInt0.pop();
      int int0 = new Integer(1);
      // Undeclared exception!
      try { 
        vecInt0.clone();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-1874);
      intArray0[2] = (-1874);
      intArray0[3] = 0;
      intArray0[4] = (-1874);
      intArray0[5] = 2770;
      intArray0[6] = (-1874);
      intArray0[7] = 0;
      intArray0[8] = (-1874);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.push((-439));
      vecInt0.set(0, (-1874));
      vecInt0.sort();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int1 = 1;
      vecInt0.subset(1);
      Comparator<Integer> comparator0 = null;
      int int2 = (-1);
      vecInt0.sort(0, (-1), (Comparator<Integer>) null);
      // Undeclared exception!
      try { 
        vecInt0.sort(0, 1151, (Comparator<Integer>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 575
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst((-600));
      VecInt vecInt1 = null;
      try {
        vecInt1 = new VecInt((-600));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.containsAt((-312), 3139);
      // Undeclared exception!
      try { 
        vecInt0.containsAt(3139, (-312));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -311
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 753;
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1600);
      // Undeclared exception!
      try { 
        vecInt0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(50);
      int int0 = 721;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.sort(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 25
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = (-439);
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      vecInt0.clear();
      int int1 = (-358);
      vecInt0.push((-358));
      vecInt1.pop();
      // Undeclared exception!
      try { 
        vecInt1.subset((-439));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort((-1), (-1), comparator0);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = 1;
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.sortUnique();
      iVecInt0.contains(1);
      iVecInt0.containsAt(2);
      VecInt vecInt2 = new VecInt(intArray0);
      vecInt0.containsAt((-1), 2);
      vecInt2.subset(1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.remove(93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-3454);
      intArray0[2] = 2443;
      intArray0[3] = 337;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1563;
      intArray0[7] = 5;
      intArray0[8] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      VecInt vecInt0 = new VecInt(93, 93);
      vecInt0.remove(93);
      vecInt0.containsAt(371, 758);
      vecInt0.unsafeGet(0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-1046), (-1046));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      VecInt vecInt0 = new VecInt(376, 0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 376, 721, (-1), 721).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      int[] intArray0 = new int[2];
      intArray0[0] = 376;
      intArray0[1] = 0;
      vecInt0.isEmpty();
      vecInt0.containsAt(376);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.subset(0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrink(0);
      // Undeclared exception!
      try { 
        vecInt0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      VecInt vecInt0 = new VecInt(361, (-16));
      vecInt0.hashCode();
      vecInt0.get(2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      // Undeclared exception!
      try { 
        vecInt0.moveTo(1, 1731);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1731
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      VecInt vecInt0 = new VecInt(361, 0);
      vecInt0.hashCode();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 93;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.moveTo(93, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(376, 0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      int[] intArray0 = new int[2];
      intArray0[0] = 376;
      intArray0[1] = 0;
      VecInt vecInt1 = new VecInt(intArray0);
      VecInt vecInt2 = null;
      try {
        vecInt2 = new VecInt((-990));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.equals("^$`zNzL^n;)p");
      int int0 = 1;
      vecInt0.ensure(1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      vecInt0.insertFirst(0);
      vecInt0.remove(0);
      vecInt0.growTo(0, 0);
      vecInt0.get(0);
      vecInt0.unsafePush(870);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 2413;
      // Undeclared exception!
      try { 
        vecInt0.remove(370);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 2029;
      VecInt vecInt0 = new VecInt();
      vecInt0.size();
      vecInt0.moveTo(0, 0);
      vecInt0.sortUnique();
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = new VecInt();
      vecInt2.clear();
      vecInt2.clear();
      VecInt vecInt3 = new VecInt();
      vecInt2.clear();
      int int1 = (-985);
      vecInt3.push((-985));
      vecInt3.sort();
      int[] intArray1 = vecInt3.toArray();
      // Undeclared exception!
      try { 
        vecInt3.moveTo(2230, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.indexOf((-1469));
      // Undeclared exception!
      try { 
        vecInt0.delete((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      VecInt vecInt0 = new VecInt(15, 15);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(15, 15, 2427, 2427, 3).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 15;
      intArray0[3] = 2427;
      intArray0[4] = 15;
      intArray0[5] = 15;
      intArray0[6] = 3;
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.push(15);
      // Undeclared exception!
      try { 
        vecInt0.set(2003, 1995);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.moveTo2((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = (-50);
      intArray0[0] = (-50);
      VecInt vecInt0 = new VecInt(intArray0);
      Object object0 = new Object();
      vecInt0.equals(object0);
      vecInt0.sortUnique();
      IVecInt iVecInt0 = vecInt0.clone();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      iVecInt0.copyTo((IVecInt) vecInt0);
      VecInt vecInt1 = new VecInt();
      vecInt1.size();
      // Undeclared exception!
      try { 
        vecInt1.set(0, (-1));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1128);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(134, 134, comparator0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 1;
      int int1 = (-1914);
      VecInt vecInt0 = new VecInt(1, (-1914));
      int int2 = 0;
      VecInt vecInt1 = new VecInt(0);
      vecInt1.subset((-1914));
      vecInt0.push(1);
      int int3 = 1838;
      // Undeclared exception!
      try { 
        vecInt0.growTo(1730, (-1040));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1730
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.delete(5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = 1363;
      vecInt0.sort(1363, 1363);
      vecInt0.isEmpty();
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        vecInt0.copyTo((IVecInt) emptyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.EmptyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.containsAt((-1237));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.hashCode();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.set((-1494), (-1494));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int[] intArray0 = new int[5];
      int int0 = (-377);
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.sort((Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.equals("^$`zNzL^n;)p");
      int int0 = 1;
      vecInt0.ensure(1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      vecInt0.insertFirst(0);
      vecInt0.remove(0);
      vecInt0.growTo(0, 0);
      vecInt0.get(0);
      vecInt0.unsafePush(870);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 2413;
      VecInt vecInt1 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt1.set(743, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2326);
      vecInt0.growTo(2326, 2326);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      int int0 = 0;
      int int1 = (-75);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      VecInt vecInt1 = null;
      try {
        vecInt1 = new VecInt((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      VecInt vecInt0 = new VecInt(492);
      vecInt0.shrinkTo(0);
      // Undeclared exception!
      try { 
        vecInt0.moveTo(1731, 1731);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1731
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sortUnique();
      vecInt0.isSubsetOf(vecInt0);
      // Undeclared exception!
      try { 
        vecInt0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = (VecInt)vecInt0.pop();
      vecInt1.moveTo2(vecInt0);
      vecInt1.toString();
      int int0 = 451;
      vecInt0.clear();
      int int1 = 1;
      // Undeclared exception!
      try { 
        vecInt1.moveTo((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.insertFirst((-1820));
      vecInt0.hashCode();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(0, (-1054), comparator0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-2207);
      intArray0[3] = 0;
      intArray0[4] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.copyTo((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      VecInt vecInt0 = new VecInt(15, 15);
      VecInt vecInt1 = new VecInt(15, 15);
      vecInt0.indexOf(15);
      vecInt1.growTo((-1183), 0);
      vecInt0.selectionSort(0, 0);
      vecInt1.insertFirst((-1183));
      vecInt0.containsAt(0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      VecInt vecInt0 = new VecInt(376, 376);
      VecInt vecInt1 = new VecInt(376, 376);
      vecInt0.isSubsetOf(vecInt1);
      vecInt1.hashCode();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset(36);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 376;
      int int1 = 0;
      VecInt vecInt0 = new VecInt(376, 0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(56, (-260), 0, 0, (-2266)).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt0.sort(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      VecInt vecInt0 = new VecInt(799, 2427);
      vecInt0.pop();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(799);
      vecInt0.toString();
      // Undeclared exception!
      try { 
        vecInt0.copyTo((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.isSubsetOf((VecInt) null);
      vecInt0.shrinkTo(1385);
      // Undeclared exception!
      try { 
        vecInt0.containsAt(1385);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet((-136));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -136
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      vecInt0.moveTo((IVecInt) vecInt1);
      vecInt0.shrinkTo(0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      vecInt1.moveTo(intArray0);
      vecInt0.clone();
      vecInt0.moveTo(intArray0);
      VecInt vecInt2 = new VecInt();
      vecInt0.clear();
      vecInt0.clear();
      vecInt0.growTo(0, 602);
      vecInt2.push(15);
      vecInt2.iterator();
      vecInt0.indexOf(0);
      vecInt1.unsafePush(46);
      VecInt vecInt3 = new VecInt(0, (-1899));
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt2);
      vecInt1.equals(readOnlyVecInt0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = 1;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-4729), (-1), 4169).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort(1, 4169, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      VecInt vecInt0 = new VecInt(376, 376);
      int[] intArray0 = new int[1];
      intArray0[0] = 376;
      // Undeclared exception!
      try { 
        vecInt0.moveTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.subset(1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-3226);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.remove((-3226));
      vecInt0.sortUnique();
      vecInt0.sortUnique();
      vecInt0.contains(480);
      IVecInt iVecInt0 = vecInt0.push((-3226));
      vecInt0.sort(480, (-3226));
      vecInt0.containsAt((-3226));
      vecInt0.isEmpty();
      vecInt0.copyTo(iVecInt0);
      vecInt0.indexOf(1);
      vecInt0.pop();
      vecInt0.clone();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.sort(2, 4485, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2243
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      VecInt vecInt0 = new VecInt(376, 0);
      vecInt0.hashCode();
      vecInt0.sort(0, 376);
      vecInt0.containsAt(0, 360);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1874);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sort();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int[] intArray0 = new int[6];
      intArray0[0] = 350;
      intArray0[1] = (-4291);
      intArray0[2] = 348;
      intArray0[3] = 0;
      intArray0[4] = 364;
      intArray0[5] = 371;
      vecInt0.moveTo(intArray0);
      VecInt vecInt1 = new VecInt();
      VecInt vecInt2 = new VecInt();
      VecInt vecInt3 = new VecInt();
      vecInt3.isEmpty();
      vecInt3.equals((Object) null);
      // Undeclared exception!
      try { 
        vecInt2.selectionSort(1, 371, (Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      VecInt vecInt0 = new VecInt(339, 0);
      vecInt0.growTo(0, 0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 339, 721, (-1), 721).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      vecInt0.containsAt((-1));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2733, 1363);
      // Undeclared exception!
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      VecInt vecInt0 = new VecInt(15, 15);
      int[] intArray0 = new int[7];
      intArray0[0] = 1456;
      intArray0[1] = 15;
      intArray0[2] = 0;
      intArray0[3] = 15;
      intArray0[4] = 15;
      intArray0[5] = 15;
      intArray0[6] = 15;
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.sortUnique();
      vecInt1.push(0);
      // Undeclared exception!
      try { 
        vecInt0.set(1456, 1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      VecInt vecInt1 = new VecInt(0);
      vecInt0.pushAll(vecInt1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.growTo(1488, (-1511));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1488
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      int int0 = 263;
      intArray0[1] = 263;
      intArray0[2] = 0;
      intArray0[3] = (-88);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.clear();
      // Undeclared exception!
      try { 
        vecInt0.set(15, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.size();
      IVecInt iVecInt0 = vecInt0.push(2344);
      vecInt0.sort(0, (-409));
      vecInt0.isEmpty();
      VecInt vecInt1 = new VecInt(830, (-409));
      vecInt1.copyTo(iVecInt0);
      vecInt1.equals(vecInt0);
      vecInt1.isSubsetOf(vecInt0);
      vecInt0.isSubsetOf(vecInt1);
      vecInt1.containsAt((-1));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sortUnique();
      vecInt0.isEmpty();
      vecInt0.containsAt(1363);
      vecInt0.toArray();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      int int0 = 1412;
      vecInt0.shrinkTo(1412);
      int int1 = (-237);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-237), 1412, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      VecInt vecInt0 = new VecInt(376, 376);
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      Integer integer0 = new Integer(828);
      vecInt0.equals(integer0);
      VecInt vecInt1 = new VecInt(828, 2);
      vecInt0.isSubsetOf(vecInt1);
      vecInt1.isSubsetOf(vecInt0);
      vecInt0.hashCode();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      VecInt vecInt0 = new VecInt(7578);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(7578, 1034, comparator0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Object object0 = new Object();
      vecInt0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      VecInt vecInt0 = new VecInt(15, 15);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(15, 4816, 4816, 20, 5).when(comparator0).compare(anyInt() , anyInt());
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.sort(comparator0);
      vecInt0.size();
      vecInt0.toString();
      IVecInt iVecInt1 = iVecInt0.clone();
      iVecInt0.moveTo(iVecInt1);
      int[] intArray0 = new int[5];
      intArray0[0] = 3;
      intArray0[1] = (-931);
      intArray0[2] = 14;
      intArray0[3] = 1323;
      intArray0[4] = 1323;
      vecInt0.copyTo(intArray0);
      iVecInt0.toArray();
      VecInt vecInt1 = new VecInt();
      vecInt1.push(0);
      VecInt vecInt2 = new VecInt();
      vecInt2.size();
      vecInt1.pop();
      // Undeclared exception!
      try { 
        vecInt2.remove(2);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sort();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 376;
      intArray0[1] = 376;
      intArray0[2] = 376;
      intArray0[3] = 376;
      intArray0[4] = 376;
      intArray0[5] = 376;
      intArray0[6] = (-1);
      intArray0[7] = 376;
      intArray0[8] = 376;
      VecInt vecInt0 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(376, 376, comparator0);
      vecInt0.sortUnique();
      vecInt0.contains((-2346));
      vecInt0.containsAt(3494);
      vecInt0.hashCode();
      VecInt vecInt1 = null;
      try {
        vecInt1 = new VecInt((-2346), 376);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      vecInt0.moveTo((IVecInt) vecInt1);
      vecInt0.shrinkTo(25);
      int[] intArray0 = new int[7];
      intArray0[0] = 25;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 25;
      intArray0[5] = 25;
      intArray0[6] = 25;
      vecInt1.moveTo(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.clone();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[4] = 3511;
      intArray0[5] = 753;
      intArray0[6] = (-317);
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.containsAt(753, 0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-856);
      intArray0[1] = (-856);
      intArray0[2] = (-856);
      intArray0[3] = (-856);
      intArray0[4] = 61;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sortUnique();
      VecInt vecInt1 = new VecInt(0);
      vecInt0.isSubsetOf(vecInt1);
      vecInt0.containsAt(0);
      vecInt1.toArray();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3418);
      VecInt vecInt1 = new VecInt(3418);
      vecInt1.pushAll(vecInt0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(2, 2, comparator0);
      vecInt0.sortUnique();
      vecInt0.contains((-1046));
      vecInt0.containsAt(2);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(0, (-2011), comparator1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      VecInt vecInt0 = new VecInt(93, 93);
      vecInt0.set(1, 15);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt1.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.remove((-694));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-2494);
      intArray0[0] = (-2494);
      intArray0[1] = 34;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.ensure((-2494));
      vecInt0.contains((-2494));
      int int1 = 1382;
      vecInt0.subset((-2417));
      // Undeclared exception!
      try { 
        vecInt0.set(34, 1382);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.containsAt((-1494));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      VecInt vecInt0 = new VecInt(93, 93);
      vecInt0.hashCode();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.contains(15);
      // Undeclared exception!
      try { 
        vecInt0.set(0, (-1494));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      VecInt vecInt0 = new VecInt(93, 93);
      vecInt0.sortUnique();
      vecInt0.hashCode();
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5, 4807);
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet(1661);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1661
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-792), 2988);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2055);
      int[] intArray0 = new int[3];
      intArray0[0] = 2055;
      intArray0[1] = 2055;
      intArray0[2] = 0;
      VecInt vecInt1 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt1.selectionSort(2055, 0, comparator0);
      vecInt0.equals(vecInt1);
      vecInt0.moveTo(intArray0);
      vecInt1.subset(0);
      vecInt0.moveTo2(vecInt1);
      vecInt1.moveTo2(vecInt0);
      vecInt0.copyTo(intArray0);
      vecInt1.get(0);
      // Undeclared exception!
      try { 
        vecInt0.delete(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      VecInt vecInt0 = new VecInt(93, 93);
      vecInt0.sortUnique();
      vecInt0.hashCode();
      vecInt0.indexOf(93);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      vecInt0.ensure((-2137));
      int int0 = 2032;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort(976, 2032, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      // Undeclared exception!
      try { 
        vecInt0.pushAll(readOnlyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort(2833, 2988, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.moveTo(intArray0);
      VecInt vecInt1 = new VecInt();
      vecInt1.clear();
      vecInt1.growTo(0, 0);
      IVecInt iVecInt0 = vecInt1.push(1094);
      iVecInt0.shrink(1094);
      vecInt1.iterator();
      vecInt1.indexOf(0);
      vecInt0.unsafePush(2);
      VecInt vecInt2 = null;
      try {
        vecInt2 = new VecInt((-1), 346);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo((-1631));
      vecInt0.clear();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      vecInt0.push(1);
      vecInt0.ensure(0);
      vecInt0.subset(1364);
      IVecInt iVecInt0 = vecInt0.clone();
      vecInt0.moveTo(iVecInt0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1364;
      vecInt0.copyTo(intArray0);
      vecInt0.toArray();
      // Undeclared exception!
      try { 
        vecInt0.remove(0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1860;
      intArray0[1] = 0;
      intArray0[2] = 473;
      intArray0[3] = 3068;
      intArray0[4] = 2342;
      intArray0[5] = 1967;
      intArray0[6] = 2021;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.containsAt(0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.moveTo2(iVecInt0);
      vecInt0.toString();
      vecInt0.clear();
      vecInt0.subset(451);
      vecInt0.sort();
      int[] intArray0 = new int[4];
      intArray0[0] = 451;
      intArray0[1] = 451;
      intArray0[2] = 451;
      intArray0[3] = 451;
      vecInt0.ensure(451);
      vecInt0.moveTo(intArray0);
      vecInt0.isEmpty();
      Object object0 = new Object();
      vecInt0.equals(object0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(451, 451, comparator0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      VecInt vecInt0 = new VecInt(93, 93);
      VecInt vecInt1 = new VecInt();
      vecInt0.equals(vecInt1);
      vecInt0.hashCode();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      VecInt vecInt0 = new VecInt(674, 674);
      vecInt0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.unsafePush((-1087));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.ensure((-4270));
      Object object0 = new Object();
      vecInt0.equals(object0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-4270);
      intArray0[3] = 0;
      intArray0[4] = (-4270);
      intArray0[5] = 5;
      intArray0[6] = 0;
      vecInt0.moveTo(0, intArray0);
      vecInt0.iterator();
      vecInt0.selectionSort(5, 0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      int[] intArray0 = new int[2];
      intArray0[0] = 93;
      intArray0[1] = 93;
      VecInt vecInt1 = new VecInt(intArray0);
      VecInt vecInt2 = new VecInt();
      VecInt vecInt3 = new VecInt();
      vecInt2.clear();
      vecInt2.push((-358));
      vecInt3.pop();
      // Undeclared exception!
      try { 
        vecInt3.subset(1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = (VecInt)vecInt0.pop();
      vecInt1.toString();
      vecInt0.clear();
      vecInt0.subset(1);
      vecInt1.ensure(451);
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 1;
      VecInt vecInt2 = new VecInt(intArray0);
      vecInt2.sort();
      // Undeclared exception!
      try { 
        vecInt0.moveTo((-967), (-3674));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3674
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = 376;
      int int1 = 0;
      VecInt vecInt0 = new VecInt(376, 0);
      int int2 = (-1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1), 376, 721, (-1), 721).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      // Undeclared exception!
      try { 
        vecInt0.moveTo((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst(3503);
      vecInt0.remove(3503);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      vecInt0.equals(readOnlyVecInt0);
      vecInt0.toString();
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        iVecInt0.push(3503);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, 1);
      VecInt vecInt1 = new VecInt(1, 1);
      vecInt1.moveTo((IVecInt) vecInt0);
      vecInt1.sortUnique();
      assertEquals(0, vecInt1.size());
      
      boolean boolean0 = vecInt0.isEmpty();
      assertEquals(2, vecInt0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = (-99);
      intArray0[2] = (-1);
      int int0 = 2139;
      intArray0[3] = 2139;
      VecInt vecInt0 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      VecInt vecInt1 = new VecInt();
      IVecInt iVecInt0 = vecInt1.clone();
      iVecInt0.iterator();
      vecInt1.iterator();
      iVecInt0.iterator();
      vecInt1.copyTo(iVecInt0);
      vecInt1.contains((-216));
      int int1 = 37;
      iVecInt0.contains(37);
      // Undeclared exception!
      try { 
        iVecInt0.remove(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(2697);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      // Undeclared exception!
      try { 
        vecInt0.equals(readOnlyVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.set(15, 15);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt0.sort((-2223), 4495);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1136
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-409));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.insertFirst(3503);
      vecInt0.remove(3503);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      vecInt0.equals(readOnlyVecInt0);
      vecInt0.toString();
      vecInt0.pop();
      // Undeclared exception!
      try { 
        vecInt0.subset(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1874);
      intArray0[2] = 2770;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.sort();
      assertArrayEquals(new int[] {(-1874), 0, 2770}, intArray0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      int int0 = 828;
      Integer integer0 = new Integer(828);
      vecInt0.equals(integer0);
      // Undeclared exception!
      try { 
        vecInt0.isSubsetOf((VecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      Integer integer0 = new Integer(828);
      vecInt0.equals(integer0);
      VecInt vecInt1 = new VecInt(828, 2);
      vecInt0.isSubsetOf(vecInt1);
      vecInt0.hashCode();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.sortUnique();
      VecInt vecInt1 = new VecInt();
      vecInt1.equals(vecInt0);
      // Undeclared exception!
      try { 
        vecInt1.moveTo((-519), (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
