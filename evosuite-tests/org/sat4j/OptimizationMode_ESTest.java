/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:41:07 GMT 2019
 */

package org.sat4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.ExitCode;
import org.sat4j.ILauncherMode;
import org.sat4j.MUSLauncher;
import org.sat4j.OptimizationMode;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.reader.DimacsReader;
import org.sat4j.reader.GroupedCNFReader;
import org.sat4j.reader.InstanceReader;
import org.sat4j.reader.Reader;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.IGroupSolver;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IProblem;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.encoding.Binary;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OptimizationMode_ESTest extends OptimizationMode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptimizationMode optimizationMode0 = new OptimizationMode();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c Value of objective function : ");
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0, true);
      Reader reader0 = mUSLauncher0.createReader(maxSatDecorator0, "");
      optimizationMode0.solve(maxSatDecorator0, reader0, mUSLauncher0, mockPrintWriter0, 14);
      assertFalse(reader0.hasAMapping());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c ");
      DimacsReader dimacsReader0 = new DimacsReader(dimacsStringSolver0, "c ");
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0);
      optimizationMode0.displayResult(dimacsStringSolver0, maxSatDecorator0, basicLauncher0, mockPrintWriter0, dimacsReader0, (-891L), false);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptimizationMode optimizationMode0 = new OptimizationMode();
      optimizationMode0.setExitCode((ExitCode) null);
      optimizationMode0.getCurrentExitCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptimizationMode optimizationMode0 = new OptimizationMode();
      ExitCode exitCode0 = optimizationMode0.getCurrentExitCode();
      assertEquals("UNKNOWN", exitCode0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptimizationMode optimizationMode0 = new OptimizationMode();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("seY-cgv=6/Z`yIZ");
      // Undeclared exception!
      try { 
        optimizationMode0.solve((IProblem) null, groupedCNFReader0, iLogAble0, mockPrintWriter0, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.OptimizationMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptimizationMode optimizationMode0 = new OptimizationMode();
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams((-1));
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, arminRestarts0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0, true);
      Binary binary0 = new Binary();
      ClausalCardinalitiesDecorator<MaxSatDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MaxSatDecorator>(maxSatDecorator0, binary0);
      MaxSatDecorator maxSatDecorator1 = new MaxSatDecorator(clausalCardinalitiesDecorator0);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Reader reader0 = mUSLauncher0.createReader(maxSatDecorator0, "OV}z");
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      MockPrintWriter mockPrintWriter0 = (MockPrintWriter)basicLauncher0.out;
      // Undeclared exception!
      try { 
        optimizationMode0.solve(maxSatDecorator1, reader0, mUSLauncher0, mockPrintWriter0, 0L);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      MockPrintWriter mockPrintWriter0 = (MockPrintWriter)basicLauncher0.out;
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(mockPrintWriter0);
      Reader reader0 = basicLauncher0.createReader(dimacsOutputSolver0, "");
      // Undeclared exception!
      try { 
        optimizationMode0.solve(dimacsOutputSolver0, reader0, basicLauncher0, mockPrintWriter0, 0L);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.tools.DimacsOutputSolver cannot be cast to org.sat4j.specs.IOptimizationProblem
         //
         verifyException("org.sat4j.OptimizationMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptimizationMode optimizationMode0 = new OptimizationMode();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      int[] intArray0 = new int[9];
      intArray0[0] = 44;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0, 44);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, tabuListDecorator0, arminRestarts0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0, true);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Reader reader0 = mUSLauncher0.createReader(solver0, "Got one! Elapsed wall clock time (in seconds):");
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      MockPrintWriter mockPrintWriter0 = (MockPrintWriter)basicLauncher0.out;
      // Undeclared exception!
      try { 
        optimizationMode0.solve(maxSatDecorator0, reader0, mUSLauncher0, mockPrintWriter0, 0L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptimizationMode optimizationMode0 = new OptimizationMode();
      optimizationMode0.setIncomplete(true);
      ExitCode exitCode0 = ExitCode.UPPER_BOUND;
      optimizationMode0.setExitCode(exitCode0);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c ");
      DimacsReader dimacsReader0 = new DimacsReader(dimacsStringSolver0, "c ");
      // Undeclared exception!
      try { 
        optimizationMode0.displayResult(dimacsStringSolver0, dimacsStringSolver0, basicLauncher0, mockPrintWriter0, dimacsReader0, 0L, false);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptimizationMode optimizationMode0 = new OptimizationMode();
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(731.4041458137632);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(1357);
      PureOrder pureOrder0 = new PureOrder(1357);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, lubyRestarts0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c ");
      InstanceReader instanceReader0 = new InstanceReader(solver0);
      int[] intArray0 = new int[5];
      optimizationMode0.solve(maxSatDecorator0, instanceReader0, basicLauncher0, mockPrintWriter0, 32);
      optimizationMode0.onSolutionFound(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      SearchParams searchParams0 = new SearchParams((-2239.183713980291), 2133);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, arminRestarts0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0, true);
      Binary binary0 = new Binary();
      ClausalCardinalitiesDecorator<MaxSatDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MaxSatDecorator>(maxSatDecorator0, binary0);
      MaxSatDecorator maxSatDecorator1 = new MaxSatDecorator(maxSatDecorator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Reader reader0 = mUSLauncher0.createReader(maxSatDecorator1, "U");
      maxSatDecorator0.setTimeoutOnConflicts(2133);
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      ASolverFactory<MinOneDecorator> aSolverFactory1 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MinOneDecorator> basicLauncher1 = new BasicLauncher<MinOneDecorator>(aSolverFactory1);
      PrintWriter printWriter0 = basicLauncher1.getLogWriter();
      optimizationMode0.solve(maxSatDecorator0, reader0, basicLauncher0, printWriter0, 2133);
      System.setCurrentTimeMillis(2133);
      optimizationMode0.getCurrentExitCode();
      optimizationMode0.getCurrentExitCode();
      System.setCurrentTimeMillis(10000L);
      System.setCurrentTimeMillis(3064L);
      InstanceReader instanceReader0 = new InstanceReader(maxSatDecorator0, reader0);
      // Undeclared exception!
      try { 
        optimizationMode0.displayResult(solver0, clausalCardinalitiesDecorator0, mUSLauncher0, printWriter0, instanceReader0, (-2701L), true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.tools.ClausalCardinalitiesDecorator cannot be cast to org.sat4j.specs.IOptimizationProblem
         //
         verifyException("org.sat4j.OptimizationMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[4];
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(minOneDecorator0).admitABetterSolution();
      minOneDecoratorArray0[0] = minOneDecorator0;
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c ");
      InstanceReader instanceReader0 = new InstanceReader(minOneDecorator0);
      long long0 = 0L;
      optimizationMode0.solve(minOneDecoratorArray0[0], instanceReader0, basicLauncher0, mockPrintWriter0, long0);
      assertFalse(basicLauncher0.isSilent());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      int[] intArray0 = null;
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[4];
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(minOneDecorator0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn((String) null, (String) null, (String) null, (String) null).when(minOneDecorator0).getLogPrefix();
      minOneDecoratorArray0[0] = minOneDecorator0;
      minOneDecoratorArray0[1] = minOneDecorator0;
      minOneDecoratorArray0[2] = minOneDecorator0;
      minOneDecoratorArray0[3] = minOneDecorator0;
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(minOneDecoratorArray0);
      MinOneDecorator minOneDecorator1 = new MinOneDecorator(manyCore0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator1, optimizationMode0);
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c ");
      Locale locale0 = Locale.ROOT;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "c ", (Object[]) minOneDecoratorArray0);
      InstanceReader instanceReader0 = new InstanceReader(minOneDecorator0);
      VecInt vecInt0 = new VecInt(2914, 2914);
      minOneDecorator1.addAtMost(vecInt0, 2914);
      boolean boolean0 = false;
      optimizationMode0.displayResult(optToSatAdapter0, minOneDecorator0, basicLauncher0, printWriter0, instanceReader0, 0L, false);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[4];
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      minOneDecoratorArray0[0] = minOneDecorator0;
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c ");
      InstanceReader instanceReader0 = new InstanceReader(minOneDecorator0);
      boolean boolean0 = false;
      long long0 = 0L;
      optimizationMode0.displayResult(minOneDecoratorArray0[0], minOneDecoratorArray0[0], basicLauncher0, mockPrintWriter0, instanceReader0, long0, boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      MockPrintWriter mockPrintWriter0 = (MockPrintWriter)basicLauncher0.out;
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0, false);
      NegationDecorator<MaxSatDecorator> negationDecorator0 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      DimacsReader dimacsReader0 = new DimacsReader(negationDecorator0, (String) null);
      InstanceReader instanceReader0 = new InstanceReader(negationDecorator0, dimacsReader0);
      optimizationMode0.displayResult(maxSatDecorator0, dimacsStringSolver0, basicLauncher0, mockPrintWriter0, instanceReader0, 0L, true);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      optimizationMode0.displayResult((ISolver) null, (IProblem) null, iLogAble0, (PrintWriter) null, dimacsReader0, 0, true);
      assertFalse(dimacsReader0.hasAMapping());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      optimizationMode0.onUnsatTermination();
      assertEquals(ExitCode.UNKNOWN, optimizationMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OptimizationMode optimizationMode0 = (OptimizationMode)ILauncherMode.OPTIMIZATION;
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        optimizationMode0.onSolutionFound(iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.OptimizationMode", e);
      }
  }
}
