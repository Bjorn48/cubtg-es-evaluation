/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:22:04 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.Vec;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.core.ActivityLCDS;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVec;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ActivityLCDS_ESTest extends ActivityLCDS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ActivityLCDS activityLCDS0 = new ActivityLCDS((Solver<? extends DataStructureFactory>) null, (ConflictTimer) null);
      ConflictTimer conflictTimer0 = activityLCDS0.getTimer();
      assertNull(conflictTimer0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ActivityLCDS activityLCDS0 = new ActivityLCDS((Solver<? extends DataStructureFactory>) null, (ConflictTimer) null);
      // Undeclared exception!
      try { 
        activityLCDS0.reduce((IVec<Constr>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.ActivityLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NoRestarts noRestarts0 = new NoRestarts();
      ActivityLCDS activityLCDS0 = new ActivityLCDS((Solver<? extends DataStructureFactory>) null, noRestarts0);
      // Undeclared exception!
      try { 
        activityLCDS0.onConflictAnalysis((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.ActivityLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NoRestarts noRestarts0 = new NoRestarts();
      Constr constr0 = Constr.TAUTOLOGY;
      ActivityLCDS activityLCDS0 = new ActivityLCDS((Solver<? extends DataStructureFactory>) null, noRestarts0);
      activityLCDS0.onConflictAnalysis(constr0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NoRestarts noRestarts0 = new NoRestarts();
      ActivityLCDS activityLCDS0 = new ActivityLCDS((Solver<? extends DataStructureFactory>) null, noRestarts0);
      activityLCDS0.init();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ActivityLCDS activityLCDS0 = new ActivityLCDS((Solver<? extends DataStructureFactory>) null, lubyRestarts0);
      String string0 = activityLCDS0.toString();
      assertEquals("Activity based learned constraints deletion strategy with timer luby style (SATZ_rand, TiniSAT) restarts strategy with factor 32", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      NoRestarts noRestarts0 = new NoRestarts();
      ActivityLCDS activityLCDS0 = new ActivityLCDS((Solver<? extends DataStructureFactory>) null, noRestarts0);
      activityLCDS0.onPropagation((Constr) null);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NoRestarts noRestarts0 = new NoRestarts();
      ActivityLCDS activityLCDS0 = new ActivityLCDS((Solver<? extends DataStructureFactory>) null, noRestarts0);
      NoRestarts noRestarts1 = (NoRestarts)activityLCDS0.getTimer();
      assertFalse(noRestarts1.shouldRestart());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ActivityLCDS activityLCDS0 = new ActivityLCDS((Solver<? extends DataStructureFactory>) null, lubyRestarts0);
      Constr constr0 = Constr.TAUTOLOGY;
      activityLCDS0.onClauseLearning(constr0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PureOrder pureOrder0 = new PureOrder();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, pureOrder0, (RestartStrategy) null);
      ActivityLCDS activityLCDS0 = new ActivityLCDS(solver0, (ConflictTimer) null);
      Vec<Constr> vec0 = new Vec<Constr>();
      activityLCDS0.reduce(vec0);
      assertEquals(0, vec0.size());
  }
}
