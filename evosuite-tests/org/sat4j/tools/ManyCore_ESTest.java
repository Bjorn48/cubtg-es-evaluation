/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:47:19 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ManyCore_ESTest extends ManyCore_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<AbstractMinimalModel> manyCore0 = new ManyCore<AbstractMinimalModel>(aSolverFactory0, false, stringArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[1];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      int int0 = manyCore0.nConstraints();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[6];
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((IVecInt) null).when(iSolver0).createBlockingClauseForCurrentModel();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      solutionCounterArray0[0] = solutionCounter0;
      solutionCounterArray0[1] = solutionCounterArray0[0];
      solutionCounterArray0[2] = solutionCounterArray0[0];
      solutionCounterArray0[3] = solutionCounterArray0[0];
      solutionCounterArray0[4] = solutionCounterArray0[1];
      solutionCounterArray0[5] = solutionCounterArray0[4];
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(stringArray0, solutionCounterArray0);
      IVecInt iVecInt0 = manyCore0.createBlockingClauseForCurrentModel();
      assertNull(iVecInt0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[1];
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      // Undeclared exception!
      try { 
        manyCore0.unsatExplanation();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[1];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      // Undeclared exception!
      try { 
        manyCore0.discardCurrentModel();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[1];
      ManyCore<DimacsStringSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[7];
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[6];
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      statisticsSolverArray0[0] = statisticsSolver0;
      ManyCore<StatisticsSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<StatisticsSolver>(stringArray0, statisticsSolverArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[19];
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[0];
      ManyCore<DimacsStringSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsStringSolver>(stringArray0, dimacsStringSolverArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[3];
      ManyCore<DimacsOutputSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsOutputSolver>(true, dimacsOutputSolverArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[3];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsStringSolver>(true, stringArray0, dimacsStringSolverArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[0];
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[5];
      ManyCore<StatisticsSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<StatisticsSolver>(false, stringArray0, statisticsSolverArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ManyCore<Minimal4InclusionModel> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<Minimal4InclusionModel>((ASolverFactory<Minimal4InclusionModel>) null, true, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>((ASolverFactory<OptToSatAdapter>) null, stringArray0);
      manyCore0.provideUnitClauses((UnitPropagationListener) null);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(maxSatDecoratorArray0);
      StringWriter stringWriter0 = new StringWriter();
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      manyCore0.printStat(printWriter0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[1];
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      // Undeclared exception!
      try { 
        manyCore0.registerLiteral(2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[2];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(45);
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      dimacsStringSolverArray0[1] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      manyCore0.setVerbose(true);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[1];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      VecInt vecInt0 = new VecInt(866, 866);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(manyCore0, solutionFoundListener0);
      // Undeclared exception!
      try { 
        modelIteratorToSATAdapter0.addBlockingClause(vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[0];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      VecInt vecInt0 = new VecInt(6, 6);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(manyCore0, solutionFoundListener0);
      IConstr iConstr0 = modelIteratorToSATAdapter0.addBlockingClause(vecInt0);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[1];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[3];
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(manyCore0, solutionFoundListener0);
      modelIteratorToSATAdapterArray0[0] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[1] = modelIteratorToSATAdapterArray0[0];
      modelIteratorToSATAdapterArray0[2] = modelIteratorToSATAdapterArray0[1];
      ManyCore<ModelIteratorToSATAdapter> manyCore1 = new ManyCore<ModelIteratorToSATAdapter>(false, modelIteratorToSATAdapterArray0);
      manyCore1.setDBSimplificationAllowed(false);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<SubModelIterator> manyCore0 = new ManyCore<SubModelIterator>(aSolverFactory0, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.onFinishWithAnswer(true, false, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<SubModelIterator> manyCore0 = new ManyCore<SubModelIterator>(aSolverFactory0, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.onFinishWithAnswer(false, false, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[8];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      dimacsStringSolverArray0[1] = dimacsStringSolver0;
      dimacsStringSolverArray0[2] = dimacsStringSolverArray0[0];
      dimacsStringSolverArray0[3] = dimacsStringSolver0;
      dimacsStringSolverArray0[4] = dimacsStringSolverArray0[3];
      dimacsStringSolverArray0[5] = dimacsStringSolverArray0[0];
      dimacsStringSolverArray0[6] = dimacsStringSolverArray0[0];
      dimacsStringSolverArray0[7] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      String string0 = manyCore0.toString("Not implemented yet in ManyCore: cannot add a specific constraint to each solver");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[1];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      manyCore0.setTimeoutOnConflicts(65535);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>((ASolverFactory<OptToSatAdapter>) null, stringArray0);
      manyCore0.setTimeoutMs(0L);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[0];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      VecInt vecInt0 = new VecInt(6, 6);
      AbstractMinimalModel[] abstractMinimalModelArray0 = new AbstractMinimalModel[1];
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(manyCore0, vecInt0, solutionFoundListener0);
      abstractMinimalModelArray0[0] = abstractMinimalModel0;
      ManyCore<AbstractMinimalModel> manyCore1 = new ManyCore<AbstractMinimalModel>(abstractMinimalModelArray0);
      manyCore1.setTimeout(6);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[1];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      manyCore0.setExpectedNumberOfClauses(3970);
      int int0 = manyCore0.nConstraints();
      assertEquals(3970, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AbstractMinimalModel[] abstractMinimalModelArray0 = new AbstractMinimalModel[0];
      ManyCore<AbstractMinimalModel> manyCore0 = new ManyCore<AbstractMinimalModel>(true, abstractMinimalModelArray0);
      manyCore0.reset();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<SubModelIterator> manyCore0 = new ManyCore<SubModelIterator>(aSolverFactory0, stringArray0);
      manyCore0.printStat((PrintWriter) null, "");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(aSolverFactory0, stringArray0);
      manyCore0.expireTimeout();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[0];
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(false, stringArray0, minOneDecoratorArray0);
      Vec<IVecInt> vec0 = new Vec<IVecInt>();
      manyCore0.addAllClauses(vec0);
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[0];
      ManyCore<DimacsStringSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsStringSolver>(false, stringArray0, dimacsStringSolverArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[1];
      stringArray0[0] = "t1&|vc`C0n3Ve's5Ee";
      ManyCore<DimacsStringSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = (LexicoDecorator<MaxSatDecorator>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      ASolverFactory<LexicoDecorator<MaxSatDecorator>> aSolverFactory0 = (ASolverFactory<LexicoDecorator<MaxSatDecorator>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(lexicoDecorator0, (ISolver) null).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      ManyCore<LexicoDecorator<MaxSatDecorator>> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<LexicoDecorator<MaxSatDecorator>>(aSolverFactory0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Minimal4CardinalityModel[] minimal4CardinalityModelArray0 = new Minimal4CardinalityModel[0];
      ManyCore<Minimal4CardinalityModel> manyCore0 = new ManyCore<Minimal4CardinalityModel>(minimal4CardinalityModelArray0);
      // Undeclared exception!
      try { 
        manyCore0.isSatisfiable(true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>((ASolverFactory<OptToSatAdapter>) null, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.unsatExplanation();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>((ASolverFactory<OptToSatAdapter>) null, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.primeImplicant(450);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<SubModelIterator> manyCore0 = new ManyCore<SubModelIterator>(aSolverFactory0, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.modelWithInternalVariables();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[0];
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(false, dimacsOutputSolverArray0);
      // Undeclared exception!
      try { 
        manyCore0.getStat();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>((ASolverFactory<OptToSatAdapter>) null, stringArray0);
      List<OptToSatAdapter> list0 = manyCore0.getSolvers();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>((ASolverFactory<OptToSatAdapter>) null, stringArray0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel(manyCore0, solutionFoundListener0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[0];
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(true, solutionCounterArray0);
      // Undeclared exception!
      try { 
        manyCore0.getSolvingEngine();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported yet in ManyCore
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      AbstractMinimalModel[] abstractMinimalModelArray0 = new AbstractMinimalModel[0];
      ManyCore<AbstractMinimalModel> manyCore0 = new ManyCore<AbstractMinimalModel>(false, abstractMinimalModelArray0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(manyCore0, 0L, solutionFoundListener0);
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[6];
      modelIteratorToSATAdapterArray0[0] = modelIteratorToSATAdapter0;
      ManyCore<ModelIteratorToSATAdapter> manyCore1 = null;
      try {
        manyCore1 = new ManyCore<ModelIteratorToSATAdapter>(true, modelIteratorToSATAdapterArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Does not make sense in the parallel context
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[5];
      ManyCore<DimacsStringSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsStringSolver>(stringArray0, (DimacsStringSolver[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[1];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      int int0 = manyCore0.realNumberOfVariables();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[0];
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(true, solutionCounterArray0);
      try { 
        manyCore0.isSatisfiable();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[0];
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(false, dimacsOutputSolverArray0);
      // Undeclared exception!
      try { 
        manyCore0.nConstraints();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(false, modelIteratorToSATAdapterArray0);
      manyCore0.learnUnit(15);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>((ASolverFactory<OptToSatAdapter>) null, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.createBlockingClauseForCurrentModel();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<SubModelIterator> manyCore0 = new ManyCore<SubModelIterator>(aSolverFactory0, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.getTimeoutMs();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[1];
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ea|UPf8]qj<jeS0m");
      manyCore0.printInfos((PrintWriter) mockPrintWriter0);
  }
}
