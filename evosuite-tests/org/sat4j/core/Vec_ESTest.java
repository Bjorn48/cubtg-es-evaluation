/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:50:30 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import java.util.Comparator;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.util.function.ToDoubleFunction;
import java.util.function.ToLongFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ReadOnlyVec;
import org.sat4j.core.Vec;
import org.sat4j.specs.IVec;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vec_ESTest extends Vec_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      String string0 = vec0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      String[] stringArray0 = new String[1];
      Vec<String> vec1 = new Vec<String>(stringArray0);
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertFalse(vec1.equals((Object)vec0));
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        vec1.removeFromLast("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 1);
      int int0 = 0;
      int int1 = (-1546);
      Integer integer0 = new Integer((-1546));
      assertEquals((-1546), (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      Vec<Object> vec0 = new Vec<Object>(0, integer0);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      vecArray0[0] = vec0;
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(vecArray0);
      assertNotNull(vec1);
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1, vecArray0.length);
      
      vec1.pop();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(1, vecArray0.length);
      
      // Undeclared exception!
      try { 
        vec1.get((-1546));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1546
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = Integer.valueOf((-830));
      assertEquals((-830), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Vec<Object> vec0 = new Vec<Object>(integerArray0);
      assertNotNull(vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertEquals(1, integerArray0.length);
      
      int int0 = 976;
      int int1 = 5527;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec0.sort(976, 5527, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3251
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(345);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vec<Integer> vec1 = new Vec<Integer>(345);
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) vec0;
      objectArray0[1] = (Object) comparator0;
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec0);
      assertNotNull(readOnlyVec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.moveTo((IVec<String>) readOnlyVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      String string0 = vec0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      int int0 = vec0.indexOf("");
      assertEquals((-1), int0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Vec<ReadOnlyVec<Integer>> vec0 = new Vec<ReadOnlyVec<Integer>>(0);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      boolean boolean0 = vec0.isEmpty();
      assertTrue(boolean0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) vec0;
      objectArray0[1] = (Object) vec0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) vec0;
      objectArray0[4] = (Object) vec0;
      objectArray0[5] = (Object) vec0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertNotNull(vec1);
      assertEquals(8, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(8, objectArray0.length);
      
      // Undeclared exception!
      try { 
        vec1.sortUnique((Comparator<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.insertFirst("");
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(2410, vec0);
      assertNotNull(vec1);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(2410, vec1.size());
      
      boolean boolean0 = vec1.contains(vec0);
      assertTrue(boolean0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(2410, vec1.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(2983);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(2983, vec0);
      assertNotNull(vec1);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2983, vec1.size());
      
      boolean boolean0 = vec1.contains(vec0);
      assertTrue(boolean0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2983, vec1.size());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.removeFromLast("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.insertFirstWithShifting("");
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.remove("^EMvb+n_u$Fo%Z");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(5, vec0);
      assertNotNull(vec1);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(5, vec1.size());
      assertFalse(vec1.isEmpty());
      
      vec1.shrinkTo(1796);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(1796, vec1.size());
      assertFalse(vec1.isEmpty());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "d9rVk2Ulz$sC!krqg";
      stringArray0[3] = "";
      stringArray0[4] = "gSM&y[7";
      stringArray0[5] = "";
      stringArray0[6] = "2&=4=-\"7/e{X*C#!qz";
      stringArray0[7] = "U(z[]L<R@S|!%IqA:V";
      stringArray0[8] = "";
      Vec<String> vec2 = new Vec<String>(stringArray0);
      assertNotNull(vec2);
      assertEquals(9, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(9, stringArray0.length);
      
      // Undeclared exception!
      try { 
        vec2.removeFromLast("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.moveTo((IVec<Vec<Object>>) vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Object> vec1 = new Vec<Object>(1, "(sF?,");
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      IVec<Object> iVec0 = vec1.clone();
      assertNotNull(iVec0);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertEquals(1, iVec0.size());
      assertFalse(iVec0.isEmpty());
      
      vec0.growTo(1, vec1);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      Vec<String> vec2 = new Vec<String>();
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec2.sortUnique(comparator0);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      Vec<ReadOnlyVec<Object>> vec3 = new Vec<ReadOnlyVec<Object>>(84);
      assertNotNull(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      // Undeclared exception!
      try { 
        vec3.moveTo(3746, 1034);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1034
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<String> vec1 = new Vec<String>(1406, "(6");
      assertNotNull(vec1);
      assertEquals(1406, vec1.size());
      assertFalse(vec1.isEmpty());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec1.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Vec<ReadOnlyVec<Integer>> vec0 = new Vec<ReadOnlyVec<Integer>>(0);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      boolean boolean0 = vec0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Object[] objectArray0 = new Object[21];
      objectArray0[0] = (Object) vec0;
      objectArray0[1] = (Object) vec0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = objectArray0[0];
      objectArray0[3] = (Object) vec0;
      objectArray0[4] = (Object) vec0;
      objectArray0[5] = (Object) vec0;
      objectArray0[6] = (Object) vec0;
      objectArray0[7] = (Object) vec0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(21, vec1.size());
      assertEquals(21, objectArray0.length);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2411, (-1), 2393, 2393, 2385).when(comparator0).compare(any() , any());
      vec1.sortUnique(comparator0);
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(21, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Vec<Object> vec1 = new Vec<Object>(234, object0);
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(234, vec1.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, (-2418)).when(comparator0).compare(any() , any());
      // Undeclared exception!
      try { 
        vec1.sortUnique(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 234
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Comparable<Object>> vec1 = null;
      try {
        vec1 = new Vec<Comparable<Object>>((Comparable<Object>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Vec<ReadOnlyVec<Integer>> vec0 = new Vec<ReadOnlyVec<Integer>>(0);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Iterator<ReadOnlyVec<Integer>> iterator0 = vec0.iterator();
      assertNotNull(iterator0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      boolean boolean0 = vec0.isEmpty();
      assertTrue(boolean0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Object[] objectArray0 = new Object[21];
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(21, vec1.size());
      assertEquals(21, objectArray0.length);
      
      Iterator<Object> iterator1 = vec1.iterator();
      assertNotNull(iterator1);
      assertFalse(vec1.isEmpty());
      assertEquals(21, vec1.size());
      assertEquals(21, objectArray0.length);
      
      vec1.insertFirst(iterator1);
      assertFalse(vec1.isEmpty());
      assertEquals(22, vec1.size());
      assertEquals(21, objectArray0.length);
      
      Vec<ReadOnlyVec<Object>> vec2 = new Vec<ReadOnlyVec<Object>>();
      assertNotNull(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      Vec<Object> vec3 = new Vec<Object>(objectArray0);
      assertNotNull(vec3);
      assertFalse(vec3.isEmpty());
      assertEquals(21, vec3.size());
      assertFalse(vec3.equals((Object)vec1));
      assertEquals(21, objectArray0.length);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      vec1.sortUnique(comparator0);
      assertNotSame(vec1, vec3);
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(vec1.equals((Object)vec3));
      assertEquals(21, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Vec<Object> vec0 = new Vec<Object>(objectArray0);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, objectArray0.length);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(1187, 0, comparator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Object> vec1 = new Vec<Object>();
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      Vec<Integer> vec2 = new Vec<Integer>(0);
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      objectArray0[2] = (Object) vec1;
      objectArray0[3] = (Object) vec1;
      objectArray0[4] = (Object) comparator0;
      objectArray0[5] = (Object) comparator0;
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "";
      Vec<String> vec3 = new Vec<String>(0);
      assertNotNull(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertTrue(vec3.equals((Object)vec0));
      
      objectArray0[8] = (Object) vec3;
      Vec<Object> vec4 = new Vec<Object>(objectArray0);
      assertNotNull(vec4);
      assertEquals(9, vec4.size());
      assertFalse(vec4.isEmpty());
      assertFalse(vec4.equals((Object)vec1));
      assertEquals(9, objectArray0.length);
      
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec4);
      assertNotNull(readOnlyVec0);
      assertEquals(9, vec4.size());
      assertFalse(vec4.isEmpty());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(9, readOnlyVec0.size());
      assertFalse(vec4.equals((Object)vec1));
      assertEquals(9, objectArray0.length);
      
      IVec<Object> iVec0 = readOnlyVec0.clone();
      assertNotSame(vec4, vec1);
      assertNotNull(iVec0);
      assertEquals(9, vec4.size());
      assertFalse(vec4.isEmpty());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(9, readOnlyVec0.size());
      assertFalse(iVec0.isEmpty());
      assertEquals(9, iVec0.size());
      assertFalse(vec4.equals((Object)vec1));
      assertEquals(9, objectArray0.length);
      
      // Undeclared exception!
      try { 
        vec1.copyTo(iVec0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVec cannot be cast to org.sat4j.core.Vec
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(245);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      IVec<ReadOnlyVec<Object>> iVec0 = vec0.clone();
      assertNotNull(iVec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(iVec0.isEmpty());
      assertEquals(0, iVec0.size());
      
      boolean boolean0 = vec0.equals(vec0);
      assertTrue(boolean0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 3);
      Vec<String> vec1 = new Vec<String>(245, "");
      assertNotNull(vec1);
      assertEquals(245, vec1.size());
      assertFalse(vec1.isEmpty());
      
      vecArray0[0] = vec1;
      Vec<String> vec2 = new Vec<String>(245);
      assertNotNull(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertFalse(vec2.equals((Object)vec1));
      
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(245);
      assertNotNull(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      IVec<Vec<Object>> iVec1 = vec3.push((Vec<Object>) null);
      assertNotNull(iVec1);
      assertFalse(vec3.isEmpty());
      assertEquals(1, vec3.size());
      assertFalse(iVec1.isEmpty());
      assertEquals(1, iVec1.size());
      
      Vec<Object> vec4 = new Vec<Object>();
      assertNotNull(vec4);
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      
      IVec<Vec<Object>> iVec2 = vec3.push(vec4);
      assertSame(iVec2, iVec1);
      assertNotNull(iVec2);
      assertFalse(vec3.isEmpty());
      assertEquals(2, vec3.size());
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      assertFalse(iVec2.isEmpty());
      assertEquals(2, iVec2.size());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec1.sortUnique(comparator0);
      assertNotSame(vec1, vec2);
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(vec1.equals((Object)vec2));
      
      vec3.hashCode();
      assertFalse(vec3.isEmpty());
      assertEquals(2, vec3.size());
      
      // Undeclared exception!
      try { 
        vec4.get(245);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 245
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Integer integer0 = new Integer((-1615));
      assertEquals((-1615), (int)integer0);
      assertNotNull(integer0);
      
      vec0.growTo(718, integer0);
      assertEquals(718, vec0.size());
      assertFalse(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vec<Integer> vec0 = new Vec<Integer>(345);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) comparator0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertNotNull(vec1);
      assertEquals(2, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2, objectArray0.length);
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-436), (-436)).when(comparator1).compare(any() , any());
      vec1.sortUnique(comparator1);
      assertEquals(2, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2, objectArray0.length);
      
      Comparator<String> comparator2 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Integer> vec1 = new Vec<Integer>(2665);
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertTrue(vec1.equals((Object)vec0));
      
      vec0.moveTo((IVec<Integer>) vec1);
      assertNotSame(vec0, vec1);
      assertNotSame(vec1, vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertTrue(vec0.equals((Object)vec1));
      assertTrue(vec1.equals((Object)vec0));
      
      vec0.hashCode();
      assertNotSame(vec0, vec1);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(vec0.equals((Object)vec1));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec0.remove((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Integer integer0 = new Integer(2014);
      assertEquals(2014, (int)integer0);
      assertNotNull(integer0);
      
      Vec<Integer> vec0 = new Vec<Integer>(2014, integer0);
      assertNotNull(vec0);
      assertEquals(2014, vec0.size());
      assertFalse(vec0.isEmpty());
      
      objectArray0[0] = (Object) vec0;
      objectArray0[1] = (Object) "KqTDCi}X";
      objectArray0[2] = (Object) "|G3l@JAlNIg)";
      Vec<Integer> vec1 = new Vec<Integer>();
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertFalse(vec1.equals((Object)vec0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[3] = object1;
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[4] = object2;
      objectArray0[5] = (Object) "Yx7yCi|&";
      Integer integer2 = new Integer(2424);
      assertEquals(2424, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Vec<Integer> vec2 = new Vec<Integer>(2424, integer2);
      assertNotNull(vec2);
      assertFalse(vec2.isEmpty());
      assertEquals(2424, vec2.size());
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(vec2.equals((Object)vec1));
      assertFalse(vec2.equals((Object)vec0));
      
      objectArray0[6] = (Object) vec2;
      Vec<Object> vec3 = new Vec<Object>(objectArray0);
      assertNotNull(vec3);
      assertFalse(vec3.isEmpty());
      assertEquals(7, vec3.size());
      assertEquals(7, objectArray0.length);
      
      // Undeclared exception!
      try { 
        vec3.removeFromLast("0!s\"89k5J+IbAyA");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Vec<String> vec1 = new Vec<String>(112, "kO");
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(112, vec1.size());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyString() , anyString());
      vec1.sortUnique(comparator0);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>();
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      vec2.hashCode();
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      Vec<Object> vec3 = new Vec<Object>();
      assertNotNull(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      // Undeclared exception!
      try { 
        vec3.get(301);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 301
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      int int0 = 0;
      ToDoubleFunction<Object> toDoubleFunction0 = (ToDoubleFunction<Object>) mock(ToDoubleFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ReadOnlyVec<Object>> comparator0 = Comparator.comparingDouble((ToDoubleFunction<? super ReadOnlyVec<Object>>) toDoubleFunction0);
      assertNotNull(comparator0);
      
      vec0.sort(0, 0, comparator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Integer> vec1 = new Vec<Integer>(0);
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      // Undeclared exception!
      try { 
        vec1.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(1, "");
      assertNotNull(vec0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      vec0.insertFirst("");
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      
      ReadOnlyVec<String>[] readOnlyVecArray0 = (ReadOnlyVec<String>[]) Array.newInstance(ReadOnlyVec.class, 8);
      Vec<String> vec1 = new Vec<String>(1);
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertFalse(vec1.equals((Object)vec0));
      
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec1);
      assertNotNull(readOnlyVec0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertFalse(vec1.equals((Object)vec0));
      
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<String> readOnlyVec1 = new ReadOnlyVec<String>(vec0);
      assertNotNull(readOnlyVec1);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(2, readOnlyVec1.size());
      assertFalse(readOnlyVec1.isEmpty());
      assertFalse(vec0.equals((Object)vec1));
      assertFalse(readOnlyVec1.equals((Object)readOnlyVec0));
      
      readOnlyVecArray0[1] = readOnlyVec1;
      ReadOnlyVec<String> readOnlyVec2 = new ReadOnlyVec<String>(readOnlyVec1);
      assertNotNull(readOnlyVec2);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(2, readOnlyVec1.size());
      assertFalse(readOnlyVec1.isEmpty());
      assertFalse(readOnlyVec2.isEmpty());
      assertEquals(2, readOnlyVec2.size());
      assertFalse(vec0.equals((Object)vec1));
      assertFalse(readOnlyVec1.equals((Object)readOnlyVec0));
      assertFalse(readOnlyVec2.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec1));
      
      readOnlyVecArray0[2] = readOnlyVec2;
      ReadOnlyVec<String> readOnlyVec3 = new ReadOnlyVec<String>(readOnlyVec1);
      assertNotNull(readOnlyVec3);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(2, readOnlyVec1.size());
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(2, readOnlyVec3.size());
      assertFalse(readOnlyVec3.isEmpty());
      assertFalse(vec0.equals((Object)vec1));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec2));
      assertFalse(readOnlyVec1.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec1));
      assertFalse(readOnlyVec3.equals((Object)readOnlyVec0));
      
      readOnlyVecArray0[3] = readOnlyVec3;
      ReadOnlyVec<String> readOnlyVec4 = new ReadOnlyVec<String>(readOnlyVec2);
      assertNotNull(readOnlyVec4);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(2, readOnlyVec1.size());
      assertFalse(readOnlyVec1.isEmpty());
      assertFalse(readOnlyVec2.isEmpty());
      assertEquals(2, readOnlyVec2.size());
      assertFalse(readOnlyVec4.isEmpty());
      assertEquals(2, readOnlyVec4.size());
      assertFalse(vec0.equals((Object)vec1));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec2));
      assertFalse(readOnlyVec1.equals((Object)readOnlyVec0));
      assertFalse(readOnlyVec2.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec3));
      assertFalse(readOnlyVec4.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec2));
      
      readOnlyVecArray0[4] = readOnlyVec4;
      ReadOnlyVec<String> readOnlyVec5 = new ReadOnlyVec<String>(readOnlyVec1);
      assertNotNull(readOnlyVec5);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(2, readOnlyVec1.size());
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(2, readOnlyVec5.size());
      assertFalse(readOnlyVec5.isEmpty());
      assertFalse(vec0.equals((Object)vec1));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec4));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec2));
      assertFalse(readOnlyVec1.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec4));
      assertFalse(readOnlyVec5.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec3));
      
      readOnlyVecArray0[5] = readOnlyVec5;
      ReadOnlyVec<String> readOnlyVec6 = new ReadOnlyVec<String>(vec1);
      assertNotNull(readOnlyVec6);
      assertTrue(readOnlyVec6.isEmpty());
      assertEquals(0, readOnlyVec6.size());
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertFalse(readOnlyVec6.equals((Object)readOnlyVec5));
      assertFalse(readOnlyVec6.equals((Object)readOnlyVec2));
      assertFalse(readOnlyVec6.equals((Object)readOnlyVec1));
      assertFalse(readOnlyVec6.equals((Object)readOnlyVec4));
      assertTrue(readOnlyVec6.equals((Object)readOnlyVec0));
      assertFalse(readOnlyVec6.equals((Object)readOnlyVec3));
      assertFalse(vec1.equals((Object)vec0));
      
      readOnlyVecArray0[6] = readOnlyVec6;
      ReadOnlyVec<String> readOnlyVec7 = new ReadOnlyVec<String>(readOnlyVec5);
      assertNotNull(readOnlyVec7);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(2, readOnlyVec7.size());
      assertFalse(readOnlyVec7.isEmpty());
      assertEquals(2, readOnlyVec1.size());
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(2, readOnlyVec5.size());
      assertFalse(readOnlyVec5.isEmpty());
      assertFalse(vec0.equals((Object)vec1));
      assertTrue(readOnlyVec7.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec7.equals((Object)readOnlyVec5));
      assertTrue(readOnlyVec7.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec7.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec7.equals((Object)readOnlyVec4));
      assertFalse(readOnlyVec7.equals((Object)readOnlyVec6));
      assertFalse(readOnlyVec7.equals((Object)readOnlyVec0));
      assertFalse(readOnlyVec1.equals((Object)readOnlyVec6));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec4));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec5));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec2));
      assertFalse(readOnlyVec1.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec2));
      assertFalse(readOnlyVec5.equals((Object)readOnlyVec6));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec4));
      assertFalse(readOnlyVec5.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec3));
      
      readOnlyVecArray0[7] = readOnlyVec7;
      Vec<ReadOnlyVec<String>> vec2 = new Vec<ReadOnlyVec<String>>(readOnlyVecArray0);
      assertNotNull(vec2);
      assertEquals(8, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(8, readOnlyVecArray0.length);
      
      // Undeclared exception!
      try { 
        vec2.selectionSort(1, 4278, (Comparator<ReadOnlyVec<String>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(2983, vec0);
      assertNotNull(vec1);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(2983, vec1.size());
      
      // Undeclared exception!
      try { 
        vec1.unsafePush(vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2983
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Vec<Object> vec0 = new Vec<Object>(objectArray0);
      assertNotNull(vec0);
      assertEquals(5, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(5, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>(21);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Object>[] vecArray0 = vec0.toArray();
      assertNotNull(vecArray0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(21, vecArray0.length);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.hashCode();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<String> vec1 = new Vec<String>();
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Integer integer0 = new Integer(1760);
      assertEquals(1760, (int)integer0);
      assertNotNull(integer0);
      
      Vec<Object> vec2 = new Vec<Object>();
      assertNotNull(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 7);
      vecArray0[0] = vec1;
      vecArray0[1] = vec1;
      Vec<String> vec3 = new Vec<String>(2410);
      assertNotNull(vec3);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertTrue(vec3.equals((Object)vec1));
      
      vecArray0[2] = vec3;
      vecArray0[3] = vec1;
      vecArray0[4] = vec1;
      vecArray0[5] = vec1;
      vecArray0[6] = vec1;
      Vec<Vec<String>> vec4 = new Vec<Vec<String>>(vecArray0);
      assertNotNull(vec4);
      assertEquals(7, vec4.size());
      assertFalse(vec4.isEmpty());
      assertEquals(7, vecArray0.length);
      
      Vec vec5 = (Vec)vec4.last();
      assertNotNull(vec5);
      assertEquals(7, vec4.size());
      assertFalse(vec4.isEmpty());
      assertEquals(0, vec5.size());
      assertTrue(vec5.isEmpty());
      assertEquals(7, vecArray0.length);
      
      // Undeclared exception!
      try { 
        vec2.removeFromLast(vec5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<Object>> vec1 = null;
      try {
        vec1 = new Vec<Vec<Object>>((-2153), vec0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Vec<Comparable<Object>> vec0 = new Vec<Comparable<Object>>(198, comparable0);
      assertNotNull(vec0);
      assertEquals(198, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = vec0.contains(comparable1);
      assertFalse(boolean0);
      assertEquals(198, vec0.size());
      assertFalse(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Vec<ReadOnlyVec<Integer>> vec0 = new Vec<ReadOnlyVec<Integer>>(0);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Iterator<ReadOnlyVec<Integer>> iterator0 = vec0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      boolean boolean0 = vec0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Object[] objectArray0 = new Object[21];
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(21, vec1.size());
      assertEquals(21, objectArray0.length);
      
      Iterator<Object> iterator1 = vec1.iterator();
      assertNotNull(iterator1);
      assertFalse(vec1.isEmpty());
      assertEquals(21, vec1.size());
      assertEquals(21, objectArray0.length);
      
      vec1.insertFirst(iterator1);
      assertFalse(vec1.isEmpty());
      assertEquals(22, vec1.size());
      assertEquals(21, objectArray0.length);
      
      Vec<ReadOnlyVec<Object>> vec2 = new Vec<ReadOnlyVec<Object>>();
      assertNotNull(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      Vec<Object> vec3 = new Vec<Object>(objectArray0);
      assertNotNull(vec3);
      assertEquals(21, vec3.size());
      assertFalse(vec3.isEmpty());
      assertFalse(vec3.equals((Object)vec1));
      assertEquals(21, objectArray0.length);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-648), (-1), (-648), 178, 181).when(comparator0).compare(any() , any());
      vec1.sortUnique(comparator0);
      assertNotSame(vec1, vec3);
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(vec1.equals((Object)vec3));
      assertEquals(21, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.remove("org.sat4j.core.Vec$1");
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Iterator<ReadOnlyVec<Object>> iterator0 = vec0.iterator();
      assertNotNull(iterator0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      String string0 = vec0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.hashCode();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<String> vec1 = new Vec<String>();
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      vec1.insertFirst("S+SLWnN~SY2");
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec0);
      assertNotNull(readOnlyVec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      
      Vec<ReadOnlyVec<Integer>> vec2 = new Vec<ReadOnlyVec<Integer>>(2410, readOnlyVec0);
      assertNotNull(vec2);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertEquals(2410, vec2.size());
      assertFalse(vec2.isEmpty());
      
      String string0 = vec2.toString();
      assertNotNull(string0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertEquals(2410, vec2.size());
      assertFalse(vec2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int int0 = 245;
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(245);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      IVec<ReadOnlyVec<Object>> iVec0 = vec0.clone();
      assertNotNull(iVec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(iVec0.isEmpty());
      assertEquals(0, iVec0.size());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.sat4j.core.ReadOnlyVec";
      String string0 = "";
      stringArray0[1] = "";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      assertNotNull(vec1);
      assertEquals(2, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2, stringArray0.length);
      
      // Undeclared exception!
      try { 
        vec1.sort((Comparator<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<String> vec1 = new Vec<String>(1406, "(6");
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(1406, vec1.size());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1406, 1406, 1406, (-1240), 1406).when(comparator0).compare(anyString() , anyString());
      vec1.sortUnique(comparator0);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Vec<ReadOnlyVec<Integer>> vec0 = new Vec<ReadOnlyVec<Integer>>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      boolean boolean0 = vec0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.sat4j.core.Vec$1";
      stringArray0[1] = "org.sat4j.core.Vec$1";
      stringArray0[2] = "O9'a*";
      stringArray0[3] = "Yh%Q,+J0";
      stringArray0[4] = "fn`";
      stringArray0[5] = "RdY-rkckI]O";
      stringArray0[6] = "4S @ 0.C";
      stringArray0[7] = "sN@";
      stringArray0[8] = "S5e;x`~<1V4#`Xpg";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      assertNotNull(vec1);
      assertEquals(9, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(9, stringArray0.length);
      
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(7510, vec1);
      assertNotNull(vec2);
      assertEquals(9, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(7510, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(9, stringArray0.length);
      
      boolean boolean1 = vec2.contains(vec1);
      assertTrue(boolean1);
      assertEquals(9, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(7510, vec2.size());
      assertFalse(vec2.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertEquals(9, stringArray0.length);
      
      Vec<Object> vec3 = new Vec<Object>(7510, (Object) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      IVec<Vec<String>> iVec0 = vec0.clone();
      assertNotNull(iVec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      
      vec0.insertFirst((Vec<String>) null);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Vec<String> vec1 = vec0.delete(0);
      assertNull(vec1);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Integer> vec2 = new Vec<Integer>();
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(889);
      assertEquals(889, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      integerArray0[1] = integer1;
      Vec<Integer> vec3 = new Vec<Integer>(integerArray0);
      assertNotNull(vec3);
      assertEquals(2, vec3.size());
      assertFalse(vec3.isEmpty());
      assertFalse(vec3.equals((Object)vec2));
      assertEquals(2, integerArray0.length);
      
      vec2.moveTo((IVec<Integer>) vec3);
      assertNotSame(vec2, vec3);
      assertNotSame(vec3, vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertEquals(2, vec3.size());
      assertFalse(vec3.isEmpty());
      assertFalse(vec2.equals((Object)vec3));
      assertFalse(vec3.equals((Object)vec2));
      assertEquals(2, integerArray0.length);
      
      Integer integer2 = Integer.valueOf(5);
      assertEquals(5, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      IVec<Integer> iVec1 = vec2.push(integer2);
      assertNotSame(vec2, vec3);
      assertNotNull(iVec1);
      assertFalse(vec2.isEmpty());
      assertEquals(1, vec2.size());
      assertEquals(1, iVec1.size());
      assertFalse(iVec1.isEmpty());
      assertFalse(vec2.equals((Object)vec3));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 6);
      Vec<Object> vec0 = new Vec<Object>(1, "5u, Xuf{=li$SN{");
      assertNotNull(vec0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      assertNotNull(readOnlyVec0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(1, readOnlyVec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(vec0);
      assertNotNull(readOnlyVec1);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(1, readOnlyVec1.size());
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      
      readOnlyVecArray0[1] = readOnlyVec1;
      ReadOnlyVec<Object> readOnlyVec2 = new ReadOnlyVec<Object>(vec0);
      assertNotNull(readOnlyVec2);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(1, readOnlyVec2.size());
      assertFalse(readOnlyVec2.isEmpty());
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec1));
      
      readOnlyVecArray0[2] = readOnlyVec2;
      ReadOnlyVec<Object> readOnlyVec3 = new ReadOnlyVec<Object>(readOnlyVec1);
      assertNotNull(readOnlyVec3);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(1, readOnlyVec1.size());
      assertFalse(readOnlyVec3.isEmpty());
      assertEquals(1, readOnlyVec3.size());
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec1));
      
      readOnlyVecArray0[3] = readOnlyVec3;
      ReadOnlyVec<Object> readOnlyVec4 = new ReadOnlyVec<Object>(readOnlyVec1);
      assertNotNull(readOnlyVec4);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(1, readOnlyVec1.size());
      assertEquals(1, readOnlyVec4.size());
      assertFalse(readOnlyVec4.isEmpty());
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec1));
      
      readOnlyVecArray0[4] = readOnlyVec4;
      ReadOnlyVec<Object> readOnlyVec5 = new ReadOnlyVec<Object>(readOnlyVec4);
      assertNotNull(readOnlyVec5);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(readOnlyVec1.isEmpty());
      assertEquals(1, readOnlyVec1.size());
      assertEquals(1, readOnlyVec4.size());
      assertFalse(readOnlyVec4.isEmpty());
      assertEquals(1, readOnlyVec5.size());
      assertFalse(readOnlyVec5.isEmpty());
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec4));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec4));
      assertTrue(readOnlyVec5.equals((Object)readOnlyVec1));
      
      readOnlyVecArray0[5] = readOnlyVec5;
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(readOnlyVecArray0);
      assertNotNull(vec1);
      assertEquals(6, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(6, readOnlyVecArray0.length);
      
      ReadOnlyVec<Object> readOnlyVec6 = vec1.get(1);
      assertNotSame(readOnlyVec6, readOnlyVec4);
      assertNotSame(readOnlyVec6, readOnlyVec0);
      assertSame(readOnlyVec6, readOnlyVec1);
      assertNotSame(readOnlyVec6, readOnlyVec3);
      assertNotSame(readOnlyVec6, readOnlyVec2);
      assertNotSame(readOnlyVec6, readOnlyVec5);
      assertNotNull(readOnlyVec6);
      assertEquals(6, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1, readOnlyVec6.size());
      assertFalse(readOnlyVec6.isEmpty());
      assertTrue(readOnlyVec6.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec6.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec6.equals((Object)readOnlyVec5));
      assertTrue(readOnlyVec6.equals((Object)readOnlyVec4));
      assertTrue(readOnlyVec6.equals((Object)readOnlyVec0));
      assertEquals(6, readOnlyVecArray0.length);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec0.sort(211, 2441, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1326
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ReadOnlyVec<Integer>[] readOnlyVecArray0 = (ReadOnlyVec<Integer>[]) Array.newInstance(ReadOnlyVec.class, 1);
      Vec<Integer> vec0 = new Vec<Integer>(1);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec0);
      assertNotNull(readOnlyVec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      
      readOnlyVecArray0[0] = readOnlyVec0;
      Vec<ReadOnlyVec<Integer>> vec1 = new Vec<ReadOnlyVec<Integer>>(readOnlyVecArray0);
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertEquals(1, readOnlyVecArray0.length);
      
      vec1.moveTo((IVec<ReadOnlyVec<Integer>>) vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(1, readOnlyVecArray0.length);
      
      vec1.ensure(1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertEquals(1, readOnlyVecArray0.length);
      
      ReadOnlyVec<Object>[] readOnlyVecArray1 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 2);
      Vec<Object> vec2 = new Vec<Object>();
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(vec2);
      assertNotNull(readOnlyVec1);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertTrue(readOnlyVec1.isEmpty());
      assertEquals(0, readOnlyVec1.size());
      
      readOnlyVecArray1[0] = readOnlyVec1;
      ReadOnlyVec<Object> readOnlyVec2 = new ReadOnlyVec<Object>(vec2);
      assertNotNull(readOnlyVec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertTrue(readOnlyVec2.isEmpty());
      assertEquals(0, readOnlyVec2.size());
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec1));
      
      readOnlyVecArray1[1] = readOnlyVec2;
      // Undeclared exception!
      try { 
        readOnlyVec1.shrinkTo(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.shrink(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>();
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      vec1.hashCode();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      String[] stringArray0 = new String[3];
      Vec<String> vec2 = new Vec<String>(stringArray0);
      assertNotNull(vec2);
      assertEquals(3, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(3, stringArray0.length);
      
      // Undeclared exception!
      try { 
        vec2.indexOf("b`PSZ:tM;4?DZ\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(0);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<ReadOnlyVec<Object>> vec1 = new Vec<ReadOnlyVec<Object>>(0);
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec1.delete(1847);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1847
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      // Undeclared exception!
      try { 
        vec0.copyTo((IVec<ReadOnlyVec<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = Integer.valueOf((-830));
      assertEquals((-830), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Vec<Integer> vec0 = new Vec<Integer>(integerArray0);
      assertNotNull(vec0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(1, integerArray0.length);
      
      vec0.pop();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(1, integerArray0.length);
      
      Integer integer1 = new Integer((-830));
      assertEquals((-830), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      vec0.insertFirstWithShifting(integer1);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1, integerArray0.length);
      
      Vec<Object> vec1 = new Vec<Object>();
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      vec1.shrink((-669));
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sortUnique(comparator0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 345;
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>(345);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.ensure(2259);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Integer> vec1 = new Vec<Integer>();
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec1);
      assertNotNull(readOnlyVec0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      
      Vec<ReadOnlyVec<Integer>> vec2 = new Vec<ReadOnlyVec<Integer>>(345, readOnlyVec0);
      assertNotNull(vec2);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertFalse(vec2.isEmpty());
      assertEquals(345, vec2.size());
      
      vec2.pop();
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertEquals(344, vec2.size());
      assertFalse(vec2.isEmpty());
      
      Integer integer0 = new Integer(193);
      assertEquals(193, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      int int1 = integer0.intValue();
      assertEquals(193, int1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        vec1.remove((Integer) 193);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Vec<Object> vec0 = new Vec<Object>(objectArray0);
      assertNotNull(vec0);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(3, objectArray0.length);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2972, 2972, 2972, 1, (-460)).when(comparator0).compare(any() , any());
      vec0.sortUnique(comparator0);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.clear();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      int int0 = 0;
      vec0.shrink(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.insertFirst("org.sat4j.core.ReadOnlyVec");
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      boolean boolean0 = vec0.isEmpty();
      assertFalse(boolean0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(0, (Vec<Object>) null);
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Integer integer0 = new Integer(3272);
      assertEquals(3272, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Vec<Object> vec2 = new Vec<Object>(685, integer0);
      assertNotNull(vec2);
      assertEquals(685, vec2.size());
      assertFalse(vec2.isEmpty());
      assertFalse(integer0.equals((Object)int0));
      
      vec2.shrink((-302));
      assertEquals(685, vec2.size());
      assertFalse(vec2.isEmpty());
      assertFalse(integer0.equals((Object)int0));
      
      IVec<Vec<Object>> iVec0 = vec1.push(vec2);
      assertNotNull(iVec0);
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(685, vec2.size());
      assertFalse(vec2.isEmpty());
      assertFalse(iVec0.isEmpty());
      assertEquals(1, iVec0.size());
      assertFalse(integer0.equals((Object)int0));
      
      Vec<Object> vec3 = new Vec<Object>();
      assertNotNull(vec3);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertFalse(vec3.equals((Object)vec2));
      
      IVec<Vec<Object>> iVec1 = vec1.push(vec3);
      assertNotSame(vec3, vec2);
      assertSame(iVec1, iVec0);
      assertNotNull(iVec1);
      assertFalse(vec1.isEmpty());
      assertEquals(2, vec1.size());
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      assertFalse(iVec1.isEmpty());
      assertEquals(2, iVec1.size());
      assertFalse(vec3.equals((Object)vec2));
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      int int1 = vec1.hashCode();
      assertFalse(vec1.isEmpty());
      assertEquals(2, vec1.size());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        vec3.get(685);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 685
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      IVec<Object> iVec0 = vec0.clone();
      assertNotNull(iVec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(iVec0.isEmpty());
      assertEquals(0, iVec0.size());
      
      int int0 = vec0.size();
      assertEquals(0, int0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<ReadOnlyVec<Integer>> vec1 = new Vec<ReadOnlyVec<Integer>>();
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      String string0 = vec1.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      boolean boolean0 = vec1.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      int int1 = (-1195);
      Integer integer0 = new Integer((-1195));
      assertEquals((-1195), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      
      int int2 = integer0.intValue();
      assertEquals((-1195), int2);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      Vec<Integer> vec2 = new Vec<Integer>(3579, (Integer) (-1195));
      assertNotNull(vec2);
      assertFalse(vec2.isEmpty());
      assertEquals(3579, vec2.size());
      
      boolean boolean1 = vec2.equals(integer0);
      assertFalse(boolean1);
      assertFalse(vec2.isEmpty());
      assertEquals(3579, vec2.size());
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(boolean1 == boolean0);
      
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 9);
      vecArray0[0] = vec0;
      vecArray0[1] = vec0;
      vecArray0[2] = vec0;
      vecArray0[3] = vec0;
      IVec<Object> iVec1 = vec0.clone();
      assertNotSame(iVec1, iVec0);
      assertNotNull(iVec1);
      assertTrue(iVec1.isEmpty());
      assertEquals(0, iVec1.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(iVec1.equals((Object)iVec0));
      
      vecArray0[4] = vec0;
      Vec<Object> vec3 = new Vec<Object>(2552, vec0);
      assertNotNull(vec3);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec3.isEmpty());
      assertEquals(2552, vec3.size());
      assertFalse(vec3.equals((Object)vec0));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      vec0.ensure((-1195));
      assertNotSame(vec0, vec3);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec0.equals((Object)vec3));
      
      vec3.sort(comparator0);
      vecArray0[3].toString();
      vecArray0[5] = vec3;
      vecArray0[6] = vec0;
      vecArray0[7] = vec0;
      vecArray0[8] = vec0;
      Vec<Vec<Object>> vec4 = new Vec<Vec<Object>>(vecArray0);
      vec4.remove(vec0);
      vec4.size();
      Comparator<Object> comparator1 = null;
      vec0.sortUnique(comparator1);
      int int3 = 0;
      Vec<String> vec5 = new Vec<String>(int3);
      vec5.equals(vecArray0[6]);
      Vec<Vec<String>> vec6 = new Vec<Vec<String>>(int1);
      vec6.insertFirst(vec5);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>(2410);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.moveTo(1, 0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.shrinkTo(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      IVec<String> iVec0 = vec0.clone();
      assertNotNull(iVec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(iVec0.isEmpty());
      assertEquals(0, iVec0.size());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) iVec0;
      objectArray0[1] = (Object) vec0;
      objectArray0[2] = (Object) vec0;
      objectArray0[3] = (Object) iVec0;
      objectArray0[4] = (Object) vec0;
      objectArray0[5] = (Object) iVec0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(6, vec1.size());
      assertEquals(6, objectArray0.length);
      
      Iterator<Object> iterator0 = vec1.iterator();
      assertNotNull(iterator0);
      assertFalse(vec1.isEmpty());
      assertEquals(6, vec1.size());
      assertEquals(6, objectArray0.length);
      
      Vec<ReadOnlyVec<Object>> vec2 = new Vec<ReadOnlyVec<Object>>();
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      
      ToLongFunction<Object> toLongFunction0 = (ToLongFunction<Object>) mock(ToLongFunction.class, new ViolatedAssumptionAnswer());
      Comparator<ReadOnlyVec<Object>> comparator0 = Comparator.comparingLong((ToLongFunction<? super ReadOnlyVec<Object>>) toLongFunction0);
      assertNotNull(comparator0);
      
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<String> comparator2 = Comparator.nullsLast((Comparator<? super String>) comparator1);
      assertNotNull(comparator2);
      assertFalse(comparator2.equals((Object)comparator1));
      
      Comparator<ReadOnlyVec<Object>> comparator3 = comparator0.reversed();
      assertNotNull(comparator3);
      assertFalse(comparator3.equals((Object)comparator0));
      
      vec2.sortUnique(comparator0);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertFalse(comparator0.equals((Object)comparator3));
      
      Integer integer0 = Integer.valueOf((-5));
      assertEquals((-5), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Vec<ReadOnlyVec<Integer>> vec3 = new Vec<ReadOnlyVec<Integer>>(15);
      assertNotNull(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      
      Vec<Integer> vec4 = new Vec<Integer>(5019, integer0);
      assertNotNull(vec4);
      assertFalse(vec4.isEmpty());
      assertEquals(5019, vec4.size());
      assertFalse(integer0.equals((Object)integer1));
      
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec4);
      assertNotNull(readOnlyVec0);
      assertFalse(vec4.isEmpty());
      assertEquals(5019, vec4.size());
      assertEquals(5019, readOnlyVec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertFalse(integer0.equals((Object)integer1));
      
      Vec<Integer> vec5 = new Vec<Integer>(15);
      assertNotNull(vec5);
      assertEquals(0, vec5.size());
      assertTrue(vec5.isEmpty());
      assertFalse(vec5.equals((Object)vec4));
      
      ReadOnlyVec<Integer> readOnlyVec1 = new ReadOnlyVec<Integer>(vec5);
      assertNotNull(readOnlyVec1);
      assertEquals(0, vec5.size());
      assertTrue(vec5.isEmpty());
      assertEquals(0, readOnlyVec1.size());
      assertTrue(readOnlyVec1.isEmpty());
      assertFalse(vec5.equals((Object)vec4));
      assertFalse(readOnlyVec1.equals((Object)readOnlyVec0));
      
      vec3.unsafePush(readOnlyVec1);
      assertNotSame(vec5, vec4);
      assertNotSame(readOnlyVec1, readOnlyVec0);
      assertFalse(vec3.isEmpty());
      assertEquals(1, vec3.size());
      assertEquals(0, vec5.size());
      assertTrue(vec5.isEmpty());
      assertEquals(0, readOnlyVec1.size());
      assertTrue(readOnlyVec1.isEmpty());
      assertFalse(vec5.equals((Object)vec4));
      assertFalse(readOnlyVec1.equals((Object)readOnlyVec0));
      
      Vec<ReadOnlyVec<String>> vec6 = new Vec<ReadOnlyVec<String>>();
      assertNotNull(vec6);
      assertTrue(vec6.isEmpty());
      assertEquals(0, vec6.size());
      
      ReadOnlyVec<String> readOnlyVec2 = new ReadOnlyVec<String>(iVec0);
      assertNotNull(readOnlyVec2);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(iVec0.isEmpty());
      assertEquals(0, iVec0.size());
      assertEquals(0, readOnlyVec2.size());
      assertTrue(readOnlyVec2.isEmpty());
      
      int int0 = vec6.indexOf(readOnlyVec2);
      assertEquals((-1), int0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(iVec0.isEmpty());
      assertEquals(0, iVec0.size());
      assertTrue(vec6.isEmpty());
      assertEquals(0, vec6.size());
      assertEquals(0, readOnlyVec2.size());
      assertTrue(readOnlyVec2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      int int0 = (-1230);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.selectionSort((-1230), (-1230), comparator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      ReadOnlyVec<Object>[] readOnlyVecArray0 = (ReadOnlyVec<Object>[]) Array.newInstance(ReadOnlyVec.class, 6);
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec0);
      assertNotNull(readOnlyVec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      
      readOnlyVecArray0[0] = readOnlyVec0;
      ReadOnlyVec<Object> readOnlyVec1 = new ReadOnlyVec<Object>(vec0);
      assertNotNull(readOnlyVec1);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, readOnlyVec1.size());
      assertTrue(readOnlyVec1.isEmpty());
      assertTrue(readOnlyVec1.equals((Object)readOnlyVec0));
      
      readOnlyVecArray0[1] = readOnlyVec1;
      ReadOnlyVec<Object> readOnlyVec2 = new ReadOnlyVec<Object>(readOnlyVec0);
      assertNotNull(readOnlyVec2);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertTrue(readOnlyVec2.isEmpty());
      assertEquals(0, readOnlyVec2.size());
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec0));
      
      readOnlyVecArray0[2] = readOnlyVec2;
      ReadOnlyVec<Object> readOnlyVec3 = new ReadOnlyVec<Object>(readOnlyVec0);
      assertNotNull(readOnlyVec3);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertTrue(readOnlyVec3.isEmpty());
      assertEquals(0, readOnlyVec3.size());
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec3.equals((Object)readOnlyVec2));
      
      readOnlyVecArray0[3] = readOnlyVec3;
      ReadOnlyVec<Object> readOnlyVec4 = new ReadOnlyVec<Object>(readOnlyVec2);
      assertNotNull(readOnlyVec4);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(readOnlyVec0.isEmpty());
      assertTrue(readOnlyVec2.isEmpty());
      assertEquals(0, readOnlyVec2.size());
      assertTrue(readOnlyVec4.isEmpty());
      assertEquals(0, readOnlyVec4.size());
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec2));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec0.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec2.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec3));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec1));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec0));
      assertTrue(readOnlyVec4.equals((Object)readOnlyVec2));
      
      readOnlyVecArray0[4] = readOnlyVec4;
      Vec<Object> vec1 = new Vec<Object>();
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(vec1.equals((Object)vec0));
      
      int int1 = 15;
      // Undeclared exception!
      try { 
        vec1.get(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Vec<ReadOnlyVec<Integer>> vec0 = new Vec<ReadOnlyVec<Integer>>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.ensure(2);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Vec<ReadOnlyVec<Integer>> vec0 = new Vec<ReadOnlyVec<Integer>>(0);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      boolean boolean0 = vec0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) vec0;
      objectArray0[1] = (Object) vec0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) vec0;
      objectArray0[4] = (Object) vec0;
      objectArray0[5] = (Object) vec0;
      objectArray0[6] = (Object) vec0;
      objectArray0[7] = (Object) vec0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertNotNull(vec1);
      assertEquals(8, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(8, objectArray0.length);
      
      vec1.ensure(1987);
      assertEquals(8, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(8, objectArray0.length);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 1976, (-2443), (-2443), (-2443)).when(comparator0).compare(any() , any());
      vec1.sortUnique(comparator0);
      assertEquals(8, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(8, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(2969);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<String> vec1 = new Vec<String>(2850, "");
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(2850, vec1.size());
      assertFalse(vec1.equals((Object)vec0));
      
      vec1.insertFirst("");
      assertNotSame(vec1, vec0);
      assertEquals(2851, vec1.size());
      assertFalse(vec1.isEmpty());
      assertFalse(vec1.equals((Object)vec0));
      
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(2969, vec0);
      assertNotNull(vec2);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(2969, vec2.size());
      assertFalse(vec2.isEmpty());
      assertFalse(vec0.equals((Object)vec1));
      
      boolean boolean0 = vec2.contains(vec1);
      assertFalse(boolean0);
      assertNotSame(vec0, vec1);
      assertNotSame(vec1, vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(2851, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2969, vec2.size());
      assertFalse(vec2.isEmpty());
      assertFalse(vec0.equals((Object)vec1));
      assertFalse(vec1.equals((Object)vec0));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 0;
      Vec<Object> vec0 = new Vec<Object>(0);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sortUnique(comparator0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(0, 0, comparator1);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      boolean boolean0 = vec0.isEmpty();
      assertTrue(boolean0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<ReadOnlyVec<String>> vec1 = new Vec<ReadOnlyVec<String>>(0);
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      int int1 = 0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      Vec<String> vec2 = new Vec<String>(stringArray0);
      assertNotNull(vec2);
      assertEquals(6, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(6, stringArray0.length);
      
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec2);
      assertNotNull(readOnlyVec0);
      assertEquals(6, vec2.size());
      assertFalse(vec2.isEmpty());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(6, readOnlyVec0.size());
      assertEquals(6, stringArray0.length);
      
      // Undeclared exception!
      try { 
        vec1.unsafePush(readOnlyVec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<String> vec1 = new Vec<String>();
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertTrue(vec1.equals((Object)vec0));
      
      vec1.insertFirst("lQVb?'NH!,Yeu^g!bZh");
      assertNotSame(vec1, vec0);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertFalse(vec1.equals((Object)vec0));
      
      vec1.insertFirst("lQVb?'NH!,Yeu^g!bZh");
      assertNotSame(vec1, vec0);
      assertFalse(vec1.isEmpty());
      assertEquals(2, vec1.size());
      assertFalse(vec1.equals((Object)vec0));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.insertFirstWithShifting("QwQ");
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Vec<Comparable<Object>> vec0 = new Vec<Comparable<Object>>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      int int0 = vec0.size();
      assertEquals(0, int0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = Integer.valueOf((-830));
      assertEquals((-830), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Vec<Integer> vec0 = new Vec<Integer>(integerArray0);
      assertNotNull(vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertEquals(1, integerArray0.length);
      
      Vec<String> vec1 = new Vec<String>();
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      // Undeclared exception!
      try { 
        vec1.set((int) integerArray0[0], ",");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -830
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Vec<Object> vec0 = new Vec<Object>(2);
      //  // Unstable assertion: assertNotNull(vec0);
      //  // Unstable assertion: assertTrue(vec0.isEmpty());
      //  // Unstable assertion: assertEquals(0, vec0.size());
      
      String string0 = ",";
      vec0.growTo(2, ",");
      //  // Unstable assertion: assertFalse(vec0.isEmpty());
      //  // Unstable assertion: assertEquals(2, vec0.size());
      
      // Undeclared exception!
      try { 
        vec0.removeFromLast(",");
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 245;
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(245);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      IVec<ReadOnlyVec<Object>> iVec0 = vec0.clone();
      assertNotNull(iVec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(iVec0.isEmpty());
      assertEquals(0, iVec0.size());
      
      boolean boolean0 = vec0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 3);
      Vec<String> vec1 = new Vec<String>(245, "");
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(245, vec1.size());
      
      vecArray0[0] = vec1;
      Vec<String> vec2 = new Vec<String>(245);
      assertNotNull(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertFalse(vec2.equals((Object)vec1));
      
      vecArray0[1] = vec2;
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Vec<Object> vec3 = new Vec<Object>(vecArray0);
      assertNotNull(vec3);
      assertFalse(vec3.isEmpty());
      assertEquals(3, vec3.size());
      assertEquals(3, vecArray0.length);
      
      // Undeclared exception!
      try { 
        vec3.indexOf("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[2] = object1;
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) "w{]~Mb;N$3L`K1n";
      Vec<Object> vec0 = new Vec<Object>(objectArray0);
      assertNotNull(vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(5, vec0.size());
      assertEquals(5, objectArray0.length);
      
      int int0 = vec0.indexOf(object0);
      assertEquals(0, int0);
      assertNotSame(object0, object1);
      assertFalse(vec0.isEmpty());
      assertEquals(5, vec0.size());
      assertFalse(object0.equals((Object)object1));
      assertEquals(5, objectArray0.length);
      
      Vec<ReadOnlyVec<Integer>> vec1 = null;
      try {
        vec1 = new Vec<ReadOnlyVec<Integer>>((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 245;
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(245);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      IVec<ReadOnlyVec<Object>> iVec0 = vec0.clone();
      assertNotNull(iVec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      
      boolean boolean0 = vec0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 3);
      String string0 = "";
      Vec<String> vec1 = new Vec<String>(245, "");
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(245, vec1.size());
      
      vecArray0[0] = vec1;
      Vec<String> vec2 = new Vec<String>(245);
      assertNotNull(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertFalse(vec2.equals((Object)vec1));
      
      vecArray0[1] = vec2;
      int int1 = (-3101);
      Vec<String> vec3 = null;
      try {
        vec3 = new Vec<String>((-3101));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable0).toString();
      Vec<Comparable<Object>> vec0 = new Vec<Comparable<Object>>(199, comparable0);
      assertNotNull(vec0);
      assertEquals(199, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(comparable1).toString();
      boolean boolean0 = vec0.contains(comparable1);
      assertFalse(boolean0);
      assertEquals(199, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) comparable0;
      objectArray0[1] = (Object) comparable0;
      objectArray0[2] = (Object) comparable1;
      objectArray0[3] = (Object) comparable1;
      objectArray0[4] = (Object) comparable1;
      objectArray0[5] = (Object) comparable0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(6, vec1.size());
      assertEquals(6, objectArray0.length);
      
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(2049, vec1);
      assertNotNull(vec2);
      assertFalse(vec1.isEmpty());
      assertEquals(6, vec1.size());
      assertFalse(vec2.isEmpty());
      assertEquals(2049, vec2.size());
      assertEquals(6, objectArray0.length);
      
      // Undeclared exception!
      vec2.toString();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = integer0.toString();
      assertEquals("0", string0);
      assertNotNull(string0);
      
      vec0.unsafePush(integer0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      Integer integer1 = Integer.valueOf(120);
      assertEquals(120, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = Integer.valueOf(120);
      assertEquals(120, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      
      vec0.unsafePush(integer2);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertFalse(integer2.equals((Object)integer0));
      
      vec0.moveTo((IVec<Integer>) vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>(vec0);
      assertNotNull(readOnlyVec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      
      Vec<ReadOnlyVec<Integer>> vec1 = new Vec<ReadOnlyVec<Integer>>(0, readOnlyVec0);
      assertNotNull(vec1);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      String string1 = vec1.toString();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(readOnlyVec0.isEmpty());
      assertEquals(0, readOnlyVec0.size());
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertFalse(string1.equals((Object)string0));
      
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      
      int int0 = integer3.intValue();
      assertEquals(0, int0);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer0));
      
      Integer integer4 = new Integer((-2999));
      assertEquals((-2999), (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      
      int int1 = integer4.intValue();
      assertEquals((-2999), int1);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        vec0.remove((Integer) (-2999));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Vec<String> vec0 = new Vec<String>(1, "[k`7SgnoWKr9^5");
      assertNotNull(vec0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      int int0 = 0;
      Object object0 = vec0.delete(0);
      assertEquals("[k`7SgnoWKr9^5", object0);
      assertNotNull(object0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      objectArray0[0] = (Object) "[k`7SgnoWKr9^5";
      Vec<Object> vec1 = null;
      try {
        vec1 = new Vec<Object>((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Vec<String> vec0 = null;
      try {
        vec0 = new Vec<String>((-305));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<String> vec1 = new Vec<String>(0);
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(vec1.equals((Object)vec0));
      
      vec1.moveTo((IVec<String>) vec0);
      assertNotSame(vec0, vec1);
      assertNotSame(vec1, vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(vec0.equals((Object)vec1));
      assertTrue(vec1.equals((Object)vec0));
      
      vec0.moveTo((IVec<String>) vec1);
      assertNotSame(vec0, vec1);
      assertNotSame(vec1, vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertTrue(vec0.equals((Object)vec1));
      assertTrue(vec1.equals((Object)vec0));
      
      vec0.unsafePush("rXt^\"B?$01i[[fTzA");
      assertNotSame(vec0, vec1);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(vec0.equals((Object)vec1));
      
      vec0.copyTo((IVec<String>) vec0);
      assertNotSame(vec0, vec1);
      assertFalse(vec0.isEmpty());
      assertEquals(2, vec0.size());
      assertFalse(vec0.equals((Object)vec1));
      
      Vec<Integer> vec2 = new Vec<Integer>();
      assertNotNull(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      Integer[] integerArray0 = new Integer[7];
      Integer integer0 = new Integer(550);
      assertEquals(550, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = integer0.intValue();
      assertEquals(550, int0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      int int1 = integer1.intValue();
      assertEquals(0, int1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(int1 == int0);
      
      integerArray0[0] = (Integer) 0;
      Integer integer2 = new Integer(0);
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int1));
      
      int int2 = integer2.intValue();
      assertEquals(0, int2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      Integer integer3 = new Integer((-2999));
      assertEquals((-2999), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      int int3 = integer3.intValue();
      assertEquals((-2999), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      integerArray0[1] = (Integer) (-2999);
      String string0 = "iR8]v";
      try { 
        Integer.parseInt("iR8]v");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"iR8]v\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Vec<Comparable<Object>> vec0 = new Vec<Comparable<Object>>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = vec0.contains(comparable0);
      assertFalse(boolean0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Vec<Vec<Object>> vec0 = new Vec<Vec<Object>>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.moveTo((IVec<Vec<Object>>) vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      IVec<Vec<Object>> iVec0 = vec0.clone();
      assertNotNull(iVec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(iVec0.isEmpty());
      assertEquals(0, iVec0.size());
      
      Vec<Object> vec1 = new Vec<Object>(1, "(sF?,");
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      String string0 = vec1.toString();
      assertEquals("(sF?,", string0);
      assertNotNull(string0);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      IVec<Object> iVec1 = new Vec<Object>(1);
      assertNotNull(iVec1);
      assertEquals(0, iVec1.size());
      assertTrue(iVec1.isEmpty());
      
      vec0.growTo(1, vec1);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      int int0 = vec0.indexOf("");
      assertEquals((-1), int0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "Yx7yCi|&";
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertNotNull(vec1);
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1, objectArray0.length);
      
      IVec<Object> iVec0 = vec1.clone();
      assertNotNull(iVec0);
      assertEquals(1, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1, iVec0.size());
      assertFalse(iVec0.isEmpty());
      assertEquals(1, objectArray0.length);
      
      Vec<Object>[] vecArray0 = (Vec<Object>[]) Array.newInstance(Vec.class, 6);
      vecArray0[0] = vec1;
      vecArray0[1] = vec1;
      vecArray0[2] = vec1;
      vecArray0[3] = vec1;
      Vec<Object> vec2 = new Vec<Object>();
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertFalse(vec2.equals((Object)vec1));
      
      vecArray0[4] = vec2;
      vecArray0[5] = vec1;
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(vecArray0);
      assertNotNull(vec3);
      assertFalse(vec3.isEmpty());
      assertEquals(6, vec3.size());
      assertEquals(6, vecArray0.length);
      
      vec3.remove(vec2);
      assertNotSame(vec2, vec1);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertFalse(vec3.isEmpty());
      assertEquals(5, vec3.size());
      assertFalse(vec2.equals((Object)vec1));
      assertEquals(6, vecArray0.length);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 245;
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(245);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      IVec<ReadOnlyVec<Object>> iVec0 = vec0.clone();
      assertNotNull(iVec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      
      boolean boolean0 = vec0.equals(vec0);
      assertTrue(boolean0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<String>[] vecArray0 = (Vec<String>[]) Array.newInstance(Vec.class, 3);
      Vec<String> vec1 = new Vec<String>(245, "");
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(245, vec1.size());
      
      vecArray0[0] = vec1;
      Vec<String> vec2 = new Vec<String>(245);
      assertNotNull(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertFalse(vec2.equals((Object)vec1));
      
      vecArray0[1] = vec2;
      Vec<Object> vec3 = new Vec<Object>(vecArray0);
      assertNotNull(vec3);
      assertEquals(3, vec3.size());
      assertFalse(vec3.isEmpty());
      assertEquals(3, vecArray0.length);
      
      // Undeclared exception!
      try { 
        vec3.indexOf("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      //  // Unstable assertion: assertNotNull(vec0);
      //  // Unstable assertion: assertEquals(0, vec0.size());
      //  // Unstable assertion: assertTrue(vec0.isEmpty());
      
      vec0.shrink(0);
      //  // Unstable assertion: assertEquals(0, vec0.size());
      //  // Unstable assertion: assertTrue(vec0.isEmpty());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>();
      //  // Unstable assertion: assertNotNull(vec1);
      //  // Unstable assertion: assertTrue(vec1.isEmpty());
      //  // Unstable assertion: assertEquals(0, vec1.size());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      Vec<String> vec2 = new Vec<String>(stringArray0);
      //  // Unstable assertion: assertNotNull(vec2);
      //  // Unstable assertion: assertEquals(3, vec2.size());
      //  // Unstable assertion: assertFalse(vec2.isEmpty());
      //  // Unstable assertion: assertEquals(3, stringArray0.length);
      
      // Undeclared exception!
      try { 
        vec2.removeFromLast("");
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.delete(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      vec0.moveTo(0, 0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      int int0 = vec0.size();
      assertEquals(0, int0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Integer> vec1 = new Vec<Integer>();
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      boolean boolean0 = vec1.contains(integer0);
      assertFalse(boolean0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertFalse(integer0.equals((Object)int0));
      
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Vec<Comparable<Object>> vec2 = new Vec<Comparable<Object>>(5, comparable0);
      assertNotNull(vec2);
      assertEquals(5, vec2.size());
      assertFalse(vec2.isEmpty());
      
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = vec2.contains(comparable1);
      assertFalse(boolean1);
      assertEquals(5, vec2.size());
      assertFalse(vec2.isEmpty());
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "3j7Pq >I";
      stringArray0[1] = ";mRKunJU;";
      stringArray0[2] = "r";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "7T_9-#mG>n:<";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(6, vec1.size());
      assertEquals(6, stringArray0.length);
      
      vec1.shrinkTo(673);
      assertEquals(673, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(6, stringArray0.length);
      
      // Undeclared exception!
      try { 
        vec1.clone();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(0);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(1521);
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      IVec<Vec<Object>> iVec0 = vec1.clone();
      assertNotNull(iVec0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      
      Integer integer0 = new Integer(2388);
      assertEquals(2388, (int)integer0);
      assertNotNull(integer0);
      
      Vec<Object> vec2 = new Vec<Object>(2388, integer0);
      assertNotNull(vec2);
      assertFalse(vec2.isEmpty());
      assertEquals(2388, vec2.size());
      
      String string0 = vec2.toString();
      assertNotNull(string0);
      assertFalse(vec2.isEmpty());
      assertEquals(2388, vec2.size());
      
      Vec<Object> vec3 = new Vec<Object>(409);
      assertNotNull(vec3);
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertFalse(vec3.equals((Object)vec2));
      
      vec1.growTo(2, vec3);
      assertNotSame(vec3, vec2);
      assertEquals(2, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(0, vec3.size());
      assertTrue(vec3.isEmpty());
      assertFalse(vec3.equals((Object)vec2));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.ensure(987);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = Integer.toBinaryString(0);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      String string1 = Integer.toBinaryString(0);
      assertEquals("0", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      Vec<Integer> vec0 = new Vec<Integer>(954, (Integer) 0);
      assertNotNull(vec0);
      assertEquals(954, vec0.size());
      assertFalse(vec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.shrinkTo((-289));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.insertFirstWithShifting((String) null);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      String string0 = vec0.toString();
      assertEquals("null", string0);
      assertNotNull(string0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.shrinkTo(0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      IVec<String> iVec0 = vec0.clone();
      assertNotNull(iVec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(iVec0.isEmpty());
      assertEquals(0, iVec0.size());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) iVec0;
      objectArray0[1] = (Object) vec0;
      objectArray0[2] = (Object) vec0;
      objectArray0[3] = (Object) iVec0;
      objectArray0[4] = (Object) vec0;
      objectArray0[5] = (Object) iVec0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(6, vec1.size());
      assertEquals(6, objectArray0.length);
      
      vec1.removeFromLast(objectArray0[3]);
      assertFalse(vec1.isEmpty());
      assertEquals(5, vec1.size());
      assertEquals(6, objectArray0.length);
      
      Iterator<Object> iterator0 = vec1.iterator();
      assertNotNull(iterator0);
      assertFalse(vec1.isEmpty());
      assertEquals(5, vec1.size());
      assertEquals(6, objectArray0.length);
      
      Vec<ReadOnlyVec<Object>> vec2 = new Vec<ReadOnlyVec<Object>>();
      assertNotNull(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      Vec<Object> vec3 = new Vec<Object>(objectArray0);
      assertNotNull(vec3);
      assertFalse(vec3.isEmpty());
      assertEquals(6, vec3.size());
      assertFalse(vec3.equals((Object)vec1));
      assertEquals(6, objectArray0.length);
      
      Vec<String> vec4 = new Vec<String>();
      assertNotNull(vec4);
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      assertTrue(vec4.equals((Object)vec0));
      
      Vec<Vec<String>> vec5 = new Vec<Vec<String>>(0, vec4);
      assertNotNull(vec5);
      assertEquals(0, vec5.size());
      assertTrue(vec5.isEmpty());
      assertEquals(0, vec4.size());
      assertTrue(vec4.isEmpty());
      assertTrue(vec4.equals((Object)vec0));
      
      boolean boolean0 = vec1.equals(vec3);
      assertFalse(boolean0);
      assertNotSame(vec1, vec3);
      assertNotSame(vec3, vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(5, vec1.size());
      assertFalse(vec3.isEmpty());
      assertEquals(6, vec3.size());
      assertFalse(vec1.equals((Object)vec3));
      assertFalse(vec3.equals((Object)vec1));
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Vec<Object> vec0 = new Vec<Object>(1, object0);
      assertNotNull(vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "fE,)0I}";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "O+(:an";
      stringArray0[4] = "0;o";
      stringArray0[5] = ",";
      stringArray0[6] = "=I7XT4F";
      Vec<Object> vec1 = new Vec<Object>(1, (Object) null);
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertFalse(vec1.equals((Object)vec0));
      
      IVec<Object> iVec0 = vec0.clone();
      assertNotSame(vec0, vec1);
      assertNotNull(iVec0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertEquals(1, iVec0.size());
      assertFalse(iVec0.isEmpty());
      
      Vec<Object> vec2 = new Vec<Object>();
      assertNotNull(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertFalse(vec2.equals((Object)vec1));
      assertFalse(vec2.equals((Object)vec0));
      
      Vec<Vec<Object>> vec3 = new Vec<Vec<Object>>(15, vec2);
      assertNotNull(vec3);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertFalse(vec3.isEmpty());
      assertEquals(15, vec3.size());
      assertFalse(vec2.equals((Object)vec1));
      assertFalse(vec2.equals((Object)vec0));
      
      vec3.growTo(1, vec0);
      assertNotSame(vec0, vec1);
      assertNotSame(vec0, vec2);
      assertNotSame(vec2, vec1);
      assertNotSame(vec2, vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertFalse(vec3.isEmpty());
      assertEquals(1, vec3.size());
      assertFalse(vec0.equals((Object)vec2));
      assertFalse(vec2.equals((Object)vec1));
      assertFalse(vec2.equals((Object)vec0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vec<Vec<String>> vec0 = new Vec<Vec<String>>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vec0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Vec<Object> vec0 = new Vec<Object>(objectArray0);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, objectArray0.length);
      
      Iterator<Object> iterator0 = vec0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(0, objectArray0.length);
      
      IVec<Object> iVec0 = vec0.clone();
      assertNotNull(iVec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertTrue(iVec0.isEmpty());
      assertEquals(0, iVec0.size());
      assertEquals(0, objectArray0.length);
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>();
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      int int0 = 1754;
      int int1 = (-3346);
      vec1.copyTo((IVec<Vec<String>>) vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      String string0 = null;
      Vec<String> vec2 = null;
      try {
        vec2 = new Vec<String>((-3346), (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "s[%HhlL";
      stringArray0[2] = "";
      stringArray0[3] = "(0^{AOt8^%~fIfj";
      stringArray0[4] = "BlYL;{^gN6n";
      stringArray0[5] = "org.sat4j.core.Vec";
      stringArray0[6] = "";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      assertNotNull(vec0);
      assertEquals(7, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(7, stringArray0.length);
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.selectionSort(0, 0, comparator0);
      assertEquals(7, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(7, stringArray0.length);
      
      boolean boolean0 = vec0.isEmpty();
      assertFalse(boolean0);
      assertEquals(7, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(7, stringArray0.length);
      
      Integer[] integerArray0 = new Integer[4];
      String string0 = Integer.toBinaryString(1911);
      assertEquals("11101110111", string0);
      assertNotNull(string0);
      
      String string1 = Integer.toBinaryString(1911);
      assertEquals("11101110111", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      integerArray0[0] = (Integer) 1911;
      Integer integer0 = Integer.valueOf(2352);
      assertEquals(2352, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(2352);
      assertEquals(2352, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      String string2 = integer2.toString();
      assertEquals("1", string2);
      assertNotNull(string2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      integerArray0[1] = integer2;
      Integer integer3 = new Integer(621);
      assertEquals(621, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      
      String string3 = integer3.toString();
      assertEquals("621", string3);
      assertNotNull(string3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      integerArray0[2] = integer3;
      Integer integer4 = new Integer((-1253));
      assertEquals((-1253), (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      
      int int0 = integer4.intValue();
      assertEquals((-1253), int0);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      
      integerArray0[3] = (Integer) (-1253);
      Vec<Integer> vec1 = new Vec<Integer>(integerArray0);
      assertNotNull(vec1);
      assertEquals(4, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(4, integerArray0.length);
      
      Integer integer5 = Integer.valueOf((-3026));
      assertEquals((-3026), (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      
      // Undeclared exception!
      try { 
        vec1.remove(integer5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(0);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.sort(comparator0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.insertFirstWithShifting((String) null);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      vec0.remove((String) null);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Integer> vec1 = new Vec<Integer>(0);
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      vec1.shrinkTo(0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      IVec<String> iVec0 = vec0.push("org.sat4j.core.Vec$1");
      assertNotNull(iVec0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertFalse(iVec0.isEmpty());
      assertEquals(1, iVec0.size());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(20, "+bX$;~");
      assertNotNull(vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(20, vec0.size());
      
      vec0.ensure(20);
      assertFalse(vec0.isEmpty());
      assertEquals(20, vec0.size());
      
      boolean boolean0 = vec0.isEmpty();
      assertFalse(boolean0);
      assertFalse(vec0.isEmpty());
      assertEquals(20, vec0.size());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.insertFirst("");
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      int int0 = vec0.indexOf((String) null);
      assertEquals((-1), int0);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(2983);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(2983, vec0);
      assertNotNull(vec1);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertFalse(vec1.isEmpty());
      assertEquals(2983, vec1.size());
      
      vec1.insertFirstWithShifting(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      assertEquals(2984, vec1.size());
      assertFalse(vec1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.hashCode();
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<String> vec1 = new Vec<String>();
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      vec1.insertFirst("S+SLWnN~SY2");
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(2410, vec1);
      assertNotNull(vec2);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertFalse(vec2.isEmpty());
      assertEquals(2410, vec2.size());
      
      boolean boolean0 = vec2.contains(vec1);
      assertTrue(boolean0);
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
      assertFalse(vec2.isEmpty());
      assertEquals(2410, vec2.size());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.hashCode();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<String> vec1 = new Vec<String>();
      assertNotNull(vec1);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(2410, vec1);
      assertNotNull(vec2);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertFalse(vec2.isEmpty());
      assertEquals(2410, vec2.size());
      
      boolean boolean0 = vec2.contains(vec1);
      assertTrue(boolean0);
      assertEquals(0, vec1.size());
      assertTrue(vec1.isEmpty());
      assertFalse(vec2.isEmpty());
      assertEquals(2410, vec2.size());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>();
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      IVec<Vec<String>> iVec0 = vec1.clone();
      assertNotNull(iVec0);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      assertTrue(iVec0.isEmpty());
      assertEquals(0, iVec0.size());
      
      int int0 = vec1.indexOf(vec0);
      assertEquals((-1), int0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      vec1.insertFirst(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      assertFalse(vec1.isEmpty());
      assertEquals(1, vec1.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      //  // Unstable assertion: assertNotNull(vec0);
      //  // Unstable assertion: assertEquals(0, vec0.size());
      //  // Unstable assertion: assertTrue(vec0.isEmpty());
      
      vec0.hashCode();
      //  // Unstable assertion: assertEquals(0, vec0.size());
      //  // Unstable assertion: assertTrue(vec0.isEmpty());
      
      Vec<String> vec1 = new Vec<String>();
      //  // Unstable assertion: assertNotNull(vec1);
      //  // Unstable assertion: assertEquals(0, vec1.size());
      //  // Unstable assertion: assertTrue(vec1.isEmpty());
      
      vec1.insertFirst("S+SLWnN~SY2");
      //  // Unstable assertion: assertFalse(vec1.isEmpty());
      //  // Unstable assertion: assertEquals(1, vec1.size());
      
      Vec<Vec<String>> vec2 = new Vec<Vec<String>>(2410, vec1);
      //  // Unstable assertion: assertNotNull(vec2);
      //  // Unstable assertion: assertFalse(vec1.isEmpty());
      //  // Unstable assertion: assertEquals(1, vec1.size());
      //  // Unstable assertion: assertEquals(2410, vec2.size());
      //  // Unstable assertion: assertFalse(vec2.isEmpty());
      
      // Undeclared exception!
      try { 
        vec1.removeFromLast("S+SLWnN~SY2");
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Vec<Object> vec0 = new Vec<Object>(objectArray0);
      assertNotNull(vec0);
      assertEquals(3, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(3, objectArray0.length);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      vec0.sortUnique(comparator0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(3, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer[] integerArray0 = new Integer[16];
      Integer integer0 = Integer.valueOf((-830));
      assertEquals((-830), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Vec<Integer> vec0 = new Vec<Integer>(integerArray0);
      assertNotNull(vec0);
      assertFalse(vec0.isEmpty());
      assertEquals(16, vec0.size());
      assertEquals(16, integerArray0.length);
      
      Integer integer1 = new Integer(68);
      assertEquals(68, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      vec0.insertFirstWithShifting(integerArray0[0]);
      assertFalse(vec0.isEmpty());
      assertEquals(17, vec0.size());
      assertEquals(16, integerArray0.length);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Vec<Object> vec1 = new Vec<Object>(integerArray0);
      assertNotNull(vec1);
      assertEquals(16, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(16, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Integer[] integerArray0 = new Integer[20];
      Integer integer0 = Integer.valueOf((-830));
      assertEquals((-830), (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Vec<Integer> vec0 = new Vec<Integer>(integerArray0);
      assertNotNull(vec0);
      assertEquals(20, vec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(20, integerArray0.length);
      
      Vec<String> vec1 = new Vec<String>();
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      // Undeclared exception!
      try { 
        vec1.set((int) integerArray0[0], ",");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -830
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      // Undeclared exception!
      try { 
        vec0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(345);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) vec0;
      objectArray0[1] = (Object) vec0;
      objectArray0[2] = (Object) comparator0;
      objectArray0[3] = (Object) vec0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(4, vec1.size());
      assertEquals(4, objectArray0.length);
      
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec1);
      assertNotNull(readOnlyVec0);
      assertFalse(vec1.isEmpty());
      assertEquals(4, vec1.size());
      assertEquals(4, readOnlyVec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(4, objectArray0.length);
      
      Vec<ReadOnlyVec<Object>> vec2 = new Vec<ReadOnlyVec<Object>>(345, readOnlyVec0);
      assertNotNull(vec2);
      assertFalse(vec1.isEmpty());
      assertEquals(4, vec1.size());
      assertEquals(4, readOnlyVec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(345, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(4, objectArray0.length);
      
      boolean boolean0 = vec2.equals(objectArray0[3]);
      assertFalse(boolean0);
      assertFalse(vec1.isEmpty());
      assertEquals(4, vec1.size());
      assertEquals(4, readOnlyVec0.size());
      assertFalse(readOnlyVec0.isEmpty());
      assertEquals(345, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(4, objectArray0.length);
      
      String string0 = null;
      Vec<String> vec3 = null;
      try {
        vec3 = new Vec<String>((-1), (String) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.shrink(2211);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Vec<Object> vec0 = new Vec<Object>(1, object0);
      assertNotNull(vec0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "fE,)0I}";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "O+(:an";
      stringArray0[4] = "0;o";
      stringArray0[5] = ",";
      stringArray0[6] = "=I7XT4F";
      stringArray0[7] = "";
      stringArray0[8] = ",";
      Vec<String> vec1 = new Vec<String>(stringArray0);
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(9, vec1.size());
      assertEquals(9, stringArray0.length);
      
      Object object1 = vec1.delete(1);
      assertEquals("", object1);
      assertNotNull(object1);
      assertEquals(8, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(9, stringArray0.length);
      
      vec0.insertFirstWithShifting("");
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      IVec<Object> iVec0 = vec0.push(integer0);
      assertNotNull(iVec0);
      assertFalse(iVec0.isEmpty());
      assertEquals(3, iVec0.size());
      assertFalse(vec0.isEmpty());
      assertEquals(3, vec0.size());
      assertFalse(integer0.equals((Object)int0));
      
      Iterator<Object> iterator0 = vec0.iterator();
      assertNotNull(iterator0);
      assertFalse(vec0.isEmpty());
      assertEquals(3, vec0.size());
      
      Vec<Integer>[] vecArray0 = (Vec<Integer>[]) Array.newInstance(Vec.class, 8);
      Vec<Integer> vec2 = null;
      try {
        vec2 = new Vec<Integer>((-982), integer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      vec0.shrinkTo(15);
      assertEquals(15, vec0.size());
      assertFalse(vec0.isEmpty());
      
      // Undeclared exception!
      try { 
        vec0.hashCode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      String string0 = null;
      String string1 = ".G<!CZdi&/@YfDHalou";
      vec0.insertFirstWithShifting(".G<!CZdi&/@YfDHalou");
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      vec0.unsafePush((String) null);
      assertEquals(2, vec0.size());
      assertFalse(vec0.isEmpty());
      
      String string2 = vec0.delete(1);
      assertNull(string2);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      
      String string3 = vec0.toString();
      assertEquals(".G<!CZdi&/@YfDHalou", string3);
      assertNotNull(string3);
      assertFalse(vec0.isEmpty());
      assertEquals(1, vec0.size());
      assertTrue(string3.equals((Object)string1));
      
      vec0.growTo((-2053), ".G<!CZdi&/@YfDHalou");
      assertFalse(vec0.isEmpty());
      assertEquals((-2053), vec0.size());
      
      String string4 = "";
      // Undeclared exception!
      try { 
        vec0.insertFirstWithShifting("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2053
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<Vec<String>> vec1 = new Vec<Vec<String>>(6, (Vec<String>) null);
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(6, vec1.size());
      
      // Undeclared exception!
      try { 
        vec1.contains(vec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      // Undeclared exception!
      try { 
        vec0.get(333);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 333
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Vec<ReadOnlyVec<Integer>> vec0 = new Vec<ReadOnlyVec<Integer>>(0);
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      boolean boolean0 = vec0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) vec0;
      objectArray0[1] = (Object) vec0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) vec0;
      objectArray0[4] = (Object) vec0;
      objectArray0[5] = (Object) vec0;
      objectArray0[6] = (Object) vec0;
      objectArray0[7] = (Object) vec0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(8, vec1.size());
      assertEquals(8, objectArray0.length);
      
      vec0.shrink((-371));
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Vec<String> vec2 = new Vec<String>(0);
      assertNotNull(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      
      int int0 = vec2.indexOf("");
      assertEquals((-1), int0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.clear();
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.shrink(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.insertFirst("org.sat4j.core.ReadOnlyVec");
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      boolean boolean0 = vec0.isEmpty();
      assertFalse(boolean0);
      assertEquals(1, vec0.size());
      assertFalse(vec0.isEmpty());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(0, (Vec<Object>) null);
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      Integer integer0 = new Integer(3272);
      assertEquals(3272, (int)integer0);
      assertNotNull(integer0);
      
      Vec<String> vec2 = new Vec<String>();
      assertNotNull(vec2);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertFalse(vec2.equals((Object)vec0));
      
      vec2.set(0, ",");
      assertNotSame(vec2, vec0);
      assertTrue(vec2.isEmpty());
      assertEquals(0, vec2.size());
      assertFalse(vec2.equals((Object)vec0));
      
      // Undeclared exception!
      try { 
        vec0.shrink(647);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      // Undeclared exception!
      try { 
        vec0.moveTo(0, 1865);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1865
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Vec<ReadOnlyVec<Integer>> vec0 = new Vec<ReadOnlyVec<Integer>>(0);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      ReadOnlyVec<Integer> readOnlyVec0 = new ReadOnlyVec<Integer>((IVec<Integer>) null);
      assertNotNull(readOnlyVec0);
      
      vec0.growTo(0, readOnlyVec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Comparator<ReadOnlyVec<Integer>> comparator0 = (Comparator<ReadOnlyVec<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.selectionSort(2552, (-1730), comparator0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = Integer.valueOf(2134);
      assertEquals(2134, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = Integer.valueOf(2134);
      assertEquals(2134, (int)integer2);
      assertNotNull(integer2);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      Integer integer3 = Integer.valueOf(3548);
      assertEquals(3548, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      Integer integer4 = Integer.valueOf(973);
      assertEquals(973, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      
      integerArray0[1] = integer4;
      Vec<Integer> vec1 = new Vec<Integer>(integerArray0);
      assertNotNull(vec1);
      assertEquals(2, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(2, integerArray0.length);
      
      String string0 = "wG]BxD2T)RU36#<4";
      try { 
        Integer.parseInt("wG]BxD2T)RU36#<4");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"wG]BxD2T)RU36#<4\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      int int0 = 0;
      int int1 = 30;
      // Undeclared exception!
      try { 
        vec0.shrink(30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      vec0.shrink(0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>();
      assertNotNull(vec1);
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      vec1.hashCode();
      assertTrue(vec1.isEmpty());
      assertEquals(0, vec1.size());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "a|I:Eeg0>KoR~";
      stringArray0[1] = "LZ";
      stringArray0[2] = "Y`eeXxY`#z'w7:~s";
      Vec<String> vec2 = new Vec<String>(stringArray0);
      assertNotNull(vec2);
      assertFalse(vec2.isEmpty());
      assertEquals(3, vec2.size());
      assertEquals(3, stringArray0.length);
      
      boolean boolean0 = vec2.contains("wOFMHgX");
      assertFalse(boolean0);
      assertFalse(vec2.isEmpty());
      assertEquals(3, vec2.size());
      assertEquals(3, stringArray0.length);
      
      Vec<Object> vec3 = new Vec<Object>();
      assertNotNull(vec3);
      assertTrue(vec3.isEmpty());
      assertEquals(0, vec3.size());
      
      vec3.insertFirst("LZ");
      assertEquals(1, vec3.size());
      assertFalse(vec3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Vec<ReadOnlyVec<Integer>> vec0 = new Vec<ReadOnlyVec<Integer>>(0);
      assertNotNull(vec0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      boolean boolean0 = vec0.isEmpty();
      assertTrue(boolean0);
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) vec0;
      objectArray0[1] = (Object) vec0;
      int int0 = 914;
      Integer integer0 = new Integer(914);
      assertEquals(914, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = 226;
      Integer integer1 = new Integer(226);
      assertEquals(226, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      
      Vec<Integer> vec1 = new Vec<Integer>(921, (Integer) null);
      assertNotNull(vec1);
      assertFalse(vec1.isEmpty());
      assertEquals(921, vec1.size());
      
      Vec<Object> vec2 = new Vec<Object>(objectArray0);
      assertNotNull(vec2);
      assertEquals(8, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(8, objectArray0.length);
      
      vec2.shrinkTo(792);
      assertEquals(792, vec2.size());
      assertFalse(vec2.isEmpty());
      assertEquals(8, objectArray0.length);
      
      // Undeclared exception!
      try { 
        vec2.removeFromLast(objectArray0[0]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 791
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>();
      assertNotNull(vec0);
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) vec0;
      objectArray0[1] = (Object) vec0;
      objectArray0[2] = (Object) vec0;
      objectArray0[3] = (Object) vec0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) vec0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      assertNotNull(vec1);
      assertEquals(6, vec1.size());
      assertFalse(vec1.isEmpty());
      assertEquals(6, objectArray0.length);
      
      Vec<Object> vec2 = new Vec<Object>();
      assertNotNull(vec2);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertFalse(vec2.equals((Object)vec1));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec2.selectionSort(1, 0, comparator0);
      assertNotSame(vec2, vec1);
      assertEquals(0, vec2.size());
      assertTrue(vec2.isEmpty());
      assertFalse(vec2.equals((Object)vec1));
      
      // Undeclared exception!
      try { 
        vec2.delete(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Vec<ReadOnlyVec<Object>> vec0 = new Vec<ReadOnlyVec<Object>>(245);
      Vec<Object> vec1 = new Vec<Object>();
      ReadOnlyVec<Object> readOnlyVec0 = new ReadOnlyVec<Object>(vec1);
      vec0.insertFirstWithShifting(readOnlyVec0);
      vec0.clone();
      vec0.equals(vec0);
      Integer integer0 = new Integer(245);
      String[] stringArray0 = new String[1];
      Vec<String> vec2 = new Vec<String>(stringArray0);
      // Undeclared exception!
      try { 
        vec2.removeFromLast("< X9");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      int int0 = (-1352);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vec0.selectionSort((-1352), 2, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Vec<ReadOnlyVec<Integer>> vec0 = new Vec<ReadOnlyVec<Integer>>();
      vec0.isEmpty();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Vec<ReadOnlyVec<Integer>> vec0 = new Vec<ReadOnlyVec<Integer>>(0);
      vec0.iterator();
      vec0.isEmpty();
      Object[] objectArray0 = new Object[21];
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      vec1.iterator();
      Integer integer0 = new Integer(0);
      vec1.insertFirst(integer0);
      assertEquals(22, vec1.size());
      
      Vec<ReadOnlyVec<Object>> vec2 = new Vec<ReadOnlyVec<Object>>();
      Vec<Object> vec3 = new Vec<Object>(objectArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      vec3.sortUnique(comparator0);
      assertEquals(1, vec3.size());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Integer integer0 = new Integer(1671);
      Vec<Object> vec0 = new Vec<Object>(1671, integer0);
      vec0.toArray();
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>();
      vec1.unsafePush(vec0);
      vec1.size();
      assertEquals(1, vec1.size());
      
      Vec<Integer> vec2 = new Vec<Integer>();
      vec2.get(1);
      assertEquals(0, vec2.size());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      vec0.moveTo((-1), (-1));
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>(2983);
      Object object0 = new Object();
      Vec<Object> vec1 = new Vec<Object>(2273, vec0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      vec1.sortUnique(comparator0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Vec<String> vec0 = new Vec<String>();
      objectArray0[0] = (Object) vec0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Integer integer0 = new Integer((-4283));
      objectArray0[2] = (Object) "";
      Vec<Object> vec1 = new Vec<Object>();
      Object object1 = new Object();
      objectArray0[3] = object1;
      Vec<String> vec2 = new Vec<String>(0);
      assertTrue(vec2.equals((Object)vec0));
      
      objectArray0[4] = (Object) vec2;
      Integer integer1 = new Integer((-245));
      Object object2 = new Object();
      objectArray0[5] = object2;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ")Hf~D+&qbMS>/KZ'|!";
      stringArray0[3] = "";
      stringArray0[4] = "org.sat4j.core.Vec";
      Vec<String> vec3 = new Vec<String>(stringArray0);
      objectArray0[6] = (Object) vec3;
      Vec<Integer> vec4 = new Vec<Integer>(0);
      Object object3 = new Object();
      Object object4 = new Object();
      objectArray0[7] = object4;
      Vec<Object> vec5 = new Vec<Object>(objectArray0);
      int int0 = vec5.indexOf("");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Vec<Vec<Integer>> vec0 = new Vec<Vec<Integer>>();
      vec0.clone();
      vec0.clone();
      Vec<Vec<Integer>> vec1 = new Vec<Vec<Integer>>();
      vec0.moveTo((IVec<Vec<Integer>>) vec1);
      vec0.shrink(0);
      vec0.contains((Vec<Integer>) null);
      String[] stringArray0 = new String[0];
      Vec<String> vec2 = new Vec<String>(stringArray0);
      vec2.toString();
      vec2.insertFirstWithShifting("org.sat4j.core.Vec");
      Vec<Object> vec3 = new Vec<Object>(0, (Object) null);
      vec3.hashCode();
      Vec<ReadOnlyVec<String>> vec4 = new Vec<ReadOnlyVec<String>>();
      ReadOnlyVec<String> readOnlyVec0 = new ReadOnlyVec<String>(vec2);
      // Undeclared exception!
      try { 
        readOnlyVec0.growTo(281, "");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVec", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Vec<Integer> vec0 = new Vec<Integer>();
      Integer.valueOf(162);
      Integer integer0 = new Integer(162);
      integer0.intValue();
      vec0.insertFirstWithShifting((Integer) 162);
      vec0.hashCode();
      Vec<String> vec1 = new Vec<String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec1.sortUnique(comparator0);
      vec1.insertFirst("S+SLWnN~SY2");
      boolean boolean0 = vec0.equals(vec1);
      assertFalse(vec0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Vec<Comparable<Object>> vec0 = new Vec<Comparable<Object>>(0, comparable0);
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Vec<ReadOnlyVec<Integer>> vec0 = new Vec<ReadOnlyVec<Integer>>(0);
      vec0.isEmpty();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) vec0;
      objectArray0[1] = (Object) vec0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) vec0;
      objectArray0[4] = (Object) vec0;
      objectArray0[5] = (Object) vec0;
      objectArray0[6] = (Object) vec0;
      objectArray0[7] = (Object) vec0;
      Vec<Object> vec1 = new Vec<Object>(objectArray0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      vec1.sortUnique(comparator0);
      assertEquals(1, vec1.size());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      Vec<Vec<Object>> vec1 = new Vec<Vec<Object>>(2410, (Vec<Object>) null);
      // Undeclared exception!
      try { 
        vec1.moveTo((IVec<Vec<Object>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "jUHE;GB$k:{+f_=*6";
      stringArray0[1] = "'x";
      Vec<String> vec0 = new Vec<String>(stringArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vec0.selectionSort(0, (-1272), comparator0);
      vec0.clear();
      vec0.copyTo(stringArray0);
      int int0 = 0;
      Vec<Object> vec1 = new Vec<Object>(0);
      Vec<Vec<Object>> vec2 = new Vec<Vec<Object>>(0, vec1);
      int int1 = (-1263);
      // Undeclared exception!
      try { 
        vec2.delete((-1263));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1263
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Vec<String> vec0 = new Vec<String>();
      vec0.insertFirst("");
      int int0 = vec0.indexOf("");
      assertFalse(vec0.isEmpty());
      assertEquals(0, int0);
  }
}
