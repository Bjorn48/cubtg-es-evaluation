/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 21:02:45 GMT 2019
 */

package module;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTKeyStroke;
import java.util.NoSuchElementException;
import javax.swing.table.DefaultTableModel;
import module.Message;
import module.MessageFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MessageFactory_ESTest extends MessageFactory_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MessageFactory.getInstance();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(0, 0);
      MessageFactory.createMessage("4", (Object) defaultTableModel0);
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      assertEquals(1, messageFactory0.getTotalProduced());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Object[] objectArray0 = new Object[5];
      Message message0 = MessageFactory.createWarningMessage("", objectArray0);
      assertEquals("*", message0.getRecipient());
      assertEquals("WARNING", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Object[] objectArray0 = new Object[9];
      Message message0 = new Message();
      messageFactory0.unrefObject(message0);
      Message message1 = MessageFactory.createWarningMessage("fEw[5k", objectArray0);
      assertEquals("WARNING", message1.getHeader());
      assertEquals("*", message1.getRecipient());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MessageFactory.getInstance();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(0, 0);
      Message message0 = MessageFactory.createMessage("4", (Object) defaultTableModel0);
      assertEquals("*", message0.getRecipient());
      assertEquals("4", message0.getHeader());
      
      Object[] objectArray0 = new Object[3];
      Message message1 = MessageFactory.createWarningMessage("dIiQ|&RLq[f{ThI", objectArray0);
      assertEquals("*", message1.getRecipient());
      assertEquals("WARNING", message1.getHeader());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      MessageFactory.getInstance();
      Message message0 = MessageFactory.createUnloadMessage("");
      assertEquals("*", message0.getRecipient());
      assertEquals("KERNEL", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MessageFactory.getInstance();
      System.setCurrentTimeMillis((-222L));
      Message message0 = MessageFactory.createUnloadMessage("DOPPED");
      assertEquals("*", message0.getRecipient());
      assertEquals("KERNEL", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Message message0 = new Message();
      messageFactory0.unrefObject(message0);
      Message message1 = MessageFactory.createUnloadMessage("Reading string from locale failed: key=");
      assertEquals("KERNEL", message1.getHeader());
      assertEquals("*", message1.getRecipient());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Message message0 = MessageFactory.createMessage("Rw2=u:JJ", "join_allow", (Object) null);
      assertEquals("Rw2=u:JJ", message0.getHeader());
      assertEquals("join_allow", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      Object object0 = new Object();
      Message message0 = MessageFactory.createMessage("%&x.H5m", "K|xjK,jB000yD.PRvJ", object0);
      assertEquals("K|xjK,jB000yD.PRvJ", message0.getRecipient());
      assertEquals("%&x.H5m", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Message message0 = new Message();
      messageFactory0.unrefObject(message0);
      Message message1 = MessageFactory.createMessage("}axGy[f", "", (Object) "}axGy[f");
      assertEquals("", message1.getRecipient());
      assertEquals("}axGy[f", message1.getHeader());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MessageFactory.createConnectionDroppedMessage(302, "|`");
      Message message0 = MessageFactory.createMessage("", (String) null, (Object) "");
      assertFalse(message0.delivered());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Message message0 = MessageFactory.createMessage("module.MessageFactory", (Object) messageFactory0);
      assertEquals("module.MessageFactory", message0.getHeader());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis((-761L));
      Object[] objectArray0 = new Object[2];
      Message message0 = MessageFactory.createWarningMessage((String) null, objectArray0);
      assertEquals("WARNING", message0.getHeader());
      assertEquals("*", message0.getRecipient());
      
      Message message1 = MessageFactory.createMessage((String) null, (Object) "gui.GUIFrame");
      assertEquals("*", message1.getRecipient());
      assertEquals("", message1.getHeader());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Message message0 = new Message();
      messageFactory0.unrefObject(message0);
      Message message1 = MessageFactory.createMessage("", (Object) null);
      assertEquals("", message1.getHeader());
      assertEquals("*", message1.getRecipient());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Message message0 = messageFactory0.createMessage();
      assertEquals("", message0.getHeader());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Message message0 = messageFactory0.createMessage();
      assertEquals("*", message0.getRecipient());
      assertEquals("", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Object object0 = new Object();
      Message message0 = new Message("", object0);
      messageFactory0.unrefObject(message0);
      Message message1 = messageFactory0.createMessage();
      assertEquals("*", message1.getRecipient());
      assertEquals("", message1.getHeader());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      MessageFactory.getInstance();
      Object[] objectArray0 = new Object[5];
      Message message0 = MessageFactory.createErrorMessage("", objectArray0);
      assertEquals("*", message0.getRecipient());
      assertEquals("ERROR", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MessageFactory.getInstance();
      System.setCurrentTimeMillis((-222L));
      Object[] objectArray0 = new Object[4];
      Message message0 = MessageFactory.createErrorMessage("gangup", objectArray0);
      assertEquals("ERROR", message0.getHeader());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MessageFactory.getInstance();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(0, 0);
      Message message0 = MessageFactory.createMessage("4", (Object) defaultTableModel0);
      assertEquals("4", message0.getHeader());
      assertEquals("*", message0.getRecipient());
      
      Object[] objectArray0 = new Object[3];
      Message message1 = MessageFactory.createErrorMessage((String) null, objectArray0);
      assertEquals("*", message1.getRecipient());
      assertEquals("ERROR", message1.getHeader());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Message message0 = MessageFactory.createConnectionDroppedMessage(2, "ID: ");
      assertEquals("*", message0.getRecipient());
      assertEquals("DROPPED", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      System.setCurrentTimeMillis((-222L));
      Message message0 = MessageFactory.createConnectionDroppedMessage(2, "ERROR");
      assertEquals("DROPPED", message0.getHeader());
      assertEquals("*", message0.getRecipient());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Message message0 = new Message();
      messageFactory0.unrefObject(message0);
      Message message1 = MessageFactory.createConnectionDroppedMessage(1865, "");
      assertEquals("*", message1.getRecipient());
      assertEquals("DROPPED", message1.getHeader());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      Object[] objectArray0 = new Object[4];
      messageFactory0.unrefObject((Message) null);
      // Undeclared exception!
      try { 
        MessageFactory.createWarningMessage(" IP: ", objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("util.AbstractFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      messageFactory0.unrefObject((Message) null);
      // Undeclared exception!
      try { 
        MessageFactory.createUnloadMessage("P: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("util.AbstractFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      messageFactory0.unrefObject((Message) null);
      Character character0 = new Character('\"');
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke(character0, 375);
      // Undeclared exception!
      try { 
        MessageFactory.createMessage("xj4JBxUPXR", "'.9$oc", (Object) aWTKeyStroke0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("util.AbstractFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      messageFactory0.unrefObject((Message) null);
      // Undeclared exception!
      try { 
        MessageFactory.createMessage((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("util.AbstractFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      messageFactory0.unrefObject((Message) null);
      // Undeclared exception!
      try { 
        messageFactory0.createMessage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("util.AbstractFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(0, 0);
      // Undeclared exception!
      try { 
        MessageFactory.createMessage("4", (Object) defaultTableModel0);
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        MessageFactory.createUnloadMessage("");
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MessageFactory.createConnectionDroppedMessage(302, "|`");
      Message message0 = MessageFactory.createConnectionDroppedMessage(1865, "");
      assertEquals("*", message0.getRecipient());
      assertEquals("DROPPED", message0.getHeader());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MessageFactory messageFactory0 = MessageFactory.getInstance();
      assertNotNull(messageFactory0);
      
      Message message0 = messageFactory0.createMessage();
      assertEquals("*", message0.getRecipient());
      
      Message message1 = MessageFactory.createUnloadMessage("");
      assertEquals("KERNEL", message1.getHeader());
      assertEquals("*", message1.getRecipient());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      // Undeclared exception!
      try { 
        MessageFactory.createErrorMessage("*", objectArray0);
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
