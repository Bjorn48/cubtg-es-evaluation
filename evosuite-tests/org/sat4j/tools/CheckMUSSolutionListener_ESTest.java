/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:56:03 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.ModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CheckMUSSolutionListener_ESTest extends CheckMUSSolutionListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dimacsOutputSolver0).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      boolean boolean0 = checkMUSSolutionListener0.checkThatItIsAMUS(vecInt0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      // Undeclared exception!
      try { 
        checkMUSSolutionListener0.onSolutionFound((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.CheckMUSSolutionListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      VecInt vecInt0 = new VecInt(3045, 3045);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      // Undeclared exception!
      try { 
        checkMUSSolutionListener0.onSolutionFound((IVecInt) vecInt0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3044, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        checkMUSSolutionListener0.onSolutionFound((IVecInt) vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt(1);
      // Undeclared exception!
      try { 
        checkMUSSolutionListener0.checkThatItIsAMUS(vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.CheckMUSSolutionListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((AbstractMinimalModel) null).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt(1, 1);
      // Undeclared exception!
      try { 
        checkMUSSolutionListener0.checkThatItIsAMUS(vecInt0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      // Undeclared exception!
      try { 
        checkMUSSolutionListener0.addOriginalClause((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.CheckMUSSolutionListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo((-155));
      // Undeclared exception!
      try { 
        checkMUSSolutionListener0.addOriginalClause(vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(536);
      // Undeclared exception!
      try { 
        checkMUSSolutionListener0.addOriginalClause(vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(anyBoolean());
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(iVecInt0).toString();
      doReturn(0, 0).when(iVecInt0).size();
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(modelIterator0).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      checkMUSSolutionListener0.onSolutionFound(iVecInt0);
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(iSolver0).isSatisfiable(anyBoolean());
      doReturn((int[]) null).when(iSolver0).model();
      doReturn((IConstr) null).when(iSolver0).discardCurrentModel();
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn((-6), 0).when(iVecInt0).size();
      modelIterator0.isSatisfiable();
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(modelIterator0, modelIterator0).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt(31);
      checkMUSSolutionListener0.checkThatItIsAMUS(iVecInt0);
      checkMUSSolutionListener0.onSolutionFound((IVecInt) vecInt0);
      assertEquals(1L, modelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(iSolver0).isSatisfiable(anyBoolean());
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iVecInt0).get(anyInt());
      doReturn((-3647), 3962, 16, 0, 9).when(iVecInt0).size();
      modelIterator0.isSatisfiable();
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(modelIterator0, modelIterator0, (ISolver) null).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      // Undeclared exception!
      try { 
        checkMUSSolutionListener0.checkThatItIsAMUS(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iSolver0).isSatisfiable(anyBoolean());
      doReturn((int[]) null).when(iSolver0).model();
      doReturn((IConstr) null).when(iSolver0).discardCurrentModel();
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn((-3647), 27, 27, 0).when(iVecInt0).size();
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(modelIterator0, modelIterator0).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      boolean boolean0 = checkMUSSolutionListener0.checkThatItIsAMUS(iVecInt0);
      assertEquals(1L, modelIterator0.numberOfModelsFoundSoFar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true).when(iSolver0).isSatisfiable(anyBoolean());
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn((-3214), 551, (int)(byte) (-88), 0).when(iVecInt0).size();
      modelIterator0.isSatisfiable();
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(modelIterator0, modelIterator0).when(aSolverFactory0).defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      boolean boolean0 = checkMUSSolutionListener0.checkThatItIsAMUS(iVecInt0);
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      VecInt vecInt0 = new VecInt();
      boolean boolean0 = checkMUSSolutionListener0.checkThatItIsAMUS(vecInt0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      VecInt vecInt0 = new VecInt();
      checkMUSSolutionListener0.addOriginalClause(vecInt0);
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener((ASolverFactory<? extends ISolver>) null);
      checkMUSSolutionListener0.onUnsatTermination();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      checkMUSSolutionListener0.onSolutionFound((int[]) null);
  }
}
