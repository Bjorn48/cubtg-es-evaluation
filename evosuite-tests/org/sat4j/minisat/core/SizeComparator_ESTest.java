/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:27:33 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.MUSLauncher;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.card.MaxWatchCard;
import org.sat4j.minisat.constraints.cnf.LearntWLClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
import org.sat4j.minisat.constraints.cnf.UnitClauses;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.SizeComparator;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.specs.Constr;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SizeComparator_ESTest extends SizeComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      originalBinaryClause0.forwardActivity((-985.714));
      int int0 = sizeComparator0.compare((Constr) originalBinaryClause0, (Constr) originalBinaryClause0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      OriginalBinaryClause originalBinaryClause1 = new OriginalBinaryClause(vecInt0, lits0);
      int int0 = sizeComparator0.compare((Constr) originalBinaryClause0, (Constr) originalBinaryClause1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 2);
      int int0 = sizeComparator0.compare((Constr) originalBinaryClause0, (Constr) maxWatchCard0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams((-976.9398999118456), 2658);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      VecInt vecInt0 = (VecInt)solver0.learnedLiterals;
      UnitClauses unitClauses0 = new UnitClauses(vecInt0);
      // Undeclared exception!
      try { 
        sizeComparator0.compare((Constr) unitClauses0, (Constr) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      // Undeclared exception!
      try { 
        sizeComparator0.compare((Constr) null, (Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.SizeComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(1.0E20);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(2.0, 0);
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(negativeLiteralSelectionStrategy0);
      EMARestarts eMARestarts0 = new EMARestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, eMARestarts0, mUSLauncher0);
      VecInt vecInt0 = (VecInt)solver0.learnedLiterals;
      ILits iLits0 = solver0.getVocabulary();
      LearntWLClause learntWLClause0 = new LearntWLClause(vecInt0, iLits0);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, iLits0);
      int int0 = sizeComparator0.compare((Constr) learntWLClause0, (Constr) originalBinaryClause0);
      assertEquals((-2), int0);
  }
}
