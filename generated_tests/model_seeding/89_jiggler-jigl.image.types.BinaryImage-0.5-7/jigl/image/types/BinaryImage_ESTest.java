/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 15:41:16 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.ImageProducer;
import jigl.image.Image;
import jigl.image.ROI;
import jigl.image.types.BinaryImage;
import jigl.image.types.GrayImage;
import jigl.image.types.MagnitudeImage;
import jigl.image.types.RealGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryImage_ESTest extends BinaryImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(128, 128);
      binaryImage0.toString();
      ROI rOI0 = new ROI();
      rOI0.ux();
      ROI rOI1 = new ROI((-1), 749, 8, 0);
      rOI1.ux();
      rOI1.ux();
      binaryImage0.max();
      BinaryImage binaryImage1 = new BinaryImage(4595, 528);
      // Undeclared exception!
      binaryImage0.difference(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.copy();
      binaryImage0.shift(16, 16);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ROI rOI0 = new ROI();
      byte[] byteArray0 = new byte[0];
      BinaryImage binaryImage0 = new BinaryImage();
      byte[][] byteArray1 = new byte[6][5];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      byteArray1[2] = byteArray0;
      byteArray1[3] = byteArray0;
      byteArray1[4] = byteArray0;
      byteArray1[5] = byteArray0;
      BinaryImage binaryImage1 = new BinaryImage(byteArray1);
      BinaryImage binaryImage2 = binaryImage0.intersection(binaryImage1);
      binaryImage2.toString();
      binaryImage0.getJavaImage();
      BinaryImage binaryImage3 = null;
      try {
        binaryImage3 = new BinaryImage(255, Integer.MIN_VALUE, byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      Byte byte0 = new Byte((byte) (-8));
      Byte.toUnsignedInt((byte)10);
      binaryImage0.getJavaImage();
      binaryImage0.getData();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(128, 128);
      binaryImage0.toString();
      ROI rOI0 = new ROI();
      rOI0.ux();
      Integer integer0 = new Integer(0);
      binaryImage0.max();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      // Undeclared exception!
      try { 
        binaryImage0.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(128, 1);
      binaryImage0.copy();
      Byte.valueOf((byte)1);
      Byte.toUnsignedInt((byte)1);
      binaryImage0.shift((-80), 1);
      ROI rOI0 = new ROI();
      rOI0.ux();
      ROI rOI1 = new ROI(1, (-16777216), 749, 1);
      Byte byte0 = new Byte((byte)0);
      Byte.toUnsignedLong((byte)19);
      BinaryImage binaryImage1 = binaryImage0.shift(1, 749);
      binaryImage1.count();
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((GrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ROI rOI0 = new ROI();
      byte[] byteArray0 = new byte[0];
      BinaryImage binaryImage0 = new BinaryImage();
      byte[][] byteArray1 = new byte[6][5];
      byteArray1[0] = byteArray0;
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[][] byteArray0 = new byte[3][0];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-79);
      byteArray1[2] = (byte)111;
      byte byte0 = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)109;
      byteArray1[5] = (byte)16;
      byteArray1[6] = (byte)0;
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte)0;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte) (-79);
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)111;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte)0;
      byteArray3[7] = (byte)109;
      byteArray0[2] = byteArray3;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1166, 1166);
      int int0 = (-1577);
      int int1 = (-1614);
      binaryImage0.shift(int0, int1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 1;
      BinaryImage binaryImage0 = new BinaryImage(128, 1);
      binaryImage0.copy();
      Byte byte0 = Byte.valueOf((byte)1);
      Byte.toUnsignedInt((byte)1);
      byte byte1 = (byte)0;
      Byte.toUnsignedLong((byte)86);
      Byte.toUnsignedInt((byte)0);
      byte0.byteValue();
      // Undeclared exception!
      try { 
        binaryImage0.set(10, 37, (Byte) (byte)1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[][] byteArray0 = new byte[0][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.count();
      binaryImage0.getJavaImage();
      Byte byte0 = new Byte((byte)100);
      Byte.toUnsignedLong((byte)63);
      Byte.toUnsignedInt((byte)100);
      byte0.byteValue();
      int int0 = 61;
      Byte byte1 = new Byte((byte) (-108));
      byte1.byteValue();
      // Undeclared exception!
      try { 
        binaryImage0.set(4, 61, (Byte) (byte) (-108));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 61
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      Byte byte0 = binaryImage0.max();
      int int0 = 2463;
      BinaryImage binaryImage1 = binaryImage0.shift(2463, 2463);
      binaryImage1.getJavaImage();
      binaryImage1.copy();
      byte byte1 = (byte)68;
      Byte.toUnsignedInt((byte)68);
      binaryImage0.copy();
      binaryImage0.min();
      binaryImage1.min();
      // Undeclared exception!
      try { 
        binaryImage0.set(2463, 2463, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 1166;
      BinaryImage binaryImage0 = new BinaryImage(1166, 1166);
      binaryImage0.toString();
      // Undeclared exception!
      binaryImage0.shift(646, 5);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1165, 1165);
      // Undeclared exception!
      binaryImage0.shift(1499, 1165);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 920;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(920, 920, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(128, 1);
      ROI rOI0 = new ROI();
      binaryImage0.copy(rOI0);
      binaryImage0.Y();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[][] byteArray0 = new byte[0][9];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      Byte byte0 = new Byte((byte) (-8));
      binaryImage0.copy();
      Byte.toUnsignedInt((byte) (-8));
      BinaryImage binaryImage1 = binaryImage0.shift((-2731), (-2731));
      // Undeclared exception!
      try { 
        binaryImage1.set((-2731), (-1833), byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[][] byteArray0 = new byte[0][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.count();
      int int0 = 4039;
      byte byte0 = (byte)100;
      binaryImage0.getJavaImage();
      Byte byte1 = new Byte((byte)100);
      Byte.toUnsignedLong((byte)63);
      Byte byte2 = new Byte((byte) (-112));
      Byte.toUnsignedInt((byte)10);
      // Undeclared exception!
      try { 
        binaryImage0.set((int) (byte)100, 389, byte2, (ROI) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(128, 128);
      binaryImage0.toString();
      ROI rOI0 = new ROI();
      rOI0.ux();
      rOI0.ux();
      binaryImage0.max();
      ROI rOI1 = new ROI(8, 128, 0, 8);
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 128
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((-3371), (-1), byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(128, 1);
      int int0 = 37;
      Byte byte0 = new Byte((byte)1);
      byte[][] byteArray0 = new byte[0][8];
      BinaryImage binaryImage1 = new BinaryImage(byteArray0);
      // Undeclared exception!
      try { 
        binaryImage0.intersection(binaryImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.copy();
      Byte.toUnsignedLong((byte)86);
      Byte.toUnsignedInt((byte) (-112));
      int int0 = 10;
      binaryImage0.getJavaImage();
      // Undeclared exception!
      try { 
        binaryImage0.get((-263), (byte) (-112));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.count();
      BinaryImage binaryImage1 = new BinaryImage();
      binaryImage0.union(binaryImage1);
      binaryImage1.toString();
      ROI rOI0 = new ROI();
      BinaryImage binaryImage2 = new BinaryImage(9, 126);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 2311;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)61;
      byte byte0 = (byte) (-43);
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)111;
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte)1;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(2311, 75, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-8));
      Byte.toUnsignedInt((byte) (-1));
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((byte) (-8), 255);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(128, 1);
      binaryImage0.copy();
      Byte.toUnsignedInt((byte)1);
      Byte.toUnsignedLong((byte)86);
      Byte.toUnsignedInt((byte)0);
      binaryImage0.getJavaImage();
      binaryImage0.getJavaImage();
      // Undeclared exception!
      try { 
        binaryImage0.get(75, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      MagnitudeImage magnitudeImage0 = new MagnitudeImage(0, 795);
      MagnitudeImage magnitudeImage1 = new MagnitudeImage(magnitudeImage0);
      RealGrayImage realGrayImage0 = magnitudeImage1.subtract((-515.2046F));
      BinaryImage binaryImage1 = new BinaryImage(realGrayImage0);
      BinaryImage binaryImage2 = new BinaryImage(795, 795);
      binaryImage0.difference(binaryImage2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(128, 1);
      Byte.toUnsignedLong((byte) (-9));
      Byte byte0 = new Byte((byte) (-9));
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage1.getJavaImage();
      BinaryImage binaryImage2 = null;
      try {
        binaryImage2 = new BinaryImage((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(128, 1);
      Byte.toUnsignedLong((byte) (-9));
      Byte byte0 = new Byte((byte) (-9));
      Byte byte1 = new Byte((byte)32);
      binaryImage0.toString();
      Byte.toUnsignedLong((byte) (-105));
      Byte.toUnsignedInt((byte) (-105));
      BinaryImage binaryImage1 = new BinaryImage();
      binaryImage1.getJavaImage();
      BinaryImage binaryImage2 = binaryImage0.shift((byte)32, 1070);
      binaryImage2.copy();
      binaryImage0.shift((byte) (-9), 128);
      BinaryImage binaryImage3 = binaryImage0.shift(151, 128);
      binaryImage3.union(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte) (-8);
      byteArray0[1] = (byte) (-8);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(641, 641, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.count();
      binaryImage0.getData();
      binaryImage0.getJavaImage();
      BinaryImage binaryImage1 = new BinaryImage();
      BinaryImage binaryImage2 = binaryImage0.union(binaryImage1);
      ROI rOI0 = new ROI();
      binaryImage0.shift(99, 9);
      rOI0.ux();
      binaryImage0.shift(91, 9);
      ROI rOI1 = new ROI((-1), 749, 8, 0);
      rOI1.setROI(2169, (-1362), 2169, 0);
      rOI1.ux();
      rOI1.lx();
      rOI1.ux();
      // Undeclared exception!
      try { 
        binaryImage2.copy(rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 4;
      BinaryImage binaryImage0 = new BinaryImage(4, 4);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      int int1 = 7;
      // Undeclared exception!
      try { 
        binaryImage1.get(4, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[][] byteArray0 = new byte[0][9];
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((byte[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[][] byteArray0 = new byte[0][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.count();
      binaryImage0.getJavaImage();
      Byte byte0 = new Byte((byte)100);
      Byte.toUnsignedLong((byte)82);
      Byte.toUnsignedInt((byte)100);
      byte0.byteValue();
      Byte byte1 = new Byte((byte) (-72));
      Byte byte2 = Byte.valueOf((byte) (-1));
      byte2.byteValue();
      Byte byte3 = new Byte((byte)0);
      byte3.byteValue();
      // Undeclared exception!
      try { 
        binaryImage0.set((-1394), 137, (Byte) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 137
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      MagnitudeImage magnitudeImage0 = new MagnitudeImage(0, 795);
      MagnitudeImage magnitudeImage1 = new MagnitudeImage(magnitudeImage0);
      RealGrayImage realGrayImage0 = magnitudeImage1.subtract((-515.2046F));
      BinaryImage binaryImage1 = new BinaryImage(realGrayImage0);
      try { 
        Byte.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[][] byteArray0 = new byte[0][4];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.count();
      ROI rOI0 = new ROI();
      binaryImage0.count();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(128, 1);
      binaryImage0.copy();
      Byte.toUnsignedInt((byte) (-128));
      binaryImage0.getJavaImage();
      binaryImage0.shift(114, (-1285));
      // Undeclared exception!
      try { 
        binaryImage0.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ROI rOI0 = new ROI();
      byte[] byteArray0 = new byte[0];
      BinaryImage binaryImage0 = new BinaryImage();
      byte[][] byteArray1 = new byte[6][5];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      byteArray1[2] = byteArray0;
      byteArray1[3] = byteArray0;
      byteArray1[4] = byteArray0;
      byteArray1[5] = byteArray0;
      BinaryImage binaryImage1 = new BinaryImage(byteArray1);
      binaryImage0.intersection(binaryImage1);
      BinaryImage binaryImage2 = null;
      try {
        binaryImage2 = new BinaryImage(255, Integer.MIN_VALUE, byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(128, 1);
      Byte.toUnsignedLong((byte) (-9));
      Byte byte0 = new Byte((byte) (-9));
      Byte byte1 = new Byte((byte)32);
      Byte.toUnsignedLong((byte) (-105));
      Byte.toUnsignedInt((byte) (-105));
      BinaryImage binaryImage1 = new BinaryImage();
      binaryImage1.getJavaImage();
      BinaryImage binaryImage2 = binaryImage0.shift((byte)32, 1070);
      binaryImage2.copy();
      BinaryImage binaryImage3 = binaryImage0.compliment();
      binaryImage0.intersection(binaryImage3);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[][] byteArray0 = new byte[6][3];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)16;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-107);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[2];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-109);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[0];
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[0];
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[3];
      byteArray5[0] = (byte) (-109);
      byteArray5[1] = (byte)16;
      byteArray5[2] = (byte) (-109);
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[7];
      byteArray6[0] = (byte) (-107);
      byteArray6[1] = (byte) (-109);
      byteArray6[2] = (byte)16;
      byteArray6[3] = (byte)0;
      byteArray6[4] = (byte) (-109);
      byteArray6[5] = (byte)0;
      byteArray6[6] = (byte)0;
      byteArray0[5] = byteArray6;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(128, 1);
      byte[][] byteArray0 = new byte[1][2];
      binaryImage0.toString();
      BinaryImage binaryImage1 = new BinaryImage((byte)7, 128);
      binaryImage0.shift(1, 128);
      BinaryImage binaryImage2 = new BinaryImage(219, (byte)7);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte)7;
      BinaryImage binaryImage3 = new BinaryImage(1, 1, byteArray1);
      binaryImage3.difference(binaryImage2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(128, 128);
      binaryImage0.toString();
      Byte.toUnsignedLong((byte)100);
      Byte.toUnsignedInt((byte) (-1));
      BinaryImage binaryImage1 = new BinaryImage();
      binaryImage1.getJavaImage();
      binaryImage1.copy();
      BinaryImage binaryImage2 = binaryImage1.shift((-1), 255);
      binaryImage1.shift((-2040), 47);
      // Undeclared exception!
      try { 
        binaryImage0.union(binaryImage2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.count();
      binaryImage0.getData();
      binaryImage0.getJavaImage();
      BinaryImage binaryImage1 = new BinaryImage();
      binaryImage0.union(binaryImage1);
      ROI rOI0 = new ROI();
      binaryImage0.shift(99, 9);
      Integer integer0 = new Integer(9);
      binaryImage0.shift(91, 9);
      BinaryImage binaryImage2 = null;
      try {
        binaryImage2 = new BinaryImage((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.intersection((BinaryImage) null);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(128, 1);
      binaryImage0.copy();
      byte byte0 = (byte)1;
      binaryImage0.shift(49, (-231));
      Byte.toUnsignedInt((byte)1);
      Byte.toUnsignedLong((byte)86);
      Byte.toUnsignedInt((byte)0);
      binaryImage0.getJavaImage();
      binaryImage0.getJavaImage();
      // Undeclared exception!
      try { 
        binaryImage0.get(75, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.min();
      binaryImage0.shift((-1585), (-1614));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ROI rOI0 = new ROI();
      byte[][] byteArray0 = new byte[6][5];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.max();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.copy();
      binaryImage0.toString();
      binaryImage0.Y();
      BinaryImage binaryImage1 = binaryImage0.shift((-1293), 0);
      binaryImage1.copy();
      binaryImage1.shift((-1293), 1011);
      binaryImage0.copy();
      // Undeclared exception!
      try { 
        binaryImage0.get(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)80;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(16, 3089, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(128, 128);
      binaryImage0.toString();
      ROI rOI0 = new ROI();
      rOI0.ux();
      ROI rOI1 = new ROI((-1), 749, 8, 0);
      rOI1.ux();
      rOI1.ux();
      binaryImage0.max();
      BinaryImage binaryImage1 = new BinaryImage(4595, 528);
      binaryImage0.copy(rOI0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][2];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      BinaryImage binaryImage1 = binaryImage0.shift((-2243), (byte) (-58));
      binaryImage1.toString();
      binaryImage1.compliment();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(128, 128);
      binaryImage0.toString();
      ROI rOI0 = new ROI();
      rOI0.ux();
      rOI0.ux();
      Byte byte0 = binaryImage0.max();
      BinaryImage binaryImage1 = new BinaryImage(11, 11);
      // Undeclared exception!
      try { 
        binaryImage1.set(11, (-5670), byte0, rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.X();
      int int0 = 2169;
      // Undeclared exception!
      try { 
        binaryImage0.get(0, 2169);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1166, 1166);
      // Undeclared exception!
      binaryImage0.shift((-1577), 1499);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 0);
      binaryImage0.toString();
      binaryImage0.copy();
      binaryImage0.max();
      binaryImage0.difference(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 128;
      BinaryImage binaryImage0 = new BinaryImage(128, 128);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(128, binaryImage0.X());
      assertEquals(128, binaryImage0.Y());
      
      String string0 = binaryImage0.toString();
      assertNotNull(string0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(128, binaryImage0.X());
      assertEquals(128, binaryImage0.Y());
      
      Byte byte0 = binaryImage0.max();
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(128, binaryImage0.X());
      assertEquals(128, binaryImage0.Y());
      assertEquals((byte)1, (byte)byte0);
      
      // Undeclared exception!
      binaryImage0.count();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(128, 1);
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(128, binaryImage0.X());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(128, binaryImage0.X());
      assertEquals(128, image0.X());
      assertEquals(1, image0.Y());
      assertNotSame(binaryImage0, image0);
      
      int int0 = Byte.toUnsignedInt((byte)1);
      assertEquals(1, int0);
      
      long long0 = Byte.toUnsignedLong((byte)86);
      assertEquals(86L, long0);
      
      int int1 = Byte.toUnsignedInt((byte)0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertFalse(binaryImage0.equals((Object)image0));
      assertNotNull(imageProducer0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(128, binaryImage0.X());
      assertNotSame(binaryImage0, image0);
      
      Byte byte0 = binaryImage0.max();
      assertFalse(binaryImage0.equals((Object)image0));
      assertNotNull(byte0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(128, binaryImage0.X());
      assertNotSame(binaryImage0, image0);
      assertEquals((byte)1, (byte)byte0);
      
      BinaryImage binaryImage1 = new BinaryImage(1, (byte)1);
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotNull(binaryImage1);
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      BinaryImage binaryImage2 = binaryImage1.difference(binaryImage0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertNotNull(binaryImage2);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(128, binaryImage0.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage2.X());
      assertEquals(1, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.count());
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, image0);
      assertNotSame(binaryImage2, binaryImage0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, image0.Y());
      assertEquals(0, image0.X());
      assertNotSame(binaryImage0, image0);
      
      Image image1 = binaryImage0.copy();
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(image1.equals((Object)image0));
      assertNotNull(image1);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, image1.Y());
      assertEquals(0, image1.X());
      assertNotSame(binaryImage0, image1);
      assertNotSame(binaryImage0, image0);
      assertNotSame(image1, image0);
      
      Byte byte0 = new Byte((byte)5);
      assertNotNull(byte0);
      assertEquals((byte)5, (byte)byte0);
      
      int int0 = Byte.compare((byte)5, (byte)5);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        binaryImage0.clear(byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      String string0 = binaryImage0.toString();
      assertNotNull(string0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      String string1 = binaryImage0.toString();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      // Undeclared exception!
      try { 
        binaryImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[][] byteArray0 = new byte[2][6];
      byte[] byteArray1 = new byte[1];
      byte byte0 = (byte)51;
      byteArray1[0] = (byte)51;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)51;
      byteArray2[1] = (byte)51;
      byteArray2[2] = (byte)51;
      byteArray2[3] = (byte)51;
      byteArray2[4] = (byte)51;
      byteArray2[5] = (byte)51;
      byteArray0[1] = byteArray2;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, image0.X());
      assertEquals(0, image0.Y());
      assertNotSame(binaryImage0, image0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      Byte byte0 = binaryImage0.max();
      assertFalse(binaryImage0.equals((Object)image0));
      assertNotNull(byte0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertNotSame(binaryImage0, image0);
      assertEquals((byte)1, (byte)byte0);
      
      BinaryImage binaryImage1 = binaryImage0.shift(255, 255);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertNotNull(binaryImage1);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage1, binaryImage0);
      
      BinaryImage binaryImage2 = new BinaryImage(binaryImage1);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertNotNull(binaryImage2);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.X());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][2];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      BinaryImage binaryImage1 = binaryImage0.shift(1, (byte) (-58));
      assertNotNull(binaryImage1);
      assertEquals(1, byteArray0.length);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      
      String string0 = binaryImage1.toString();
      assertNotNull(string0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(1, binaryImage1.Y());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      
      BinaryImage binaryImage2 = binaryImage1.compliment();
      assertNotNull(binaryImage2);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(2, binaryImage0.count());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.count());
      assertEquals(2, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(1, binaryImage2.Y());
      assertEquals(2, binaryImage2.count());
      assertEquals(2, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      
      BinaryImage binaryImage3 = binaryImage1.intersection(binaryImage0);
      assertNotNull(binaryImage3);
      assertEquals(1, byteArray0.length);
      assertEquals(1, binaryImage0.Y());
      assertEquals(2, binaryImage0.count());
      assertEquals(2, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(2, binaryImage1.count());
      assertEquals(2, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(1, binaryImage1.Y());
      assertEquals(2, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(2, binaryImage3.X());
      assertEquals(1, binaryImage3.Y());
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage3);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage1);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(128, 128);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(128, binaryImage0.X());
      assertEquals(128, binaryImage0.Y());
      
      String string0 = binaryImage0.toString();
      assertNotNull(string0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(128, binaryImage0.X());
      assertEquals(128, binaryImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int0);
      
      ROI rOI1 = new ROI((-1), 749, 8, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(750, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(8, rOI1.lx());
      assertEquals((-1), rOI1.ux());
      assertEquals(10, rOI1.X());
      assertEquals(749, rOI1.ly());
      
      int int1 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertEquals(750, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(8, rOI1.lx());
      assertEquals((-1), rOI1.ux());
      assertEquals(10, rOI1.X());
      assertEquals(749, rOI1.ly());
      assertNotSame(rOI1, rOI0);
      assertEquals((-1), int1);
      
      int int2 = rOI1.ux();
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(750, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(8, rOI1.lx());
      assertEquals((-1), rOI1.ux());
      assertEquals(10, rOI1.X());
      assertEquals(749, rOI1.ly());
      assertNotSame(rOI1, rOI0);
      assertEquals((-1), int2);
      
      Byte byte0 = binaryImage0.max();
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(128, binaryImage0.X());
      assertEquals(128, binaryImage0.Y());
      assertEquals((byte)1, (byte)byte0);
      
      BinaryImage binaryImage1 = new BinaryImage(4595, 528);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotNull(binaryImage1);
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4595, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(528, binaryImage1.Y());
      
      String string1 = binaryImage1.toString();
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(4595, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(528, binaryImage1.Y());
      assertNotSame(binaryImage1, binaryImage0);
      
      Image image0 = binaryImage0.copy(rOI0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotNull(image0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(128, binaryImage0.X());
      assertEquals(128, binaryImage0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, image0.Y());
      assertEquals(1, image0.X());
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(rOI0, rOI1);
      
      Byte byte1 = binaryImage0.get(11, 60);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(128, binaryImage0.X());
      assertEquals(128, binaryImage0.Y());
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertEquals((byte)0, (byte)byte1);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)70;
      byteArray0[0] = (byte)70;
      byte byte1 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)60;
      byte byte2 = (byte)121;
      byteArray0[3] = (byte)121;
      byte byte3 = (byte)0;
      byteArray0[4] = (byte)0;
      byte byte4 = (byte) (-116);
      byteArray0[5] = (byte) (-116);
      byteArray0[6] = (byte)1;
      byte byte5 = (byte)62;
      byteArray0[7] = (byte)62;
      byteArray0[8] = (byte)14;
      BinaryImage binaryImage0 = new BinaryImage(0, 0, byteArray0);
      assertArrayEquals(new byte[] {(byte)70, (byte)0, (byte)60, (byte)121, (byte)0, (byte) (-116), (byte)1, (byte)62, (byte)14}, byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      rOI0.setROI((byte)0, (byte)0, (byte)62, (-32768));
      assertEquals((-32768), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(63, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(32769, rOI0.Y());
      assertEquals(62, rOI0.lx());
      
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -32768
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(128, 1);
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(128, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(128, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(128, image0.X());
      assertEquals(1, image0.Y());
      assertNotSame(binaryImage0, image0);
      
      int int0 = Byte.toUnsignedInt((byte)1);
      assertEquals(1, int0);
      
      long long0 = Byte.toUnsignedLong((byte)86);
      assertEquals(86L, long0);
      
      int int1 = Byte.toUnsignedInt((byte)29);
      assertFalse(int1 == int0);
      assertEquals(29, int1);
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertFalse(binaryImage0.equals((Object)image0));
      assertNotNull(imageProducer0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(128, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotSame(binaryImage0, image0);
      
      ImageProducer imageProducer1 = binaryImage0.getJavaImage();
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(imageProducer1.equals((Object)imageProducer0));
      assertNotNull(imageProducer1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.Y());
      assertEquals(128, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotSame(binaryImage0, image0);
      assertNotSame(imageProducer1, imageProducer0);
      
      // Undeclared exception!
      try { 
        binaryImage0.get(75, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = 104;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-8);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-8);
      BinaryImage binaryImage0 = new BinaryImage(0, 104, byteArray0);
      assertArrayEquals(new byte[] {(byte) (-8), (byte)0, (byte) (-8), (byte) (-8), (byte) (-8), (byte)0, (byte) (-8)}, byteArray0);
      assertNotNull(binaryImage0);
      assertEquals(7, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(104, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      
      int int1 = rOI0.ux();
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotSame(rOI0, rOI1);
      assertEquals(0, int1);
      
      ROI rOI2 = new ROI((byte) (-8), (byte)0, (byte)121, 94);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertNotNull(rOI2);
      assertEquals(0, rOI2.uy());
      assertEquals(130, rOI2.X());
      assertEquals((-8), rOI2.ux());
      assertEquals(94, rOI2.ly());
      assertEquals(121, rOI2.lx());
      assertEquals(95, rOI2.Y());
      
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
}
