/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 08:02:19 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.encoding.Binomial;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Minimal4InclusionModel_ESTest extends Minimal4InclusionModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[0];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(modelIteratorToSATAdapter0).model();
      doReturn((IConstr) null).when(modelIteratorToSATAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(modelIteratorToSATAdapter0).modelWithInternalVariables();
      doReturn(8, 8, 0).when(modelIteratorToSATAdapter0).nVars();
      Binomial binomial0 = new Binomial();
      ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0, binomial0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(clausalCardinalitiesDecorator0);
      int[] intArray1 = minimal4InclusionModel0.modelWithInternalVariables();
      assertArrayEquals(new int[] {}, intArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[1];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(modelIteratorToSATAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(intArray0).when(modelIteratorToSATAdapter0).modelWithInternalVariables();
      doReturn(19, 19, 0).when(modelIteratorToSATAdapter0).nVars();
      GroupClauseSelectorSolver<ModelIteratorToSATAdapter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter1 = new ModelIteratorToSATAdapter(groupClauseSelectorSolver0, (SolutionFoundListener) null);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(modelIteratorToSATAdapter1);
      int[] intArray1 = minimal4InclusionModel0.model();
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      Binomial binomial0 = new Binomial();
      ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0, binomial0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(clausalCardinalitiesDecorator0, vecInt0);
      boolean boolean0 = minimal4InclusionModel0.isSatisfiable((IVecInt) vecInt0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[3];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, true, true).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(modelIteratorToSATAdapter0).model();
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(modelIteratorToSATAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(modelIteratorToSATAdapter0).modelWithInternalVariables();
      doReturn(2185, (-798)).when(modelIteratorToSATAdapter0).nVars();
      Binomial binomial0 = new Binomial();
      ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0, binomial0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(clausalCardinalitiesDecorator0);
      minimal4InclusionModel0.model();
      // Undeclared exception!
      minimal4InclusionModel0.modelWithInternalVariables();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      PureOrder pureOrder0 = new PureOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics0, mixedDataStructureDanielWL0, pureOrder0, fixedPeriodRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(modelIteratorToSATAdapter0).model();
      doReturn((int[]) null).when(modelIteratorToSATAdapter0).modelWithInternalVariables();
      doReturn(0, 0).when(modelIteratorToSATAdapter0).nVars();
      Binomial binomial0 = new Binomial();
      ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0, binomial0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(clausalCardinalitiesDecorator0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.modelWithInternalVariables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[3];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, true, true).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(modelIteratorToSATAdapter0).model();
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(modelIteratorToSATAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(modelIteratorToSATAdapter0).modelWithInternalVariables();
      doReturn(2185, (-798)).when(modelIteratorToSATAdapter0).nVars();
      Binomial binomial0 = new Binomial();
      ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0, binomial0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(clausalCardinalitiesDecorator0);
      minimal4InclusionModel0.modelWithInternalVariables();
      // Undeclared exception!
      minimal4InclusionModel0.model();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      PureOrder pureOrder0 = new PureOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics0, mixedDataStructureDanielWL0, pureOrder0, fixedPeriodRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(modelIteratorToSATAdapter0).modelWithInternalVariables();
      doReturn(19, 19, 0).when(modelIteratorToSATAdapter0).nVars();
      GroupClauseSelectorSolver<ModelIteratorToSATAdapter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(groupClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null, (IVecInt) null, (SolutionFoundListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(modelIteratorToSATAdapter0).nVars();
      GroupClauseSelectorSolver<ModelIteratorToSATAdapter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel(groupClauseSelectorSolver0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(modelIteratorToSATAdapter0).model();
      doReturn((IConstr) null).when(modelIteratorToSATAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(modelIteratorToSATAdapter0).modelWithInternalVariables();
      doReturn(1, 4214, 0).when(modelIteratorToSATAdapter0).nVars();
      Binomial binomial0 = new Binomial();
      ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0, binomial0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(clausalCardinalitiesDecorator0);
      int[] intArray1 = minimal4InclusionModel0.model();
      assertSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(modelIteratorToSATAdapter0).model();
      doReturn((IConstr) null).when(modelIteratorToSATAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(modelIteratorToSATAdapter0).modelWithInternalVariables();
      doReturn(2185, 2185, 0).when(modelIteratorToSATAdapter0).nVars();
      Binomial binomial0 = new Binomial();
      ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0, binomial0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(clausalCardinalitiesDecorator0);
      int[] intArray1 = minimal4InclusionModel0.model();
      assertEquals(3, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(19, 19, 0).when(modelIteratorToSATAdapter0).nVars();
      GroupClauseSelectorSolver<ModelIteratorToSATAdapter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(groupClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        minimal4InclusionModel0.isSatisfiable((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[3];
      UnitClause unitClause0 = new UnitClause(0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, true, false).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(modelIteratorToSATAdapter0).model();
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, unitClause0, (IConstr) null).when(modelIteratorToSATAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(modelIteratorToSATAdapter0).modelWithInternalVariables();
      doReturn(2185, (-798)).when(modelIteratorToSATAdapter0).nVars();
      doReturn(false).when(modelIteratorToSATAdapter0).removeSubsumedConstr(any(org.sat4j.specs.IConstr.class));
      Binomial binomial0 = new Binomial();
      ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0, binomial0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(clausalCardinalitiesDecorator0);
      minimal4InclusionModel0.modelWithInternalVariables();
      int[] intArray1 = minimal4InclusionModel0.model();
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }
}
