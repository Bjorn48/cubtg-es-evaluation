/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:25:55 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.Writer;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.ExitCode;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.card.AtLeast;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.IOrder;
import org.sat4j.minisat.core.LearningStrategy;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.SimplificationType;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.SolverStats;
import org.sat4j.minisat.core.VarActivityListener;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IVec;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.Lbool;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.Minimal4InclusionModel;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Solver_ESTest extends Solver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral((-1567));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(848);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      assertNotNull(minimal4InclusionModel0);
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary1 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary1);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary1, searchParams0, varOrderHeap0, lubyRestarts0, basicLauncher0);
      assertNotNull(solver0);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      assertNotNull(iVecInt0);
      assertNotSame(mixedDataStructureDanielWLConciseBinary1, mixedDataStructureDanielWLConciseBinary0);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      Constr constr0 = mixedDataStructureDanielWL0.createUnregisteredClause(iVecInt0);
      assertNotNull(constr0);
      assertNotSame(mixedDataStructureDanielWLConciseBinary1, mixedDataStructureDanielWLConciseBinary0);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, constr0.size());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertFalse(constr0.simplify());
      assertFalse(constr0.isSatisfied());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertTrue(constr0.learnt());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      fixedPeriodRestarts0.newLearnedClause(constr0, 315);
      assertNotSame(mixedDataStructureDanielWLConciseBinary1, mixedDataStructureDanielWLConciseBinary0);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, constr0.size());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertFalse(constr0.simplify());
      assertFalse(constr0.isSatisfied());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertTrue(constr0.learnt());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory1 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher1 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory1);
      assertNotNull(basicLauncher1);
      assertFalse(basicLauncher1.equals((Object)basicLauncher0));
      assertFalse(basicLauncher1.isSilent());
      assertEquals(0L, basicLauncher1.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher1.getExitCode());
      
      basicLauncher0.log("cleaning ");
      assertNotSame(basicLauncher0, basicLauncher1);
      assertFalse(basicLauncher0.equals((Object)basicLauncher1));
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-1004));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-1004), fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, basicLauncher0);
      assertNotNull(solver1);
      assertFalse(basicLauncher0.equals((Object)basicLauncher1));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-1004), fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      // Undeclared exception!
      try { 
        solver1.primeImplicant((-1004));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(1764);
      assertNotNull(percentLengthLearning0);
      assertEquals(1764, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      SearchParams searchParams0 = new SearchParams((-1582.343887), 1764, (-1582.343887), (-2185));
      assertNotNull(searchParams0);
      assertEquals(1764.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      
      double double0 = searchParams0.getVarDecay();
      assertEquals((-1582.343887), double0, 0.01);
      assertEquals(1764.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      
      SearchParams searchParams1 = new SearchParams(0.0, (-2185));
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-2185), searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(1764);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(1764, lubyRestarts0.getFactor());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, lubyRestarts0, basicLauncher0);
      assertNotNull(solver0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1764.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(1764, lubyRestarts0.getFactor());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      assertNotNull(iVecInt0);
      assertNotSame(searchParams0, searchParams1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1764.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(1764, lubyRestarts0.getFactor());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Constr constr0 = mixedDataStructureDanielWL0.createUnregisteredClause(iVecInt0);
      assertNotNull(constr0);
      assertNotSame(searchParams0, searchParams1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.isSatisfied());
      assertEquals(0, constr0.size());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertFalse(constr0.simplify());
      assertTrue(constr0.learnt());
      assertEquals(1764.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(1764, lubyRestarts0.getFactor());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      lubyRestarts0.newLearnedClause(constr0, 1132);
      assertNotSame(searchParams0, searchParams1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.isSatisfied());
      assertEquals(0, constr0.size());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertFalse(constr0.simplify());
      assertTrue(constr0.learnt());
      assertEquals(1764.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(1764, lubyRestarts0.getFactor());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher1 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>((ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) null);
      assertNotNull(basicLauncher1);
      assertFalse(basicLauncher1.equals((Object)basicLauncher0));
      assertFalse(basicLauncher1.isSilent());
      assertEquals(0L, basicLauncher1.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher1.getExitCode());
      
      basicLauncher1.log("c ");
      assertNotSame(basicLauncher1, basicLauncher0);
      assertFalse(basicLauncher1.equals((Object)basicLauncher0));
      assertFalse(basicLauncher1.isSilent());
      assertEquals(0L, basicLauncher1.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher1.getExitCode());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(1132);
      assertNotNull(fixedLengthLearning0);
      assertEquals(1132, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(1.5);
      assertNotNull(activeLearning0);
      assertEquals(1.5, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams1, varOrderHeap0, lubyRestarts0, basicLauncher0);
      assertNotNull(solver1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(basicLauncher0.equals((Object)basicLauncher1));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1.5, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-2185), searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(1764, lubyRestarts0.getFactor());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      // Undeclared exception!
      try { 
        solver1.primeImplicant(2029);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      Constr constr0 = Constr.TAUTOLOGY;
      assertNotNull(constr0);
      
      int int0 = constr0.size();
      assertEquals(0, int0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      fixedPeriodRestarts0.onRestart();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(30);
      assertNotNull(percentLengthLearning0);
      assertEquals(30, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(30, percentLengthLearning0.getLimit());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      
      Lbool lbool0 = solver0.truthValue((-1));
      assertNotNull(lbool0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(30, percentLengthLearning0.getLimit());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals("U", lbool0.toString());
      
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      
      Map<String, Number> map0 = solver1.getStat();
      assertNotNull(map0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin1);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      levelBasedVarOrderHeap0.assignLiteral(7);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      lubyRestarts0.onRestart();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure1);
      assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
      
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      
      boolean boolean0 = solver1.enqueue(7);
      assertTrue(boolean0);
      assertNotSame(solver1, solver0);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(searchParams0).getConflictBoundIncFactor();
      doReturn(0).when(searchParams0).getInitConflictBound();
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getStarts());
      
      miniSATRestarts0.init(searchParams0, solverStats0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getStarts());
      
      miniSATRestarts0.onRestart();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, pureOrder0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      // Undeclared exception!
      try { 
        solver0.varBumpActivity((-137));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -69
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2472));
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      lubyRestarts0.onRestart();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(32);
      assertNotNull(fixedLengthLearning0);
      assertEquals(32, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, fixedLengthLearning0.getMaxLength());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      
      // Undeclared exception!
      try { 
        solver0.unset((-2472));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2472
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      assertNotNull(iVecInt0);
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(848);
      assertNotNull(fixedLengthLearning0);
      assertEquals(848, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(848, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      int int0 = (-53);
      try { 
        solver0.addClause(iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating trivially inconsistent constraint
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      SearchParams searchParams0 = new SearchParams(0, 1.0E-20, 1.0E-20, 732);
      assertNotNull(searchParams0);
      assertEquals(732, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals(0.0, double0, 0.01);
      assertEquals(732, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      SearchParams searchParams1 = new SearchParams(0.0, 0);
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      
      double double1 = searchParams1.getConflictBoundIncFactor();
      assertEquals(0.0, double1, 0.01);
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      
      int int0 = searchParams1.getInitConflictBound();
      assertEquals(0, int0);
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      
      double double2 = searchParams1.getConflictBoundIncFactor();
      assertEquals(0.0, double2, 0.01);
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      
      int int1 = searchParams1.getInitConflictBound();
      assertEquals(0, int1);
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertTrue(int1 == int0);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      
      int int2 = searchParams1.getInitConflictBound();
      assertEquals(0, int2);
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      
      double double3 = new Integer(732);
      assertEquals(732, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      arminRestarts0.newLearnedClause((Constr) null, 1377);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("\"9g_");
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(fixedLengthLearning0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams1, pureOrder0, arminRestarts0, basicLauncher0);
      assertNotNull(solver0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      SimplificationType simplificationType0 = SimplificationType.SIMPLE_SIMPLIFICATION;
      solver0.setSimplifier(simplificationType0);
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      boolean boolean1 = solver0.isSatisfiable(true);
      assertTrue(boolean1);
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertTrue(boolean1 == boolean0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(5, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      boolean boolean2 = solver0.simplifyDB();
      assertTrue(boolean2);
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      PureOrder pureOrder1 = new PureOrder();
      assertNotNull(pureOrder1);
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertEquals(20, pureOrder1.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder1, arminRestarts0);
      assertNotNull(solver1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(732, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(20, pureOrder1.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(9, solver1.realNumberOfVariables());
      assertEquals(9, solver1.nVars());
      assertEquals(10, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      IConstr iConstr0 = solver1.getIthConstr(0);
      assertNull(iConstr0);
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(pureOrder1, pureOrder0);
      assertNotSame(solver1, solver0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(pureOrder1.equals((Object)pureOrder0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(732, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(20, pureOrder1.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      assertEquals(0, pureOrder1.numberOfInterestingVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(11, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(11, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(12, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      ArminRestarts arminRestarts1 = new ArminRestarts();
      assertNotNull(arminRestarts1);
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      
      boolean boolean3 = arminRestarts1.shouldRestart();
      assertTrue(boolean3);
      assertNotSame(arminRestarts1, arminRestarts0);
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      
      arminRestarts1.onBackjumpToRootLevel();
      assertNotSame(arminRestarts1, arminRestarts0);
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      
      arminRestarts1.newLearnedClause((Constr) null, 0);
      assertNotSame(arminRestarts1, arminRestarts0);
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      
      Solver<CardinalityDataStructure> solver2 = null;
      try {
        solver2 = new Solver<CardinalityDataStructure>((LearningStrategy<CardinalityDataStructure>) null, cardinalityDataStructure0, searchParams1, levelBasedVarOrderHeap0, arminRestarts1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral((-1567));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      int int0 = 848;
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(848);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      assertNotNull(minimal4InclusionModel0);
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary1 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary1);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      
      int int1 = 0;
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary1, searchParams0, varOrderHeap0, lubyRestarts0, basicLauncher0);
      assertNotNull(solver0);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      assertNotNull(iVecInt0);
      assertNotSame(mixedDataStructureDanielWLConciseBinary1, mixedDataStructureDanielWLConciseBinary0);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      Constr constr0 = mixedDataStructureDanielWL0.createUnregisteredClause(iVecInt0);
      assertNotNull(constr0);
      assertNotSame(mixedDataStructureDanielWLConciseBinary1, mixedDataStructureDanielWLConciseBinary0);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(0, constr0.size());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertTrue(constr0.learnt());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertFalse(constr0.isSatisfied());
      assertFalse(constr0.simplify());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      int int2 = constr0.getAssertionLevel(iVecInt0, 2902);
      assertEquals((-1), int2);
      assertNotSame(mixedDataStructureDanielWLConciseBinary1, mixedDataStructureDanielWLConciseBinary0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(0, constr0.size());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertTrue(constr0.learnt());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertFalse(constr0.isSatisfied());
      assertFalse(constr0.simplify());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Constr constr1 = mixedDataStructureDanielHT0.createCardinalityConstraint(iVecInt0, (-1));
      assertNotNull(constr1);
      assertNotSame(mixedDataStructureDanielWLConciseBinary1, mixedDataStructureDanielWLConciseBinary0);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(10, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(constr1.locked());
      assertTrue(constr1.canBeSatisfiedByCountingLiterals());
      assertEquals(0, constr1.size());
      assertEquals((-1), constr1.requiredNumberOfSatisfiedLiterals());
      assertFalse(constr1.canBePropagatedMultipleTimes());
      assertFalse(constr1.simplify());
      assertEquals(0.0, constr1.getActivity(), 0.01);
      assertFalse(constr1.isSatisfied());
      assertFalse(constr1.learnt());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      constr1.assertConstraint(solver0);
      assertNotSame(mixedDataStructureDanielWLConciseBinary1, mixedDataStructureDanielWLConciseBinary0);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(11, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(12, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(11, solver0.realNumberOfVariables());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(constr1.locked());
      assertTrue(constr1.canBeSatisfiedByCountingLiterals());
      assertEquals(0, constr1.size());
      assertEquals((-1), constr1.requiredNumberOfSatisfiedLiterals());
      assertFalse(constr1.canBePropagatedMultipleTimes());
      assertFalse(constr1.simplify());
      assertEquals(0.0, constr1.getActivity(), 0.01);
      assertFalse(constr1.isSatisfied());
      assertFalse(constr1.learnt());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      // Undeclared exception!
      try { 
        constr0.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      levelBasedVarOrderHeap0.assignLiteral(1000);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(1000);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1000, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      fixedPeriodRestarts0.onRestart();
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-33);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte) (-38);
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte)9;
      lubyRestarts0.setFactor(6);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(6, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)92, (byte)4, (byte) (-33), (byte)92, (byte)127, (byte) (-38), (byte)102, (byte)9, (byte)9}, byteArray0);
      assertFalse(boolean0);
      assertEquals(9, byteArray0.length);
      
      lubyRestarts0.onRestart();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(6L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(6, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      // Undeclared exception!
      try { 
        solver0.model((-901));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      fixedLengthLearning0.init();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams((-4088.65536253), (-1));
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap1);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap1, noRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertNotNull(searchParams1);
      assertSame(searchParams0, searchParams1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertSame(searchParams1, searchParams0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams1, levelBasedVarOrderHeap1, noRestarts0);
      assertNotNull(solver1);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver1);
      assertNotNull(iVecInt0);
      assertSame(searchParams0, searchParams1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertSame(searchParams1, searchParams0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertEquals((-2), iVecInt0.last());
      
      IVecInt iVecInt1 = solver1.dimacs2internal(iVecInt0);
      assertNotNull(iVecInt1);
      assertSame(searchParams0, searchParams1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertSame(searchParams1, searchParams0);
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(9, solver0.nVars());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(6, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertEquals((-2), iVecInt0.last());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(2, iVecInt1.size());
      assertEquals(5, iVecInt1.last());
      
      boolean boolean0 = iVecInt1.isEmpty();
      assertFalse(boolean0);
      assertSame(searchParams0, searchParams1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertSame(searchParams1, searchParams0);
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(iVecInt0.equals((Object)iVecInt1));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(11, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(8, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(7, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertEquals((-2), iVecInt0.last());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(2, iVecInt1.size());
      assertEquals(5, iVecInt1.last());
      
      solver1.setVerbose(true);
      assertSame(searchParams0, searchParams1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertSame(searchParams1, searchParams0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(13, solver0.nVars());
      assertEquals(14, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(10, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertTrue(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(9, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(9, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      
      IVecInt iVecInt2 = iVecInt1.push(8);
      assertNotNull(iVecInt2);
      assertSame(searchParams0, searchParams1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertSame(searchParams1, searchParams0);
      assertNotSame(iVecInt0, iVecInt2);
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertSame(iVecInt1, iVecInt2);
      assertSame(iVecInt2, iVecInt1);
      assertNotSame(iVecInt2, iVecInt0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(iVecInt0.equals((Object)iVecInt1));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertFalse(iVecInt2.equals((Object)iVecInt0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(15, solver0.realNumberOfVariables());
      assertEquals(16, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(15, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertTrue(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(11, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(11, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(12, solver1.newVar());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.size());
      assertEquals((-2), iVecInt0.last());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(8, iVecInt1.last());
      assertEquals(3, iVecInt1.size());
      assertFalse(iVecInt2.isEmpty());
      assertEquals(8, iVecInt2.last());
      assertEquals(3, iVecInt2.size());
      
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams1, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver2);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(17, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(17, solver0.nVars());
      assertEquals(18, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      
      Solver solver3 = (Solver)solver2.getSolvingEngine();
      assertNotNull(solver3);
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertSame(searchParams0, searchParams1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertSame(searchParams1, searchParams0);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(19, solver0.realNumberOfVariables());
      assertEquals(20, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(19, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(6, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(5, solver2.realNumberOfVariables());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(5, solver3.newVar());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(4, solver3.nVars());
      assertEquals(4, solver3.realNumberOfVariables());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      
      // Undeclared exception!
      try { 
        iVecInt0.set(0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-1582.343887), (-685.7563), (-1582.343887), (-2185));
      assertNotNull(searchParams0);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals((-1582.343887), double0, 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      
      double double1 = searchParams0.getClaDecay();
      assertEquals((-685.7563), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      arminRestarts0.newLearnedClause((Constr) null, 0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("Issue when reflectively accessing field");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, arminRestarts0, basicLauncher0);
      assertNotNull(solver0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      
      boolean boolean1 = solver0.isSatisfiable(true);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals((-2185L), arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      
      boolean boolean2 = solver0.simplifyDB();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals((-2185L), arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(5, solver0.nVars());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(1.5);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.5, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(848);
      assertNotNull(dimacsStringSolver0);
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      assertNotNull(minimal4InclusionModel0);
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(minimal4InclusionModel0);
      assertNotNull(iVecInt0);
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("y");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      Solver<CardinalityDataStructureYanMax> solver0 = null;
      try {
        solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, (IOrder) null, fixedPeriodRestarts0, mUSLauncher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      
      int[] intArray0 = solver0.findModel();
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, intArray0.length);
      
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      searchParams0.setClaDecay(251.994814);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(251.994814, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0, int0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(251.994814, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double1 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(251.994814, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(251.994814, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(251.994814, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      
      AtLeast atLeast0 = (AtLeast)solver1.addAtMostOnTheFly(intArray0, (-964));
      assertNotNull(atLeast0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(atLeast0.canBePropagatedMultipleTimes());
      assertTrue(atLeast0.locked());
      assertEquals(0, atLeast0.size());
      assertFalse(atLeast0.simplify());
      assertFalse(atLeast0.learnt());
      assertTrue(atLeast0.canBeSatisfiedByCountingLiterals());
      assertFalse(atLeast0.isSatisfied());
      assertEquals(964, atLeast0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, atLeast0.getActivity(), 0.01);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(1764);
      assertNotNull(percentLengthLearning0);
      assertEquals(1764, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      SearchParams searchParams0 = new SearchParams((-1582.343887), (-685.7563), (-1582.343887), (-2185));
      assertNotNull(searchParams0);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      
      double double0 = searchParams0.getVarDecay();
      assertEquals((-1582.343887), double0, 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      
      double double1 = searchParams0.getClaDecay();
      assertEquals((-685.7563), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      arminRestarts0.newLearnedClause((Constr) null, 0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL1, searchParams0, pureOrder0, arminRestarts0);
      assertNotNull(solver0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(1764, percentLengthLearning0.getLimit());
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = new PrintWriter(writer0);
      assertNotNull(printWriter0);
      
      solver0.printStat(printWriter0, "");
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(1764, percentLengthLearning0.getLimit());
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      fixedLengthLearning0.init();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams((-4088.65536253), (-1));
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Caution, you are making solver's internal var id public with uncontrolled consequences with features requiring internal/hidden variables.");
      assertFalse(boolean0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertNotNull(searchParams1);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams1, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver1);
      assertNotNull(iVecInt0);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-2), iVecInt0.last());
      assertEquals(2, iVecInt0.size());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.nVars());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      
      IVecInt iVecInt1 = solver1.dimacs2internal(iVecInt0);
      assertNotNull(iVecInt1);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(5, solver1.nVars());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-2), iVecInt0.last());
      assertEquals(2, iVecInt0.size());
      assertEquals(2, iVecInt1.size());
      assertEquals(5, iVecInt1.last());
      assertFalse(iVecInt1.isEmpty());
      
      boolean boolean1 = iVecInt1.isEmpty();
      assertFalse(boolean1);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertFalse(iVecInt0.equals((Object)iVecInt1));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(11, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(7, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-2), iVecInt0.last());
      assertEquals(2, iVecInt0.size());
      assertEquals(2, iVecInt1.size());
      assertEquals(5, iVecInt1.last());
      assertFalse(iVecInt1.isEmpty());
      
      solver1.setVerbose(true);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(13, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(13, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(14, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(9, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(9, solver1.nVars());
      assertEquals(10, solver1.newVar());
      assertTrue(solver1.isVerbose());
      assertEquals("c ", solver1.getLogPrefix());
      
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-395));
      assertNotNull(fixedLengthLearning1);
      assertEquals((-395), fixedLengthLearning1.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning1, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver2);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-395), fixedLengthLearning1.getMaxLength());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(1, solver2.nVars());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      SimplificationType simplificationType0 = SimplificationType.EXPENSIVE_SIMPLIFICATION;
      solver2.setSimplifier(simplificationType0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-395), fixedLengthLearning1.getMaxLength());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(3, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      solver2.setSimplifier(solver1.EXPENSIVE_SIMPLIFICATION_WLONLY);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(15, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(16, solver0.newVar());
      assertEquals(15, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(11, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(11, solver1.realNumberOfVariables());
      assertEquals(12, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertTrue(solver1.isVerbose());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals((-395), fixedLengthLearning1.getMaxLength());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(5, solver2.nVars());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      Constr constr0 = Constr.TAUTOLOGY;
      assertNotNull(constr0);
      
      int int0 = constr0.size();
      assertEquals(0, int0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(30);
      assertNotNull(percentLengthLearning0);
      assertEquals(30, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(30, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      
      Lbool lbool0 = solver0.truthValue(0);
      assertEquals("U", lbool0.toString());
      assertNotNull(lbool0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(30, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      
      Map<String, Number> map0 = solver1.getStat();
      assertNotNull(map0);
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin1);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, glucose21Restarts0);
      solver2.getPropagationLevel();
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      fixedLengthLearning0.init();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(720.89, (-1));
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(720.89, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(720.89, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertNotNull(searchParams1);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(720.89, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(720.89, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams1, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(720.89, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(720.89, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver1);
      assertNotNull(iVecInt0);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(720.89, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(7, solver0.nVars());
      assertEquals(8, solver0.newVar());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(720.89, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-2), iVecInt0.last());
      assertEquals(2, iVecInt0.size());
      
      IVecInt iVecInt1 = solver1.dimacs2internal(iVecInt0);
      assertNotNull(iVecInt1);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(720.89, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(9, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(720.89, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(5, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(6, solver1.newVar());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-2), iVecInt0.last());
      assertEquals(2, iVecInt0.size());
      assertEquals(2, iVecInt1.size());
      assertEquals(5, iVecInt1.last());
      assertFalse(iVecInt1.isEmpty());
      
      boolean boolean0 = iVecInt1.isEmpty();
      assertFalse(boolean0);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertFalse(iVecInt0.equals((Object)iVecInt1));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(720.89, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(11, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(720.89, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(7, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-2), iVecInt0.last());
      assertEquals(2, iVecInt0.size());
      assertEquals(2, iVecInt1.size());
      assertEquals(5, iVecInt1.last());
      assertFalse(iVecInt1.isEmpty());
      
      solver1.setVerbose(true);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(720.89, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(13, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(13, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(14, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(720.89, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertTrue(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(9, solver1.nVars());
      assertEquals(10, solver1.newVar());
      assertEquals(9, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = (LevelBasedVarOrderHeap)solver0.getOrder();
      assertNotNull(levelBasedVarOrderHeap1);
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertSame(searchParams0, searchParams1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(720.89, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(15, solver0.realNumberOfVariables());
      assertEquals(15, solver0.nVars());
      assertEquals(16, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(1764);
      assertNotNull(percentLengthLearning0);
      assertEquals(1764, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      SearchParams searchParams0 = new SearchParams((-1582.343887), 1764, (-1582.343887), (-2185));
      assertNotNull(searchParams0);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1764.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals((-1582.343887), double0, 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1764.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      
      double double1 = searchParams0.getClaDecay();
      assertEquals(1764.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1764.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1764.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      
      solver0.reset();
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1764.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      
      // Undeclared exception!
      try { 
        solver0.removeSubsumedConstr((IConstr) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Reference to the constraint to remove needed!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(303);
      assertNotNull(fixedLengthLearning0);
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(848);
      assertNotNull(dimacsStringSolver0);
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      assertNotNull(minimal4InclusionModel0);
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(minimal4InclusionModel0);
      assertNotNull(iVecInt0);
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      fixedLengthLearning0.setVarActivityListener((VarActivityListener) null);
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      solver0.clearLearntClauses();
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      Constr constr0 = solver1.propagate();
      assertNull(constr0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(3, solver1.nVars());
      assertEquals(4, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      boolean boolean1 = solver1.isSatisfiable();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      glucose21Restarts0.onRestart();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      IVecInt[] iVecIntArray0 = iVecInt0.subset(1049);
      assertNotNull(iVecIntArray0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecIntArray0.length);
      
      Vec<IVecInt> vec0 = new Vec<IVecInt>(0, iVecInt0);
      assertNotNull(vec0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      solver0.addAllClauses(vec0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(vec0.isEmpty());
      assertEquals(0, vec0.size());
      
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      basicLauncher0.log("Issue when reflectively accessing field");
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0, basicLauncher0);
      assertNotNull(solver1);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      Constr constr0 = Constr.TAUTOLOGY;
      assertNotNull(constr0);
      
      int int0 = constr0.size();
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        solver1.removeSubsumedConstr(constr0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      Constr constr0 = Constr.TAUTOLOGY;
      assertNotNull(constr0);
      
      int int0 = constr0.size();
      assertEquals(0, int0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      glucose21Restarts0.onRestart();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(30);
      assertNotNull(percentLengthLearning0);
      assertEquals(30, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(30, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      // Undeclared exception!
      try { 
        solver0.truthValue(2276);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4552
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(303);
      assertNotNull(fixedLengthLearning0);
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = null;
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      int int0 = (-25);
      fixedPeriodRestarts0.newLearnedClause((Constr) null, (-25));
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("y");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(303);
      assertNotNull(percentLengthLearning0);
      assertEquals(303, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      String string0 = fixedPeriodRestarts0.toString();
      assertNotNull(string0);
      assertEquals("constant restarts strategy every 0 conflicts", string0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL1, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(303, percentLengthLearning0.getLimit());
      
      IVecInt iVecInt0 = solver0.unsatExplanation();
      assertNull(iVecInt0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(303, percentLengthLearning0.getLimit());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(fixedLengthLearning1);
      assertEquals(0, fixedLengthLearning1.getMaxLength());
      
      solver0.setTimeoutOnConflicts((-25));
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals((-25), solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(303, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      // Undeclared exception!
      try { 
        cardinalityDataStructureYanMax0.getWatchesFor(57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      int int0 = 0;
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 3727;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      // Undeclared exception!
      try { 
        solver0.backtrack(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3727
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0, int0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      double double1 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      
      // Undeclared exception!
      try { 
        solver0.forget(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      fixedLengthLearning0.init();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams((-4088.65536253), (-1));
      assertNotNull(searchParams0);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, noRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertNotNull(searchParams1);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams1, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver1);
      assertNotNull(iVecInt0);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals((-2), iVecInt0.last());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      
      IVecInt iVecInt1 = solver1.dimacs2internal(iVecInt0);
      assertNotNull(iVecInt1);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(10, solver0.newVar());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(9, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals((-2), iVecInt0.last());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(2, iVecInt1.size());
      assertEquals(5, iVecInt1.last());
      
      boolean boolean0 = iVecInt1.isEmpty();
      assertFalse(boolean0);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertNotSame(iVecInt0, iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertFalse(iVecInt0.equals((Object)iVecInt1));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(11, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals((-2), iVecInt0.last());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(2, iVecInt1.size());
      assertEquals(5, iVecInt1.last());
      
      solver1.setVerbose(true);
      assertSame(searchParams0, searchParams1);
      assertSame(searchParams1, searchParams0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(13, solver0.nVars());
      assertEquals(14, solver0.newVar());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(10, solver1.newVar());
      assertTrue(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(9, solver1.nVars());
      assertEquals(9, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning1 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning1);
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2472));
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      
      SearchParams searchParams2 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      lubyRestarts0.onRestart();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(fixedLengthLearning1, clausalDataStructureWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver2);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      
      solver2.setNeedToReduceDB(true);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning1 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(clauseOnlyLearning1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver3 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning1, mixedDataStructureDanielWLConciseBinary0, searchParams2, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver3);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(2, solver3.newVar());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(1, solver3.nVars());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.nConstraints());
      assertEquals("c ", solver3.getLogPrefix());
      
      // Undeclared exception!
      try { 
        solver3.toString("A%#U*%:FQ?WR%jc8@");
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      
      int[] intArray0 = solver0.findModel();
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(0, intArray0.length);
      
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0, int0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double1 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("y");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts0, mUSLauncher0);
      assertNotNull(solver1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      solver1.setTimeout(0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      Solver<ClausalDataStructureWL> solver2 = null;
      try {
        solver2 = new Solver<ClausalDataStructureWL>(miniSATLearning0, (ClausalDataStructureWL) null, searchParams1, levelBasedVarOrderHeap0, glucose21Restarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0, int0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      double double1 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2472));
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-2472), lubyRestarts0.getFactor());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      lubyRestarts0.onRestart();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, pureOrder0, lubyRestarts0);
      assertNotNull(solver0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      // Undeclared exception!
      try { 
        solver0.getIthConstr(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      int int0 = 1000;
      levelBasedVarOrderHeap0.assignLiteral(1000);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(1000);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1000, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      fixedPeriodRestarts0.onRestart();
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1000, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      
      // Undeclared exception!
      try { 
        solver0.primeImplicant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nVars());
      
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      assertNotNull(minimal4InclusionModel0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nVars());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(minimal4InclusionModel0);
      assertNotNull(iVecInt0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(848);
      assertNotNull(fixedLengthLearning0);
      assertEquals(848, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(848, fixedLengthLearning0.getMaxLength());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      minimal4InclusionModel0.setTimeout(848);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nVars());
      
      // Undeclared exception!
      try { 
        solver0.toString("ra[^0MRrNc?:czaW2yB");
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(searchParams0).getConflictBoundIncFactor();
      doReturn(0).when(searchParams0).getInitConflictBound();
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      
      miniSATRestarts0.init(searchParams0, solverStats0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      
      miniSATRestarts0.onRestart();
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      pureOrder0.setVarDecay((-841.9916495929));
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, pureOrder0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      
      solver0.setDataStructureFactory(mixedDataStructureDanielHT0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(303);
      assertNotNull(fixedLengthLearning0);
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      Constr constr0 = Constr.TAUTOLOGY;
      assertNotNull(constr0);
      
      int int0 = constr0.size();
      assertEquals(0, int0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      
      basicLauncher0.log("Issue when reflectively accessing field");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, levelBasedVarOrderHeap0, glucose21Restarts0, basicLauncher0);
      assertNotNull(solver0);
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      solver0.learn(constr0);
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, (SearchParams) null, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver1);
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      solver1.reset();
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LearningStrategy<MixedDataStructureSingleWL> learningStrategy0 = (LearningStrategy<MixedDataStructureSingleWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = mock(MixedDataStructureSingleWL.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(mixedDataStructureSingleWL0).getVocabulary();
      SearchParams searchParams0 = new SearchParams((-1582.343887), (-685.7563), (-1582.343887), (-2185));
      assertNotNull(searchParams0);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals((-1582.343887), double0, 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      
      double double1 = searchParams0.getClaDecay();
      assertEquals((-685.7563), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(848);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      assertNotNull(minimal4InclusionModel0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(minimal4InclusionModel0);
      assertNotNull(iVecInt0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("Issue when reflectively accessing field");
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(learningStrategy0, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0, basicLauncher0);
      assertNotNull(solver0);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      solver0.setTimeoutMs(2147483647L);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(1764);
      assertNotNull(percentLengthLearning0);
      assertEquals(1764, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      SearchParams searchParams0 = new SearchParams((-1582.343887), 1764, (-1582.343887), (-2185));
      assertNotNull(searchParams0);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1764.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      
      double double0 = searchParams0.getVarDecay();
      assertEquals((-1582.343887), double0, 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1764.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      
      double double1 = searchParams0.getClaDecay();
      assertEquals(1764.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1764.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      arminRestarts0.newLearnedClause((Constr) null, 0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL1, searchParams0, pureOrder0, arminRestarts0);
      assertNotNull(solver0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(1764, percentLengthLearning0.getLimit());
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1764.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = new PrintWriter(writer0);
      assertNotNull(printWriter0);
      
      pureOrder0.printStat(printWriter0, "");
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      
      solver0.printStat(printWriter0, "");
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(1764, percentLengthLearning0.getLimit());
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1764.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, pureOrder0, arminRestarts0);
      assertNotNull(solver1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      solver1.stop();
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      solver1.cancelUntil(0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      solver0.setLearningStrategy(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      intArray0[2] = (-13);
      Glucose21Restarts glucose21Restarts1 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts1);
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      
      glucose21Restarts1.onRestart();
      assertNotSame(glucose21Restarts1, glucose21Restarts0);
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("Issue when reflectively accessing field");
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("Issue when reflectively accessing field");
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts1, basicLauncher0);
      assertNotNull(solver1);
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      
      solver1.setTimeout(0);
      assertNotSame(glucose21Restarts1, glucose21Restarts0);
      assertFalse(glucose21Restarts1.equals((Object)glucose21Restarts0));
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts1.toString());
      assertEquals(0L, glucose21Restarts1.nextRestartNumberOfConflict());
      
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      Solver<ClausalDataStructureWL> solver2 = null;
      try {
        solver2 = new Solver<ClausalDataStructureWL>(miniSATLearning0, (ClausalDataStructureWL) null, searchParams0, levelBasedVarOrderHeap0, glucose21Restarts1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2472));
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      lubyRestarts0.onRestart();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(32);
      assertNotNull(fixedLengthLearning0);
      assertEquals(32, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KmMs/w2lyxM >e");
      assertFalse(boolean0);
      
      LubyRestarts lubyRestarts1 = new LubyRestarts((-2472));
      assertNotNull(lubyRestarts1);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals((-2472), lubyRestarts1.getFactor());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      lubyRestarts1.onRestart();
      assertNotSame(lubyRestarts1, lubyRestarts0);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals((-2472L), lubyRestarts1.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals((-2472), lubyRestarts1.getFactor());
      assertEquals(1, lubyRestarts1.luby());
      
      lubyRestarts1.onRestart();
      assertNotSame(lubyRestarts1, lubyRestarts0);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals((-4944L), lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals((-2472), lubyRestarts1.getFactor());
      assertEquals(2, lubyRestarts1.luby());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertFalse(lubyRestarts0.equals((Object)lubyRestarts1));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, fixedLengthLearning0.getMaxLength());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      
      // Undeclared exception!
      try { 
        solver0.varBumpActivity(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-1582.343887), (-685.7563), (-1582.343887), (-2185));
      assertNotNull(searchParams0);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals((-1582.343887), double0, 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      
      double double1 = searchParams0.getClaDecay();
      assertEquals((-685.7563), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      arminRestarts0.newLearnedClause((Constr) null, 0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      basicLauncher0.log("c ");
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, arminRestarts0, basicLauncher0);
      assertNotNull(solver0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      // Undeclared exception!
      try { 
        solver0.assume(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(303);
      assertNotNull(fixedLengthLearning0);
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      Constr constr0 = Constr.TAUTOLOGY;
      assertNotNull(constr0);
      
      int int0 = constr0.size();
      assertEquals(0, int0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory1 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher1 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory1);
      assertNotNull(basicLauncher1);
      assertFalse(basicLauncher1.equals((Object)basicLauncher0));
      assertEquals(0L, basicLauncher1.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher1.getExitCode());
      assertFalse(basicLauncher1.isSilent());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("y");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>(303);
      assertNotNull(fixedLengthLearning1);
      assertEquals(303, fixedLengthLearning1.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning1, cardinalityDataStructureYanMax0, (SearchParams) null, levelBasedVarOrderHeap0, glucose21Restarts0, basicLauncher0);
      assertNotNull(solver0);
      assertFalse(basicLauncher0.equals((Object)basicLauncher1));
      assertEquals(303, fixedLengthLearning1.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      // Undeclared exception!
      try { 
        solver0.primeImplicant(1167);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(303);
      assertNotNull(fixedLengthLearning0);
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      fixedPeriodRestarts0.newLearnedClause((Constr) null, (-25));
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("y");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(303);
      assertNotNull(percentLengthLearning0);
      assertEquals(303, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      String string0 = fixedPeriodRestarts0.toString();
      assertNotNull(string0);
      assertEquals("constant restarts strategy every 0 conflicts", string0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL1, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(303, percentLengthLearning0.getLimit());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      
      IVecInt iVecInt0 = solver0.unsatExplanation();
      assertNull(iVecInt0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(303, percentLengthLearning0.getLimit());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(fixedLengthLearning1);
      assertEquals(0, fixedLengthLearning1.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning1, cardinalityDataStructureYanMax0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertEquals(0, fixedLengthLearning1.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      FixedPeriodRestarts fixedPeriodRestarts1 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts1);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      
      boolean boolean1 = fixedPeriodRestarts1.shouldRestart();
      assertTrue(boolean1);
      assertNotSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      
      fixedPeriodRestarts1.onBackjumpToRootLevel();
      assertNotSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(848);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isVerbose());
      
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      assertNotNull(minimal4InclusionModel0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isVerbose());
      
      IVecInt iVecInt1 = AbstractMinimalModel.positiveLiterals(minimal4InclusionModel0);
      assertNotNull(iVecInt1);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertTrue(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.size());
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts1);
      assertNotNull(solver2);
      assertFalse(fixedPeriodRestarts1.equals((Object)fixedPeriodRestarts0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(1, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2, solver2.newVar());
      
      // Undeclared exception!
      try { 
        solver2.enqueue(848);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 849
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      solver0.setSearchParams((SearchParams) null);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      solver0.reset();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(3205);
      assertNotNull(fixedLengthLearning0);
      assertEquals(3205, fixedLengthLearning0.getMaxLength());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(3205, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      
      // Undeclared exception!
      try { 
        solver1.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(0);
      assertNotNull(iVecIntArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, iVecIntArray0.length);
      
      Vec<IVecInt> vec0 = new Vec<IVecInt>(0, vecInt0);
      assertNotNull(vec0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      solver0.addAllClauses(vec0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(2422);
      assertNotNull(fixedLengthLearning0);
      assertEquals(2422, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(2422, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      
      // Undeclared exception!
      try { 
        solver1.addClause((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0, int0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      double double1 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      arminRestarts0.newLearnedClause((Constr) null, 0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      basicLauncher0.log("Issue when reflectively accessing field");
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, arminRestarts0, basicLauncher0);
      assertNotNull(solver0);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      solver0.cancelUntilTrailLevel(0);
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(1764);
      assertNotNull(percentLengthLearning0);
      assertEquals(1764, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      SearchParams searchParams0 = new SearchParams((-1582.343887), 1764, (-1582.343887), (-2185));
      assertNotNull(searchParams0);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals(1764.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals((-1582.343887), double0, 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals(1764.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double1 = searchParams0.getClaDecay();
      assertEquals(1764.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals(1764.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      arminRestarts0.newLearnedClause((Constr) null, 0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL1, searchParams0, pureOrder0, arminRestarts0);
      assertNotNull(solver0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(1764, percentLengthLearning0.getLimit());
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals(1764.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = new PrintWriter(writer0);
      assertNotNull(printWriter0);
      
      solver0.printStat(printWriter0, "");
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(1764, percentLengthLearning0.getLimit());
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals(1764.0, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>((-586));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-586), fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(1.5, double0, 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2472));
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-2472), lubyRestarts0.getFactor());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      lubyRestarts0.onRestart();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-2472), lubyRestarts0.getFactor());
      
      Solver<CardinalityDataStructureYanMax> solver0 = null;
      try {
        solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, (IOrder) null, lubyRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(303);
      assertNotNull(fixedLengthLearning0);
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      Constr constr0 = Constr.TAUTOLOGY;
      assertNotNull(constr0);
      
      int int0 = constr0.size();
      assertEquals(0, int0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      solver0.reset();
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      // Undeclared exception!
      try { 
        solver0.removeSubsumedConstr(constr0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-1298.80273609668));
      assertNotNull(activeLearning0);
      assertEquals((-1298.80273609668), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(848);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      assertNotNull(minimal4InclusionModel0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(minimal4InclusionModel0);
      assertNotNull(iVecInt0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, pureOrder0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals((-1298.80273609668), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      
      Set<Integer> set0 = solver0.fromLastDecisionLevel(iVecInt0);
      assertFalse(set0.contains(848));
      assertNotNull(set0);
      assertEquals((-1298.80273609668), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, pureOrder0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals((-1298.80273609668), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(6, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      // Undeclared exception!
      try { 
        solver1.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(303);
      assertNotNull(fixedLengthLearning0);
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      Constr constr0 = Constr.TAUTOLOGY;
      assertNotNull(constr0);
      
      int int0 = constr0.size();
      assertEquals(0, int0);
      
      fixedLengthLearning0.init();
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      solver0.reset();
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      // Undeclared exception!
      try { 
        solver0.enqueue(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0, int0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      double double1 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      arminRestarts0.newLearnedClause((Constr) null, 0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("y");
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL1, searchParams0, pureOrder0, arminRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      IVecInt iVecInt0 = solver0.unsatExplanation();
      assertNull(iVecInt0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(fixedLengthLearning0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, arminRestarts0);
      assertNotNull(solver1);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      solver1.setExpectedNumberOfClauses(0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(searchParams0).getConflictBoundIncFactor();
      doReturn(0).when(searchParams0).getInitConflictBound();
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getPropagations());
      
      miniSATRestarts0.init(searchParams0, solverStats0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getPropagations());
      
      miniSATRestarts0.onRestart();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<CardinalityDataStructure> solver0 = null;
      try {
        solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, (CardinalityDataStructure) null, (IOrder) null, miniSATRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(952);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isVerbose());
      
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      assertNotNull(minimal4InclusionModel0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isVerbose());
      
      boolean boolean0 = minimal4InclusionModel0.isVerbose();
      assertFalse(boolean0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isVerbose());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(minimal4InclusionModel0);
      assertNotNull(iVecInt0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      fixedPeriodRestarts0.onRestart();
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      
      FixedPeriodRestarts fixedPeriodRestarts1 = (FixedPeriodRestarts)solver0.getRestartStrategy();
      assertNotNull(fixedPeriodRestarts1);
      assertSame(fixedPeriodRestarts1, fixedPeriodRestarts0);
      assertSame(fixedPeriodRestarts0, fixedPeriodRestarts1);
      assertTrue(fixedPeriodRestarts1.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts1.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts1.getPeriod());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      SolverStats solverStats0 = mock(SolverStats.class, new ViolatedAssumptionAnswer());
      lubyRestarts0.init(searchParams0, solverStats0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      
      lubyRestarts0.onRestart();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      // Undeclared exception!
      try { 
        solver0.undoOne();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2472));
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-2472), lubyRestarts0.getFactor());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      lubyRestarts0.onRestart();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      // Undeclared exception!
      try { 
        solver0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-1582.343887), (-685.7563), (-1582.343887), (-2185));
      assertNotNull(searchParams0);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals((-1582.343887), double0, 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double1 = searchParams0.getClaDecay();
      assertEquals((-685.7563), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      arminRestarts0.newLearnedClause((Constr) null, 0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("c ");
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, arminRestarts0);
      assertNotNull(solver0);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      
      solver0.registerLiteral(0);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0, int0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      double double1 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      arminRestarts0.newLearnedClause((Constr) null, 1169);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      basicLauncher0.log("1X@s,W=h8JZ$ZA");
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>((-1));
      assertNotNull(percentLengthLearning0);
      assertEquals((-1), percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      ArminRestarts arminRestarts1 = new ArminRestarts();
      assertNotNull(arminRestarts1);
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      
      boolean boolean1 = arminRestarts1.shouldRestart();
      assertTrue(boolean1);
      assertNotSame(arminRestarts1, arminRestarts0);
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      
      arminRestarts1.onBackjumpToRootLevel();
      assertNotSame(arminRestarts1, arminRestarts0);
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      
      arminRestarts1.newLearnedClause((Constr) null, 0);
      assertNotSame(arminRestarts1, arminRestarts0);
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, arminRestarts1, basicLauncher0);
      assertNotNull(solver0);
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals((-1), percentLengthLearning0.getLimit());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      boolean boolean2 = solver0.isSatisfiable(true);
      assertTrue(boolean2);
      assertNotSame(arminRestarts1, arminRestarts0);
      assertFalse(arminRestarts1.equals((Object)arminRestarts0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals((-1), percentLengthLearning0.getLimit());
      assertEquals(0L, arminRestarts1.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts1.toString());
      assertTrue(arminRestarts1.shouldRestart());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics1 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics1);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(noLearningButHeuristics1, cardinalityDataStructure0, searchParams0, pureOrder0, arminRestarts0, basicLauncher0);
      assertNotNull(solver1);
      assertFalse(arminRestarts0.equals((Object)arminRestarts1));
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      
      solver1.setOrder(pureOrder0);
      assertNotSame(arminRestarts0, arminRestarts1);
      assertFalse(arminRestarts0.equals((Object)arminRestarts1));
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      int int0 = 0;
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double1 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int3 = searchParams0.getInitConflictBound();
      assertEquals(0, int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      arminRestarts0.newLearnedClause((Constr) null, 0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("y");
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL1, searchParams0, pureOrder0, arminRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      // Undeclared exception!
      try { 
        solver0.removeSubsumedConstr((IConstr) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Reference to the constraint to remove needed!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      int int0 = 0;
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      int int1 = (-2472);
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2472));
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      lubyRestarts0.onRestart();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(32);
      assertNotNull(fixedLengthLearning0);
      assertEquals(32, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, fixedLengthLearning0.getMaxLength());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      
      solver0.unset(1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, fixedLengthLearning0.getMaxLength());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      
      Constr constr0 = null;
      // Undeclared exception!
      try { 
        solver0.learn((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(303);
      assertNotNull(fixedLengthLearning0);
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      fixedPeriodRestarts0.newLearnedClause((Constr) null, (-25));
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("y");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(303);
      assertNotNull(percentLengthLearning0);
      assertEquals(303, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      String string0 = fixedPeriodRestarts0.toString();
      assertNotNull(string0);
      assertEquals("constant restarts strategy every 0 conflicts", string0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL1, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(303, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      IVecInt iVecInt0 = solver0.unsatExplanation();
      assertNull(iVecInt0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(303, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(fixedLengthLearning1);
      assertEquals(0, fixedLengthLearning1.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning1, cardinalityDataStructureYanMax0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertEquals(0, fixedLengthLearning1.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      solver1.setExpectedNumberOfClauses((-25));
      assertEquals(0, fixedLengthLearning1.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      IConstr iConstr0 = solver1.addConstr((Constr) null);
      assertNull(iConstr0);
      assertEquals(0, fixedLengthLearning1.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.nVars());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(5, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      fixedLengthLearning0.init();
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams((-4088.65536253), (-1));
      assertNotNull(searchParams0);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap1);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap1, noRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertNotNull(searchParams1);
      assertSame(searchParams0, searchParams1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertSame(searchParams1, searchParams0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams1, levelBasedVarOrderHeap1, noRestarts0);
      assertNotNull(solver1);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      
      solver1.setTimeoutMs((-1));
      assertSame(searchParams0, searchParams1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertSame(searchParams1, searchParams0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getTimeout());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver1);
      assertNotNull(iVecInt0);
      assertSame(searchParams0, searchParams1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertSame(searchParams1, searchParams0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(9, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(10, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getTimeout());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(5, solver1.nVars());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(4, iVecInt0.size());
      assertEquals((-4), iVecInt0.last());
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning1 = new FixedLengthLearning<ClausalDataStructureWL>(4);
      assertNotNull(fixedLengthLearning1);
      assertEquals(4, fixedLengthLearning1.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      String string0 = searchParams1.toString();
      assertNotNull(string0);
      assertSame(searchParams0, searchParams1);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertSame(searchParams1, searchParams0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(12, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      
      SearchParams searchParams2 = new SearchParams(3073.275636, (-4088.65536253), (-685.7563), 526);
      assertNotNull(searchParams2);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertEquals(3073.275636, searchParams2.getVarDecay(), 0.01);
      assertEquals(526, searchParams2.getInitConflictBound());
      assertEquals((-685.7563), searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals((-4088.65536253), searchParams2.getClaDecay(), 0.01);
      
      double double0 = searchParams2.getVarDecay();
      assertEquals(3073.275636, double0, 0.01);
      assertNotSame(searchParams2, searchParams0);
      assertNotSame(searchParams2, searchParams1);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertEquals(3073.275636, searchParams2.getVarDecay(), 0.01);
      assertEquals(526, searchParams2.getInitConflictBound());
      assertEquals((-685.7563), searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals((-4088.65536253), searchParams2.getClaDecay(), 0.01);
      
      mUSLauncher0.displayLicense();
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      double double1 = searchParams0.getClaDecay();
      assertEquals(0.999, double1, 0.01);
      assertSame(searchParams0, searchParams1);
      assertNotSame(searchParams0, searchParams2);
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(fixedLengthLearning1, clausalDataStructureWL0, searchParams1, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver2);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(searchParams1.equals((Object)searchParams2));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(13, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(13, solver0.nVars());
      assertEquals(14, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(4, fixedLengthLearning1.getMaxLength());
      assertEquals(1, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      
      ILits iLits1 = solver2.getVocabulary();
      assertNotNull(iLits1);
      assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertSame(searchParams0, searchParams1);
      assertNotSame(searchParams0, searchParams2);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotSame(searchParams1, searchParams2);
      assertSame(searchParams1, searchParams0);
      assertSame(iLits1, iLits0);
      assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertFalse(searchParams1.equals((Object)searchParams2));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(15, solver0.realNumberOfVariables());
      assertEquals(16, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(15, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(4, fixedLengthLearning1.getMaxLength());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(4, solver2.newVar());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, iLits1.realnVars());
      assertEquals(3, iLits1.nVars());
      
      solver0.setDBSimplificationAllowed(false);
      assertSame(searchParams0, searchParams1);
      assertNotSame(searchParams0, searchParams2);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(17, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(18, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(17, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      SolverStats solverStats0 = mock(SolverStats.class, new ViolatedAssumptionAnswer());
      lubyRestarts0.init(searchParams0, solverStats0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      lubyRestarts0.onRestart();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, pureOrder0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      String string0 = solver0.getLogPrefix();
      assertNotNull(string0);
      assertEquals("c ", string0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      
      // Undeclared exception!
      try { 
        solver0.undoOne();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      glucose21Restarts0.onRestart();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      IVecInt[] iVecIntArray0 = iVecInt0.subset(1049);
      assertNotNull(iVecIntArray0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecIntArray0.length);
      
      Vec<IVecInt> vec0 = new Vec<IVecInt>(0, iVecInt0);
      assertNotNull(vec0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      solver0.addAllClauses(vec0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, vec0.size());
      assertTrue(vec0.isEmpty());
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(848);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      assertNotNull(minimal4InclusionModel0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      IVecInt iVecInt1 = AbstractMinimalModel.positiveLiterals(solver0);
      assertNotNull(iVecInt1);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(5, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(6, solver0.newVar());
      assertEquals(4, iVecInt1.size());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(4, iVecInt1.last());
      
      MiniSATLearning<MixedDataStructureDanielWLConciseBinary> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(miniSATLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      
      // Undeclared exception!
      try { 
        solver1.cancel();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(848);
      assertNotNull(fixedLengthLearning0);
      assertEquals(848, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(848, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      solver0.cancelUntilTrailLevel((-53));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(848, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(338);
      assertNotNull(fixedLengthLearning0);
      assertEquals(338, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = null;
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(338, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      solver0.expireTimeout();
      assertEquals(338, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(338, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(5, solver1.nVars());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver2);
      assertFalse(solver2.equals((Object)solver0));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(338, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(8, solver2.newVar());
      assertEquals(7, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(7, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      
      // Undeclared exception!
      try { 
        solver2.unset((-2126));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2126
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = new PrintWriter(writer0);
      assertNotNull(printWriter0);
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(966.4933636);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(966.4933636, activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams((-1582.343887), (-685.7563), (-1582.343887), (-2185));
      assertNotNull(searchParams0);
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      
      double double0 = searchParams0.getVarDecay();
      assertEquals((-1582.343887), double0, 0.01);
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      
      double double1 = searchParams0.getClaDecay();
      assertEquals((-685.7563), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, glucose21Restarts0, (ILogAble) null);
      assertNotNull(solver0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(966.4933636, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      SearchParams searchParams2 = solver0.getSearchParams();
      assertNotNull(searchParams2);
      assertSame(searchParams2, searchParams0);
      assertSame(searchParams0, searchParams2);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals((-685.7563), searchParams2.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams2.getVarDecay(), 0.01);
      assertEquals((-2185), searchParams2.getInitConflictBound());
      assertEquals((-1582.343887), searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(966.4933636, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2472));
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      
      lubyRestarts0.newLearnedClause((Constr) null, (-1));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>((ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) null);
      assertNotNull(basicLauncher0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("y");
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("y");
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, basicLauncher0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      
      boolean boolean0 = solver1.assume(9);
      assertTrue(boolean0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(1, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(1, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver2);
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(5, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      boolean boolean1 = solver2.simplifyDB();
      assertTrue(boolean1);
      assertNotSame(solver2, solver1);
      assertFalse(solver2.equals((Object)solver1));
      assertTrue(boolean1 == boolean0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(8, solver2.newVar());
      assertEquals(7, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(7, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      solver1.setExpectedNumberOfClauses(2);
      assertNotSame(solver1, solver2);
      assertFalse(solver1.equals((Object)solver2));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.currentDecisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.decisionLevel());
      assertEquals(9, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(10, solver1.newVar());
      assertEquals(9, solver1.nVars());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(303);
      assertNotNull(fixedLengthLearning0);
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      glucose21Restarts0.onRestart();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(4);
      assertNotNull(iVecIntArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, iVecIntArray0.length);
      
      Vec<IVecInt> vec0 = new Vec<IVecInt>(447, vecInt0);
      assertNotNull(vec0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(447, vec0.size());
      assertFalse(vec0.isEmpty());
      
      try { 
        solver0.addAllClauses(vec0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2472));
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      
      lubyRestarts0.newLearnedClause((Constr) null, (-1));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>((ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) null);
      assertNotNull(basicLauncher0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("y");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("y");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, basicLauncher0);
      assertNotNull(solver1);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      
      boolean boolean0 = solver1.assume(9);
      assertTrue(boolean0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(4, solver1.newVar());
      assertEquals(1, solver1.getPropagationLevel());
      assertEquals(1, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver2);
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(6, solver2.newVar());
      assertEquals(5, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      boolean boolean1 = solver2.simplifyDB();
      assertTrue(boolean1);
      assertNotSame(solver2, solver1);
      assertFalse(solver2.equals((Object)solver1));
      assertTrue(boolean1 == boolean0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(7, solver2.realNumberOfVariables());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(8, solver2.newVar());
      assertEquals(7, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver3 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver3);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(1, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2, solver3.newVar());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      try { 
        solver3.discardCurrentModel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      levelBasedVarOrderHeap0.assignLiteral(1000);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      fixedPeriodRestarts0.onRestart();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      int int0 = lubyRestarts0.nextLuby();
      assertEquals(1, int0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      
      // Undeclared exception!
      try { 
        solver0.primeImplicant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>((-1298.80273609668));
      assertNotNull(activeLearning0);
      assertEquals((-1298.80273609668), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(848);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      assertNotNull(minimal4InclusionModel0);
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(minimal4InclusionModel0);
      assertNotNull(iVecInt0);
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, pureOrder0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals((-1298.80273609668), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      
      Set<Integer> set0 = solver0.fromLastDecisionLevel(iVecInt0);
      assertFalse(set0.contains(848));
      assertNotNull(set0);
      assertEquals((-1298.80273609668), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0, int0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      double double1 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      Solver<MixedDataStructureDanielHT> solver1 = null;
      try {
        solver1 = new Solver<MixedDataStructureDanielHT>((LearningStrategy<MixedDataStructureDanielHT>) null, mixedDataStructureDanielHT0, searchParams0, pureOrder0, fixedPeriodRestarts0, (ILogAble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      levelBasedVarOrderHeap0.assignLiteral(1000);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      fixedPeriodRestarts0.onRestart();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      // Undeclared exception!
      try { 
        solver0.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(303);
      assertNotNull(fixedLengthLearning0);
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      int[] intArray0 = solver0.findModel();
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0, int0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      double double1 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      arminRestarts0.newLearnedClause((Constr) null, 0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("Issue when reflectively accessing field");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, arminRestarts0, basicLauncher0);
      assertNotNull(solver0);
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.addHook();
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      solver0.cancelUntilTrailLevel(0);
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(searchParams1).getConflictBoundIncFactor();
      doReturn(0).when(searchParams1).getInitConflictBound();
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getInspects());
      
      miniSATRestarts0.init(searchParams1, solverStats0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getInspects());
      
      miniSATRestarts0.onRestart();
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, miniSATRestarts0, basicLauncher0);
      assertNotNull(solver1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      boolean boolean1 = solver1.isDBSimplificationAllowed();
      assertFalse(boolean1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      // Undeclared exception!
      try { 
        solver0.analyzeFinalConflictInTermsOfAssumptions((Constr) null, (IVecInt) null, 65535);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(searchParams0).getConflictBoundIncFactor();
      doReturn(0).when(searchParams0).getInitConflictBound();
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0, solverStats0.getStarts());
      
      miniSATRestarts0.init(searchParams0, solverStats0);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0, solverStats0.getStarts());
      
      miniSATRestarts0.onRestart();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      IConstr iConstr0 = solver0.getIthConstr(0);
      assertNull(iConstr0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      
      ActiveLearning<ClausalDataStructureWL> activeLearning1 = new ActiveLearning<ClausalDataStructureWL>(0);
      assertNotNull(activeLearning1);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.0, activeLearning1.getActivityPercent(), 0.01);
      
      solver1.sortOnActivity();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      
      solver1.setLearner(activeLearning1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(0.0, activeLearning1.getActivityPercent(), 0.01);
      
      DataStructureFactory dataStructureFactory0 = solver1.getDSFactory();
      assertNotNull(dataStructureFactory0);
      assertSame(dataStructureFactory0, clausalDataStructureWL0);
      assertSame(clausalDataStructureWL0, dataStructureFactory0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(7, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams1 = new SearchParams();
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      
      double double0 = searchParams1.getConflictBoundIncFactor();
      assertEquals(1.5, double0, 0.01);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      basicLauncher0.log("Issue when reflectively accessing field");
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams1, levelBasedVarOrderHeap0, miniSATRestarts0, basicLauncher0);
      assertNotNull(solver2);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.nVars());
      
      int int0 = solver2.nConstraints();
      assertEquals(0, int0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(4, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)92;
      byteArray0[7] = (byte)6;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertArrayEquals(new byte[] {(byte)102, (byte)127, (byte)3, (byte)4, (byte) (-33), (byte)9, (byte)92, (byte)6}, byteArray0);
      assertFalse(boolean0);
      assertEquals(8, byteArray0.length);
      
      glucose21Restarts0.onRestart();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      // Undeclared exception!
      try { 
        solver0.model(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral((-1567));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(848);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      assertNotNull(minimal4InclusionModel0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary1 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary1);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      
      SearchParams searchParams0 = new SearchParams(0.0, (-1567));
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1567), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(848);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(848, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary1, searchParams0, varOrderHeap0, lubyRestarts0, basicLauncher0);
      assertNotNull(solver0);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1567), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(848, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      assertNotNull(iVecInt0);
      assertNotSame(mixedDataStructureDanielWLConciseBinary1, mixedDataStructureDanielWLConciseBinary0);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1567), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(848, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      
      Constr constr0 = mixedDataStructureDanielWL0.createUnregisteredClause(iVecInt0);
      assertNotNull(constr0);
      assertNotSame(mixedDataStructureDanielWLConciseBinary1, mixedDataStructureDanielWLConciseBinary0);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertFalse(constr0.simplify());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.isSatisfied());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, constr0.size());
      assertTrue(constr0.learnt());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1567), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(848, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      
      int int0 = constr0.getAssertionLevel(iVecInt0, 2902);
      assertEquals((-1), int0);
      assertNotSame(mixedDataStructureDanielWLConciseBinary1, mixedDataStructureDanielWLConciseBinary0);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(7, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0.0, constr0.getActivity(), 0.01);
      assertFalse(constr0.simplify());
      assertTrue(constr0.canBeSatisfiedByCountingLiterals());
      assertFalse(constr0.isSatisfied());
      assertEquals(1, constr0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, constr0.size());
      assertTrue(constr0.learnt());
      assertFalse(constr0.canBePropagatedMultipleTimes());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1567), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(848, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Constr constr1 = mixedDataStructureDanielHT0.createCardinalityConstraint(iVecInt0, (-1));
      assertNotNull(constr1);
      assertNotSame(mixedDataStructureDanielWLConciseBinary1, mixedDataStructureDanielWLConciseBinary0);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(9, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(constr1.locked());
      assertTrue(constr1.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, constr1.getActivity(), 0.01);
      assertFalse(constr1.canBePropagatedMultipleTimes());
      assertEquals(0, constr1.size());
      assertFalse(constr1.simplify());
      assertEquals((-1), constr1.requiredNumberOfSatisfiedLiterals());
      assertFalse(constr1.learnt());
      assertFalse(constr1.isSatisfied());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1567), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(848, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      
      constr1.assertConstraint(solver0);
      assertNotSame(mixedDataStructureDanielWLConciseBinary1, mixedDataStructureDanielWLConciseBinary0);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(11, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(12, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(constr1.locked());
      assertTrue(constr1.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, constr1.getActivity(), 0.01);
      assertFalse(constr1.canBePropagatedMultipleTimes());
      assertEquals(0, constr1.size());
      assertFalse(constr1.simplify());
      assertEquals((-1), constr1.requiredNumberOfSatisfiedLiterals());
      assertFalse(constr1.learnt());
      assertFalse(constr1.isSatisfied());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1567), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(848, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      
      // Undeclared exception!
      try { 
        constr0.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SearchParams searchParams0 = null;
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      Constr constr0 = Constr.TAUTOLOGY;
      assertNotNull(constr0);
      
      int int0 = constr0.size();
      assertEquals(0, int0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      glucose21Restarts0.onRestart();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(30);
      assertNotNull(percentLengthLearning0);
      assertEquals(30, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(30, percentLengthLearning0.getLimit());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      
      // Undeclared exception!
      try { 
        solver0.truthValue(2276);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4552
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructure>();
      assertNotNull(fixedLengthLearning1);
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(1290);
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1290, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 1290);
      assertNotNull(randomWalkDecorator0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1290.0, randomWalkDecorator0.getProbability(), 0.01);
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning1, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, (RestartStrategy) null, basicLauncher0);
      assertNotNull(solver0);
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1290, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1290.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      
      // Undeclared exception!
      try { 
        solver0.varBumpActivity((-3346));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1673
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0, int0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      double double1 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      Constr constr0 = null;
      arminRestarts0.newLearnedClause((Constr) null, 0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      
      basicLauncher0.log("Issue when reflectively accessing field");
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, arminRestarts0, basicLauncher0);
      assertNotNull(solver0);
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      
      basicLauncher0.addHook();
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      
      solver0.cancelUntilTrailLevel(0);
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      doReturn(0.999).when(searchParams1).getConflictBoundIncFactor();
      doReturn(0).when(searchParams1).getInitConflictBound();
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getPropagations());
      
      miniSATRestarts0.init(searchParams1, solverStats0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getPropagations());
      
      miniSATRestarts0.onRestart();
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, miniSATRestarts0, basicLauncher0);
      assertNotNull(solver1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      
      // Undeclared exception!
      try { 
        solver1.record((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>(500);
      assertNotNull(percentLengthLearning0);
      assertEquals(500, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, pureOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(500, percentLengthLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      IVec<Constr> iVec0 = solver0.getLearnedConstraints();
      assertNotNull(iVec0);
      assertEquals(500, percentLengthLearning0.getLimit());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertTrue(iVec0.isEmpty());
      assertEquals(0, iVec0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2472));
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      lubyRestarts0.onRestart();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(32);
      assertNotNull(fixedLengthLearning0);
      assertEquals(32, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KmMs/w2lyxM >e");
      assertFalse(boolean0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, fixedLengthLearning0.getMaxLength());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      
      solver0.expireTimeout();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, fixedLengthLearning0.getMaxLength());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver1);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals((-2472), lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(5, solver1.nVars());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      
      // Undeclared exception!
      try { 
        solver1.unset(2937);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2937
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      solver0.setLearningStrategy(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      
      intArray0[2] = (-13);
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        solver0.addAtMostOnTheFly(intArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      NoLearningButHeuristics<CardinalityDataStructureYanMin> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0, int0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      double double1 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningButHeuristics0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      SolverStats solverStats0 = mock(SolverStats.class, new ViolatedAssumptionAnswer());
      lubyRestarts0.init(searchParams1, solverStats0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      
      lubyRestarts0.onRestart();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      
      lubyRestarts0.newLearnedClause((Constr) null, 0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("y");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      assertNotNull(solver2);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = (LevelBasedVarOrderHeap)solver2.getOrder();
      assertNotNull(levelBasedVarOrderHeap1);
      assertNotSame(solver2, solver1);
      assertSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(5, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-1582.343887), (-685.7563), (-1582.343887), (-2185));
      assertNotNull(searchParams0);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals((-1582.343887), double0, 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double1 = searchParams0.getClaDecay();
      assertEquals((-685.7563), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      arminRestarts0.newLearnedClause((Constr) null, 0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("c ");
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, arminRestarts0, basicLauncher0);
      assertNotNull(solver0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      
      boolean boolean1 = solver0.isSatisfiable(true);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals((-2185L), arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      
      boolean boolean2 = solver0.simplifyDB();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals((-2185L), arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.nVars());
      
      solver0.setExpectedNumberOfClauses((-3338));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      assertEquals((-2185), searchParams0.getInitConflictBound());
      assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals((-2185L), arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(7, solver0.nVars());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(303);
      assertNotNull(fixedLengthLearning0);
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      fixedPeriodRestarts0.newLearnedClause((Constr) null, (-25));
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("y");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(303);
      assertNotNull(percentLengthLearning0);
      assertEquals(303, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotNull(iLits0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL1, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(303, percentLengthLearning0.getLimit());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      
      IVecInt iVecInt0 = solver0.unsatExplanation();
      assertNull(iVecInt0);
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(303, percentLengthLearning0.getLimit());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(fixedLengthLearning1);
      assertEquals(0, fixedLengthLearning1.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning1, cardinalityDataStructureYanMax0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertEquals(0, fixedLengthLearning1.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      solver1.setExpectedNumberOfClauses((-25));
      assertEquals(0, fixedLengthLearning1.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(338);
      assertNotNull(fixedLengthLearning0);
      assertEquals(338, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      Constr constr0 = Constr.TAUTOLOGY;
      assertNotNull(constr0);
      
      int int0 = constr0.size();
      assertEquals(0, int0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(338, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      solver0.reset();
      assertEquals(338, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      // Undeclared exception!
      try { 
        solver0.removeSubsumedConstr(constr0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      levelBasedVarOrderHeap0.assignLiteral(1000);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(1000);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1000, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams0 = new SearchParams(11);
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(11, searchParams0.getInitConflictBound());
      
      fixedPeriodRestarts0.onRestart();
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1000, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      
      // Undeclared exception!
      try { 
        solver0.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(303);
      assertNotNull(fixedLengthLearning0);
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      
      pureOrder0.assignLiteral(5);
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(873);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(873, lubyRestarts0.getFactor());
      
      lubyRestarts0.onRestart();
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(873, lubyRestarts0.getFactor());
      assertEquals(873L, lubyRestarts0.nextRestartNumberOfConflict());
      
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(873, lubyRestarts0.getFactor());
      assertEquals(873L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin1);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      
      cardinalityDataStructureYanMin1.setUnitPropagationListener(solver0);
      assertNotSame(cardinalityDataStructureYanMin1, cardinalityDataStructureYanMin0);
      assertFalse(cardinalityDataStructureYanMin1.equals((Object)cardinalityDataStructureYanMin0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(873, lubyRestarts0.getFactor());
      assertEquals(873L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin2 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin2);
      assertFalse(cardinalityDataStructureYanMin2.equals((Object)cardinalityDataStructureYanMin1));
      assertFalse(cardinalityDataStructureYanMin2.equals((Object)cardinalityDataStructureYanMin0));
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap1);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap1.assignLiteral(0);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin2, levelBasedVarOrderHeap1, lubyRestarts0);
      assertNotNull(solver1);
      assertFalse(cardinalityDataStructureYanMin2.equals((Object)cardinalityDataStructureYanMin1));
      assertFalse(cardinalityDataStructureYanMin2.equals((Object)cardinalityDataStructureYanMin0));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(873, lubyRestarts0.getFactor());
      assertEquals(873L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      
      boolean boolean0 = solver1.enqueue(32);
      assertTrue(boolean0);
      assertNotSame(cardinalityDataStructureYanMin2, cardinalityDataStructureYanMin1);
      assertNotSame(cardinalityDataStructureYanMin2, cardinalityDataStructureYanMin0);
      assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertFalse(cardinalityDataStructureYanMin2.equals((Object)cardinalityDataStructureYanMin1));
      assertFalse(cardinalityDataStructureYanMin2.equals((Object)cardinalityDataStructureYanMin0));
      assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(303, fixedLengthLearning0.getMaxLength());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(873, lubyRestarts0.getFactor());
      assertEquals(873L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      
      SearchParams searchParams0 = new SearchParams(32);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      
      // Undeclared exception!
      try { 
        solver0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      assertNotNull(searchParams0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0, int0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      double double1 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int1 = searchParams0.getInitConflictBound();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int2 = searchParams0.getInitConflictBound();
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      assertTrue(boolean0);
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      arminRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      Constr constr0 = null;
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      
      basicLauncher0.log("Issue when reflectively accessing field");
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, arminRestarts0, basicLauncher0);
      assertNotNull(solver0);
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      
      basicLauncher0.addHook();
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      
      solver0.cancelUntilTrailLevel(0);
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      SolverStats solverStats0 = new SolverStats();
      assertNotNull(solverStats0);
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getRootSimplifications());
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, miniSATRestarts0, basicLauncher0);
      assertNotNull(solver1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      
      // Undeclared exception!
      try { 
        solver1.record((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      //  // Unstable assertion: assertNotNull(activeLearning0);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-1582.343887), (-685.7563), (-1582.343887), (-2185));
      //  // Unstable assertion: assertNotNull(searchParams0);
      //  // Unstable assertion: assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-2185), searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      //  // Unstable assertion: assertEquals((-1582.343887), double0, 0.01);
      //  // Unstable assertion: assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-2185), searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      
      double double1 = searchParams0.getClaDecay();
      //  // Unstable assertion: assertEquals((-685.7563), double1, 0.01);
      //  // Unstable assertion: assertNotEquals(double1, double0, 0.01);
      //  // Unstable assertion: assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-2185), searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      
      PureOrder pureOrder0 = new PureOrder();
      //  // Unstable assertion: assertNotNull(pureOrder0);
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      //  // Unstable assertion: assertNotNull(arminRestarts0);
      //  // Unstable assertion: assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(arminRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(arminRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      arminRestarts0.onBackjumpToRootLevel();
      //  // Unstable assertion: assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(arminRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      arminRestarts0.newLearnedClause((Constr) null, 0);
      //  // Unstable assertion: assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(arminRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      //  // Unstable assertion: assertNotNull(basicLauncher0);
      //  // Unstable assertion: assertEquals(0L, basicLauncher0.getBeginTime());
      //  // Unstable assertion: assertFalse(basicLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("c ");
      //  // Unstable assertion: assertEquals(0L, basicLauncher0.getBeginTime());
      //  // Unstable assertion: assertFalse(basicLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, arminRestarts0, basicLauncher0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-2185), searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(arminRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      //  // Unstable assertion: assertEquals(0L, basicLauncher0.getBeginTime());
      //  // Unstable assertion: assertFalse(basicLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMin>((-685.7563));
      //  // Unstable assertion: assertNotNull(activeLearning1);
      //  // Unstable assertion: assertEquals((-685.7563), activeLearning1.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals(0, activeLearning1.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning1, cardinalityDataStructureYanMin0, pureOrder0, arminRestarts0);
      //  // Unstable assertion: assertNotNull(solver1);
      //  // Unstable assertion: assertEquals(0, solver1.nConstraints());
      //  // Unstable assertion: assertFalse(solver1.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(2, solver1.newVar());
      //  // Unstable assertion: assertEquals(0, solver1.decisionLevel());
      //  // Unstable assertion: assertFalse(solver1.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(1, solver1.nVars());
      //  // Unstable assertion: assertEquals(2147483, solver1.getTimeout());
      //  // Unstable assertion: assertEquals("c ", solver1.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver1.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver1.getPropagationLevel());
      //  // Unstable assertion: assertEquals(1, solver1.realNumberOfVariables());
      //  // Unstable assertion: assertFalse(solver1.isVerbose());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(arminRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      //  // Unstable assertion: assertEquals((-685.7563), activeLearning1.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals(0, activeLearning1.getLimit());
      
      boolean boolean2 = solver0.isNeedToReduceDB();
      //  // Unstable assertion: assertFalse(boolean2);
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-2185), searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(arminRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      //  // Unstable assertion: assertEquals(0L, basicLauncher0.getBeginTime());
      //  // Unstable assertion: assertFalse(basicLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(4, solver0.newVar());
      //  // Unstable assertion: assertEquals(3, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(3, solver0.nVars());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      //  // Unstable assertion: assertNotNull(activeLearning0);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      //  // Unstable assertion: assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      PureOrder pureOrder0 = new PureOrder();
      //  // Unstable assertion: assertNotNull(pureOrder0);
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, (RestartStrategy) null);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      
      // Undeclared exception!
      try { 
        solver0.findModel();
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      //  // Unstable assertion: assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      //  // Unstable assertion: assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      //  // Unstable assertion: assertNotNull(levelBasedVarOrderHeap0);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      //  // Unstable assertion: assertNotNull(fixedPeriodRestarts0);
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(848);
      //  // Unstable assertion: assertNotNull(dimacsStringSolver0);
      //  // Unstable assertion: assertEquals("", dimacsStringSolver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, dimacsStringSolver0.nVars());
      //  // Unstable assertion: assertEquals(0, dimacsStringSolver0.nConstraints());
      //  // Unstable assertion: assertFalse(dimacsStringSolver0.isVerbose());
      //  // Unstable assertion: assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      //  // Unstable assertion: assertEquals(0, dimacsStringSolver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      //  // Unstable assertion: assertFalse(dimacsStringSolver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, dimacsStringSolver0.newVar());
      //  // Unstable assertion: assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      //  // Unstable assertion: assertNotNull(mixedDataStructureDanielWL0);
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      //  // Unstable assertion: assertNotNull(percentLengthLearning0);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      
      fixedPeriodRestarts0.onRestart();
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      //  // Unstable assertion: assertNotNull(clauseOnlyLearning0);
      //  // Unstable assertion: assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 848;
      // Undeclared exception!
      try { 
        solver0.addAtMostOnTheFly(intArray0, 500);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1696
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      //  // Unstable assertion: assertNotNull(percentLengthLearning0);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder();
      //  // Unstable assertion: assertNotNull(pureOrder0);
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      //  // Unstable assertion: assertNotNull(glucose21Restarts0);
      //  // Unstable assertion: assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      glucose21Restarts0.onRestart();
      //  // Unstable assertion: assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, pureOrder0, glucose21Restarts0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning1 = new PercentLengthLearning<ClausalDataStructureWL>();
      //  // Unstable assertion: assertNotNull(percentLengthLearning1);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning1.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      //  // Unstable assertion: assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      //  // Unstable assertion: assertNotNull(iLits0);
      //  // Unstable assertion: assertEquals(0, iLits0.realnVars());
      //  // Unstable assertion: assertEquals(0, iLits0.nVars());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(percentLengthLearning1, clausalDataStructureWL0, pureOrder0, glucose21Restarts0);
      //  // Unstable assertion: assertNotNull(solver1);
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      //  // Unstable assertion: assertEquals(10, percentLengthLearning1.getLimit());
      //  // Unstable assertion: assertEquals(1, solver1.nVars());
      //  // Unstable assertion: assertEquals("c ", solver1.getLogPrefix());
      //  // Unstable assertion: assertEquals(1, solver1.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(2, solver1.newVar());
      //  // Unstable assertion: assertEquals(0, solver1.nConstraints());
      //  // Unstable assertion: assertFalse(solver1.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver1.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver1.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver1.decisionLevel());
      //  // Unstable assertion: assertFalse(solver1.isVerbose());
      //  // Unstable assertion: assertFalse(solver1.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver1.currentDecisionLevel());
      
      IVecInt iVecInt0 = solver1.unsatExplanation();
      //  // Unstable assertion: assertNull(iVecInt0);
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      //  // Unstable assertion: assertEquals(10, percentLengthLearning1.getLimit());
      //  // Unstable assertion: assertEquals("c ", solver1.getLogPrefix());
      //  // Unstable assertion: assertEquals(3, solver1.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(3, solver1.nVars());
      //  // Unstable assertion: assertEquals(4, solver1.newVar());
      //  // Unstable assertion: assertEquals(0, solver1.nConstraints());
      //  // Unstable assertion: assertFalse(solver1.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver1.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver1.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver1.decisionLevel());
      //  // Unstable assertion: assertFalse(solver1.isVerbose());
      //  // Unstable assertion: assertFalse(solver1.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver1.currentDecisionLevel());
      
      int int0 = 7;
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(7);
      //  // Unstable assertion: assertNotNull(fixedLengthLearning0);
      //  // Unstable assertion: assertEquals(7, fixedLengthLearning0.getMaxLength());
      
      percentLengthLearning0.setSolver(solver0);
      //  // Unstable assertion: assertEquals(10, percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(3, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(3, solver0.nVars());
      //  // Unstable assertion: assertEquals(4, solver0.newVar());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMax1);
      //  // Unstable assertion: assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax2 = new CardinalityDataStructureYanMax();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMax2);
      //  // Unstable assertion: assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax0));
      //  // Unstable assertion: assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax1));
      
      int int1 = 91;
      PureOrder pureOrder1 = new PureOrder(91);
      //  // Unstable assertion: assertNotNull(pureOrder1);
      //  // Unstable assertion: assertFalse(pureOrder1.equals((Object)pureOrder0));
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      //  // Unstable assertion: assertEquals(91, pureOrder1.getPeriod());
      //  // Unstable assertion: assertEquals(0, pureOrder1.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder1, (-527));
      //  // Unstable assertion: assertNotNull(tabuListDecorator0);
      //  // Unstable assertion: assertFalse(pureOrder1.equals((Object)pureOrder0));
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder1.toString());
      //  // Unstable assertion: assertEquals(91, pureOrder1.getPeriod());
      //  // Unstable assertion: assertEquals(0, pureOrder1.numberOfInterestingVariables());
      
      // Undeclared exception!
      try { 
        tabuListDecorator0.updateVar((-527));
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -264
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      //  // Unstable assertion: assertNotNull(noLearningButHeuristics0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      //  // Unstable assertion: assertNotNull(levelBasedVarOrderHeap0);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      //  // Unstable assertion: assertNotNull(fixedPeriodRestarts0);
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      levelBasedVarOrderHeap0.assignLiteral(1000);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      //  // Unstable assertion: assertNotNull(lubyRestarts0);
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals(32, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      fixedPeriodRestarts0.onRestart();
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      //  // Unstable assertion: assertNotNull(clauseOnlyLearning0);
      //  // Unstable assertion: assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, lubyRestarts0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals(32, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      //  // Unstable assertion: assertNotNull(clauseOnlyLearning1);
      //  // Unstable assertion: assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMin0);
      
      cardinalityDataStructureYanMin0.setUnitPropagationListener(solver0);
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals(32, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(4, solver0.newVar());
      //  // Unstable assertion: assertEquals(3, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(3, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning1, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      //  // Unstable assertion: assertNotNull(solver1);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      //  // Unstable assertion: assertFalse(solver1.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver1.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver1.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(2, solver1.newVar());
      //  // Unstable assertion: assertFalse(solver1.isVerbose());
      //  // Unstable assertion: assertEquals(2147483, solver1.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver1.decisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver1.getLogPrefix());
      //  // Unstable assertion: assertFalse(solver1.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(1, solver1.nVars());
      //  // Unstable assertion: assertEquals(1, solver1.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver1.nConstraints());
      
      // Undeclared exception!
      try { 
        solver1.enqueue((-1));
       //  fail("Expecting exception: AssertionError");
       // Unstable assertion
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(303);
      //  // Unstable assertion: assertNotNull(fixedLengthLearning0);
      //  // Unstable assertion: assertEquals(303, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      //  // Unstable assertion: assertNotNull(levelBasedVarOrderHeap0);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      //  // Unstable assertion: assertNotNull(fixedPeriodRestarts0);
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      fixedPeriodRestarts0.newLearnedClause((Constr) null, (-25));
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      //  // Unstable assertion: assertNotNull(mUSLauncher0);
      //  // Unstable assertion: assertFalse(mUSLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(0L, mUSLauncher0.getBeginTime());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("y");
      //  // Unstable assertion: assertFalse(mUSLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(0L, mUSLauncher0.getBeginTime());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(303);
      //  // Unstable assertion: assertNotNull(percentLengthLearning0);
      //  // Unstable assertion: assertEquals(303, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      //  // Unstable assertion: assertNotNull(clausalDataStructureWL0);
      
      String string0 = fixedPeriodRestarts0.toString();
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("constant restarts strategy every 0 conflicts", string0);
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      //  // Unstable assertion: assertNotNull(clausalDataStructureWL1);
      //  // Unstable assertion: assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      //  // Unstable assertion: assertNotNull(iLits0);
      //  // Unstable assertion: assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      //  // Unstable assertion: assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      //  // Unstable assertion: assertEquals(0, iLits0.nVars());
      //  // Unstable assertion: assertEquals(0, iLits0.realnVars());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL1, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0, mUSLauncher0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertFalse(mUSLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(0L, mUSLauncher0.getBeginTime());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      //  // Unstable assertion: assertEquals(303, percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      
      IVecInt iVecInt0 = solver0.unsatExplanation();
      //  // Unstable assertion: assertNull(iVecInt0);
      //  // Unstable assertion: assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      //  // Unstable assertion: assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertFalse(mUSLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(0L, mUSLauncher0.getBeginTime());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      //  // Unstable assertion: assertEquals(303, percentLengthLearning0.getLimit());
      //  // Unstable assertion: assertEquals(4, solver0.newVar());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(3, solver0.nVars());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(3, solver0.realNumberOfVariables());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>(0);
      //  // Unstable assertion: assertNotNull(fixedLengthLearning1);
      //  // Unstable assertion: assertEquals(0, fixedLengthLearning1.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning1, cardinalityDataStructureYanMax0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      //  // Unstable assertion: assertNotNull(solver1);
      //  // Unstable assertion: assertEquals(0, fixedLengthLearning1.getMaxLength());
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0, solver1.getPropagationLevel());
      //  // Unstable assertion: assertEquals(1, solver1.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver1.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver1.currentDecisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver1.getLogPrefix());
      //  // Unstable assertion: assertFalse(solver1.isVerbose());
      //  // Unstable assertion: assertFalse(solver1.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver1.nConstraints());
      //  // Unstable assertion: assertEquals(2147483, solver1.getTimeout());
      //  // Unstable assertion: assertEquals(2, solver1.newVar());
      //  // Unstable assertion: assertFalse(solver1.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(1, solver1.nVars());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      solver1.setExpectedNumberOfClauses((-25));
      //  // Unstable assertion: assertEquals(0, fixedLengthLearning1.getMaxLength());
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(4, solver1.newVar());
      //  // Unstable assertion: assertEquals(0, solver1.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver1.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver1.currentDecisionLevel());
      //  // Unstable assertion: assertEquals("c ", solver1.getLogPrefix());
      //  // Unstable assertion: assertEquals(3, solver1.realNumberOfVariables());
      //  // Unstable assertion: assertFalse(solver1.isVerbose());
      //  // Unstable assertion: assertFalse(solver1.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver1.nConstraints());
      //  // Unstable assertion: assertEquals(2147483, solver1.getTimeout());
      //  // Unstable assertion: assertEquals(3, solver1.nVars());
      //  // Unstable assertion: assertFalse(solver1.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      //  // Unstable assertion: assertNotNull(miniSATLearning0);
      //  // Unstable assertion: assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      //  // Unstable assertion: assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0, mUSLauncher0);
      //  // Unstable assertion: assertNotNull(solver2);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      //  // Unstable assertion: assertFalse(solver2.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(1, solver2.nVars());
      //  // Unstable assertion: assertEquals("c ", solver2.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver2.nConstraints());
      //  // Unstable assertion: assertEquals(1, solver2.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(2, solver2.newVar());
      //  // Unstable assertion: assertFalse(solver2.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver2.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver2.decisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver2.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver2.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver2.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(mUSLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(0L, mUSLauncher0.getBeginTime());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      try { 
        solver2.discardCurrentModel();
       //  fail("Expecting exception: Exception");
       // Unstable assertion
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      //  // Unstable assertion: assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      //  // Unstable assertion: assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      //  // Unstable assertion: assertNotNull(levelBasedVarOrderHeap0);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      //  // Unstable assertion: assertNotNull(fixedLengthLearning0);
      //  // Unstable assertion: assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      //  // Unstable assertion: assertNotNull(mixedDataStructureDanielWL0);
      
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      //  // Unstable assertion: assertNotNull(miniSATLearning0);
      //  // Unstable assertion: assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      fixedLengthLearning0.init();
      //  // Unstable assertion: assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams((-4088.65536253), (-1));
      //  // Unstable assertion: assertNotNull(searchParams0);
      //  // Unstable assertion: assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-1), searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      //  // Unstable assertion: assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      //  // Unstable assertion: assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap();
      //  // Unstable assertion: assertNotNull(levelBasedVarOrderHeap1);
      //  // Unstable assertion: assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      //  // Unstable assertion: assertNotNull(noRestarts0);
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      //  // Unstable assertion: assertNotNull(mUSLauncher0);
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      //  // Unstable assertion: assertFalse(mUSLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap1, noRestarts0, mUSLauncher0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      //  // Unstable assertion: assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      //  // Unstable assertion: assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-1), searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      //  // Unstable assertion: assertFalse(mUSLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(0L, mUSLauncher0.getBeginTime());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      
      SearchParams searchParams1 = solver0.getSearchParams();
      //  // Unstable assertion: assertNotNull(searchParams1);
      //  // Unstable assertion: assertSame(searchParams0, searchParams1);
      //  // Unstable assertion: assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      //  // Unstable assertion: assertSame(searchParams1, searchParams0);
      //  // Unstable assertion: assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      //  // Unstable assertion: assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      //  // Unstable assertion: assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-1), searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      //  // Unstable assertion: assertFalse(mUSLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(0L, mUSLauncher0.getBeginTime());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(3, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(4, solver0.newVar());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(3, solver0.nVars());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals((-1), searchParams1.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams1, levelBasedVarOrderHeap1, noRestarts0);
      //  // Unstable assertion: assertNotNull(solver1);
      //  // Unstable assertion: assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      //  // Unstable assertion: assertEquals(3, fixedLengthLearning0.getMaxLength());
      //  // Unstable assertion: assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      //  // Unstable assertion: assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-1), searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      //  // Unstable assertion: assertFalse(mUSLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(0L, mUSLauncher0.getBeginTime());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(5, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(5, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(6, solver0.newVar());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals((-1), searchParams1.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      //  // Unstable assertion: assertFalse(solver1.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver1.nConstraints());
      //  // Unstable assertion: assertEquals("c ", solver1.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver1.getPropagationLevel());
      //  // Unstable assertion: assertEquals(2, solver1.newVar());
      //  // Unstable assertion: assertFalse(solver1.isVerbose());
      //  // Unstable assertion: assertEquals(1, solver1.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver1.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(2147483, solver1.getTimeout());
      //  // Unstable assertion: assertFalse(solver1.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(1, solver1.nVars());
      //  // Unstable assertion: assertEquals(0, solver1.decisionLevel());
      
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      //  // Unstable assertion: assertNotNull(clauseOnlyLearning0);
      //  // Unstable assertion: assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams1, levelBasedVarOrderHeap0, noRestarts0);
      //  // Unstable assertion: assertNotNull(solver2);
      //  // Unstable assertion: assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      //  // Unstable assertion: assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      //  // Unstable assertion: assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      //  // Unstable assertion: assertFalse(solver2.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver2.getTimeout());
      //  // Unstable assertion: assertFalse(solver2.isVerbose());
      //  // Unstable assertion: assertFalse(solver2.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals("c ", solver2.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver2.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver2.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver2.decisionLevel());
      //  // Unstable assertion: assertEquals(1, solver2.nVars());
      //  // Unstable assertion: assertEquals(2, solver2.newVar());
      //  // Unstable assertion: assertEquals(1, solver2.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver2.nConstraints());
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      //  // Unstable assertion: assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-1), searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      //  // Unstable assertion: assertFalse(mUSLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(0L, mUSLauncher0.getBeginTime());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(7, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(7, solver0.nVars());
      //  // Unstable assertion: assertEquals(8, solver0.newVar());
      //  // Unstable assertion: assertEquals((-1), searchParams1.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      Solver solver3 = (Solver)solver2.getSolvingEngine();
      //  // Unstable assertion: assertNotNull(solver3);
      //  // Unstable assertion: assertNotSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      //  // Unstable assertion: assertSame(searchParams0, searchParams1);
      //  // Unstable assertion: assertNotSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      //  // Unstable assertion: assertSame(searchParams1, searchParams0);
      //  // Unstable assertion: assertFalse(levelBasedVarOrderHeap0.equals((Object)levelBasedVarOrderHeap1));
      //  // Unstable assertion: assertFalse(levelBasedVarOrderHeap1.equals((Object)levelBasedVarOrderHeap0));
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      //  // Unstable assertion: assertEquals((-4088.65536253), searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-1), searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("NoRestarts", noRestarts0.toString());
      //  // Unstable assertion: assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertFalse(noRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      //  // Unstable assertion: assertFalse(mUSLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(0L, mUSLauncher0.getBeginTime());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(9, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(10, solver0.newVar());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(9, solver0.nVars());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals((-1), searchParams1.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-4088.65536253), searchParams1.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      //  // Unstable assertion: assertFalse(solver2.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver2.getTimeout());
      //  // Unstable assertion: assertFalse(solver2.isVerbose());
      //  // Unstable assertion: assertFalse(solver2.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals("c ", solver2.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver2.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(6, solver2.newVar());
      //  // Unstable assertion: assertEquals(0, solver2.getPropagationLevel());
      //  // Unstable assertion: assertEquals(5, solver2.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver2.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver2.nConstraints());
      //  // Unstable assertion: assertEquals(5, solver2.nVars());
      //  // Unstable assertion: assertEquals(0, solver3.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver3.decisionLevel());
      //  // Unstable assertion: assertEquals(5, solver3.newVar());
      //  // Unstable assertion: assertEquals(4, solver3.realNumberOfVariables());
      //  // Unstable assertion: assertEquals("c ", solver3.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver3.nConstraints());
      //  // Unstable assertion: assertFalse(solver3.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(4, solver3.nVars());
      //  // Unstable assertion: assertEquals(2147483, solver3.getTimeout());
      //  // Unstable assertion: assertFalse(solver3.isVerbose());
      //  // Unstable assertion: assertFalse(solver3.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver3.currentDecisionLevel());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      //  // Unstable assertion: assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      //  // Unstable assertion: assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      //  // Unstable assertion: assertNotNull(levelBasedVarOrderHeap0);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      //  // Unstable assertion: assertNotNull(fixedPeriodRestarts0);
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      boolean boolean0 = fixedPeriodRestarts0.shouldRestart();
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(848);
      //  // Unstable assertion: assertNotNull(dimacsStringSolver0);
      //  // Unstable assertion: assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(dimacsStringSolver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, dimacsStringSolver0.newVar());
      //  // Unstable assertion: assertFalse(dimacsStringSolver0.isVerbose());
      //  // Unstable assertion: assertEquals("", dimacsStringSolver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, dimacsStringSolver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, dimacsStringSolver0.nConstraints());
      //  // Unstable assertion: assertEquals(0, dimacsStringSolver0.nVars());
      //  // Unstable assertion: assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      //  // Unstable assertion: assertNotNull(minimal4InclusionModel0);
      //  // Unstable assertion: assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(dimacsStringSolver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, dimacsStringSolver0.newVar());
      //  // Unstable assertion: assertFalse(dimacsStringSolver0.isVerbose());
      //  // Unstable assertion: assertEquals("", dimacsStringSolver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, dimacsStringSolver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, dimacsStringSolver0.nConstraints());
      //  // Unstable assertion: assertEquals(0, dimacsStringSolver0.nVars());
      //  // Unstable assertion: assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(minimal4InclusionModel0);
      //  // Unstable assertion: assertNotNull(iVecInt0);
      //  // Unstable assertion: assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertFalse(dimacsStringSolver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, dimacsStringSolver0.newVar());
      //  // Unstable assertion: assertFalse(dimacsStringSolver0.isVerbose());
      //  // Unstable assertion: assertEquals("", dimacsStringSolver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, dimacsStringSolver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, dimacsStringSolver0.nConstraints());
      //  // Unstable assertion: assertEquals(0, dimacsStringSolver0.nVars());
      //  // Unstable assertion: assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      //  // Unstable assertion: assertEquals(0, iVecInt0.size());
      //  // Unstable assertion: assertTrue(iVecInt0.isEmpty());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(fixedPeriodRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      
      // Undeclared exception!
      try { 
        solver0.cancel();
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructure0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      //  // Unstable assertion: assertNotNull(levelBasedVarOrderHeap0);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      int int0 = (-2472);
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2472));
      //  // Unstable assertion: assertNotNull(lubyRestarts0);
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals((-2472), lubyRestarts0.getFactor());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      lubyRestarts0.onRestart();
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      //  // Unstable assertion: assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals((-2472), lubyRestarts0.getFactor());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(32);
      //  // Unstable assertion: assertNotNull(fixedLengthLearning0);
      //  // Unstable assertion: assertEquals(32, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, lubyRestarts0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals((-2472), lubyRestarts0.getFactor());
      //  // Unstable assertion: assertEquals(32, fixedLengthLearning0.getMaxLength());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      
      solver0.unset(1);
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals((-2472L), lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals((-2472), lubyRestarts0.getFactor());
      //  // Unstable assertion: assertEquals(32, fixedLengthLearning0.getMaxLength());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(4, solver0.newVar());
      //  // Unstable assertion: assertEquals(3, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(3, solver0.nVars());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      
      // Undeclared exception!
      try { 
        solver0.learn((Constr) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      //  // Unstable assertion: assertNotNull(activeLearning0);
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams((-1582.343887), (-685.7563), (-1582.343887), (-2185));
      //  // Unstable assertion: assertNotNull(searchParams0);
      //  // Unstable assertion: assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-2185), searchParams0.getInitConflictBound());
      
      double double0 = searchParams0.getVarDecay();
      //  // Unstable assertion: assertEquals((-1582.343887), double0, 0.01);
      //  // Unstable assertion: assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-2185), searchParams0.getInitConflictBound());
      
      PureOrder pureOrder0 = new PureOrder();
      //  // Unstable assertion: assertNotNull(pureOrder0);
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      //  // Unstable assertion: assertNotNull(arminRestarts0);
      //  // Unstable assertion: assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      //  // Unstable assertion: assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(arminRestarts0.shouldRestart());
      
      boolean boolean0 = arminRestarts0.shouldRestart();
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      //  // Unstable assertion: assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(arminRestarts0.shouldRestart());
      
      arminRestarts0.onBackjumpToRootLevel();
      //  // Unstable assertion: assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      //  // Unstable assertion: assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(arminRestarts0.shouldRestart());
      
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      //  // Unstable assertion: assertNotNull(basicLauncher0);
      //  // Unstable assertion: assertFalse(basicLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(0L, basicLauncher0.getBeginTime());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("Issue when reflectively accessing field");
      //  // Unstable assertion: assertFalse(basicLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(0L, basicLauncher0.getBeginTime());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, arminRestarts0, basicLauncher0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-2185), searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      //  // Unstable assertion: assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertTrue(arminRestarts0.shouldRestart());
      //  // Unstable assertion: assertFalse(basicLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(0L, basicLauncher0.getBeginTime());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      
      boolean boolean1 = solver0.isSatisfiable(true);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals((-1582.343887), searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals((-1582.343887), searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-685.7563), searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals((-2185), searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(20, pureOrder0.getPeriod());
      //  // Unstable assertion: assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      //  // Unstable assertion: assertEquals(0, pureOrder0.numberOfInterestingVariables());
      //  // Unstable assertion: assertEquals((-2185L), arminRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      //  // Unstable assertion: assertTrue(arminRestarts0.shouldRestart());
      //  // Unstable assertion: assertFalse(basicLauncher0.isSilent());
      //  // Unstable assertion: assertEquals(0L, basicLauncher0.getBeginTime());
      //  // Unstable assertion: assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      //  // Unstable assertion: assertEquals(3, solver0.nVars());
      //  // Unstable assertion: assertEquals(4, solver0.newVar());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(3, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LearningStrategy<CardinalityDataStructureYanMax> learningStrategy0 = (LearningStrategy<CardinalityDataStructureYanMax>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = mock(CardinalityDataStructureYanMax.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(cardinalityDataStructureYanMax0).getVocabulary();
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      double double0 = pureOrder0.varActivity(1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(learningStrategy0, cardinalityDataStructureYanMax0, (SearchParams) null, pureOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      
      pureOrder0.setPeriod(1);
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(1, pureOrder0.getPeriod());
      
      // Undeclared exception!
      try { 
        solver0.unset(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(303);
      //  // Unstable assertion: assertNotNull(fixedLengthLearning0);
      //  // Unstable assertion: assertEquals(303, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      //  // Unstable assertion: assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      //  // Unstable assertion: assertNotNull(levelBasedVarOrderHeap0);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(0);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      //  // Unstable assertion: assertNotNull(lubyRestarts0);
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(32, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams0 = new SearchParams();
      //  // Unstable assertion: assertNotNull(searchParams0);
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(100, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      lubyRestarts0.onRestart();
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      //  // Unstable assertion: assertFalse(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals(32, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      
      lubyRestarts0.onRestart();
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      //  // Unstable assertion: assertFalse(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(2, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals(32, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertEquals(64L, lubyRestarts0.nextRestartNumberOfConflict());
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      //  // Unstable assertion: assertNotNull(activeLearning0);
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      //  // Unstable assertion: assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      //  // Unstable assertion: assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      //  // Unstable assertion: assertFalse(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(2, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals(32, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertEquals(64L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(0, activeLearning0.getLimit());
      //  // Unstable assertion: assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-2472);
      intArray0[2] = (-2472);
      intArray0[3] = 3;
      intArray0[4] = (-2472);
      intArray0[5] = (-2472);
      intArray0[6] = 0;
      intArray0[7] = 303;
      // Undeclared exception!
      try { 
        solver0.addAtMostOnTheFly(intArray0, (-2358));
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PureOrder pureOrder0 = new PureOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      glucose21Restarts0.onRestart();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4L,");
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      searchParams0.getConflictBoundIncFactor();
      searchParams0.getInitConflictBound();
      searchParams0.getConflictBoundIncFactor();
      searchParams0.getInitConflictBound();
      searchParams0.getInitConflictBound();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, glucose21Restarts0);
      solver0.getSearchParams();
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PureOrder pureOrder0 = new PureOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      glucose21Restarts0.onRestart();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, pureOrder0, glucose21Restarts0);
      // Undeclared exception!
      try { 
        solver0.addClause((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.assignLiteral(0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      fixedPeriodRestarts0.shouldRestart();
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(848);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      AbstractMinimalModel.positiveLiterals(minimal4InclusionModel0);
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(848);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      minimal4InclusionModel0.setTimeout(848);
      // Undeclared exception!
      try { 
        solver1.toString("ra[^0MRrNc?:czaW2yB");
       //  fail("Expecting exception: NoSuchFieldError");
       // Unstable assertion
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      clausalDataStructureWL1.getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      searchParams0.getConflictBoundIncFactor();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.assignLiteral(0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      fixedPeriodRestarts0.shouldRestart();
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(848);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      AbstractMinimalModel.positiveLiterals(minimal4InclusionModel0);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL1, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("5iD;y K1M7i]Hk");
      mockPrintWriter0.print('\'');
      mockPrintWriter0.print('\'');
      mockPrintWriter0.print('#');
      mockPrintWriter0.print('#');
      mockPrintWriter0.print('\'');
      mockPrintWriter0.print('\'');
      solver0.printStat((PrintWriter) mockPrintWriter0);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(303);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.assignLiteral(0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      fixedPeriodRestarts0.shouldRestart();
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(848);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0);
      AbstractMinimalModel.positiveLiterals(minimal4InclusionModel0);
      fixedLengthLearning0.setVarActivityListener((VarActivityListener) null);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      solver0.clearLearntClauses();
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.log("y");
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0, mUSLauncher0);
      solver1.getPropagationLevel();
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning1 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning1, mixedDataStructureDanielHT0, (SearchParams) null, levelBasedVarOrderHeap0, fixedPeriodRestarts0, mUSLauncher0);
      // Undeclared exception!
      try { 
        solver2.getIthConstr(5000);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5000
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(303);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      fixedPeriodRestarts0.shouldRestart();
      fixedPeriodRestarts0.onBackjumpToRootLevel();
      Constr constr0 = Constr.TAUTOLOGY;
      constr0.size();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      glucose21Restarts0.onRestart();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, levelBasedVarOrderHeap0, glucose21Restarts0);
      solver0.reset();
      // Undeclared exception!
      try { 
        solver0.isSatisfiable(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PureOrder pureOrder0 = new PureOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      glucose21Restarts0.onRestart();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, pureOrder0, glucose21Restarts0);
      // Undeclared exception!
      try { 
        solver0.addClause((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.assignLiteral(0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      SearchParams searchParams0 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      glucose21Restarts0.onRestart();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, glucose21Restarts0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        solver0.addAtMostOnTheFly(intArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams((-4088.65536253), (-1));
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = new LevelBasedVarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap1, noRestarts0, mUSLauncher0);
      SearchParams searchParams1 = solver0.getSearchParams();
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams1, levelBasedVarOrderHeap1, noRestarts0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver1);
      IVecInt iVecInt1 = solver1.dimacs2internal(iVecInt0);
      iVecInt1.isEmpty();
      int int0 = 8;
      iVecInt1.push(8);
      int int1 = 0;
      // Undeclared exception!
      try { 
        iVecInt0.set(0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.assignLiteral((-1567));
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      fixedPeriodRestarts0.shouldRestart();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(848);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary1 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary1, searchParams0, varOrderHeap0, lubyRestarts0, basicLauncher0);
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      Constr constr0 = mixedDataStructureDanielWL0.createUnregisteredClause(iVecInt0);
      fixedPeriodRestarts0.newLearnedClause(constr0, 315);
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory1 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher1 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory1);
      basicLauncher0.log("cleaning ");
      basicLauncher0.log("");
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0, basicLauncher1);
      solver1.cancelUntilTrailLevel((-16));
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, fixedPeriodRestarts0);
      solver2.newVar(848);
      assertEquals(848, solver2.nVars());
      
      solver1.getRestartStrategy();
      assertEquals(2147483, solver1.getTimeout());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(3168.5, 3168.5, 3168.5, 2760);
      searchParams0.getVarDecay();
      searchParams0.getClaDecay();
      PureOrder pureOrder0 = new PureOrder();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      arminRestarts0.shouldRestart();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      SearchParams searchParams1 = mock(SearchParams.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(searchParams1).getConflictBoundIncFactor();
      doReturn(0).when(searchParams1).getInitConflictBound();
      SolverStats solverStats0 = new SolverStats();
      miniSATRestarts0.init(searchParams1, solverStats0);
      miniSATRestarts0.onRestart();
      miniSATRestarts0.onBackjumpToRootLevel();
      miniSATRestarts0.reset();
      miniSATRestarts0.newLearnedClause((Constr) null, 2760);
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory0);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.log("y");
      searchParams0.setConflictBoundIncFactor(0.0);
      mUSLauncher0.log("}`]cXb#-L%$_Km");
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>> aSolverFactory1 = (ASolverFactory<Solver<MixedDataStructureDanielWLConciseBinary>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>> basicLauncher1 = new BasicLauncher<Solver<MixedDataStructureDanielWLConciseBinary>>(aSolverFactory1);
      basicLauncher1.log("Issue when reflectively accessing field");
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, arminRestarts0, basicLauncher1);
      solver0.isSatisfiable(false);
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
  }
}
