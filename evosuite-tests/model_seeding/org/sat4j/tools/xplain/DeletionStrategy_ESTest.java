/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:18:52 GMT 2019
 */

package org.sat4j.tools.xplain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.xplain.DeletionStrategy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DeletionStrategy_ESTest extends DeletionStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(1717);
      vecInt0.unsafePush(1);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((IVecInt) null).when(iSolver0).unsatExplanation();
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn(iSolver0).when(dimacsOutputSolver0).getSolvingEngine();
      LexicoDecorator<DimacsOutputSolver> lexicoDecorator0 = new LexicoDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0, solutionFoundListener0);
      ISolver iSolver1 = optToSatAdapter0.getSolvingEngine();
      HashMap<Integer, DeletionStrategy> hashMap0 = new HashMap<Integer, DeletionStrategy>();
      VecInt vecInt1 = new VecInt(1717);
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(iSolver1, hashMap0, vecInt1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.xplain.DeletionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1673, 1673);
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dimacsOutputSolver0).getLogPrefix();
      doReturn(true).when(dimacsOutputSolver0).isVerbose();
      doReturn(vecInt0).when(dimacsOutputSolver0).unsatExplanation();
      HashMap<Integer, DeletionStrategy> hashMap0 = new HashMap<Integer, DeletionStrategy>();
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      // Undeclared exception!
      deletionStrategy0.explain(dimacsOutputSolver0, hashMap0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1683, 1683);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      HashMap<Integer, DeletionStrategy> hashMap0 = new HashMap<Integer, DeletionStrategy>();
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(dimacsOutputSolver0, hashMap0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      HashMap<Integer, MixedDataStructureDanielHT> hashMap0 = new HashMap<Integer, MixedDataStructureDanielHT>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(iSolver0, hashMap0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.xplain.DeletionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(1701);
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      vecInt0.shrinkTo((-2665));
      LexicoDecorator<DimacsOutputSolver> lexicoDecorator0 = new LexicoDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      HashMap<Integer, DeletionStrategy> hashMap0 = new HashMap<Integer, DeletionStrategy>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(lexicoDecorator0, hashMap0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(1701);
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn("").when(dimacsOutputSolver0).getLogPrefix();
      doReturn(true).when(dimacsOutputSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(true).when(dimacsOutputSolver0).isVerbose();
      doReturn((int[]) null).when(dimacsOutputSolver0).model();
      doReturn(vecInt0).when(dimacsOutputSolver0).unsatExplanation();
      doReturn((int[]) null).when(dimacsOutputSolver0).modelWithInternalVariables();
      doReturn(0, 0).when(dimacsOutputSolver0).nVars();
      LexicoDecorator<DimacsOutputSolver> lexicoDecorator0 = new LexicoDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0, solutionFoundListener0);
      HashMap<Integer, DeletionStrategy> hashMap0 = new HashMap<Integer, DeletionStrategy>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(optToSatAdapter0, hashMap0, vecInt0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(1701);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn("").when(dimacsOutputSolver0).getLogPrefix();
      doReturn(false).when(dimacsOutputSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true, false).when(dimacsOutputSolver0).isVerbose();
      doReturn(vecInt0).when(dimacsOutputSolver0).unsatExplanation();
      vecInt0.shrinkTo(651);
      HashMap<Integer, DeletionStrategy> hashMap0 = new HashMap<Integer, DeletionStrategy>();
      deletionStrategy0.explain(dimacsOutputSolver0, hashMap0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2);
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dimacsOutputSolver0).getLogPrefix();
      doReturn(true).when(dimacsOutputSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(dimacsOutputSolver0).isVerbose();
      doReturn(vecInt0).when(dimacsOutputSolver0).unsatExplanation();
      HashMap<Integer, DeletionStrategy> hashMap0 = new HashMap<Integer, DeletionStrategy>();
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(dimacsOutputSolver0, hashMap0, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1673, 1673);
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dimacsOutputSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, false).when(dimacsOutputSolver0).isVerbose();
      doReturn(vecInt0).when(dimacsOutputSolver0).unsatExplanation();
      HashMap<Integer, DeletionStrategy> hashMap0 = new HashMap<Integer, DeletionStrategy>();
      Integer integer0 = new Integer(1);
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      hashMap0.put(integer0, deletionStrategy0);
      deletionStrategy0.explain(dimacsOutputSolver0, hashMap0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(1693);
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn("").when(dimacsOutputSolver0).getLogPrefix();
      doReturn(true).when(dimacsOutputSolver0).isVerbose();
      doReturn(vecInt0).when(dimacsOutputSolver0).unsatExplanation();
      vecInt0.shrinkTo(662);
      LexicoDecorator<DimacsOutputSolver> lexicoDecorator0 = new LexicoDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      VecInt vecInt1 = new VecInt();
      HashMap<Integer, DeletionStrategy> hashMap0 = new HashMap<Integer, DeletionStrategy>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(lexicoDecorator0, hashMap0, vecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      String string0 = deletionStrategy0.toString();
      assertEquals("Deletion based minimization strategy", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      deletionStrategy0.cancelExplanationComputation();
      assertEquals("Deletion based minimization strategy", deletionStrategy0.toString());
  }
}
