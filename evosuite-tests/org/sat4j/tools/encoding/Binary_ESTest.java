/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:35:24 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.encoding.Binary;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Binary_ESTest extends Binary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      assertNotNull(negativeLiteralSelectionStrategy0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(negativeLiteralSelectionStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, varOrderHeap0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals("negative phase selection", negativeLiteralSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.realNumberOfVariables());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      try { 
        binary0.addExactlyOne(solver0, vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating trivially inconsistent constraint
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(102);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isVerbose());
      
      VecInt vecInt0 = new VecInt(867, 102);
      assertNotNull(vecInt0);
      assertEquals(867, vecInt0.size());
      assertEquals(102, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      binary0.addExactlyOne(dimacsStringSolver0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      
      // Undeclared exception!
      try { 
        binary0.addExactlyOne(dimacsStringSolver0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertNotNull(statisticsSolver0);
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nVars());
      
      VecInt vecInt0 = new VecInt(0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      // Undeclared exception!
      try { 
        binary0.addExactlyOne(statisticsSolver0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0, true);
      assertNotNull(maxSatDecorator0);
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertEquals(5, intArray0.length);
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        binary0.addExactlyOne(maxSatDecorator0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertEquals(3, intArray0.length);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      vecInt0.shrinkTo(1836);
      assertEquals(3, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1836, vecInt0.size());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        binary0.addExactlyOne(dimacsOutputSolver0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertNotNull(statisticsSolver0);
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      
      VecInt vecInt0 = new VecInt(0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int[] intArray0 = new int[7];
      VecInt vecInt1 = new VecInt(intArray0);
      assertNotNull(vecInt1);
      assertEquals(7, intArray0.length);
      assertEquals(7, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(statisticsSolver0, vecInt0);
      assertNotNull(minimal4CardinalityModel0);
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(vecInt0.equals((Object)vecInt1));
      
      // Undeclared exception!
      try { 
        binary0.addExactly(minimal4CardinalityModel0, vecInt1, (-573));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = (NegationDecorator<ModelIteratorToSATAdapter>) mock(NegationDecorator.class, new ViolatedAssumptionAnswer());
      NegationDecorator<NegationDecorator<ModelIteratorToSATAdapter>> negationDecorator1 = new NegationDecorator<NegationDecorator<ModelIteratorToSATAdapter>>(negationDecorator0);
      assertNotNull(negationDecorator1);
      assertFalse(negationDecorator1.isSatisfiable());
      
      // Undeclared exception!
      try { 
        binary0.addExactly(negationDecorator1, (IVecInt) null, 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(dimacsOutputSolver0);
      assertNotNull(iVecInt0);
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        binary0.addExactly(dimacsOutputSolver0, iVecInt0, 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(1.0E-4);
      assertNotNull(activeLearning0);
      assertEquals(1.0E-4, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(1.0E-4, 1.0E-4, 1.0E-4, 0);
      assertNotNull(searchParams0);
      assertEquals(1.0E-4, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-4, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-4, searchParams0.getVarDecay(), 0.01);
      
      int[] intArray0 = new int[2];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(2, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(2, intArray0.length);
      assertEquals(1.0E-4, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1.0E-4, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-4, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-4, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      IVecInt iVecInt0 = vecInt0.push((-1547));
      assertNotNull(iVecInt0);
      assertEquals(2, intArray0.length);
      assertEquals((-1547), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      assertEquals((-1547), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(3, iVecInt0.size());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      
      // Undeclared exception!
      try { 
        binary0.addExactly(solver0, iVecInt0, 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(529);
      assertNotNull(dimacsStringSolver0);
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nVars());
      
      VecInt vecInt0 = new VecInt(529, 529);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(529, vecInt0.size());
      assertEquals(529, vecInt0.last());
      
      // Undeclared exception!
      binary0.addAtMostOne(dimacsStringSolver0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertNotNull(statisticsSolver0);
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(statisticsSolver0);
      assertNotNull(minimal4CardinalityModel0);
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(minimal4CardinalityModel0);
      assertNotNull(minOneDecorator0);
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(minOneDecorator0.isOptimal());
      
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(minOneDecorator0);
      assertNotNull(optToSatAdapter0);
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(optToSatAdapter0.isOptimal());
      
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      // Undeclared exception!
      try { 
        binary0.addAtMostOne(optToSatAdapter0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(102);
      assertNotNull(dimacsStringSolver0);
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      // Undeclared exception!
      try { 
        binary0.addAtMostOne(dimacsStringSolver0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(102);
      assertNotNull(dimacsStringSolver0);
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      // Undeclared exception!
      try { 
        binary0.addAtMostOne(dimacsStringSolver0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      VecInt vecInt0 = new VecInt(19, 97);
      assertNotNull(vecInt0);
      assertEquals(19, vecInt0.size());
      assertEquals(97, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = (NegationDecorator<ModelIteratorToSATAdapter>) mock(NegationDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(negationDecorator0).nVars();
      doReturn(0, 0, 0, 0, 0).when(negationDecorator0).nextFreeVarId(anyBoolean());
      NegationDecorator<NegationDecorator<ModelIteratorToSATAdapter>> negationDecorator1 = new NegationDecorator<NegationDecorator<ModelIteratorToSATAdapter>>(negationDecorator0);
      assertNotNull(negationDecorator1);
      assertFalse(negationDecorator1.isSatisfiable());
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(negationDecorator1);
      assertNotNull(minimal4CardinalityModel0);
      assertFalse(negationDecorator1.isSatisfiable());
      
      // Undeclared exception!
      try { 
        binary0.addAtMostOne(minimal4CardinalityModel0, vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0, true);
      assertNotNull(maxSatDecorator0);
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.isOptimal());
      
      VecInt vecInt0 = new VecInt(48, 48);
      assertNotNull(vecInt0);
      assertEquals(48, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(48, vecInt0.size());
      
      // Undeclared exception!
      try { 
        binary0.addAtMostOne(maxSatDecorator0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(102);
      assertNotNull(dimacsStringSolver0);
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      
      VecInt vecInt0 = new VecInt(102, 102);
      assertNotNull(vecInt0);
      assertEquals(102, vecInt0.size());
      assertEquals(102, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      binary0.addAtMost(dimacsStringSolver0, vecInt0, 102);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      assertNotNull(vecInt0);
      assertEquals(5, intArray0.length);
      assertEquals(5, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertNotNull(statisticsSolver0);
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nVars());
      
      // Undeclared exception!
      try { 
        binary0.addAtMost(statisticsSolver0, vecInt0, 3134);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nVars());
      
      // Undeclared exception!
      try { 
        binary0.addAtMost(dimacsStringSolver0, (IVecInt) null, 74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(5);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      assertNotNull(iVecInt0);
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      // Undeclared exception!
      try { 
        binary0.addAtMost(dimacsStringSolver0, iVecInt0, 5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(5);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      
      VecInt vecInt0 = new VecInt(5, 862);
      assertNotNull(vecInt0);
      assertEquals(862, vecInt0.last());
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0, true);
      assertNotNull(maxSatDecorator0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0, solutionFoundListener0);
      assertNotNull(optToSatAdapter0);
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(optToSatAdapter0.isOptimal());
      
      // Undeclared exception!
      try { 
        binary0.addAtMost(optToSatAdapter0, vecInt0, 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(5);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      
      VecInt vecInt0 = new VecInt(5, 5);
      assertNotNull(vecInt0);
      assertEquals(5, vecInt0.last());
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      IConstr iConstr0 = binary0.addAtMost(dimacsStringSolver0, vecInt0, 5);
      assertNotNull(iConstr0);
      assertEquals(20, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(40, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(40, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(5, vecInt0.last());
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(20, iConstr0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(529);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      VecInt vecInt0 = new VecInt(94, 524);
      assertNotNull(vecInt0);
      assertEquals(524, vecInt0.last());
      assertEquals(94, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      IConstr iConstr0 = binary0.addAtMost(dimacsStringSolver0, vecInt0, 95);
      assertNotNull(iConstr0);
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(94, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(9595, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(9595, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(524, vecInt0.last());
      assertEquals(94, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(94, iConstr0.size());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Binary binary0 = new Binary();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      binary0.addExactly(dimacsOutputSolver0, vecInt0, 0);
      assertEquals(15, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(15, dimacsOutputSolver0.nVars());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Binary binary0 = new Binary();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(102);
      VecInt vecInt0 = new VecInt(102, 102);
      binary0.addAtMostOne(dimacsStringSolver0, vecInt0);
      assertEquals(7, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(688, dimacsStringSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Binary binary0 = new Binary();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.pop();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0, iVecInt0);
      IConstr iConstr0 = binary0.addAtMostOne(minimal4InclusionModel0, iVecInt0);
      assertEquals(0, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Binary binary0 = new Binary();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      int[] intArray0 = new int[3];
      VecInt vecInt0 = new VecInt(intArray0);
      binary0.addExactlyOne(dimacsOutputSolver0, vecInt0);
      assertEquals(2, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(2, dimacsOutputSolver0.nVars());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Binary binary0 = new Binary();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(102);
      VecInt vecInt0 = new VecInt(102, 102);
      // Undeclared exception!
      binary0.addExactly(dimacsStringSolver0, vecInt0, 102);
  }
}
