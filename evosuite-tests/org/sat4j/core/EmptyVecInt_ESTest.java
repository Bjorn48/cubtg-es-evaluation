/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:29:55 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.EmptyVecInt;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.IteratorInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmptyVecInt_ESTest extends EmptyVecInt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt((IVecInt) null);
      // Undeclared exception!
      try { 
        emptyVecInt0.equals(readOnlyVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      boolean boolean0 = emptyVecInt0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      boolean boolean0 = emptyVecInt0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.toArray();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      IVecInt iVecInt0 = emptyVecInt0.clone();
      assertEquals(0, iVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.clear();
      assertTrue(emptyVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.moveTo(0, (int[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.moveTo((-357), (-357));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.set(15, 15);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(emptyVecInt0);
      boolean boolean0 = emptyVecInt0.equals(readOnlyVecInt0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.delete(144);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.copyTo((int[]) null);
      assertEquals(0, emptyVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.pop();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.insertFirst(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      IteratorInt iteratorInt0 = emptyVecInt0.iterator();
      assertNotNull(iteratorInt0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.push(831);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.last();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.moveTo((IVecInt) emptyVecInt0);
      assertTrue(emptyVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.ensure(0);
      assertEquals(0, emptyVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.growTo(0, 0);
      assertEquals(0, emptyVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.containsAt(2883, 2883);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.moveTo((int[]) null);
      assertTrue(emptyVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.remove((-1095));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.containsAt(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.shrink(0);
      assertEquals(0, emptyVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      IVecInt[] iVecIntArray0 = emptyVecInt0.subset(0);
      assertEquals(0, iVecIntArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      String string0 = emptyVecInt0.toString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.shrinkTo((-3247));
      assertTrue(emptyVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      VecInt vecInt0 = new VecInt();
      emptyVecInt0.copyTo((IVecInt) vecInt0);
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      int int0 = emptyVecInt0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      boolean boolean0 = emptyVecInt0.contains(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.get(0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.sortUnique();
      assertTrue(emptyVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.moveTo2(emptyVecInt0);
      assertEquals(0, emptyVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      int int0 = emptyVecInt0.indexOf(0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.sort();
      assertEquals("[]", emptyVecInt0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.unsafeGet(125);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      emptyVecInt0.sort(comparator0);
      assertTrue(emptyVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.unsafePush(2255);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }
}
