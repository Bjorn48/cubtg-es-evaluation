/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 16:47:20 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.Point;
import java.awt.image.ImageProducer;
import java.awt.image.IndexColorModel;
import java.util.Hashtable;
import javax.swing.JLayeredPane;
import jigl.image.InterpolationMethod;
import jigl.image.ROI;
import jigl.image.types.GrayImage;
import jigl.image.types.ImageKernel;
import jigl.image.types.InterpolatedGrayImage;
import jigl.image.types.KernelType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GrayImage_ESTest extends GrayImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        grayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[][] intArray0 = new int[0][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      int int0 = (-175);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      rOI0.setROI(0, 1, 0, (-175));
      grayImage0.toString();
      rOI0.lx();
      rOI0.setROI(0, 0, 1, 0);
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.setROI(1973, 0, (-1914), 0);
      rOI0.lx();
      Point point0 = new Point();
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      // Undeclared exception!
      try { 
        grayImage0.median(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1329, 1329);
      Integer integer0 = new Integer(0);
      Integer.toUnsignedString(355);
      ROI rOI0 = new ROI();
      rOI0.setROI((-494), (-1920), 355, 0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.set(0, 0, integer0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1920
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(63, 63);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      grayImage0.toString(rOI0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      short[][] shortArray0 = new short[0][2];
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((short[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      integer0.floatValue();
      int int0 = 8;
      GrayImage grayImage1 = new GrayImage(8, 699);
      grayImage0.subtract((-642));
      // Undeclared exception!
      try { 
        grayImage1.subtract(8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1329, 1329);
      Integer integer0 = new Integer(0);
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)82;
      shortArray0[1] = (short)3890;
      shortArray0[2] = (short) (-4936);
      GrayImage grayImage0 = new GrayImage(1329, 0, shortArray0);
      grayImage0.copy();
      ROI rOI0 = new ROI();
      interpolatedGrayImage0.copy(rOI0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 5;
      GrayImage grayImage0 = new GrayImage(128, 0, intArray0);
      ((Integer)0).intValue();
      int[][] intArray1 = new int[0][5];
      GrayImage grayImage1 = new GrayImage(intArray1);
      ROI rOI0 = new ROI();
      rOI0.ly();
      rOI0.lx();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      // Undeclared exception!
      try { 
        grayImage0.multiply(16, 0, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 5;
      GrayImage grayImage0 = new GrayImage(128, 0, intArray0);
      ((Integer)0).intValue();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      integer0.floatValue();
      GrayImage grayImage1 = grayImage0.clear(integer0);
      grayImage1.addbuffer(5, 5, 5, 0, 92);
      GrayImage grayImage2 = grayImage0.subtract(0);
      GrayImage grayImage3 = grayImage2.copy();
      ROI rOI0 = new ROI();
      grayImage1.addSum();
      // Undeclared exception!
      try { 
        grayImage3.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-4148);
      GrayImage grayImage0 = new GrayImage(0, 0, (short[]) null);
      // Undeclared exception!
      try { 
        grayImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(0, 3238);
      // Undeclared exception!
      try { 
        grayImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int[] intArray0 = new int[8];
      String[] stringArray0 = new String[10];
      stringArray0[0] = ">{!-P[3yv9H";
      stringArray0[1] = ">{!-P[3yv9H";
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      int int1 = 2197;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      // Undeclared exception!
      try { 
        grayImage0.set(2197, 0, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      short[][] shortArray0 = new short[0][2];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      int int0 = 0;
      int[] intArray0 = new int[7];
      grayImage0.copy();
      intArray0[1] = 0;
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        GrayImage.main((String[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      short[][] shortArray0 = new short[0][2];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage(2121, (-16777216));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      short[][] shortArray0 = new short[0][2];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      int int0 = 0;
      int int1 = 0;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(0, 0, (byte[]) null, (byte[]) null, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 5;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 5;
      intArray0[7] = 5;
      GrayImage grayImage0 = new GrayImage(5, 0, intArray0);
      ROI rOI0 = new ROI(70, 0, 5, 5);
      GrayImage grayImage1 = grayImage0.clear((Integer) 5);
      grayImage1.toString();
      grayImage1.min();
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      // Undeclared exception!
      try { 
        grayImage1.median(71, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 103);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      integer0.intValue();
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      integer1.intValue();
      integer1.floatValue();
      interpolatedGrayImage0.clear((Integer) 400);
      Integer.compareUnsigned(400, 0);
      interpolatedGrayImage0.median(95);
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.clip(0, 5, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 5;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 5;
      intArray0[7] = 5;
      GrayImage grayImage0 = new GrayImage(5, 0, intArray0);
      ROI rOI0 = new ROI(70, 0, 5, 5);
      GrayImage grayImage1 = grayImage0.clear((Integer) 5);
      grayImage1.toString();
      grayImage1.min();
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      // Undeclared exception!
      try { 
        grayImage1.median(71, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[10];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      integer0.floatValue();
      grayImage0.max();
      int int0 = 699;
      GrayImage grayImage1 = new GrayImage(8, 699);
      // Undeclared exception!
      try { 
        grayImage0.subtract((-642));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 2;
      GrayImage grayImage0 = new GrayImage(92, 92);
      int int1 = 2604;
      grayImage0.toString();
      int int2 = (-687);
      // Undeclared exception!
      try { 
        grayImage0.addbuffer(int2, int1, int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      int int0 = 8;
      grayImage0.addbuffer(8, 8, 0, 0, 0);
      // Undeclared exception!
      try { 
        grayImage0.addbuffer((-16777216), (-16777216), 106, 106, 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 3238);
      grayImage0.min();
      ROI rOI0 = new ROI((-867), 366, (-16777216), (-2232));
      // Undeclared exception!
      try { 
        grayImage0.add((-2232), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2232
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int[][] intArray0 = new int[0][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      grayImage0.addbuffer(104, 0, 8, 16, 0);
      // Undeclared exception!
      try { 
        grayImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      int[] intArray0 = new int[0];
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      GrayImage grayImage0 = new GrayImage(8, 699);
      // Undeclared exception!
      try { 
        grayImage0.subtract(8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = 136;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(136, 136);
      int int1 = 0;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      // Undeclared exception!
      interpolatedGrayImage0.clear(integer0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 5;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 5;
      intArray0[7] = 5;
      GrayImage grayImage0 = new GrayImage(5, 0, intArray0);
      ROI rOI0 = new ROI(70, 0, 5, 5);
      GrayImage grayImage1 = grayImage0.clear((Integer) 5);
      grayImage1.toString();
      grayImage1.min();
      Point point0 = new Point();
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      // Undeclared exception!
      try { 
        grayImage1.median(71, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 103);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      integer0.intValue();
      ((Integer)0).intValue();
      integer0.floatValue();
      interpolatedGrayImage0.clear((Integer) 0);
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      ROI rOI0 = new ROI(200, (-401), 1974, 2325);
      int[][] intArray1 = new int[7][6];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      GrayImage grayImage1 = new GrayImage(intArray1);
      // Undeclared exception!
      try { 
        grayImage1.clear(integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn((ImageProducer) null).when(image0).getSource();
      doReturn(0, 0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(image0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.PixelGrabber", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(2, 2);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 0;
      int int1 = 3238;
      GrayImage grayImage0 = new GrayImage(0, 3238);
      int int2 = 0;
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 2;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(2, 2);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      grayImage0.min();
      GrayImage grayImage1 = grayImage0.addbuffer(8, 8, 0, 0, 0);
      GrayImage grayImage2 = grayImage1.copy();
      grayImage0.toString();
      GrayImage grayImage3 = new GrayImage(grayImage2);
      GrayImage grayImage4 = grayImage0.addbuffer(8, 0, 531);
      GrayImage grayImage5 = grayImage4.copy();
      grayImage5.multiply((jigl.image.Image<Integer>) grayImage3);
      ROI rOI0 = new ROI();
      grayImage2.clip(103, 2214, rOI0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      short[][] shortArray0 = new short[0][2];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      int[] intArray0 = new int[7];
      intArray0[1] = 0;
      intArray0[3] = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      interpolatedGrayImage0.median(1878);
      Integer.compareUnsigned(1878, 0);
      interpolatedGrayImage0.median((-833));
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.clip((-1714), 15, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractArrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 5;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      ((Integer)0).intValue();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      Point point0 = new Point();
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      // Undeclared exception!
      try { 
        grayImage0.median(5, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      integer0.floatValue();
      grayImage0.max();
      GrayImage grayImage1 = new GrayImage(8, 699);
      grayImage0.subtract((-642));
      GrayImage grayImage2 = new GrayImage(intArray0);
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      grayImage0.sqrSum();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        grayImage1.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(2, 2);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      int int0 = new Integer(2);
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 5;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 5;
      intArray0[7] = 5;
      GrayImage grayImage0 = new GrayImage(5, 0, intArray0);
      GrayImage grayImage1 = grayImage0.clear((Integer) 5);
      grayImage1.toString();
      grayImage0.subtract(5);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        grayImage0.divide((-2098), 0, 2025, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 5;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 5;
      intArray0[7] = 5;
      GrayImage grayImage0 = new GrayImage(5, 0, intArray0);
      ROI rOI0 = new ROI(70, 0, 5, 5);
      grayImage0.addbuffer(5, 0, 5);
      GrayImage grayImage1 = grayImage0.clear((Integer) 5);
      grayImage1.toString();
      grayImage1.min();
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      // Undeclared exception!
      try { 
        grayImage0.subtract(0, 1552, (-4110), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      integer0.floatValue();
      grayImage0.max();
      Integer.toUnsignedString((-347));
      ROI rOI0 = new ROI();
      int int0 = 315;
      rOI0.setROI(315, 8, 255, (-1920));
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.set((-1), (-1920), integer0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3840
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      integer0.intValue();
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      integer1.intValue();
      integer1.floatValue();
      jigl.image.Image<Integer> image0 = new InterpolatedGrayImage(interpolatedGrayImage0);
      image0.min();
      Integer.compareUnsigned(400, 0);
      interpolatedGrayImage0.median(95);
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.clip(0, 5, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      int int0 = 5;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 103);
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      integer0.intValue();
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      integer1.intValue();
      integer1.floatValue();
      interpolatedGrayImage0.clear((Integer) 400);
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.clip(0, 5, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      short[][] shortArray0 = new short[0][2];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage((-1604), 11, (short[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      grayImage0.toString();
      grayImage0.addbuffer(0, 23, 10);
      ROI rOI0 = new ROI();
      Point point0 = new Point();
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-166);
      shortArray0[1] = (short)11;
      shortArray0[2] = (short)3;
      shortArray0[3] = (short)828;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(3924, 3924, shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray0);
      GrayImage grayImage1 = grayImage0.clear((Integer) null);
      grayImage1.toString();
      grayImage0.min();
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 5;
      GrayImage grayImage0 = new GrayImage(128, 0, intArray0);
      ((Integer)0).intValue();
      grayImage0.min();
      grayImage0.toString();
      // Undeclared exception!
      grayImage0.addbuffer(255, 255, 128);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      GrayImage grayImage1 = grayImage0.addbuffer(8, 8, 0, 0, 0);
      grayImage0.toString();
      int int0 = 23;
      ROI rOI0 = new ROI();
      GrayImage grayImage2 = grayImage1.add(23, rOI0);
      int int1 = 0;
      grayImage2.subtract(0, 0, 0);
      GrayImage grayImage3 = grayImage0.copy();
      grayImage2.copy(rOI0);
      GrayImage grayImage4 = new GrayImage(grayImage3);
      // Undeclared exception!
      try { 
        grayImage0.subtract((jigl.image.Image<Integer>) grayImage3, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[1];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      GrayImage grayImage1 = grayImage0.addbuffer(15, 15, 0, 0, 0);
      grayImage1.byteSize();
      grayImage0.toString();
      grayImage0.toString();
      ROI rOI0 = new ROI();
      grayImage1.add(23, rOI0);
      GrayImage grayImage2 = grayImage0.addbuffer(15, 0, 23);
      grayImage2.clear((Integer) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 5;
      GrayImage grayImage0 = new GrayImage(128, 0, intArray0);
      ((Integer)0).intValue();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      integer0.floatValue();
      grayImage0.clear(integer0);
      grayImage0.toString();
      grayImage0.subtract((-3789));
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        grayImage0.divide(2, 5, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 5;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[7] = 5;
      GrayImage grayImage0 = new GrayImage(5, 0, intArray0);
      grayImage0.toString();
      grayImage0.addbuffer(5, 5, (-56));
      ROI rOI0 = new ROI();
      Point point0 = new Point();
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 5;
      GrayImage grayImage0 = new GrayImage(128, 0, intArray0);
      ((Integer)0).intValue();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Integer integer1 = new Integer(0);
      GrayImage grayImage1 = grayImage0.clear(integer0);
      GrayImage grayImage2 = grayImage1.add((jigl.image.Image<Integer>) grayImage0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      grayImage1.toString();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      Integer integer2 = new Integer(0);
      grayImage2.copy();
      rOI0.ux();
      // Undeclared exception!
      try { 
        grayImage0.median(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int[][] intArray0 = new int[0][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      grayImage0.max();
      int int0 = 8;
      grayImage0.subtract(255);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(5, 8);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      int int0 = 8;
      grayImage0.min();
      GrayImage grayImage1 = grayImage0.addbuffer(8, 8, 0, 0, 0);
      GrayImage grayImage2 = grayImage1.copy();
      GrayImage grayImage3 = new GrayImage(grayImage2);
      GrayImage grayImage4 = grayImage0.addbuffer(8, 0, 531);
      grayImage4.copy();
      grayImage2.multiply((jigl.image.Image<Integer>) grayImage3);
      ROI rOI0 = new ROI();
      GrayImage grayImage5 = null;
      try {
        grayImage5 = new GrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 5;
      int[][] intArray1 = new int[9][0];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      intArray1[7] = intArray0;
      intArray1[8] = intArray0;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.util.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      GrayImage grayImage1 = grayImage0.addbuffer(8, 8, 0, 0, 0);
      grayImage0.toString();
      ROI rOI0 = new ROI();
      GrayImage grayImage2 = grayImage1.add(0, rOI0);
      grayImage2.subtract(0, 0, 0);
      grayImage0.copy();
      rOI0.setROI(8, (-1126), 23, 972);
      ROI rOI1 = new ROI((-1309), (-1), (-1309), (-1345));
      // Undeclared exception!
      try { 
        grayImage2.copy(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1345
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      GrayImage grayImage0 = new GrayImage(intArray0);
      // Undeclared exception!
      try { 
        grayImage0.addbuffer(8, 8, 0, 0, 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      GrayImage grayImage0 = new GrayImage(intArray0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      integer0.floatValue();
      Integer.toUnsignedLong(544);
      int int0 = 8;
      GrayImage grayImage1 = new GrayImage(8, 699);
      // Undeclared exception!
      try { 
        grayImage0.subtract((-642));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      KernelType kernelType0 = KernelType.D_XY;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      assertEquals(4.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(3, imageKernel0.Y());
      assertEquals(1.0F, imageKernel0.max(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals((-1.0F), imageKernel0.min(), 0.01F);
      assertEquals(4.0, imageKernel0.sqrSum(), 0.01);
      
      ImageProducer imageProducer0 = imageKernel0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(4.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(3, imageKernel0.Y());
      assertEquals(1.0F, imageKernel0.max(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals((-1.0F), imageKernel0.min(), 0.01F);
      assertEquals(4.0, imageKernel0.sqrSum(), 0.01);
      
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(110, 110).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(imageProducer0).when(image0).getSource();
      doReturn(110, 110).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      GrayImage grayImage0 = new GrayImage(image0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage1 = new GrayImage(128, 0, intArray1);
      assertNotNull(grayImage1);
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(128, grayImage1.X());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertArrayEquals(new int[] {}, intArray1);
      assertEquals(0, intArray1.length);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = Integer.min(128, 128);
      assertEquals(128, int0);
      
      int int1 = integer0.intValue();
      assertEquals(0, int1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      
      Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer1);
      assertEquals((-30000), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      
      Point point0 = new Point();
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(point0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        grayImage0.median(128, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 5;
      GrayImage grayImage0 = new GrayImage(128, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(128, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      int int0 = ((Integer)0).intValue();
      assertEquals(0, int0);
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(128, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals("128:0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string0);
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.addbuffer(128, 10, 90);
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(128, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(10368000L, grayImage1.sqrSum());
      assertEquals(10, grayImage1.Y());
      assertEquals(115200, grayImage1.addSum());
      assertEquals(115200, grayImage1.absSum());
      assertEquals(128, grayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "128:0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";
      stringArray0[1] = "128:0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";
      stringArray0[2] = "";
      stringArray0[3] = "128:0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";
      stringArray0[4] = "128:0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";
      stringArray0[5] = "128:0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";
      stringArray0[6] = "128:0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";
      // Undeclared exception!
      try { 
        GrayImage.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.addbuffer(8, 8, 0, 0, 0);
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(8, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage2 = grayImage1.copy();
      assertNotNull(grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(8, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(8, grayImage2.X());
      assertEquals(8, grayImage2.Y());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertEquals(1, intArray0.length);
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals("0:1\n", string0);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage3 = new GrayImage(grayImage2);
      assertNotNull(grayImage3);
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(8, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(8, grayImage2.X());
      assertEquals(8, grayImage2.Y());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.absSum());
      assertEquals(8, grayImage3.Y());
      assertEquals(8, grayImage3.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage4 = grayImage0.addbuffer(8, 0, 531);
      assertNotNull(grayImage4);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage4);
      assertNotSame(grayImage4, grayImage0);
      assertNotSame(grayImage4, grayImage1);
      assertNotSame(grayImage4, grayImage3);
      assertNotSame(grayImage4, grayImage2);
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(8, grayImage4.X());
      assertEquals(0, grayImage4.addSum());
      assertEquals(0L, grayImage4.sqrSum());
      assertEquals(0, grayImage4.absSum());
      assertEquals(0, grayImage4.Y());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage1));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage5 = grayImage4.copy();
      assertNotNull(grayImage5);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage5);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage4);
      assertNotSame(grayImage4, grayImage0);
      assertNotSame(grayImage4, grayImage5);
      assertNotSame(grayImage4, grayImage1);
      assertNotSame(grayImage4, grayImage3);
      assertNotSame(grayImage4, grayImage2);
      assertNotSame(grayImage5, grayImage1);
      assertNotSame(grayImage5, grayImage3);
      assertNotSame(grayImage5, grayImage2);
      assertNotSame(grayImage5, grayImage4);
      assertNotSame(grayImage5, grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(8, grayImage4.X());
      assertEquals(0, grayImage4.addSum());
      assertEquals(0L, grayImage4.sqrSum());
      assertEquals(0, grayImage4.absSum());
      assertEquals(0, grayImage4.Y());
      assertEquals(0, grayImage5.Y());
      assertEquals(0L, grayImage5.sqrSum());
      assertEquals(8, grayImage5.X());
      assertEquals(0, grayImage5.absSum());
      assertEquals(0, grayImage5.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage0.equals((Object)grayImage4));
      assertFalse(grayImage4.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage1));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertFalse(grayImage5.equals((Object)grayImage1));
      assertFalse(grayImage5.equals((Object)grayImage3));
      assertFalse(grayImage5.equals((Object)grayImage2));
      assertFalse(grayImage5.equals((Object)grayImage4));
      assertFalse(grayImage5.equals((Object)grayImage0));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage6 = grayImage5.multiply((jigl.image.Image<Integer>) grayImage3);
      assertNotNull(grayImage6);
      assertNotSame(grayImage0, grayImage6);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage5);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage4);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage4);
      assertNotSame(grayImage1, grayImage5);
      assertNotSame(grayImage1, grayImage6);
      assertNotSame(grayImage1, grayImage3);
      assertNotSame(grayImage2, grayImage3);
      assertNotSame(grayImage2, grayImage6);
      assertNotSame(grayImage2, grayImage4);
      assertNotSame(grayImage2, grayImage5);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage3, grayImage6);
      assertNotSame(grayImage3, grayImage5);
      assertNotSame(grayImage3, grayImage4);
      assertNotSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage2);
      assertNotSame(grayImage4, grayImage6);
      assertNotSame(grayImage4, grayImage0);
      assertNotSame(grayImage4, grayImage5);
      assertNotSame(grayImage4, grayImage1);
      assertNotSame(grayImage4, grayImage3);
      assertNotSame(grayImage4, grayImage2);
      assertNotSame(grayImage5, grayImage1);
      assertNotSame(grayImage5, grayImage3);
      assertNotSame(grayImage5, grayImage2);
      assertNotSame(grayImage5, grayImage4);
      assertSame(grayImage5, grayImage6);
      assertNotSame(grayImage5, grayImage0);
      assertNotSame(grayImage6, grayImage1);
      assertNotSame(grayImage6, grayImage2);
      assertNotSame(grayImage6, grayImage4);
      assertNotSame(grayImage6, grayImage3);
      assertSame(grayImage6, grayImage5);
      assertNotSame(grayImage6, grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(8, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(8, grayImage2.X());
      assertEquals(8, grayImage2.Y());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.absSum());
      assertEquals(8, grayImage3.Y());
      assertEquals(8, grayImage3.X());
      assertEquals(8, grayImage4.X());
      assertEquals(0, grayImage4.addSum());
      assertEquals(0L, grayImage4.sqrSum());
      assertEquals(0, grayImage4.absSum());
      assertEquals(0, grayImage4.Y());
      assertEquals(0, grayImage5.Y());
      assertEquals(0L, grayImage5.sqrSum());
      assertEquals(8, grayImage5.X());
      assertEquals(0, grayImage5.absSum());
      assertEquals(0, grayImage5.addSum());
      assertEquals(0, grayImage6.Y());
      assertEquals(0, grayImage6.addSum());
      assertEquals(0L, grayImage6.sqrSum());
      assertEquals(0, grayImage6.absSum());
      assertEquals(8, grayImage6.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage5));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage0.equals((Object)grayImage4));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage4));
      assertFalse(grayImage1.equals((Object)grayImage5));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage2.equals((Object)grayImage3));
      assertFalse(grayImage2.equals((Object)grayImage4));
      assertFalse(grayImage2.equals((Object)grayImage5));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage5));
      assertFalse(grayImage3.equals((Object)grayImage4));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage4.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage5));
      assertFalse(grayImage4.equals((Object)grayImage1));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertFalse(grayImage5.equals((Object)grayImage1));
      assertFalse(grayImage5.equals((Object)grayImage3));
      assertFalse(grayImage5.equals((Object)grayImage2));
      assertFalse(grayImage5.equals((Object)grayImage4));
      assertFalse(grayImage5.equals((Object)grayImage0));
      assertFalse(grayImage6.equals((Object)grayImage1));
      assertFalse(grayImage6.equals((Object)grayImage2));
      assertFalse(grayImage6.equals((Object)grayImage4));
      assertFalse(grayImage6.equals((Object)grayImage3));
      assertFalse(grayImage6.equals((Object)grayImage0));
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      grayImage2.clip(103, 2214, rOI0);
      assertNotSame(grayImage0, grayImage6);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage5);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage4);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage4);
      assertNotSame(grayImage1, grayImage5);
      assertNotSame(grayImage1, grayImage6);
      assertNotSame(grayImage1, grayImage3);
      assertNotSame(grayImage2, grayImage3);
      assertNotSame(grayImage2, grayImage6);
      assertNotSame(grayImage2, grayImage4);
      assertNotSame(grayImage2, grayImage5);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(8, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(10609L, grayImage2.sqrSum());
      assertEquals(103, grayImage2.addSum());
      assertEquals(8, grayImage2.X());
      assertEquals(8, grayImage2.Y());
      assertEquals(103, grayImage2.absSum());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertFalse(grayImage0.equals((Object)grayImage6));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage5));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage0.equals((Object)grayImage4));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage4));
      assertFalse(grayImage1.equals((Object)grayImage5));
      assertFalse(grayImage1.equals((Object)grayImage6));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage2.equals((Object)grayImage3));
      assertFalse(grayImage2.equals((Object)grayImage6));
      assertFalse(grayImage2.equals((Object)grayImage4));
      assertFalse(grayImage2.equals((Object)grayImage5));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage7 = grayImage2.addbuffer(3, 531, 87);
      assertNotNull(grayImage7);
      assertNotSame(grayImage0, grayImage6);
      assertNotSame(grayImage0, grayImage7);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage5);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage4);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage4);
      assertNotSame(grayImage1, grayImage5);
      assertNotSame(grayImage1, grayImage6);
      assertNotSame(grayImage1, grayImage7);
      assertNotSame(grayImage1, grayImage3);
      assertNotSame(grayImage2, grayImage3);
      assertNotSame(grayImage2, grayImage6);
      assertNotSame(grayImage2, grayImage4);
      assertNotSame(grayImage2, grayImage5);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage7);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage7, grayImage0);
      assertNotSame(grayImage7, grayImage3);
      assertNotSame(grayImage7, grayImage1);
      assertNotSame(grayImage7, grayImage5);
      assertNotSame(grayImage7, grayImage4);
      assertNotSame(grayImage7, grayImage6);
      assertNotSame(grayImage7, grayImage2);
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(8, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(10609L, grayImage2.sqrSum());
      assertEquals(103, grayImage2.addSum());
      assertEquals(8, grayImage2.X());
      assertEquals(8, grayImage2.Y());
      assertEquals(103, grayImage2.absSum());
      assertEquals(136606, grayImage7.absSum());
      assertEquals(531, grayImage7.Y());
      assertEquals(11886370L, grayImage7.sqrSum());
      assertEquals(3, grayImage7.X());
      assertEquals(136606, grayImage7.addSum());
      assertFalse(grayImage0.equals((Object)grayImage6));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage5));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage0.equals((Object)grayImage4));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage4));
      assertFalse(grayImage1.equals((Object)grayImage5));
      assertFalse(grayImage1.equals((Object)grayImage6));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage2.equals((Object)grayImage3));
      assertFalse(grayImage2.equals((Object)grayImage6));
      assertFalse(grayImage2.equals((Object)grayImage4));
      assertFalse(grayImage2.equals((Object)grayImage5));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage7.equals((Object)grayImage0));
      assertFalse(grayImage7.equals((Object)grayImage3));
      assertFalse(grayImage7.equals((Object)grayImage1));
      assertFalse(grayImage7.equals((Object)grayImage5));
      assertFalse(grayImage7.equals((Object)grayImage4));
      assertFalse(grayImage7.equals((Object)grayImage6));
      assertFalse(grayImage7.equals((Object)grayImage2));
      assertEquals(1, intArray0.length);
      
      int int0 = grayImage7.absSum();
      assertNotSame(grayImage0, grayImage6);
      assertNotSame(grayImage0, grayImage7);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage5);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage4);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage4);
      assertNotSame(grayImage1, grayImage5);
      assertNotSame(grayImage1, grayImage6);
      assertNotSame(grayImage1, grayImage7);
      assertNotSame(grayImage1, grayImage3);
      assertNotSame(grayImage2, grayImage3);
      assertNotSame(grayImage2, grayImage6);
      assertNotSame(grayImage2, grayImage4);
      assertNotSame(grayImage2, grayImage5);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage7);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage7, grayImage0);
      assertNotSame(grayImage7, grayImage3);
      assertNotSame(grayImage7, grayImage1);
      assertNotSame(grayImage7, grayImage5);
      assertNotSame(grayImage7, grayImage4);
      assertNotSame(grayImage7, grayImage6);
      assertNotSame(grayImage7, grayImage2);
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(8, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(10609L, grayImage2.sqrSum());
      assertEquals(103, grayImage2.addSum());
      assertEquals(8, grayImage2.X());
      assertEquals(8, grayImage2.Y());
      assertEquals(103, grayImage2.absSum());
      assertEquals(136606, grayImage7.absSum());
      assertEquals(531, grayImage7.Y());
      assertEquals(11886370L, grayImage7.sqrSum());
      assertEquals(3, grayImage7.X());
      assertEquals(136606, grayImage7.addSum());
      assertEquals(136606, int0);
      assertFalse(grayImage0.equals((Object)grayImage6));
      assertFalse(grayImage0.equals((Object)grayImage7));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage5));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage0.equals((Object)grayImage4));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage4));
      assertFalse(grayImage1.equals((Object)grayImage5));
      assertFalse(grayImage1.equals((Object)grayImage6));
      assertFalse(grayImage1.equals((Object)grayImage7));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage2.equals((Object)grayImage3));
      assertFalse(grayImage2.equals((Object)grayImage6));
      assertFalse(grayImage2.equals((Object)grayImage4));
      assertFalse(grayImage2.equals((Object)grayImage5));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage7));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage7.equals((Object)grayImage0));
      assertFalse(grayImage7.equals((Object)grayImage3));
      assertFalse(grayImage7.equals((Object)grayImage1));
      assertFalse(grayImage7.equals((Object)grayImage5));
      assertFalse(grayImage7.equals((Object)grayImage4));
      assertFalse(grayImage7.equals((Object)grayImage6));
      assertFalse(grayImage7.equals((Object)grayImage2));
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int[][] intArray0 = new int[2][8];
      int[] intArray1 = new int[6];
      intArray1[0] = 1633;
      intArray1[1] = 0;
      intArray1[2] = (-66);
      intArray1[3] = 206;
      intArray1[4] = 0;
      intArray1[5] = (-2474);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1633;
      intArray2[1] = (-66);
      intArray2[2] = 1633;
      intArray2[3] = 0;
      intArray2[4] = (-2474);
      intArray2[5] = (-66);
      intArray0[1] = intArray2;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(2, grayImage0.Y());
      assertEquals(6, grayImage0.X());
      assertEquals(2, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int0);
      
      rOI0.setROI(0, 2449, 8, 2);
      assertEquals(8, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(9, rOI0.X());
      assertEquals(2, rOI0.uy());
      assertEquals(2448, rOI0.Y());
      assertEquals(2449, rOI0.ly());
      
      int int1 = rOI0.ly();
      assertEquals(8, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(9, rOI0.X());
      assertEquals(2, rOI0.uy());
      assertEquals(2448, rOI0.Y());
      assertEquals(2449, rOI0.ly());
      assertEquals(2449, int1);
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(8, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(9, rOI0.X());
      assertEquals(2, rOI0.uy());
      assertEquals(2448, rOI0.Y());
      assertEquals(2449, rOI0.ly());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = rOI0.lx();
      assertEquals(8, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(9, rOI0.X());
      assertEquals(2, rOI0.uy());
      assertEquals(2448, rOI0.Y());
      assertEquals(2449, rOI0.ly());
      assertEquals(8, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      int int4 = rOI0.ux();
      assertEquals(8, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(9, rOI0.X());
      assertEquals(2, rOI0.uy());
      assertEquals(2448, rOI0.Y());
      assertEquals(2449, rOI0.ly());
      assertEquals(0, int4);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      
      int int5 = rOI0.ly();
      assertEquals(8, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(9, rOI0.X());
      assertEquals(2, rOI0.uy());
      assertEquals(2448, rOI0.Y());
      assertEquals(2449, rOI0.ly());
      assertEquals(2449, int5);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertTrue(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      
      int int6 = rOI0.ux();
      assertEquals(8, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(9, rOI0.X());
      assertEquals(2, rOI0.uy());
      assertEquals(2448, rOI0.Y());
      assertEquals(2449, rOI0.ly());
      assertEquals(0, int6);
      assertTrue(int6 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      
      int int7 = rOI0.lx();
      assertEquals(8, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(9, rOI0.X());
      assertEquals(2, rOI0.uy());
      assertEquals(2448, rOI0.Y());
      assertEquals(2449, rOI0.ly());
      assertEquals(8, int7);
      assertTrue(int7 == int3);
      assertFalse(int7 == int0);
      assertFalse(int7 == int5);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int1);
      assertFalse(int7 == int4);
      
      // Undeclared exception!
      try { 
        grayImage0.multiply(16, 8, 206, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[][] intArray0 = new int[3][5];
      int[] intArray1 = new int[3];
      intArray1[0] = 1684;
      intArray1[1] = 3465;
      intArray1[2] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 0;
      intArray2[1] = 1684;
      intArray2[2] = 1684;
      intArray2[3] = 3465;
      intArray2[4] = 1684;
      intArray2[5] = 3465;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 3465;
      intArray3[1] = 3465;
      intArray3[2] = 0;
      intArray3[3] = 1684;
      intArray3[4] = 0;
      intArray3[5] = 671;
      intArray3[6] = 0;
      intArray3[7] = 1684;
      intArray0[2] = intArray3;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.util.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int0 = 103;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 103);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(103, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      int int1 = integer0.intValue();
      assertEquals(200, int1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer1);
      assertEquals(400, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      
      int int2 = integer1.intValue();
      assertEquals(400, int2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      float float0 = integer1.floatValue();
      assertEquals(400.0F, float0, 0.01F);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int2));
      
      jigl.image.Image<Integer> image0 = interpolatedGrayImage0.clear((Integer) 400);
      assertNotNull(image0);
      assertSame(interpolatedGrayImage0, image0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(103, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(103, image0.Y());
      assertEquals(0, image0.X());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.clip(0, 5, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[][] intArray0 = new int[2][8];
      int[] intArray1 = new int[6];
      intArray1[0] = 1633;
      intArray1[1] = 0;
      intArray1[2] = (-66);
      intArray1[3] = 206;
      intArray1[4] = 0;
      intArray1[5] = (-2474);
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 1633;
      intArray2[1] = (-66);
      intArray2[2] = 1633;
      intArray2[3] = 0;
      intArray2[4] = (-2474);
      intArray2[5] = (-66);
      intArray0[1] = intArray2;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(2, grayImage0.Y());
      assertEquals(6, grayImage0.X());
      assertEquals(2, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      
      int int4 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int4);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      
      int int5 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int5);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      
      int int6 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int6);
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      
      int int7 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int7);
      assertTrue(int7 == int3);
      assertTrue(int7 == int4);
      assertTrue(int7 == int1);
      assertTrue(int7 == int2);
      assertTrue(int7 == int6);
      assertTrue(int7 == int0);
      assertTrue(int7 == int5);
      
      // Undeclared exception!
      try { 
        grayImage0.multiply(16, 0, 206, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, intArray0.length);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      float float0 = integer0.floatValue();
      assertEquals(100.0F, float0, 0.01F);
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer1);
      assertEquals(100, (int)integer1);
      
      GrayImage grayImage1 = new GrayImage(8, 699);
      assertNotNull(grayImage1);
      assertEquals(8, grayImage1.X());
      assertEquals(699, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage2 = grayImage0.subtract((-642));
      assertNotNull(grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(1, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage3 = new GrayImage(intArray0);
      assertNotNull(grayImage3);
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(1, grayImage3.Y());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage3.addSum());
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage4 = grayImage3.copy();
      assertNotNull(grayImage4);
      assertNotSame(grayImage3, grayImage4);
      assertNotSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage2);
      assertNotSame(grayImage4, grayImage3);
      assertNotSame(grayImage4, grayImage0);
      assertNotSame(grayImage4, grayImage2);
      assertNotSame(grayImage4, grayImage1);
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(1, grayImage3.Y());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0L, grayImage4.sqrSum());
      assertEquals(1, grayImage4.Y());
      assertEquals(0, grayImage4.X());
      assertEquals(0, grayImage4.addSum());
      assertEquals(0, grayImage4.absSum());
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertFalse(grayImage4.equals((Object)grayImage1));
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage3);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(1, grayImage3.Y());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(1, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertFalse(grayImage3.equals((Object)grayImage4));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract((jigl.image.Image<Integer>) grayImage4, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 5;
      GrayImage grayImage0 = new GrayImage(128, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(128, grayImage0.X());
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      int int0 = ((Integer)0).intValue();
      assertEquals(0, int0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      float float0 = integer0.floatValue();
      assertEquals((-30000.0F), float0, 0.01F);
      assertFalse(integer0.equals((Object)int0));
      
      GrayImage grayImage1 = grayImage0.clear(integer0);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(128, grayImage0.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(128, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertFalse(integer0.equals((Object)int0));
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      GrayImage grayImage2 = grayImage0.subtract((-3789));
      assertNotNull(grayImage2);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertSame(grayImage2, grayImage1);
      assertSame(grayImage2, grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(128, grayImage0.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(128, grayImage2.X());
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = grayImage1.addSum();
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertSame(grayImage1, grayImage2);
      assertSame(grayImage1, grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(128, grayImage0.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(128, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, int1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage1.subtract((-1462), 0, (-1462));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 5;
      int int1 = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(5, 103);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(103, interpolatedGrayImage0.Y());
      assertEquals(5, interpolatedGrayImage0.X());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      int int2 = integer0.intValue();
      assertEquals(200, int2);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer1);
      assertEquals(400, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int1));
      
      int int3 = integer1.intValue();
      assertEquals(400, int3);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      float float0 = integer1.floatValue();
      assertEquals(400.0F, float0, 0.01F);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int1));
      
      jigl.image.Image<Integer> image0 = interpolatedGrayImage0.clear((Integer) 400);
      assertNotNull(image0);
      assertSame(interpolatedGrayImage0, image0);
      assertEquals(82400000L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(103, interpolatedGrayImage0.Y());
      assertEquals(5, interpolatedGrayImage0.X());
      assertEquals(206000, interpolatedGrayImage0.addSum());
      assertEquals(206000, interpolatedGrayImage0.absSum());
      assertEquals(5, image0.X());
      assertEquals(103, image0.Y());
      
      int int4 = Integer.compareUnsigned(400, 0);
      assertEquals(1, int4);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      
      // Undeclared exception!
      interpolatedGrayImage0.median(95);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 5;
      GrayImage grayImage0 = new GrayImage(128, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(128, grayImage0.X());
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      int int0 = ((Integer)0).intValue();
      assertEquals(0, int0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Point point0 = new Point();
      assertEquals(0, point0.y);
      assertEquals(0, point0.x);
      assertNotNull(point0);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      // Undeclared exception!
      try { 
        grayImage0.median(5, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 0;
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn((-888)).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(image0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(1, intArray0.length);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertEquals(100, (int)integer0);
      
      float float0 = integer0.floatValue();
      assertEquals(100.0F, float0, 0.01F);
      
      Integer integer1 = grayImage0.max();
      assertNull(integer1);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage1 = new GrayImage(8, 699);
      assertNotNull(grayImage1);
      assertEquals(8, grayImage1.X());
      assertEquals(699, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage2 = grayImage0.subtract((-642));
      assertNotNull(grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(1, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage3 = new GrayImage(intArray0);
      assertNotNull(grayImage3);
      assertEquals(1, grayImage3.Y());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.absSum());
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage4 = grayImage3.copy();
      assertNotNull(grayImage4);
      assertNotSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage4);
      assertNotSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage2);
      assertNotSame(grayImage4, grayImage2);
      assertNotSame(grayImage4, grayImage3);
      assertNotSame(grayImage4, grayImage0);
      assertNotSame(grayImage4, grayImage1);
      assertEquals(1, grayImage3.Y());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage4.addSum());
      assertEquals(1, grayImage4.Y());
      assertEquals(0, grayImage4.X());
      assertEquals(0, grayImage4.absSum());
      assertEquals(0L, grayImage4.sqrSum());
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage1));
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      int int0 = grayImage3.addSum();
      assertNotSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage4);
      assertNotSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage2);
      assertEquals(1, grayImage3.Y());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, int0);
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage4));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage2.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.addbuffer(8, 8, 0, 0, 0);
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(8, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(8, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(1, intArray0.length);
      
      grayImage1.byteSize();
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(8, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(8, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(1, intArray0.length);
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals("0:1\n", string0);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals(1, intArray0.length);
      
      String string1 = grayImage0.toString();
      assertNotNull(string1);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals("0:1\n", string1);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      GrayImage grayImage2 = grayImage1.add(23, rOI0);
      assertNotNull(grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(23, grayImage1.absSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(529L, grayImage1.sqrSum());
      assertEquals(23, grayImage1.addSum());
      assertEquals(8, grayImage1.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(529L, grayImage2.sqrSum());
      assertEquals(23, grayImage2.addSum());
      assertEquals(23, grayImage2.absSum());
      assertEquals(8, grayImage2.X());
      assertEquals(8, grayImage2.Y());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage3 = grayImage0.addbuffer(8, 0, 23);
      assertNotNull(grayImage3);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage2);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(8, grayImage3.X());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.Y());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage4 = grayImage3.clear((Integer) null);
      assertNotNull(grayImage4);
      assertNotSame(grayImage0, grayImage4);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage3, grayImage4);
      assertNotSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage2);
      assertNotSame(grayImage4, grayImage2);
      assertNotSame(grayImage4, grayImage0);
      assertSame(grayImage4, grayImage3);
      assertNotSame(grayImage4, grayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(8, grayImage3.X());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage4.absSum());
      assertEquals(0, grayImage4.Y());
      assertEquals(0, grayImage4.addSum());
      assertEquals(0L, grayImage4.sqrSum());
      assertEquals(8, grayImage4.X());
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertFalse(grayImage4.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage1));
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(136, 136);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(136, interpolatedGrayImage0.Y());
      assertEquals(136, interpolatedGrayImage0.X());
      
      int int0 = 0;
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      interpolatedGrayImage0.clear(integer0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(1, intArray0.length);
      
      int int0 = 8;
      int int1 = 0;
      int int2 = 0;
      GrayImage grayImage1 = grayImage0.addbuffer(8, 8, 0, 0, 255);
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(4161600L, grayImage1.sqrSum());
      assertEquals(16320, grayImage1.addSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(8, grayImage1.X());
      assertEquals(16320, grayImage1.absSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(1, intArray0.length);
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals("0:1\n", string0);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals(1, intArray0.length);
      
      int int3 = 23;
      GrayImage grayImage2 = grayImage0.addbuffer(23, 0, 23);
      assertNotNull(grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage2.Y());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(23, grayImage2.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        grayImage2.add(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((-45), (-45), (short[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 5;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 5;
      intArray0[7] = 5;
      GrayImage grayImage0 = new GrayImage(5, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(5, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 5, 5}, intArray0);
      assertEquals(8, intArray0.length);
      
      ROI rOI0 = new ROI(70, 0, 5, 5);
      assertNotNull(rOI0);
      assertEquals(66, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(5, rOI0.ly());
      assertEquals(70, rOI0.lx());
      assertEquals(5, rOI0.ux());
      
      GrayImage grayImage1 = grayImage0.clear((Integer) 5);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(5, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(5, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.Y());
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 5, 5}, intArray0);
      assertEquals(8, intArray0.length);
      
      GrayImage grayImage2 = grayImage1.addbuffer(0, 5, (-16777216), (-1), (-64));
      assertNotNull(grayImage2);
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage2);
      assertSame(grayImage1, grayImage0);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(5, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(5, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(5, grayImage2.Y());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.X());
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 5, 5}, intArray0);
      assertEquals(8, intArray0.length);
      
      String string0 = grayImage1.toString();
      assertNotNull(string0);
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage2);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(5, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(5, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.Y());
      assertEquals("5:0\n\n\n\n\n\n", string0);
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 5, 5}, intArray0);
      assertEquals(8, intArray0.length);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      // Undeclared exception!
      try { 
        grayImage1.median(71, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, intArray0.length);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      float float0 = integer0.floatValue();
      assertEquals((-30000.0F), float0, 0.01F);
      
      Integer integer1 = grayImage0.max();
      assertNull(integer1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage1 = new GrayImage(8, 699);
      assertNotNull(grayImage1);
      assertEquals(699, grayImage1.Y());
      assertEquals(8, grayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage2 = grayImage0.subtract((-642));
      assertNotNull(grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(1, grayImage2.Y());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage1.subtract(8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      short[][] shortArray0 = new short[0][2];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[1] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[6] = (-16777216);
      Point point0 = new Point();
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(point0);
      assertEquals(0.0, point0.getY(), 0.01);
      assertEquals(0.0, point0.getX(), 0.01);
      
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      // Undeclared exception!
      try { 
        grayImage0.median((-16777216), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.addbuffer(8, 8, 0, 0, 0);
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(1, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(8, grayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(1, intArray0.length);
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals("0:1\n", string0);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      GrayImage grayImage2 = grayImage1.add(23, rOI0);
      assertNotNull(grayImage2);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertEquals(1, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(529L, grayImage1.sqrSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(8, grayImage1.X());
      assertEquals(23, grayImage1.addSum());
      assertEquals(23, grayImage1.absSum());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(23, grayImage2.addSum());
      assertEquals(529L, grayImage2.sqrSum());
      assertEquals(8, grayImage2.Y());
      assertEquals(8, grayImage2.X());
      assertEquals(23, grayImage2.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertEquals(1, intArray0.length);
      
      grayImage2.subtract(0, 0, 0);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertEquals(1, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(529L, grayImage1.sqrSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(8, grayImage1.X());
      assertEquals(23, grayImage1.addSum());
      assertEquals(23, grayImage1.absSum());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(23, grayImage2.addSum());
      assertEquals(529L, grayImage2.sqrSum());
      assertEquals(8, grayImage2.Y());
      assertEquals(8, grayImage2.X());
      assertEquals(23, grayImage2.absSum());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage3 = grayImage0.copy();
      assertNotNull(grayImage3);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage2);
      assertEquals(1, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(1, grayImage3.Y());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.absSum());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage4 = grayImage2.copy(rOI0);
      assertNotNull(grayImage4);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage4);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage1, grayImage4);
      assertNotSame(grayImage1, grayImage3);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage3);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage4);
      assertNotSame(grayImage4, grayImage2);
      assertNotSame(grayImage4, grayImage0);
      assertNotSame(grayImage4, grayImage1);
      assertNotSame(grayImage4, grayImage3);
      assertEquals(1, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(529L, grayImage1.sqrSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(8, grayImage1.X());
      assertEquals(23, grayImage1.addSum());
      assertEquals(23, grayImage1.absSum());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(23, grayImage2.addSum());
      assertEquals(529L, grayImage2.sqrSum());
      assertEquals(8, grayImage2.Y());
      assertEquals(8, grayImage2.X());
      assertEquals(23, grayImage2.absSum());
      assertEquals(1, grayImage4.Y());
      assertEquals(529L, grayImage4.sqrSum());
      assertEquals(1, grayImage4.X());
      assertEquals(23, grayImage4.absSum());
      assertEquals(23, grayImage4.addSum());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage3));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertFalse(grayImage4.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage1));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertEquals(1, intArray0.length);
      
      Integer integer0 = grayImage4.min();
      assertNotNull(integer0);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage4);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage1, grayImage4);
      assertNotSame(grayImage1, grayImage3);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage3);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage4);
      assertNotSame(grayImage4, grayImage2);
      assertNotSame(grayImage4, grayImage0);
      assertNotSame(grayImage4, grayImage1);
      assertNotSame(grayImage4, grayImage3);
      assertEquals(1, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(529L, grayImage1.sqrSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(8, grayImage1.X());
      assertEquals(23, grayImage1.addSum());
      assertEquals(23, grayImage1.absSum());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(23, grayImage2.addSum());
      assertEquals(529L, grayImage2.sqrSum());
      assertEquals(8, grayImage2.Y());
      assertEquals(8, grayImage2.X());
      assertEquals(23, grayImage2.absSum());
      assertEquals(1, grayImage4.Y());
      assertEquals(529L, grayImage4.sqrSum());
      assertEquals(1, grayImage4.X());
      assertEquals(23, grayImage4.absSum());
      assertEquals(23, grayImage4.addSum());
      assertEquals(23, (int)integer0);
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage4));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage4));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage3));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage4));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertFalse(grayImage4.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage1));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage5 = new GrayImage(grayImage3);
      assertNotNull(grayImage5);
      assertEquals(1, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(1, grayImage3.Y());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage5.absSum());
      assertEquals(0, grayImage5.addSum());
      assertEquals(1, grayImage5.Y());
      assertEquals(0, grayImage5.X());
      assertEquals(0L, grayImage5.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage4));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage3.equals((Object)grayImage4));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage5.equals((Object)grayImage2));
      assertFalse(grayImage5.equals((Object)grayImage0));
      assertFalse(grayImage5.equals((Object)grayImage3));
      assertFalse(grayImage5.equals((Object)grayImage1));
      assertFalse(grayImage5.equals((Object)grayImage4));
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[1];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(1, intArray0.length);
      
      Integer integer0 = grayImage0.min();
      assertNotNull(integer0);
      assertEquals(1, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, (int)integer0);
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.addbuffer(8, 8, 0, 0, 0);
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(1, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(8, grayImage1.X());
      assertEquals(8, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage2 = grayImage1.copy();
      assertNotNull(grayImage2);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertEquals(1, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(8, grayImage1.X());
      assertEquals(8, grayImage1.Y());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(8, grayImage2.X());
      assertEquals(8, grayImage2.Y());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertEquals(1, intArray0.length);
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals("1:1\n0 \n", string0);
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage3 = new GrayImage(grayImage2);
      assertNotNull(grayImage3);
      assertEquals(1, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(8, grayImage1.X());
      assertEquals(8, grayImage1.Y());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(8, grayImage2.X());
      assertEquals(8, grayImage2.Y());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage3.addSum());
      assertEquals(8, grayImage3.X());
      assertEquals(8, grayImage3.Y());
      assertEquals(0L, grayImage3.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage4 = grayImage0.addbuffer(8, 0, 531);
      assertNotNull(grayImage4);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage4);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage4, grayImage0);
      assertNotSame(grayImage4, grayImage1);
      assertNotSame(grayImage4, grayImage3);
      assertNotSame(grayImage4, grayImage2);
      assertEquals(1, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage4.sqrSum());
      assertEquals(8, grayImage4.X());
      assertEquals(0, grayImage4.absSum());
      assertEquals(0, grayImage4.Y());
      assertEquals(0, grayImage4.addSum());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage4.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage1));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertEquals(1, intArray0.length);
      
      int int0 = 1094;
      int int1 = 581;
      int int2 = 79;
      int int3 = 96;
      grayImage4.addbuffer(int0, int1, int2, int1, int3);
      GrayImage grayImage5 = grayImage4.copy();
      grayImage5.multiply((jigl.image.Image<Integer>) grayImage3);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 5;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 5;
      intArray0[7] = 5;
      GrayImage grayImage0 = new GrayImage(5, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(5, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 5, 5}, intArray0);
      assertEquals(8, intArray0.length);
      
      ROI rOI0 = new ROI(70, 0, 5, 5);
      assertNotNull(rOI0);
      assertEquals(6, rOI0.Y());
      assertEquals(66, rOI0.X());
      assertEquals(5, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(5, rOI0.ly());
      assertEquals(70, rOI0.lx());
      
      GrayImage grayImage1 = grayImage0.clear((Integer) 5);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(5, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(5, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 5, 5}, intArray0);
      assertEquals(8, intArray0.length);
      
      String string0 = grayImage1.toString();
      assertNotNull(string0);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(5, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(5, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals("5:0\n\n\n\n\n\n", string0);
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 5, 5}, intArray0);
      assertEquals(8, intArray0.length);
      
      Integer integer0 = grayImage1.min();
      assertNull(integer0);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(5, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(5, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 5, 5}, intArray0);
      assertEquals(8, intArray0.length);
      
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      // Undeclared exception!
      try { 
        grayImage1.median(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 5;
      GrayImage grayImage0 = new GrayImage(128, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(128, grayImage0.X());
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      int int1 = ((Integer)0).intValue();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      float float0 = new Integer(0);
      assertEquals(0, float0, 0.01F);
      
      GrayImage grayImage1 = grayImage0.clear(integer0);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(128, grayImage0.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(128, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)float0));
      assertFalse(integer0.equals((Object)int1));
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      GrayImage grayImage2 = grayImage1.add((jigl.image.Image<Integer>) grayImage0);
      assertNotNull(grayImage2);
      assertSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage2);
      assertSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(128, grayImage0.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(128, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(128, grayImage2.X());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)float0));
      assertFalse(integer0.equals((Object)int1));
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.uy();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      
      int int4 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int4);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      
      int int5 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int5);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      
      int int6 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int6);
      assertTrue(int6 == int4);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      
      int int7 = new Integer(0);
      assertEquals(0, int7);
      assertTrue(int7 == int6);
      assertTrue(int7 == int4);
      assertTrue(int7 == int3);
      assertTrue(int7 == int1);
      assertTrue(int7 == int0);
      assertTrue(int7 == int5);
      assertTrue(int7 == int2);
      
      int int8 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int8);
      assertTrue(int8 == int0);
      assertTrue(int8 == int7);
      assertTrue(int8 == int5);
      assertTrue(int8 == int1);
      assertTrue(int8 == int4);
      assertTrue(int8 == int3);
      assertTrue(int8 == int2);
      assertTrue(int8 == int6);
      
      int int9 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int9);
      assertTrue(int9 == int7);
      assertTrue(int9 == int6);
      assertTrue(int9 == int4);
      assertTrue(int9 == int2);
      assertTrue(int9 == int3);
      assertTrue(int9 == int8);
      assertTrue(int9 == int5);
      assertTrue(int9 == int0);
      assertTrue(int9 == int1);
      
      // Undeclared exception!
      try { 
        grayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int[][] intArray0 = new int[0][7];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, intArray0.length);
      
      int int0 = 4;
      int int1 = grayImage0.absSum();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[][] intArray0 = new int[0][7];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, intArray0.length);
      
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      ROI rOI0 = new ROI((-2210), 16, (-2210), 551);
      assertNotNull(rOI0);
      assertEquals(16, rOI0.uy());
      assertEquals(551, rOI0.ly());
      assertEquals((-2210), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-2210), rOI0.ux());
      assertEquals(536, rOI0.Y());
      
      // Undeclared exception!
      try { 
        grayImage0.subtract(4, (-3576), 15, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3560
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      short[][] shortArray0 = new short[0][2];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, shortArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[1] = 0;
      intArray0[3] = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      int int0 = 1878;
      interpolatedGrayImage0.median(1878);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      ROI rOI0 = null;
      int int1 = (-120);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.clip((-120), 3104, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, intArray0.length);
      
      Integer integer0 = grayImage0.max();
      assertNull(integer0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.subtract((-642));
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(1, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(1, intArray0.length);
      
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      long long0 = grayImage0.sqrSum();
      assertSame(grayImage0, grayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, long0);
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        grayImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1329, 1329);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(1329, interpolatedGrayImage0.X());
      assertEquals(1329, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.util.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 103);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(103, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      int int0 = integer0.intValue();
      assertEquals(200, int0);
      
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer1);
      assertEquals(400, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      int int1 = integer1.intValue();
      assertEquals(400, int1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(int1 == int0);
      
      float float0 = integer1.floatValue();
      assertEquals(400.0F, float0, 0.01F);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int1));
      
      jigl.image.Image<Integer> image0 = interpolatedGrayImage0.clear((Integer) 400);
      assertNotNull(image0);
      assertSame(interpolatedGrayImage0, image0);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(103, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, image0.X());
      assertEquals(103, image0.Y());
      
      Integer integer2 = image0.min();
      assertNull(integer2);
      assertSame(interpolatedGrayImage0, image0);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(103, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, image0.X());
      assertEquals(103, image0.Y());
      
      int int2 = Integer.compareUnsigned(400, 0);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      interpolatedGrayImage0.median(95);
      assertSame(interpolatedGrayImage0, image0);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(103, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      
      jigl.image.Image<Integer> image1 = image0.clear();
      assertNotNull(image1);
      assertSame(interpolatedGrayImage0, image1);
      assertSame(interpolatedGrayImage0, image0);
      assertSame(image0, image1);
      assertSame(image1, image0);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(103, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, image0.X());
      assertEquals(103, image0.Y());
      assertEquals(0, image1.X());
      assertEquals(103, image1.Y());
      
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.clip(0, 5, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 5;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 5;
      intArray0[7] = 5;
      GrayImage grayImage0 = new GrayImage(5, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(5, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 5, 5}, intArray0);
      assertEquals(8, intArray0.length);
      
      ROI rOI0 = new ROI(94, 0, 5, 5);
      assertNotNull(rOI0);
      assertEquals(94, rOI0.lx());
      assertEquals(6, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(90, rOI0.X());
      assertEquals(5, rOI0.ly());
      assertEquals(5, rOI0.ux());
      
      int int0 = rOI0.Y();
      assertEquals(94, rOI0.lx());
      assertEquals(6, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(90, rOI0.X());
      assertEquals(5, rOI0.ly());
      assertEquals(5, rOI0.ux());
      assertEquals(6, int0);
      
      int int1 = rOI0.X();
      assertEquals(94, rOI0.lx());
      assertEquals(6, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(90, rOI0.X());
      assertEquals(5, rOI0.ly());
      assertEquals(5, rOI0.ux());
      assertEquals(90, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        grayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int[][] intArray0 = new int[0][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, intArray0.length);
      
      int int0 = (-175);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.uy();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ly();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      
      rOI0.setROI(0, 1, 0, (-175));
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(177, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-175), rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals("0:0\n", string0);
      assertEquals(0, intArray0.length);
      
      int int4 = rOI0.lx();
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(177, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-175), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int4);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      
      rOI0.setROI(0, 0, 1, 0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int5 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int5);
      assertTrue(int5 == int2);
      assertFalse(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      
      int int6 = rOI0.ly();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int6);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertFalse(int6 == int0);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      
      int int7 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int7);
      assertTrue(int7 == int4);
      assertTrue(int7 == int6);
      assertTrue(int7 == int5);
      assertFalse(int7 == int0);
      assertTrue(int7 == int1);
      assertTrue(int7 == int3);
      assertTrue(int7 == int2);
      
      int int8 = 1973;
      rOI0.setROI(1973, 0, (-1914), 0);
      assertEquals(0, rOI0.ly());
      assertEquals((-1914), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1973, rOI0.lx());
      assertEquals(3888, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      int int9 = rOI0.lx();
      assertEquals(0, rOI0.ly());
      assertEquals((-1914), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1973, rOI0.lx());
      assertEquals(3888, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(1973, int9);
      assertFalse(int9 == int1);
      assertFalse(int9 == int3);
      assertFalse(int9 == int4);
      assertTrue(int9 == int8);
      assertFalse(int9 == int2);
      assertFalse(int9 == int0);
      assertFalse(int9 == int6);
      assertFalse(int9 == int7);
      assertFalse(int9 == int5);
      
      // Undeclared exception!
      try { 
        grayImage0.multiply((-175), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int[][] intArray0 = new int[0][7];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, intArray0.length);
      
      ROI rOI0 = new ROI((-2210), 16, (-2210), 551);
      assertNotNull(rOI0);
      assertEquals((-2210), rOI0.ux());
      assertEquals(536, rOI0.Y());
      assertEquals(16, rOI0.uy());
      assertEquals(551, rOI0.ly());
      assertEquals((-2210), rOI0.lx());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        grayImage0.subtract(4, (-3576), 15, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3560
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 5;
      GrayImage grayImage0 = new GrayImage(128, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(128, grayImage0.X());
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      int int0 = ((Integer)0).intValue();
      assertEquals(0, int0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      float float0 = integer0.floatValue();
      assertEquals((-30000.0F), float0, 0.01F);
      assertFalse(integer0.equals((Object)int0));
      
      GrayImage grayImage1 = grayImage0.clear(integer0);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(128, grayImage0.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(128, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertFalse(integer0.equals((Object)int0));
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      GrayImage grayImage2 = grayImage0.subtract((-3789));
      assertNotNull(grayImage2);
      assertSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(128, grayImage0.X());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(128, grayImage2.X());
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      GrayImage grayImage3 = grayImage2.copy();
      assertNotNull(grayImage3);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage3);
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage2, grayImage3);
      assertSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage2);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(128, grayImage0.X());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(128, grayImage2.X());
      assertEquals(128, grayImage3.X());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = grayImage1.addSum();
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage3);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage3);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(128, grayImage0.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(128, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, int1);
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage1.subtract((-1462), 0, (-1462));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(5, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertEquals(1, intArray0.length);
      
      int int0 = 8;
      int int1 = 255;
      // Undeclared exception!
      try { 
        grayImage0.addbuffer(8, 255, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      short[][] shortArray0 = new short[1][2];
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 5;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 5;
      intArray0[7] = 5;
      GrayImage grayImage0 = new GrayImage(5, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(5, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 5, 5}, intArray0);
      assertEquals(8, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.clear((Integer) 5);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(5, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(5, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 5, 5}, intArray0);
      assertEquals(8, intArray0.length);
      
      int int0 = (-1822);
      // Undeclared exception!
      try { 
        grayImage0.subtract((-1822), 0, 109);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, intArray0.length);
      
      Integer integer0 = grayImage0.max();
      assertNull(integer0);
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, intArray0.length);
      
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      
      long long0 = grayImage0.sqrSum();
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0L, long0);
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        grayImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, intArray1);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray1.length);
      
      int int0 = 70;
      ROI rOI0 = new ROI(0, 96, 0, 32767);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(96, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(32672, rOI0.Y());
      assertEquals(32767, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      GrayImage grayImage1 = grayImage0.clear((Integer) 0);
      assertNotNull(grayImage1);
      assertNotSame(intArray1, intArray0);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertEquals(5, intArray1.length);
      
      GrayImage grayImage2 = null;
      try {
        grayImage2 = new GrayImage(93, 70, intArray1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(2, 2).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn((ImageProducer) null).when(image0).getSource();
      doReturn(2, 2).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(image0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.PixelGrabber", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 3238);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(3238, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(3238, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals("0:3238\n", string0);
      
      GrayImage grayImage1 = grayImage0.addbuffer(0, 23, 10);
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(3238, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(23, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      Point point0 = new Point();
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertNotNull(point0);
      assertEquals(0.0, point0.getX(), 0.01);
      assertEquals(0.0, point0.getY(), 0.01);
      
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      assertNotNull(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 2;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(2, 2);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.addbuffer(8, 8, 0, 0, 0);
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(8, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(1, intArray0.length);
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals("0:1\n", string0);
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      GrayImage grayImage2 = grayImage1.add(23, rOI0);
      assertNotNull(grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(8, grayImage1.X());
      assertEquals(23, grayImage1.addSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(529L, grayImage1.sqrSum());
      assertEquals(23, grayImage1.absSum());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(8, grayImage2.X());
      assertEquals(8, grayImage2.Y());
      assertEquals(23, grayImage2.addSum());
      assertEquals(23, grayImage2.absSum());
      assertEquals(529L, grayImage2.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertEquals(1, intArray0.length);
      
      grayImage2.subtract(0, 0, 0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(8, grayImage1.X());
      assertEquals(23, grayImage1.addSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(529L, grayImage1.sqrSum());
      assertEquals(23, grayImage1.absSum());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(8, grayImage2.X());
      assertEquals(8, grayImage2.Y());
      assertEquals(23, grayImage2.addSum());
      assertEquals(23, grayImage2.absSum());
      assertEquals(529L, grayImage2.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage3 = grayImage0.copy();
      assertNotNull(grayImage3);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage2);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.absSum());
      assertEquals(1, grayImage3.Y());
      assertEquals(0, grayImage3.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertEquals(1, intArray0.length);
      
      rOI0.setROI(8, (-1126), 23, 972);
      assertEquals(8, rOI0.ux());
      assertEquals(2099, rOI0.Y());
      assertEquals(972, rOI0.ly());
      assertEquals(16, rOI0.X());
      assertEquals(23, rOI0.lx());
      assertEquals((-1126), rOI0.uy());
      
      ROI rOI1 = new ROI((-1309), (-1), (-1309), (-1345));
      assertNotNull(rOI1);
      assertEquals(1, rOI1.X());
      assertEquals((-1309), rOI1.ux());
      assertEquals((-1345), rOI1.uy());
      assertEquals((-1309), rOI1.lx());
      assertEquals((-1), rOI1.ly());
      assertEquals(1345, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        grayImage2.copy(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1345
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 5;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 5;
      intArray0[7] = 5;
      GrayImage grayImage0 = new GrayImage(5, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(5, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 5, 5}, intArray0);
      assertEquals(8, intArray0.length);
      
      ROI rOI0 = new ROI(94, 0, 5, 5);
      assertNotNull(rOI0);
      assertEquals(5, rOI0.ux());
      assertEquals(94, rOI0.lx());
      assertEquals(6, rOI0.Y());
      assertEquals(90, rOI0.X());
      assertEquals(5, rOI0.ly());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        grayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        GrayImage.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 7;
      intArray0[1] = 7;
      intArray0[2] = 5;
      intArray0[3] = 7;
      intArray0[4] = 7;
      intArray0[5] = 7;
      int[][] intArray1 = new int[0][3];
      GrayImage grayImage0 = new GrayImage(intArray1);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, intArray1.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        grayImage0.divide(7, (-2498), 7, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2498
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "$VALUES";
      // Undeclared exception!
      try { 
        GrayImage.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">{!-P[3yv9H";
      stringArray0[1] = ">{!-P[3yv9H";
      int int0 = 0;
      GrayImage grayImage0 = new GrayImage(0, 0, (int[]) null);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      
      int int1 = 2197;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      // Undeclared exception!
      try { 
        grayImage0.set(2197, 0, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 5;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 5;
      intArray0[7] = 5;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 5);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(5, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      
      ROI rOI0 = new ROI(70, 0, 5, 5);
      assertNotNull(rOI0);
      assertEquals(6, rOI0.Y());
      assertEquals(5, rOI0.ly());
      assertEquals(70, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(5, rOI0.ux());
      assertEquals(66, rOI0.X());
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.clear((Integer) 5);
      assertNotNull(interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(5, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(5, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      
      String string0 = interpolatedGrayImage1.toString();
      assertNotNull(string0);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(5, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(5, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals("0:5\n", string0);
      
      Integer integer0 = interpolatedGrayImage1.min();
      assertNull(integer0);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(5, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(5, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      assertNotNull(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      
      ROI rOI1 = null;
      Integer integer1 = interpolatedGrayImage0.min();
      assertNull(integer1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(5, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      
      int int0 = 71;
      GrayImage grayImage0 = interpolatedGrayImage1.addbuffer(71, 5, 5);
      assertNotNull(grayImage0);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertEquals(1775, grayImage0.absSum());
      assertEquals(71, grayImage0.X());
      assertEquals(5, grayImage0.Y());
      assertEquals(8875L, grayImage0.sqrSum());
      assertEquals(1775, grayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(5, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(5, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      
      int int1 = (-2099);
      int int2 = 71;
      try { 
        Integer.parseInt("RGB");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"RGB\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      int int0 = 5;
      int int1 = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(5, 103);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(5, interpolatedGrayImage0.X());
      assertEquals(103, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      int int2 = integer0.intValue();
      assertEquals(200, int2);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer1);
      assertEquals(100, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int1));
      
      int int3 = integer1.intValue();
      assertEquals(100, int3);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      float float0 = integer1.floatValue();
      assertEquals(100.0F, float0, 0.01F);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int1));
      
      jigl.image.Image<Integer> image0 = interpolatedGrayImage0.clear((Integer) 100);
      assertNotNull(image0);
      assertSame(interpolatedGrayImage0, image0);
      assertEquals(5, interpolatedGrayImage0.X());
      assertEquals(103, interpolatedGrayImage0.Y());
      assertEquals(51500, interpolatedGrayImage0.addSum());
      assertEquals(5150000L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(51500, interpolatedGrayImage0.absSum());
      assertEquals(5, image0.X());
      assertEquals(103, image0.Y());
      
      int int4 = new Integer(0);
      assertEquals(0, int4);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      
      // Undeclared exception!
      interpolatedGrayImage0.median(95);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[][] intArray0 = new int[1][5];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, intArray0.length);
      
      Integer integer0 = grayImage0.min();
      assertNull(integer0);
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.addbuffer(8, 8, 0, 0, 0);
      assertNotNull(grayImage1);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(8, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage2 = grayImage1.copy();
      assertNotNull(grayImage2);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(8, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(8, grayImage2.X());
      assertEquals(8, grayImage2.Y());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertEquals(1, intArray0.length);
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals("0:1\n", string0);
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage3 = new GrayImage(grayImage2);
      assertNotNull(grayImage3);
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(8, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(8, grayImage2.X());
      assertEquals(8, grayImage2.Y());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage3.addSum());
      assertEquals(8, grayImage3.Y());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(8, grayImage3.X());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage4 = grayImage0.addbuffer(8, 0, 531);
      assertNotNull(grayImage4);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage4);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage4, grayImage1);
      assertNotSame(grayImage4, grayImage3);
      assertNotSame(grayImage4, grayImage0);
      assertNotSame(grayImage4, grayImage2);
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage4.absSum());
      assertEquals(8, grayImage4.X());
      assertEquals(0L, grayImage4.sqrSum());
      assertEquals(0, grayImage4.addSum());
      assertEquals(0, grayImage4.Y());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage1));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage5 = grayImage4.copy();
      assertNotNull(grayImage5);
      assertNotSame(grayImage0, grayImage5);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage4);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage4, grayImage1);
      assertNotSame(grayImage4, grayImage3);
      assertNotSame(grayImage4, grayImage0);
      assertNotSame(grayImage4, grayImage5);
      assertNotSame(grayImage4, grayImage2);
      assertNotSame(grayImage5, grayImage4);
      assertNotSame(grayImage5, grayImage2);
      assertNotSame(grayImage5, grayImage1);
      assertNotSame(grayImage5, grayImage3);
      assertNotSame(grayImage5, grayImage0);
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage4.absSum());
      assertEquals(8, grayImage4.X());
      assertEquals(0L, grayImage4.sqrSum());
      assertEquals(0, grayImage4.addSum());
      assertEquals(0, grayImage4.Y());
      assertEquals(0, grayImage5.absSum());
      assertEquals(0, grayImage5.Y());
      assertEquals(0, grayImage5.addSum());
      assertEquals(0L, grayImage5.sqrSum());
      assertEquals(8, grayImage5.X());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage4));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage1));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertFalse(grayImage5.equals((Object)grayImage4));
      assertFalse(grayImage5.equals((Object)grayImage2));
      assertFalse(grayImage5.equals((Object)grayImage1));
      assertFalse(grayImage5.equals((Object)grayImage3));
      assertFalse(grayImage5.equals((Object)grayImage0));
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage6 = grayImage5.multiply((jigl.image.Image<Integer>) grayImage1);
      assertNotNull(grayImage6);
      assertNotSame(grayImage0, grayImage5);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage4);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage6);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage6);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage3);
      assertNotSame(grayImage1, grayImage4);
      assertNotSame(grayImage1, grayImage5);
      assertNotSame(grayImage4, grayImage6);
      assertNotSame(grayImage4, grayImage1);
      assertNotSame(grayImage4, grayImage3);
      assertNotSame(grayImage4, grayImage0);
      assertNotSame(grayImage4, grayImage5);
      assertNotSame(grayImage4, grayImage2);
      assertNotSame(grayImage5, grayImage4);
      assertNotSame(grayImage5, grayImage2);
      assertSame(grayImage5, grayImage6);
      assertNotSame(grayImage5, grayImage1);
      assertNotSame(grayImage5, grayImage3);
      assertNotSame(grayImage5, grayImage0);
      assertNotSame(grayImage6, grayImage1);
      assertNotSame(grayImage6, grayImage4);
      assertNotSame(grayImage6, grayImage0);
      assertNotSame(grayImage6, grayImage2);
      assertNotSame(grayImage6, grayImage3);
      assertSame(grayImage6, grayImage5);
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(8, grayImage1.Y());
      assertEquals(8, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage4.absSum());
      assertEquals(8, grayImage4.X());
      assertEquals(0L, grayImage4.sqrSum());
      assertEquals(0, grayImage4.addSum());
      assertEquals(0, grayImage4.Y());
      assertEquals(0, grayImage5.absSum());
      assertEquals(0, grayImage5.Y());
      assertEquals(0, grayImage5.addSum());
      assertEquals(0L, grayImage5.sqrSum());
      assertEquals(8, grayImage5.X());
      assertEquals(8, grayImage6.X());
      assertEquals(0, grayImage6.absSum());
      assertEquals(0, grayImage6.addSum());
      assertEquals(0, grayImage6.Y());
      assertEquals(0L, grayImage6.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage5));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage4));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage4));
      assertFalse(grayImage1.equals((Object)grayImage5));
      assertFalse(grayImage4.equals((Object)grayImage1));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage5));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertFalse(grayImage5.equals((Object)grayImage4));
      assertFalse(grayImage5.equals((Object)grayImage2));
      assertFalse(grayImage5.equals((Object)grayImage1));
      assertFalse(grayImage5.equals((Object)grayImage3));
      assertFalse(grayImage5.equals((Object)grayImage0));
      assertFalse(grayImage6.equals((Object)grayImage1));
      assertFalse(grayImage6.equals((Object)grayImage4));
      assertFalse(grayImage6.equals((Object)grayImage0));
      assertFalse(grayImage6.equals((Object)grayImage2));
      assertFalse(grayImage6.equals((Object)grayImage3));
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ROI rOI1 = new ROI(0, (-16777216), 0, 255);
      assertNotNull(rOI1);
      assertEquals(255, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(16777472, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals((-16777216), rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int0 = rOI1.X();
      assertNotSame(rOI1, rOI0);
      assertEquals(255, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(16777472, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals((-16777216), rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, int0);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(255, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(16777472, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals((-16777216), rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(16777472, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      
      int int2 = rOI1.X();
      assertNotSame(rOI1, rOI0);
      assertEquals(255, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(16777472, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals((-16777216), rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        grayImage0.clip(2536, 1277, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 103);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(103, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      int int0 = integer0.intValue();
      assertEquals(200, int0);
      
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer1);
      assertEquals(400, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      int int1 = integer1.intValue();
      assertEquals(400, int1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(int1 == int0);
      
      float float0 = integer1.floatValue();
      assertEquals(400.0F, float0, 0.01F);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      
      jigl.image.Image<Integer> image0 = interpolatedGrayImage0.clear((Integer) 400);
      assertNotNull(image0);
      assertSame(interpolatedGrayImage0, image0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(103, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(103, image0.Y());
      assertEquals(0, image0.X());
      
      Integer integer2 = image0.min();
      assertNull(integer2);
      assertSame(interpolatedGrayImage0, image0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(103, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(103, image0.Y());
      assertEquals(0, image0.X());
      
      int int2 = Integer.compareUnsigned(400, 0);
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      interpolatedGrayImage0.median(95);
      assertSame(interpolatedGrayImage0, image0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(103, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.X());
      
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.clip(0, 5, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[2] = 5;
      GrayImage grayImage0 = new GrayImage(128, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(128, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      int int0 = ((Integer)0).intValue();
      assertEquals(0, int0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      float float0 = integer0.floatValue();
      assertEquals((-30000.0F), float0, 0.01F);
      assertFalse(integer0.equals((Object)int0));
      
      GrayImage grayImage1 = grayImage0.clear(integer0);
      assertNotNull(grayImage1);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(128, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(128, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertFalse(integer0.equals((Object)int0));
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      GrayImage grayImage2 = grayImage0.subtract(0);
      assertNotNull(grayImage2);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(128, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(128, grayImage2.X());
      assertEquals(0, grayImage2.Y());
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      GrayImage grayImage3 = grayImage2.copy();
      assertNotNull(grayImage3);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage2, grayImage3);
      assertSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage2);
      assertNotSame(grayImage3, grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(128, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(128, grayImage2.X());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.absSum());
      assertEquals(128, grayImage3.X());
      assertEquals(0, grayImage3.Y());
      assertEquals(0L, grayImage3.sqrSum());
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = grayImage1.addSum();
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage1, grayImage3);
      assertSame(grayImage1, grayImage2);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(128, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(128, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, int1);
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 5, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage3.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 110;
      KernelType kernelType0 = KernelType.D_XY;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertNotNull(imageKernel0);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(4.0, imageKernel0.sqrSum(), 0.01);
      assertEquals((-1.0F), imageKernel0.min(), 0.01F);
      assertEquals(3, imageKernel0.Y());
      assertEquals(1.0F, imageKernel0.max(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertEquals(4.0F, imageKernel0.absSum(), 0.01F);
      
      ImageProducer imageProducer0 = imageKernel0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(4.0, imageKernel0.sqrSum(), 0.01);
      assertEquals((-1.0F), imageKernel0.min(), 0.01F);
      assertEquals(3, imageKernel0.Y());
      assertEquals(1.0F, imageKernel0.max(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertEquals(4.0F, imageKernel0.absSum(), 0.01F);
      
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(110, 110).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(imageProducer0).when(image0).getSource();
      doReturn(110, 110).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      GrayImage grayImage0 = new GrayImage(image0);
  }
}
