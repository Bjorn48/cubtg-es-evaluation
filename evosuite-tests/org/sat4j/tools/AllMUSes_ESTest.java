/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 08:00:41 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.cnf.CBClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractClauseSelectorSolver;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.AllMUSes;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AllMUSes_ESTest extends AllMUSes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int[] intArray0 = new int[4];
      intArray0[3] = 20;
      AbstractClauseSelectorSolver<DimacsOutputSolver> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<DimacsOutputSolver>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0, linkedList0).when(abstractClauseSelectorSolver0).getAddedVars();
      doReturn(true, false).when(abstractClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(abstractClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("2#(\u0006Y~er}iIB;N").when(abstractClauseSelectorSolver0).getLogPrefix();
      doReturn(true).when(abstractClauseSelectorSolver0).isVerbose();
      doReturn(intArray0).when(abstractClauseSelectorSolver0).model();
      doReturn(intArray0).when(abstractClauseSelectorSolver0).modelWithInternalVariables();
      doReturn(20).when(abstractClauseSelectorSolver0).nVars();
      linkedList0.add((Integer) intArray0[3]);
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((SolutionFoundListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 19
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2489;
      intArray0[1] = 2489;
      intArray0[2] = 2489;
      intArray0[3] = 2489;
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      CBClause cBClause0 = new CBClause(iVecInt0, iLits0);
      cBClause0.size();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, true, false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 2489, 2489).when(iSolver0).nVars();
      doReturn(cBClause0, cBClause0).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, false, false, false, false).when(iSolver0).isVerbose();
      doReturn((Object) intArray0, (Object) intArray0).when(iSolver0).modelWithInternalVariables();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      IVecInt iVecInt1 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(solutionCounter0, solutionCounter0, (ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      IVecInt iVecInt2 = VecInt.EMPTY;
      allMUSes0.computeAllMUSes(solutionFoundListener0);
      allMUSes0.computeAllMSS(iVecInt2, solutionFoundListener0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered(solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1325);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, false, false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, (-1325)).when(iSolver0).nVars();
      doReturn((IConstr) null, (IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((String) null).when(iSolver0).getLogPrefix();
      doReturn(false, false, false, true, false).when(iSolver0).isVerbose();
      doReturn((Object) intArray0, (Object) intArray0).when(iSolver0).modelWithInternalVariables();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      solutionCounter0.setTimeout(3420);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(solutionCounter0, solutionCounter0, (ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      IVecInt iVecInt1 = VecInt.EMPTY;
      solutionFoundListener0.onSolutionFound(iVecInt1);
      solutionFoundListener0.onUnsatTermination();
      allMUSes0.computeAllMUSes(solutionFoundListener0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes(iVecInt1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      allMUSes0.computeAllMUSes(solutionFoundListener0);
      List<IVecInt> list0 = allMUSes0.getMssList();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      solutionCounter0.setTimeout(0);
      solutionCounter0.countSolutions();
      solutionCounter0.lowerBound();
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(solutionCounter0, solutionCounter0, solutionCounter0, (ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      allMUSes0.computeAllMUSes();
      allMUSes0.computeAllMUSesOrdered((SolutionFoundListener) null);
      List<IVecInt> list0 = allMUSes0.computeAllMSS();
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      allMUSes0.computeAllMSS();
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((IVecInt) null, (SolutionFoundListener) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0).when(iSolver0).nVars();
      doReturn(false, false, false, false).when(iSolver0).isVerbose();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(solutionCounter0, solutionCounter0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      List<IVecInt> list0 = allMUSes0.computeAllMUSes(iVecInt0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[4];
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      CBClause cBClause0 = new CBClause(iVecInt0, iLits0);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, false, false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(iSolver0).model();
      doReturn(0, 0, 0, 2504, 2504).when(iSolver0).nVars();
      doReturn(cBClause0, (IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("#ZqY:#<O!M-;0Ue#Lm", "#ZqY:#<O!M-;0Ue#Lm").when(iSolver0).getLogPrefix();
      doReturn(false, false, false, false, true).when(iSolver0).isVerbose();
      doReturn(intArray0).when(iSolver0).modelWithInternalVariables();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      IVecInt iVecInt1 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(solutionCounter0, solutionCounter0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      IVecInt iVecInt2 = VecInt.EMPTY;
      allMUSes0.computeAllMSS(iVecInt2, solutionFoundListener0);
      List<IVecInt> list0 = allMUSes0.computeAllMUSes(iVecInt1);
      assertTrue(list0.contains(iVecInt2));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(iSolver0).nVars();
      doReturn(false, false).when(iSolver0).isVerbose();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(solutionCounter0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      IVecInt iVecInt0 = VecInt.EMPTY;
      List<IVecInt> list0 = allMUSes0.computeAllMSSOrdered(iVecInt0, solutionFoundListener0);
      assertFalse(list0.contains(iVecInt0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(iSolver0).nVars();
      doReturn(false, false).when(iSolver0).isVerbose();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(solutionCounter0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      List<IVecInt> list0 = allMUSes0.computeAllMSS(solutionFoundListener0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMSS(solutionFoundListener0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      IVecInt iVecInt0 = VecInt.EMPTY;
      List<IVecInt> list0 = allMUSes0.computeAllMSS(iVecInt0, solutionFoundListener0);
      assertTrue(list0.contains(iVecInt0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      List<IVecInt> list0 = allMUSes0.computeAllMSS(iVecInt0);
      assertTrue(list0.contains(iVecInt0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 967, (-1)).when(iSolver0).nVars();
      doReturn((String) null, (String) null).when(iSolver0).getLogPrefix();
      doReturn(false, false, false, false, true).when(iSolver0).isVerbose();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(solutionCounter0, solutionCounter0, solutionCounter0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      allMUSes0.computeAllMUSes(solutionFoundListener0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered(solutionFoundListener0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int[] intArray0 = new int[4];
      AbstractClauseSelectorSolver<DimacsOutputSolver> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<DimacsOutputSolver>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0, linkedList0).when(abstractClauseSelectorSolver0).getAddedVars();
      doReturn(false).when(abstractClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn("2#(\u0006Y~er}iIB;N").when(abstractClauseSelectorSolver0).getLogPrefix();
      doReturn(true, false).when(abstractClauseSelectorSolver0).isVerbose();
      doReturn(20).when(abstractClauseSelectorSolver0).nVars();
      linkedList0.add((Integer) intArray0[0]);
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered((SolutionFoundListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(statisticsSolver0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered((IVecInt) vecInt0, solutionFoundListener0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int[] intArray0 = new int[4];
      intArray0[0] = 20;
      intArray0[0] = 20;
      intArray0[2] = 20;
      AbstractClauseSelectorSolver<DimacsOutputSolver> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<DimacsOutputSolver>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0, linkedList0).when(abstractClauseSelectorSolver0).getAddedVars();
      doReturn(true, true).when(abstractClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(abstractClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((String) null).when(abstractClauseSelectorSolver0).getLogPrefix();
      doReturn(true).when(abstractClauseSelectorSolver0).isVerbose();
      doReturn((Object) intArray0, (Object) null).when(abstractClauseSelectorSolver0).model();
      doReturn((Object) intArray0, (Object) null).when(abstractClauseSelectorSolver0).modelWithInternalVariables();
      doReturn(20).when(abstractClauseSelectorSolver0).nVars();
      Integer integer0 = Integer.valueOf(0);
      linkedList0.add(integer0);
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      IVecInt iVecInt0 = VecInt.EMPTY;
      solutionFoundListener0.onSolutionFound(iVecInt0);
      solutionFoundListener0.onUnsatTermination();
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes(solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      GroupClauseSelectorSolver<StatisticsSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<StatisticsSolver>(statisticsSolver0);
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(groupClauseSelectorSolver0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((SolutionFoundListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 967, (-1)).when(iSolver0).nVars();
      doReturn((String) null, (String) null).when(iSolver0).getLogPrefix();
      doReturn(false, false, false, false, true).when(iSolver0).isVerbose();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(solutionCounter0, solutionCounter0, solutionCounter0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      allMUSes0.computeAllMUSesOrdered(solutionFoundListener0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes(solutionFoundListener0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[4];
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2489).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      CBClause cBClause0 = new CBClause(iVecInt0, iLits0);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, true, true).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(iSolver0).model();
      doReturn(0, 0, 0, 2489, 0).when(iSolver0).nVars();
      doReturn(cBClause0, cBClause0, cBClause0, cBClause0, cBClause0).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("#ZqY:#<O!M-;0Ue#Lm").when(iSolver0).getLogPrefix();
      doReturn(false, false, false, false, true).when(iSolver0).isVerbose();
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(iSolver0).modelWithInternalVariables();
      doReturn(false, false, false, false, false).when(iSolver0).removeSubsumedConstr(any(org.sat4j.specs.IConstr.class));
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      IVecInt iVecInt1 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(solutionCounter0, solutionCounter0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      allMUSes0.computeAllMSS();
      // Undeclared exception!
      allMUSes0.computeAllMUSes(iVecInt1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[4];
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      CBClause cBClause0 = new CBClause(iVecInt0, iLits0);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, true, true).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(iSolver0).model();
      doReturn(0, 0, 0, 2489, 0).when(iSolver0).nVars();
      doReturn(cBClause0, cBClause0, cBClause0, cBClause0, cBClause0).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("#ZqY:#<O!M-;0Ue#Lm").when(iSolver0).getLogPrefix();
      doReturn(false, false, false, false, true).when(iSolver0).isVerbose();
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(iSolver0).modelWithInternalVariables();
      doReturn(false, false, false, false, false).when(iSolver0).removeSubsumedConstr(any(org.sat4j.specs.IConstr.class));
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      IVecInt iVecInt1 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(solutionCounter0, solutionCounter0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      allMUSes0.computeAllMSS(iVecInt1);
      // Undeclared exception!
      allMUSes0.computeAllMUSes();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int[] intArray0 = new int[4];
      AbstractClauseSelectorSolver<DimacsOutputSolver> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<DimacsOutputSolver>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0, linkedList0).when(abstractClauseSelectorSolver0).getAddedVars();
      doReturn(true, false).when(abstractClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(abstractClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("2#(\u0006Y~er}iIB;N").when(abstractClauseSelectorSolver0).getLogPrefix();
      doReturn(true).when(abstractClauseSelectorSolver0).isVerbose();
      doReturn(intArray0).when(abstractClauseSelectorSolver0).model();
      doReturn(intArray0).when(abstractClauseSelectorSolver0).modelWithInternalVariables();
      doReturn(20).when(abstractClauseSelectorSolver0).nVars();
      linkedList0.add((Integer) intArray0[0]);
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSSOrdered(iVecInt0, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(solutionCounter0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = null;
      int[] intArray0 = new int[9];
      int int0 = Integer.MAX_VALUE;
      intArray0[0] = int0;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSSOrdered(vecInt0, solutionFoundListener0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int[] intArray0 = new int[4];
      intArray0[0] = 20;
      intArray0[0] = 20;
      intArray0[2] = 20;
      intArray0[3] = 20;
      boolean boolean0 = true;
      AbstractClauseSelectorSolver<DimacsOutputSolver> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<DimacsOutputSolver>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0).when(abstractClauseSelectorSolver0).getAddedVars();
      doReturn(true, true).when(abstractClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(abstractClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("2#(\u0006Y~er}iIB;N").when(abstractClauseSelectorSolver0).getLogPrefix();
      doReturn(true).when(abstractClauseSelectorSolver0).isVerbose();
      doReturn((Object) intArray0, (Object) null).when(abstractClauseSelectorSolver0).model();
      doReturn((Object) intArray0, (Object) null).when(abstractClauseSelectorSolver0).modelWithInternalVariables();
      doReturn(20).when(abstractClauseSelectorSolver0).nVars();
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((SolutionFoundListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int[] intArray0 = new int[4];
      AbstractClauseSelectorSolver<DimacsOutputSolver> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<DimacsOutputSolver>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0, linkedList0).when(abstractClauseSelectorSolver0).getAddedVars();
      doReturn(true, false).when(abstractClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(abstractClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("2qc`Y[uC").when(abstractClauseSelectorSolver0).getLogPrefix();
      doReturn(true).when(abstractClauseSelectorSolver0).isVerbose();
      doReturn(intArray0).when(abstractClauseSelectorSolver0).model();
      doReturn(intArray0).when(abstractClauseSelectorSolver0).modelWithInternalVariables();
      doReturn(20).when(abstractClauseSelectorSolver0).nVars();
      linkedList0.add((Integer) intArray0[0]);
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((SolutionFoundListener) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2504;
      intArray0[1] = 2504;
      intArray0[2] = 2504;
      intArray0[3] = 2504;
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, false, false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 2504, 0).when(iSolver0).nVars();
      doReturn((IConstr) null, (IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("org.sat4j.minisat.core.Solver$6", (String) null, (String) null, (String) null).when(iSolver0).getLogPrefix();
      doReturn(false, false, false, false, true).when(iSolver0).isVerbose();
      doReturn((Object) intArray0, (Object) intArray0).when(iSolver0).modelWithInternalVariables();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(solutionCounter0, solutionCounter0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      IVecInt iVecInt1 = VecInt.EMPTY;
      solutionFoundListener0.onSolutionFound(iVecInt1);
      solutionFoundListener0.onUnsatTermination();
      allMUSes0.computeAllMUSesOrdered(iVecInt0, solutionFoundListener0);
      List<IVecInt> list0 = allMUSes0.computeAllMSS(iVecInt1, solutionFoundListener0);
      assertTrue(list0.contains(iVecInt1));
      
      List<IVecInt> list1 = allMUSes0.computeAllMSS(solutionFoundListener0);
      assertTrue(list1.contains(iVecInt1));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      int[] intArray0 = new int[21];
      intArray0[0] = Integer.MAX_VALUE;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((IVecInt) vecInt0, (SolutionFoundListener) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[0];
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, false, false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, (-1325)).when(iSolver0).nVars();
      doReturn((IConstr) null, (IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, false, false, false, false).when(iSolver0).isVerbose();
      doReturn((Object) intArray0, (Object) intArray0).when(iSolver0).modelWithInternalVariables();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      solutionCounter0.setTimeout(3420);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(solutionCounter0, solutionCounter0, (ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      IVecInt iVecInt1 = VecInt.EMPTY;
      solutionFoundListener0.onSolutionFound(iVecInt1);
      solutionFoundListener0.onUnsatTermination();
      allMUSes0.computeAllMUSes(solutionFoundListener0);
      allMUSes0.computeAllMSS(iVecInt1);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes(iVecInt1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(statisticsSolver0).when(aSolverFactory0).defaultSolver();
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((IVecInt) vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      int[] intArray0 = new int[9];
      intArray0[0] = Integer.MAX_VALUE;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((IVecInt) vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      int[] intArray0 = new int[2];
      intArray0[0] = 20;
      AbstractClauseSelectorSolver<DimacsOutputSolver> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<DimacsOutputSolver>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0, linkedList0).when(abstractClauseSelectorSolver0).getAddedVars();
      doReturn(true, false).when(abstractClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(abstractClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("qLBR<YOp$'pdB2FB'p").when(abstractClauseSelectorSolver0).getLogPrefix();
      doReturn(true).when(abstractClauseSelectorSolver0).isVerbose();
      doReturn(intArray0).when(abstractClauseSelectorSolver0).model();
      doReturn(intArray0).when(abstractClauseSelectorSolver0).modelWithInternalVariables();
      doReturn(20).when(abstractClauseSelectorSolver0).nVars();
      Integer integer0 = Integer.valueOf(0);
      linkedList0.add(integer0);
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, true);
      AllMUSes allMUSes0 = new AllMUSes(fullClauseSelectorSolver0, lightFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AllMUSes allMUSes0 = null;
      try {
        allMUSes0 = new AllMUSes(false, (ASolverFactory<? extends ISolver>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AllMUSes allMUSes0 = null;
      try {
        allMUSes0 = new AllMUSes((ASolverFactory<? extends ISolver>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      IVecInt iVecInt0 = VecInt.EMPTY;
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS(iVecInt0, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((-4), (-4)).when(iSolver0).nVars();
      doReturn(false, false).when(iSolver0).isVerbose();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(solutionCounter0, solutionCounter0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered(iVecInt0, solutionFoundListener0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(true, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSesOrdered(iVecInt0, (SolutionFoundListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      allMUSes0.computeAllMUSes();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      IVecInt iVecInt0 = VecInt.EMPTY;
      List<IVecInt> list0 = allMUSes0.computeAllMUSesOrdered(iVecInt0, solutionFoundListener0);
      assertFalse(list0.contains(iVecInt0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      AbstractClauseSelectorSolver<DimacsStringSolver> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<DimacsStringSolver>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn((Collection) null).when(abstractClauseSelectorSolver0).getAddedVars();
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      IVecInt iVecInt0 = VecInt.EMPTY;
      solutionFoundListener0.onSolutionFound(iVecInt0);
      solutionFoundListener0.onUnsatTermination();
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes((IVecInt) null, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AllMUSes", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      allMUSes0.computeAllMUSes();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      IVecInt iVecInt0 = VecInt.EMPTY;
      List<IVecInt> list0 = allMUSes0.computeAllMUSes(iVecInt0, solutionFoundListener0);
      assertFalse(list0.contains(iVecInt0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(false, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      IVecInt iVecInt0 = VecInt.EMPTY;
      AllMUSes allMUSes0 = new AllMUSes(lightFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMSSOrdered(iVecInt0, solutionFoundListener0);
      assertTrue(list0.contains(iVecInt0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      AbstractClauseSelectorSolver<DimacsOutputSolver> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<DimacsOutputSolver>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0, linkedList0, (Collection) null).when(abstractClauseSelectorSolver0).getAddedVars();
      doReturn((String) null).when(abstractClauseSelectorSolver0).getLogPrefix();
      doReturn(true).when(abstractClauseSelectorSolver0).isVerbose();
      doReturn(20).when(abstractClauseSelectorSolver0).nVars();
      Integer integer0 = Integer.valueOf(0);
      linkedList0.add(integer0);
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMSS();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = 2489;
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(2489).when(iVecInt0).size();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      CBClause cBClause0 = new CBClause(iVecInt0, iLits0);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, false).when(iSolver0).isSatisfiable();
      doReturn(false, false, true, true, true).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(iSolver0).model();
      doReturn(0, 0, 0, 2489, 0).when(iSolver0).nVars();
      doReturn(cBClause0, cBClause0, cBClause0, cBClause0, cBClause0).when(iSolver0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn(cBClause0, cBClause0, cBClause0, cBClause0, cBClause0).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn("#ZqY:#<O!M-;0Ue#Lm").when(iSolver0).getLogPrefix();
      doReturn(false, false, false, false, true).when(iSolver0).isVerbose();
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0).when(iSolver0).modelWithInternalVariables();
      doReturn(true, false, false, true, true).when(iSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(solutionCounter0, solutionCounter0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      allMUSes0.computeAllMSS();
      // Undeclared exception!
      allMUSes0.computeAllMUSesOrdered(solutionFoundListener0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(iSolver0).isSatisfiable(anyBoolean());
      doReturn(0).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, false).when(iSolver0).isVerbose();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      solutionCounter0.addClause(iVecInt0);
      solutionCounter0.setTimeout(2623);
      solutionCounter0.countSolutions();
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(solutionCounter0, (ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      // Undeclared exception!
      try { 
        allMUSes0.computeAllMUSes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GroupClauseSelectorSolver<AbstractMinimalModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<AbstractMinimalModel>((AbstractMinimalModel) null);
      Collection<Integer> collection0 = groupClauseSelectorSolver0.getAddedVars();
      AbstractClauseSelectorSolver<DimacsOutputSolver> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<DimacsOutputSolver>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(collection0, collection0).when(abstractClauseSelectorSolver0).getAddedVars();
      doReturn(false).when(abstractClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn("", "", "").when(abstractClauseSelectorSolver0).getLogPrefix();
      doReturn(false, true, true, true).when(abstractClauseSelectorSolver0).isVerbose();
      doReturn((-1)).when(abstractClauseSelectorSolver0).nVars();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(statisticsSolver0).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      List<IVecInt> list0 = allMUSes0.computeAllMUSes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(false, aSolverFactory0);
      FullClauseSelectorSolver fullClauseSelectorSolver0 = (FullClauseSelectorSolver)allMUSes0.getSolverInstance();
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      AbstractClauseSelectorSolver<GateTranslator> abstractClauseSelectorSolver0 = (AbstractClauseSelectorSolver<GateTranslator>) mock(AbstractClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      AllMUSes allMUSes0 = new AllMUSes(abstractClauseSelectorSolver0, aSolverFactory0);
      allMUSes0.reset();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).defaultSolver();
      AllMUSes allMUSes0 = new AllMUSes(aSolverFactory0);
      List<IVecInt> list0 = allMUSes0.getMssList();
      assertEquals(0, list0.size());
  }
}
