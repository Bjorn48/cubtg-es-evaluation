/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:53:20 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.constraints.cnf.UnitClauses;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.FakeConstr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.Lbool;
import org.sat4j.tools.RupSearchListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RupSearchListener_ESTest extends RupSearchListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RupSearchListener<Solver<MixedDataStructureSingleWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureSingleWL>>("'S");
      MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams(1.0E-20, 1.0, 1.0E-20, 0);
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      ASolverFactory<Solver<MixedDataStructureSingleWL>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureSingleWL>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureSingleWL>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureSingleWL>>(aSolverFactory0);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(miniSATLearning0, mixedDataStructureSingleWL0, searchParams0, tabuListDecorator0, lubyRestarts0, basicLauncher0);
      rupSearchListener0.init(solver0);
      rupSearchListener0.learnUnit(304);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RupSearchListener<Solver<MixedDataStructureSingleWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureSingleWL>>("Xp");
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      rupSearchListener0.init((Solver<MixedDataStructureSingleWL>) null);
      IVecInt iVecInt0 = VecInt.EMPTY;
      Constr constr0 = cardinalityDataStructure0.createUnregisteredCardinalityConstraint(iVecInt0, (-2597));
      rupSearchListener0.learn(constr0);
      assertFalse(constr0.simplify());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RupSearchListener<Solver<MixedDataStructureSingleWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureSingleWL>>("");
      rupSearchListener0.init((Solver<MixedDataStructureSingleWL>) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, (-4008.3650790845));
      NoRestarts noRestarts0 = new NoRestarts();
      ASolverFactory<Solver<MixedDataStructureSingleWL>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureSingleWL>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureSingleWL>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureSingleWL>>(aSolverFactory0);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, (SearchParams) null, randomWalkDecorator0, noRestarts0, basicLauncher0);
      RupSearchListener<Solver<MixedDataStructureSingleWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureSingleWL>>("N|aS");
      rupSearchListener0.init(solver0);
      Lbool lbool0 = Lbool.FALSE;
      rupSearchListener0.end(lbool0);
      assertEquals("F", lbool0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      UnitClauses unitClauses0 = new UnitClauses(iVecInt0);
      RupSearchListener<Solver<MixedDataStructureSingleWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureSingleWL>>("+)%H?fi*6|e");
      // Undeclared exception!
      try { 
        rupSearchListener0.learn(unitClauses0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RupSearchListener<Solver<MixedDataStructureSingleWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureSingleWL>>("o");
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, searchParams0, tabuListDecorator0, miniSATRestarts0);
      rupSearchListener0.init(solver0);
      IConstr iConstr0 = FakeConstr.instance();
      // Undeclared exception!
      try { 
        rupSearchListener0.delete(iConstr0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Fake IConstr
         //
         verifyException("org.sat4j.specs.FakeConstr", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RupSearchListener<Solver<MixedDataStructureSingleWL>> rupSearchListener0 = null;
      try {
        rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureSingleWL>>((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Constr constr0 = cardinalityDataStructure0.createUnregisteredCardinalityConstraint(vecInt0, 0);
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, (-4008.3650790845));
      NoRestarts noRestarts0 = new NoRestarts();
      ASolverFactory<Solver<MixedDataStructureSingleWL>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureSingleWL>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureSingleWL>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureSingleWL>>(aSolverFactory0);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, (SearchParams) null, randomWalkDecorator0, noRestarts0, basicLauncher0);
      RupSearchListener<Solver<MixedDataStructureSingleWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureSingleWL>>("N|aS");
      rupSearchListener0.init(solver0);
      rupSearchListener0.delete(constr0);
      assertFalse(constr0.learnt());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RupSearchListener<Solver<MixedDataStructureSingleWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureSingleWL>>("'S");
      MiniSATLearning<MixedDataStructureSingleWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams(1.0E-20, 1.0, 1.0E-20, 0);
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      ASolverFactory<Solver<MixedDataStructureSingleWL>> aSolverFactory0 = (ASolverFactory<Solver<MixedDataStructureSingleWL>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<MixedDataStructureSingleWL>> basicLauncher0 = new BasicLauncher<Solver<MixedDataStructureSingleWL>>(aSolverFactory0);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(miniSATLearning0, mixedDataStructureSingleWL0, searchParams0, tabuListDecorator0, lubyRestarts0, basicLauncher0);
      rupSearchListener0.init(solver0);
      rupSearchListener0.end((Lbool) null);
      rupSearchListener0.end((Lbool) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RupSearchListener<Solver<MixedDataStructureSingleWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureSingleWL>>("N|aS");
      Lbool lbool0 = Lbool.FALSE;
      // Undeclared exception!
      try { 
        rupSearchListener0.end(lbool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.RupSearchListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RupSearchListener<Solver<MixedDataStructureSingleWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureSingleWL>>("'S");
      // Undeclared exception!
      try { 
        rupSearchListener0.learnUnit(304);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.RupSearchListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RupSearchListener<Solver<MixedDataStructureSingleWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureSingleWL>>("d ");
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>(124);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams(7);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0);
      rupSearchListener0.init(solver0);
      UnitClause unitClause0 = new UnitClause(3132);
      rupSearchListener0.learn(unitClause0);
      assertFalse(unitClause0.simplify());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Constr constr0 = cardinalityDataStructure0.createUnregisteredCardinalityConstraint(vecInt0, 0);
      RupSearchListener<Solver<MixedDataStructureSingleWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureSingleWL>>("N|aS");
      // Undeclared exception!
      try { 
        rupSearchListener0.delete(constr0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.RupSearchListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RupSearchListener<Solver<MixedDataStructureSingleWL>> rupSearchListener0 = new RupSearchListener<Solver<MixedDataStructureSingleWL>>("d ");
      UnitClause unitClause0 = new UnitClause(3132);
      // Undeclared exception!
      try { 
        rupSearchListener0.learn(unitClause0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.RupSearchListener", e);
      }
  }
}
