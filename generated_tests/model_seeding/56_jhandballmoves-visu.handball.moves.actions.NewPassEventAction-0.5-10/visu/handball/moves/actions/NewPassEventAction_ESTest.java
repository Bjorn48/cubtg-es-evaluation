/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 18:30:44 GMT 2019
 */

package visu.handball.moves.actions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.event.ActionEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import visu.handball.moves.actions.NewPassEventAction;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.MoveEvent;
import visu.handball.moves.model.player.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NewPassEventAction_ESTest extends NewPassEventAction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NewPassEventAction newPassEventAction0 = null;
      try {
        newPassEventAction0 = new NewPassEventAction((HandballModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visu.handball.moves.actions.NewPassEventAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      ActionEvent actionEvent0 = new ActionEvent(newPassEventAction0, (-1241), "", (-7));
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      doReturn((-1241), 0).when(player0).getCurrent_x();
      doReturn((-1241), 0).when(player0).getCurrent_y();
      doReturn(0, 0, 0, 0).when(player0).getPlayerNumber();
      doReturn(true, false, true, true).when(player0).hasBall();
      MoveEvent moveEvent0 = new MoveEvent(player0, (-30));
      moveEvent0.setDestinationPoint((-1241), 1, false);
      handballModel0.setActualMoveEvent(moveEvent0);
      newPassEventAction0.actionPerformed(actionEvent0);
      newPassEventAction0.actionPerformed(actionEvent0);
      assertEquals((-29), handballModel0.getAcutalSequenceNr());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      ActionEvent actionEvent0 = new ActionEvent(newPassEventAction0, (-1241), "", (-7));
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      doReturn((-1241), (-7)).when(player0).getCurrent_x();
      doReturn((-1241), (-1241)).when(player0).getCurrent_y();
      doReturn((-7), (-7), (-1241), (-1241)).when(player0).getPlayerNumber();
      doReturn(true, true).when(player0).hasBall();
      MoveEvent moveEvent0 = new MoveEvent(player0, (-7));
      handballModel0.setActualMoveEvent(moveEvent0);
      newPassEventAction0.actionPerformed(actionEvent0);
      moveEvent0.setDestinationPoint((-23), (-1), false);
      handballModel0.setActualMoveEvent(moveEvent0);
      assertEquals(HandballModel.State.EDIT, handballModel0.getState());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      doReturn((-1241)).when(player0).getCurrent_x();
      doReturn((-1241)).when(player0).getCurrent_y();
      doReturn(true, false).when(player0).hasBall();
      MoveEvent moveEvent0 = new MoveEvent(player0, (-30));
      moveEvent0.setDestinationPoint((-1241), 1, false);
      handballModel0.setActualMoveEvent(moveEvent0);
      newPassEventAction0.modelChanged();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      doReturn((-1218)).when(player0).getCurrent_x();
      doReturn((-1218)).when(player0).getCurrent_y();
      MoveEvent moveEvent0 = new MoveEvent(player0, (-1218));
      moveEvent0.setPlayer((Player) null);
      moveEvent0.setDestinationPoint((-1218), (-1218), false);
      handballModel0.setActualMoveEvent(moveEvent0);
      assertTrue(moveEvent0.isDestinationPointSet());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      ActionEvent actionEvent0 = new ActionEvent(newPassEventAction0, (-1241), "", (-7));
      newPassEventAction0.actionPerformed(actionEvent0);
      assertEquals((-7), actionEvent0.getModifiers());
  }
}
