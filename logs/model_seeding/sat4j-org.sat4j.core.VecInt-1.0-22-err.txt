[MASTER] 08:26:02.979 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 08:30:36.690 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_40_1550561436535/org/sat4j/core/VecInt_40_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_40_1550561436535/org/sat4j/core/VecInt_40_tmp__ESTest_scaffolding.java]]
[MASTER] 08:30:36.698 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 08:30:36.698 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 08:30:36.707 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$000(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 217
[MASTER] 08:30:36.708 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$100(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 244
[MASTER] 08:30:36.708 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_40_1550561436535/org/sat4j/core/VecInt_40_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 08:30:36.708 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 08:30:36.726 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_40_1550561436535/org/sat4j/core/VecInt_40_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Feb 19 07:30:36 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import java.util.Comparator;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.evosuite.runtime.ViolatedAssumptionAnswer;
15: import org.junit.runner.RunWith;
16: import org.sat4j.core.VecInt;
17: import org.sat4j.specs.IVecInt;
18: import org.sat4j.specs.IteratorInt;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
21: public class VecInt_40_tmp__ESTest extends VecInt_40_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       VecInt vecInt0 = new VecInt(208);
26:       assertTrue(vecInt0.isEmpty());
27:       assertEquals(0, vecInt0.size());
28:       assertNotNull(vecInt0);
29:       
30:       int[] intArray0 = new int[4];
31:       intArray0[0] = 208;
32:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
33:       vecInt0.sort((-1780), (-1780), comparator0);
34:       assertTrue(vecInt0.isEmpty());
35:       assertEquals(0, vecInt0.size());
36:       
37:       intArray0[1] = 208;
38:       intArray0[2] = 208;
39:       vecInt0.sortUnique();
40:       assertTrue(vecInt0.isEmpty());
41:       assertEquals(0, vecInt0.size());
42:       
43:       vecInt0.unsafePush(1718);
44:       assertFalse(vecInt0.isEmpty());
45:       assertEquals(1718, vecInt0.last());
46:       assertEquals(1, vecInt0.size());
47:       
48:       intArray0[3] = 208;
49:       int[] intArray1 = new int[4];
50:       assertFalse(intArray1.equals((Object)intArray0));
51:       
52:       intArray1[0] = 1083;
53:       intArray1[1] = 0;
54:       intArray1[2] = (-598);
55:       intArray1[3] = 1917;
56:       VecInt vecInt1 = new VecInt(intArray1);
57:       assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
58:       assertFalse(vecInt1.isEmpty());
59:       assertEquals(1917, vecInt1.last());
60:       assertEquals(4, vecInt1.size());
61:       assertFalse(intArray1.equals((Object)intArray0));
62:       assertFalse(vecInt1.equals((Object)vecInt0));
63:       assertNotNull(vecInt1);
64:       assertEquals(4, intArray1.length);
65:       
66:       vecInt1.ensure(0);
67:       assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
68:       assertNotSame(intArray1, intArray0);
69:       assertNotSame(vecInt1, vecInt0);
70:       assertFalse(vecInt1.isEmpty());
71:       assertEquals(1917, vecInt1.last());
72:       assertEquals(4, vecInt1.size());
73:       assertFalse(intArray1.equals((Object)intArray0));
74:       assertFalse(vecInt1.equals((Object)vecInt0));
75:       assertEquals(4, intArray1.length);
76:       
77:       IVecInt iVecInt0 = vecInt1.clone();
78:       assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
79:       assertNotSame(iVecInt0, vecInt0);
80:       assertNotSame(iVecInt0, vecInt1);
81:       assertNotSame(intArray1, intArray0);
82:       assertNotSame(vecInt1, iVecInt0);
83:       assertNotSame(vecInt1, vecInt0);
84:       assertFalse(iVecInt0.isEmpty());
85:       assertEquals(4, iVecInt0.size());
86:       assertEquals(1917, iVecInt0.last());
87:       assertFalse(vecInt1.isEmpty());
88:       assertEquals(1917, vecInt1.last());
89:       assertEquals(4, vecInt1.size());
90:       assertTrue(iVecInt0.equals((Object)vecInt1));
91:       assertFalse(iVecInt0.equals((Object)vecInt0));
92:       assertFalse(intArray1.equals((Object)intArray0));
93:       assertFalse(vecInt1.equals((Object)vecInt0));
94:       assertNotNull(iVecInt0);
95:       assertEquals(4, intArray1.length);
96:       
97:       IteratorInt iteratorInt0 = iVecInt0.iterator();
98:       assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
99:       assertNotSame(iVecInt0, vecInt0);
100:       assertNotSame(iVecInt0, vecInt1);
101:       assertNotSame(intArray1, intArray0);
102:       assertNotSame(vecInt1, iVecInt0);
103:       assertNotSame(vecInt1, vecInt0);
104:       assertFalse(iVecInt0.isEmpty());
105:       assertEquals(4, iVecInt0.size());
106:       assertEquals(1917, iVecInt0.last());
107:       assertFalse(vecInt1.isEmpty());
108:       assertEquals(1917, vecInt1.last());
109:       assertEquals(4, vecInt1.size());
110:       assertTrue(iVecInt0.equals((Object)vecInt1));
111:       assertFalse(iVecInt0.equals((Object)vecInt0));
112:       assertFalse(intArray1.equals((Object)intArray0));
113:       assertTrue(vecInt1.equals((Object)iVecInt0));
114:       assertFalse(vecInt1.equals((Object)vecInt0));
115:       assertNotNull(iteratorInt0);
116:       assertEquals(4, intArray1.length);
117:       
118:       IteratorInt iteratorInt1 = iVecInt0.iterator();
119:       assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
120:       assertNotSame(iVecInt0, vecInt0);
121:       assertNotSame(iVecInt0, vecInt1);
122:       assertNotSame(iteratorInt1, iteratorInt0);
123:       assertNotSame(intArray1, intArray0);
124:       assertNotSame(vecInt1, iVecInt0);
125:       assertNotSame(vecInt1, vecInt0);
126:       assertFalse(iVecInt0.isEmpty());
127:       assertEquals(4, iVecInt0.size());
128:       assertEquals(1917, iVecInt0.last());
129:       assertFalse(vecInt1.isEmpty());
130:       assertEquals(1917, vecInt1.last());
131:       assertEquals(4, vecInt1.size());
132:       assertTrue(iVecInt0.equals((Object)vecInt1));
133:       assertFalse(iVecInt0.equals((Object)vecInt0));
134:       assertFalse(iteratorInt1.equals((Object)iteratorInt0));
135:       assertFalse(intArray1.equals((Object)intArray0));
136:       assertTrue(vecInt1.equals((Object)iVecInt0));
137:       assertFalse(vecInt1.equals((Object)vecInt0));
138:       assertNotNull(iteratorInt1);
139:       assertEquals(4, intArray1.length);
140:       
141:       vecInt1.copyTo(iVecInt0);
142:       assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
143:       assertNotSame(iVecInt0, vecInt0);
144:       assertNotSame(iVecInt0, vecInt1);
145:       assertNotSame(intArray1, intArray0);
146:       assertNotSame(vecInt1, iVecInt0);
147:       assertNotSame(vecInt1, vecInt0);
148:       assertFalse(iVecInt0.isEmpty());
149:       assertEquals(8, iVecInt0.size());
150:       assertEquals(1917, iVecInt0.last());
151:       assertFalse(vecInt1.isEmpty());
152:       assertEquals(1917, vecInt1.last());
153:       assertEquals(4, vecInt1.size());
154:       assertFalse(iVecInt0.equals((Object)vecInt0));
155:       assertFalse(iVecInt0.equals((Object)vecInt1));
156:       assertFalse(intArray1.equals((Object)intArray0));
157:       assertFalse(vecInt1.equals((Object)iVecInt0));
158:       assertFalse(vecInt1.equals((Object)vecInt0));
159:       assertEquals(4, intArray1.length);
160:       
161:       vecInt0.copyTo(iVecInt0);
162:       assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
163:       assertNotSame(vecInt0, iVecInt0);
164:       assertNotSame(vecInt0, vecInt1);
165:       assertNotSame(iVecInt0, vecInt0);
166:       assertNotSame(iVecInt0, vecInt1);
167:       assertNotSame(intArray1, intArray0);
168:       assertNotSame(vecInt1, iVecInt0);
169:       assertNotSame(vecInt1, vecInt0);
170:       assertFalse(vecInt0.isEmpty());
171:       assertEquals(1718, vecInt0.last());
172:       assertEquals(1, vecInt0.size());
173:       assertFalse(iVecInt0.isEmpty());
174:       assertEquals(1718, iVecInt0.last());
175:       assertEquals(9, iVecInt0.size());
176:       assertFalse(vecInt1.isEmpty());
177:       assertEquals(1917, vecInt1.last());
178:       assertEquals(4, vecInt1.size());
179:       assertFalse(vecInt0.equals((Object)iVecInt0));
180:       assertFalse(vecInt0.equals((Object)vecInt1));
181:       assertFalse(iVecInt0.equals((Object)vecInt0));
182:       assertFalse(iVecInt0.equals((Object)vecInt1));
183:       assertFalse(intArray1.equals((Object)intArray0));
184:       assertFalse(vecInt1.equals((Object)iVecInt0));
185:       assertFalse(vecInt1.equals((Object)vecInt0));
186:       assertEquals(4, intArray1.length);
187:       
188:       int int0 = iVecInt0.last();
189:       assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
190:       assertNotSame(iVecInt0, vecInt0);
191:       assertNotSame(iVecInt0, vecInt1);
192:       assertNotSame(intArray1, intArray0);
193:       assertNotSame(vecInt1, iVecInt0);
194:       assertNotSame(vecInt1, vecInt0);
195:       assertFalse(iVecInt0.isEmpty());
196:       assertEquals(1718, iVecInt0.last());
197:       assertEquals(9, iVecInt0.size());
198:       assertFalse(vecInt1.isEmpty());
199:       assertEquals(1917, vecInt1.last());
200:       assertEquals(4, vecInt1.size());
201:       assertFalse(iVecInt0.equals((Object)vecInt0));
202:       assertFalse(iVecInt0.equals((Object)vecInt1));
203:       assertFalse(intArray1.equals((Object)intArray0));
204:       assertFalse(vecInt1.equals((Object)iVecInt0));
205:       assertFalse(vecInt1.equals((Object)vecInt0));
206:       assertEquals(1718, int0);
207:       assertEquals(4, intArray1.length);
208:       
209:       VecInt vecInt2 = new VecInt();
210:       assertTrue(vecInt2.isEmpty());
211:       assertEquals(0, vecInt2.size());
212:       assertFalse(vecInt2.equals((Object)vecInt0));
213:       assertFalse(vecInt2.equals((Object)iVecInt0));
214:       assertFalse(vecInt2.equals((Object)vecInt1));
215:       assertNotNull(vecInt2);
216:       
217:       int int1 = VecInt.access$000(vecInt2);
218:       assertNotSame(vecInt2, vecInt0);
219:       assertNotSame(vecInt2, iVecInt0);
220:       assertNotSame(vecInt2, vecInt1);
221:       assertTrue(vecInt2.isEmpty());
222:       assertEquals(0, vecInt2.size());
223:       assertFalse(vecInt2.equals((Object)vecInt0));
224:       assertFalse(vecInt2.equals((Object)iVecInt0));
225:       assertFalse(vecInt2.equals((Object)vecInt1));
226:       assertFalse(int1 == int0);
227:       assertEquals(0, int1);
228:       
229:       VecInt vecInt3 = new VecInt(int1, int1);
230:       assertTrue(vecInt2.isEmpty());
231:       assertEquals(0, vecInt2.size());
232:       assertEquals(0, vecInt3.size());
233:       assertTrue(vecInt3.isEmpty());
234:       assertFalse(vecInt2.equals((Object)vecInt0));
235:       assertFalse(vecInt2.equals((Object)iVecInt0));
236:       assertFalse(vecInt2.equals((Object)vecInt1));
237:       assertFalse(int1 == int0);
238:       assertFalse(vecInt3.equals((Object)iVecInt0));
239:       assertFalse(vecInt3.equals((Object)vecInt0));
240:       assertFalse(vecInt3.equals((Object)vecInt1));
241:       assertTrue(vecInt3.equals((Object)vecInt2));
242:       assertNotNull(vecInt3);
243:       
244:       int[] intArray2 = VecInt.access$100(vecInt3);
245:       assertArrayEquals(new int[] {}, intArray2);
246:       assertNotSame(vecInt2, vecInt3);
247:       assertNotSame(vecInt2, vecInt0);
248:       assertNotSame(vecInt2, iVecInt0);
249:       assertNotSame(vecInt2, vecInt1);
250:       assertNotSame(vecInt3, iVecInt0);
251:       assertNotSame(vecInt3, vecInt0);
252:       assertNotSame(vecInt3, vecInt2);
253:       assertNotSame(vecInt3, vecInt1);
254:       assertNotSame(intArray2, intArray1);
255:       assertNotSame(intArray2, intArray0);
256:       assertTrue(vecInt2.isEmpty());
257:       assertEquals(0, vecInt2.size());
258:       assertEquals(0, vecInt3.size());
259:       assertTrue(vecInt3.isEmpty());
260:       assertFalse(vecInt2.equals((Object)vecInt0));
261:       assertTrue(vecInt2.equals((Object)vecInt3));
262:       assertFalse(vecInt2.equals((Object)iVecInt0));
263:       assertFalse(vecInt2.equals((Object)vecInt1));
264:       assertFalse(int1 == int0);
265:       assertFalse(vecInt3.equals((Object)iVecInt0));
266:       assertFalse(vecInt3.equals((Object)vecInt0));
267:       assertFalse(vecInt3.equals((Object)vecInt1));
268:       assertTrue(vecInt3.equals((Object)vecInt2));
269:       assertFalse(intArray2.equals((Object)intArray1));
270:       assertFalse(intArray2.equals((Object)intArray0));
271:       assertNotNull(intArray2);
272:       assertEquals(0, intArray2.length);
273:       
274:       vecInt3.pushAll(iVecInt0);
275:       assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
276:       assertNotSame(iVecInt0, vecInt3);
277:       assertNotSame(iVecInt0, vecInt0);
278:       assertNotSame(iVecInt0, vecInt2);
279:       assertNotSame(iVecInt0, vecInt1);
280:       assertNotSame(vecInt2, vecInt3);
281:       assertNotSame(vecInt2, vecInt0);
282:       assertNotSame(vecInt2, iVecInt0);
283:       assertNotSame(vecInt2, vecInt1);
284:       assertNotSame(vecInt3, iVecInt0);
285:       assertNotSame(vecInt3, vecInt0);
286:       assertNotSame(vecInt3, vecInt2);
287:       assertNotSame(vecInt3, vecInt1);
288:       assertNotSame(intArray1, intArray0);
289:       assertNotSame(intArray1, intArray2);
290:       assertNotSame(vecInt1, iVecInt0);
291:       assertNotSame(vecInt1, vecInt3);
292:       assertNotSame(vecInt1, vecInt0);
293:       assertNotSame(vecInt1, vecInt2);
294:       assertFalse(iVecInt0.isEmpty());
295:       assertEquals(1718, iVecInt0.last());
296:       assertEquals(9, iVecInt0.size());
297:       assertTrue(vecInt2.isEmpty());
298:       assertEquals(0, vecInt2.size());
299:       assertFalse(vecInt3.isEmpty());
300:       assertEquals(1718, vecInt3.last());
301:       assertEquals(9, vecInt3.size());
302:       assertFalse(vecInt1.isEmpty());
303:       assertEquals(1917, vecInt1.last());
304:       assertEquals(4, vecInt1.size());
305:       assertTrue(iVecInt0.equals((Object)vecInt3));
306:       assertFalse(iVecInt0.equals((Object)vecInt0));
307:       assertFalse(iVecInt0.equals((Object)vecInt2));
308:       assertFalse(iVecInt0.equals((Object)vecInt1));
309:       assertFalse(vecInt2.equals((Object)vecInt3));
310:       assertFalse(vecInt2.equals((Object)vecInt0));
311:       assertFalse(vecInt2.equals((Object)iVecInt0));
312:       assertFalse(vecInt2.equals((Object)vecInt1));
313:       assertFalse(int1 == int0);
314:       assertFalse(vecInt3.equals((Object)vecInt0));
315:       assertFalse(vecInt3.equals((Object)vecInt2));
316:       assertFalse(vecInt3.equals((Object)vecInt1));
317:       assertTrue(vecInt3.equals((Object)iVecInt0));
318:       assertFalse(intArray1.equals((Object)intArray0));
319:       assertFalse(intArray1.equals((Object)intArray2));
320:       assertFalse(vecInt1.equals((Object)iVecInt0));
321:       assertFalse(vecInt1.equals((Object)vecInt3));
322:       assertFalse(vecInt1.equals((Object)vecInt0));
323:       assertFalse(vecInt1.equals((Object)vecInt2));
324:       assertEquals(4, intArray1.length);
325:       
326:       vecInt2.shrink(intArray0[3]);
327:       assertArrayEquals(new int[] {208, 208, 208, 208}, intArray0);
328:       assertNotSame(intArray0, intArray1);
329:       assertNotSame(intArray0, intArray2);
330:       assertNotSame(vecInt2, vecInt3);
331:       assertNotSame(vecInt2, vecInt0);
332:       assertNotSame(vecInt2, iVecInt0);
333:       assertNotSame(vecInt2, vecInt1);
334:       assertEquals((-208), vecInt2.size());
335:       assertFalse(vecInt2.isEmpty());
336:       assertFalse(intArray0.equals((Object)intArray1));
337:       assertFalse(intArray0.equals((Object)intArray2));
338:       assertFalse(vecInt2.equals((Object)vecInt3));
339:       assertFalse(vecInt2.equals((Object)vecInt0));
340:       assertFalse(vecInt2.equals((Object)iVecInt0));
341:       assertFalse(vecInt2.equals((Object)vecInt1));
342:       assertEquals(4, intArray0.length);
343:   }
344: }
RegularFileObject[/tmp/EvoSuite_40_1550561436535/org/sat4j/core/VecInt_40_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Feb 19 07:30:36 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class VecInt_40_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.VecInt"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(VecInt_40_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.sat4j.core.ReadOnlyVecInt",
84:       "org.sat4j.specs.IteratorInt",
85:       "org.sat4j.core.VecInt$1",
86:       "org.sat4j.specs.IVecInt",
87:       "org.sat4j.core.EmptyVecInt",
88:       "org.sat4j.core.VecInt"
89:     );
90:   } 
91:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
92:     mock(Class.forName("java.util.Comparator", false, VecInt_40_tmp__ESTest_scaffolding.class.getClassLoader()));
93:   }
94: 
95:   private static void resetClasses() {
96:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(VecInt_40_tmp__ESTest_scaffolding.class.getClassLoader()); 
97: 
98:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
99:       "org.sat4j.core.EmptyVecInt",
100:       "org.sat4j.core.VecInt",
101:       "org.sat4j.core.VecInt$1",
102:       "org.sat4j.core.ReadOnlyVecInt"
103:     );
104:   }
105: }

[MASTER] 08:30:36.732 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
VecInt vecInt0 = new VecInt(208);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());
assertNotNull(vecInt0);

int[] intArray0 = new int[4];
intArray0[0] = 208;
Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
vecInt0.sort((-1780), (-1780), comparator0);
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

intArray0[1] = 208;
intArray0[2] = 208;
vecInt0.sortUnique();
assertTrue(vecInt0.isEmpty());
assertEquals(0, vecInt0.size());

vecInt0.unsafePush(1718);
assertFalse(vecInt0.isEmpty());
assertEquals(1718, vecInt0.last());
assertEquals(1, vecInt0.size());

intArray0[3] = 208;
int[] intArray1 = new int[4];
assertFalse(intArray1.equals((Object)intArray0));

intArray1[0] = 1083;
intArray1[1] = 0;
intArray1[2] = (-598);
intArray1[3] = 1917;
VecInt vecInt1 = new VecInt(intArray1);
assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
assertFalse(vecInt1.isEmpty());
assertEquals(1917, vecInt1.last());
assertEquals(4, vecInt1.size());
assertFalse(intArray1.equals((Object)intArray0));
assertFalse(vecInt1.equals((Object)vecInt0));
assertNotNull(vecInt1);
assertEquals(4, intArray1.length);

vecInt1.ensure(0);
assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
assertNotSame(intArray1, intArray0);
assertNotSame(vecInt1, vecInt0);
assertFalse(vecInt1.isEmpty());
assertEquals(1917, vecInt1.last());
assertEquals(4, vecInt1.size());
assertFalse(intArray1.equals((Object)intArray0));
assertFalse(vecInt1.equals((Object)vecInt0));
assertEquals(4, intArray1.length);

IVecInt iVecInt0 = vecInt1.clone();
assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
assertNotSame(iVecInt0, vecInt0);
assertNotSame(iVecInt0, vecInt1);
assertNotSame(intArray1, intArray0);
assertNotSame(vecInt1, iVecInt0);
assertNotSame(vecInt1, vecInt0);
assertFalse(iVecInt0.isEmpty());
assertEquals(4, iVecInt0.size());
assertEquals(1917, iVecInt0.last());
assertFalse(vecInt1.isEmpty());
assertEquals(1917, vecInt1.last());
assertEquals(4, vecInt1.size());
assertTrue(iVecInt0.equals((Object)vecInt1));
assertFalse(iVecInt0.equals((Object)vecInt0));
assertFalse(intArray1.equals((Object)intArray0));
assertFalse(vecInt1.equals((Object)vecInt0));
assertNotNull(iVecInt0);
assertEquals(4, intArray1.length);

IteratorInt iteratorInt0 = iVecInt0.iterator();
assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
assertNotSame(iVecInt0, vecInt0);
assertNotSame(iVecInt0, vecInt1);
assertNotSame(intArray1, intArray0);
assertNotSame(vecInt1, iVecInt0);
assertNotSame(vecInt1, vecInt0);
assertFalse(iVecInt0.isEmpty());
assertEquals(4, iVecInt0.size());
assertEquals(1917, iVecInt0.last());
assertFalse(vecInt1.isEmpty());
assertEquals(1917, vecInt1.last());
assertEquals(4, vecInt1.size());
assertTrue(iVecInt0.equals((Object)vecInt1));
assertFalse(iVecInt0.equals((Object)vecInt0));
assertFalse(intArray1.equals((Object)intArray0));
assertTrue(vecInt1.equals((Object)iVecInt0));
assertFalse(vecInt1.equals((Object)vecInt0));
assertNotNull(iteratorInt0);
assertEquals(4, intArray1.length);

IteratorInt iteratorInt1 = iVecInt0.iterator();
assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
assertNotSame(iVecInt0, vecInt0);
assertNotSame(iVecInt0, vecInt1);
assertNotSame(iteratorInt1, iteratorInt0);
assertNotSame(intArray1, intArray0);
assertNotSame(vecInt1, iVecInt0);
assertNotSame(vecInt1, vecInt0);
assertFalse(iVecInt0.isEmpty());
assertEquals(4, iVecInt0.size());
assertEquals(1917, iVecInt0.last());
assertFalse(vecInt1.isEmpty());
assertEquals(1917, vecInt1.last());
assertEquals(4, vecInt1.size());
assertTrue(iVecInt0.equals((Object)vecInt1));
assertFalse(iVecInt0.equals((Object)vecInt0));
assertFalse(iteratorInt1.equals((Object)iteratorInt0));
assertFalse(intArray1.equals((Object)intArray0));
assertTrue(vecInt1.equals((Object)iVecInt0));
assertFalse(vecInt1.equals((Object)vecInt0));
assertNotNull(iteratorInt1);
assertEquals(4, intArray1.length);

vecInt1.copyTo(iVecInt0);
assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
assertNotSame(iVecInt0, vecInt0);
assertNotSame(iVecInt0, vecInt1);
assertNotSame(intArray1, intArray0);
assertNotSame(vecInt1, iVecInt0);
assertNotSame(vecInt1, vecInt0);
assertFalse(iVecInt0.isEmpty());
assertEquals(8, iVecInt0.size());
assertEquals(1917, iVecInt0.last());
assertFalse(vecInt1.isEmpty());
assertEquals(1917, vecInt1.last());
assertEquals(4, vecInt1.size());
assertFalse(iVecInt0.equals((Object)vecInt0));
assertFalse(iVecInt0.equals((Object)vecInt1));
assertFalse(intArray1.equals((Object)intArray0));
assertFalse(vecInt1.equals((Object)iVecInt0));
assertFalse(vecInt1.equals((Object)vecInt0));
assertEquals(4, intArray1.length);

vecInt0.copyTo(iVecInt0);
assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
assertNotSame(vecInt0, iVecInt0);
assertNotSame(vecInt0, vecInt1);
assertNotSame(iVecInt0, vecInt0);
assertNotSame(iVecInt0, vecInt1);
assertNotSame(intArray1, intArray0);
assertNotSame(vecInt1, iVecInt0);
assertNotSame(vecInt1, vecInt0);
assertFalse(vecInt0.isEmpty());
assertEquals(1718, vecInt0.last());
assertEquals(1, vecInt0.size());
assertFalse(iVecInt0.isEmpty());
assertEquals(1718, iVecInt0.last());
assertEquals(9, iVecInt0.size());
assertFalse(vecInt1.isEmpty());
assertEquals(1917, vecInt1.last());
assertEquals(4, vecInt1.size());
assertFalse(vecInt0.equals((Object)iVecInt0));
assertFalse(vecInt0.equals((Object)vecInt1));
assertFalse(iVecInt0.equals((Object)vecInt0));
assertFalse(iVecInt0.equals((Object)vecInt1));
assertFalse(intArray1.equals((Object)intArray0));
assertFalse(vecInt1.equals((Object)iVecInt0));
assertFalse(vecInt1.equals((Object)vecInt0));
assertEquals(4, intArray1.length);

int int0 = iVecInt0.last();
assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
assertNotSame(iVecInt0, vecInt0);
assertNotSame(iVecInt0, vecInt1);
assertNotSame(intArray1, intArray0);
assertNotSame(vecInt1, iVecInt0);
assertNotSame(vecInt1, vecInt0);
assertFalse(iVecInt0.isEmpty());
assertEquals(1718, iVecInt0.last());
assertEquals(9, iVecInt0.size());
assertFalse(vecInt1.isEmpty());
assertEquals(1917, vecInt1.last());
assertEquals(4, vecInt1.size());
assertFalse(iVecInt0.equals((Object)vecInt0));
assertFalse(iVecInt0.equals((Object)vecInt1));
assertFalse(intArray1.equals((Object)intArray0));
assertFalse(vecInt1.equals((Object)iVecInt0));
assertFalse(vecInt1.equals((Object)vecInt0));
assertEquals(1718, int0);
assertEquals(4, intArray1.length);

VecInt vecInt2 = new VecInt();
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertFalse(vecInt2.equals((Object)vecInt0));
assertFalse(vecInt2.equals((Object)iVecInt0));
assertFalse(vecInt2.equals((Object)vecInt1));
assertNotNull(vecInt2);

int int1 = VecInt.access$000(vecInt2);
assertNotSame(vecInt2, vecInt0);
assertNotSame(vecInt2, iVecInt0);
assertNotSame(vecInt2, vecInt1);
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertFalse(vecInt2.equals((Object)vecInt0));
assertFalse(vecInt2.equals((Object)iVecInt0));
assertFalse(vecInt2.equals((Object)vecInt1));
assertFalse(int1 == int0);
assertEquals(0, int1);

VecInt vecInt3 = new VecInt(int1, int1);
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertEquals(0, vecInt3.size());
assertTrue(vecInt3.isEmpty());
assertFalse(vecInt2.equals((Object)vecInt0));
assertFalse(vecInt2.equals((Object)iVecInt0));
assertFalse(vecInt2.equals((Object)vecInt1));
assertFalse(int1 == int0);
assertFalse(vecInt3.equals((Object)iVecInt0));
assertFalse(vecInt3.equals((Object)vecInt0));
assertFalse(vecInt3.equals((Object)vecInt1));
assertTrue(vecInt3.equals((Object)vecInt2));
assertNotNull(vecInt3);

int[] intArray2 = VecInt.access$100(vecInt3);
assertArrayEquals(new int[] {}, intArray2);
assertNotSame(vecInt2, vecInt3);
assertNotSame(vecInt2, vecInt0);
assertNotSame(vecInt2, iVecInt0);
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt3, iVecInt0);
assertNotSame(vecInt3, vecInt0);
assertNotSame(vecInt3, vecInt2);
assertNotSame(vecInt3, vecInt1);
assertNotSame(intArray2, intArray1);
assertNotSame(intArray2, intArray0);
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertEquals(0, vecInt3.size());
assertTrue(vecInt3.isEmpty());
assertFalse(vecInt2.equals((Object)vecInt0));
assertTrue(vecInt2.equals((Object)vecInt3));
assertFalse(vecInt2.equals((Object)iVecInt0));
assertFalse(vecInt2.equals((Object)vecInt1));
assertFalse(int1 == int0);
assertFalse(vecInt3.equals((Object)iVecInt0));
assertFalse(vecInt3.equals((Object)vecInt0));
assertFalse(vecInt3.equals((Object)vecInt1));
assertTrue(vecInt3.equals((Object)vecInt2));
assertFalse(intArray2.equals((Object)intArray1));
assertFalse(intArray2.equals((Object)intArray0));
assertNotNull(intArray2);
assertEquals(0, intArray2.length);

vecInt3.pushAll(iVecInt0);
assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
assertNotSame(iVecInt0, vecInt3);
assertNotSame(iVecInt0, vecInt0);
assertNotSame(iVecInt0, vecInt2);
assertNotSame(iVecInt0, vecInt1);
assertNotSame(vecInt2, vecInt3);
assertNotSame(vecInt2, vecInt0);
assertNotSame(vecInt2, iVecInt0);
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt3, iVecInt0);
assertNotSame(vecInt3, vecInt0);
assertNotSame(vecInt3, vecInt2);
assertNotSame(vecInt3, vecInt1);
assertNotSame(intArray1, intArray0);
assertNotSame(intArray1, intArray2);
assertNotSame(vecInt1, iVecInt0);
assertNotSame(vecInt1, vecInt3);
assertNotSame(vecInt1, vecInt0);
assertNotSame(vecInt1, vecInt2);
assertFalse(iVecInt0.isEmpty());
assertEquals(1718, iVecInt0.last());
assertEquals(9, iVecInt0.size());
assertTrue(vecInt2.isEmpty());
assertEquals(0, vecInt2.size());
assertFalse(vecInt3.isEmpty());
assertEquals(1718, vecInt3.last());
assertEquals(9, vecInt3.size());
assertFalse(vecInt1.isEmpty());
assertEquals(1917, vecInt1.last());
assertEquals(4, vecInt1.size());
assertTrue(iVecInt0.equals((Object)vecInt3));
assertFalse(iVecInt0.equals((Object)vecInt0));
assertFalse(iVecInt0.equals((Object)vecInt2));
assertFalse(iVecInt0.equals((Object)vecInt1));
assertFalse(vecInt2.equals((Object)vecInt3));
assertFalse(vecInt2.equals((Object)vecInt0));
assertFalse(vecInt2.equals((Object)iVecInt0));
assertFalse(vecInt2.equals((Object)vecInt1));
assertFalse(int1 == int0);
assertFalse(vecInt3.equals((Object)vecInt0));
assertFalse(vecInt3.equals((Object)vecInt2));
assertFalse(vecInt3.equals((Object)vecInt1));
assertTrue(vecInt3.equals((Object)iVecInt0));
assertFalse(intArray1.equals((Object)intArray0));
assertFalse(intArray1.equals((Object)intArray2));
assertFalse(vecInt1.equals((Object)iVecInt0));
assertFalse(vecInt1.equals((Object)vecInt3));
assertFalse(vecInt1.equals((Object)vecInt0));
assertFalse(vecInt1.equals((Object)vecInt2));
assertEquals(4, intArray1.length);

vecInt2.shrink(intArray0[3]);
assertArrayEquals(new int[] {208, 208, 208, 208}, intArray0);
assertNotSame(intArray0, intArray1);
assertNotSame(intArray0, intArray2);
assertNotSame(vecInt2, vecInt3);
assertNotSame(vecInt2, vecInt0);
assertNotSame(vecInt2, iVecInt0);
assertNotSame(vecInt2, vecInt1);
assertEquals((-208), vecInt2.size());
assertFalse(vecInt2.isEmpty());
assertFalse(intArray0.equals((Object)intArray1));
assertFalse(intArray0.equals((Object)intArray2));
assertFalse(vecInt2.equals((Object)vecInt3));
assertFalse(vecInt2.equals((Object)vecInt0));
assertFalse(vecInt2.equals((Object)iVecInt0));
assertFalse(vecInt2.equals((Object)vecInt1));
assertEquals(4, intArray0.length);


[MASTER] 08:30:48.400 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_111_1550561448365/org/sat4j/core/VecInt_111_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_111_1550561448365/org/sat4j/core/VecInt_111_tmp__ESTest_scaffolding.java]]
[MASTER] 08:30:48.401 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 08:30:48.401 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 08:30:48.401 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$000(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 30
[MASTER] 08:30:48.430 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_111_1550561448365/org/sat4j/core/VecInt_111_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Feb 19 07:30:48 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: import org.sat4j.core.VecInt;
15: import org.sat4j.specs.IVecInt;
16: 
17: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
18: public class VecInt_111_tmp__ESTest extends VecInt_111_tmp__ESTest_scaffolding {
19: 
20:   @Test(timeout = 4000)
21:   public void test0()  throws Throwable  {
22:       VecInt vecInt0 = new VecInt();
23:       assertEquals(0, vecInt0.size());
24:       assertTrue(vecInt0.isEmpty());
25:       assertNotNull(vecInt0);
26:       
27:       VecInt vecInt1 = null;
28:       // Undeclared exception!
29:       try { 
30:         VecInt.access$000((VecInt) null);
31:         fail("Expecting exception: NullPointerException");
32:       
33:       } catch(NullPointerException e) {
34:          //
35:          // no message in exception (getMessage() returned null)
36:          //
37:          verifyException("org.sat4j.core.VecInt", e);
38:       }
39:   }
40: }
RegularFileObject[/tmp/EvoSuite_111_1550561448365/org/sat4j/core/VecInt_111_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Feb 19 07:30:48 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class VecInt_111_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.VecInt"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(VecInt_111_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.core.ReadOnlyVecInt",
82:       "org.sat4j.specs.IteratorInt",
83:       "org.sat4j.core.VecInt$1",
84:       "org.sat4j.specs.IVecInt",
85:       "org.sat4j.core.EmptyVecInt",
86:       "org.sat4j.core.VecInt"
87:     );
88:   } 
89: 
90:   private static void resetClasses() {
91:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(VecInt_111_tmp__ESTest_scaffolding.class.getClassLoader()); 
92: 
93:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
94:       "org.sat4j.core.EmptyVecInt",
95:       "org.sat4j.core.VecInt",
96:       "org.sat4j.core.VecInt$1",
97:       "org.sat4j.core.ReadOnlyVecInt"
98:     );
99:   }
100: }

[MASTER] 08:30:48.431 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
VecInt vecInt0 = new VecInt();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotNull(vecInt0);

VecInt vecInt1 = null;
VecInt.access$000((VecInt) null);

[MASTER] 08:31:21.429 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
