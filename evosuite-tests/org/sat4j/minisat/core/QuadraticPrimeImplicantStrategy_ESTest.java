/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:59:32 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.QuadraticPrimeImplicantStrategy;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.VarOrderHeap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuadraticPrimeImplicantStrategy_ESTest extends QuadraticPrimeImplicantStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, varOrderHeap0, (RestartStrategy) null);
      solver0.assume(100);
      // Undeclared exception!
      try { 
        quadraticPrimeImplicantStrategy0.compute(solver0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, varOrderHeap0, (RestartStrategy) null);
      solver0.newVar(1744);
      int[] intArray0 = quadraticPrimeImplicantStrategy0.compute(solver0);
      assertEquals(1744, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        quadraticPrimeImplicantStrategy0.setAndPropagate((Solver<? extends DataStructureFactory>) null, 1256);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.QuadraticPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, varOrderHeap0, (RestartStrategy) null);
      // Undeclared exception!
      try { 
        quadraticPrimeImplicantStrategy0.setAndPropagate(solver0, (-728));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -728
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        quadraticPrimeImplicantStrategy0.compute((Solver<? extends DataStructureFactory>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        quadraticPrimeImplicantStrategy0.getPrimeImplicantAsArrayWithHoles();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the compute method first!
         //
         verifyException("org.sat4j.minisat.core.QuadraticPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      quadraticPrimeImplicantStrategy0.compute(solver0);
      int[] intArray0 = quadraticPrimeImplicantStrategy0.getPrimeImplicantAsArrayWithHoles();
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, varOrderHeap0, (RestartStrategy) null);
      solver0.setVerbose(true);
      int[] intArray0 = quadraticPrimeImplicantStrategy0.compute(solver0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, varOrderHeap0, (RestartStrategy) null);
      solver0.qhead = 3;
      // Undeclared exception!
      try { 
        quadraticPrimeImplicantStrategy0.compute(solver0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, varOrderHeap0, (RestartStrategy) null);
      solver0.qhead = 4249;
      quadraticPrimeImplicantStrategy0.setAndPropagate(solver0, 7);
      boolean boolean0 = quadraticPrimeImplicantStrategy0.setAndPropagate(solver0, 6);
      assertEquals(1, solver0.getPropagationLevel());
      assertFalse(boolean0);
  }
}
