/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:34:38 GMT 2019
 */

package org.sat4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.StringWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.DecisionMode;
import org.sat4j.ExitCode;
import org.sat4j.ILauncherMode;
import org.sat4j.LightFactory;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.reader.DimacsReader;
import org.sat4j.reader.GroupedCNFReader;
import org.sat4j.specs.IGroupSolver;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IProblem;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DecisionMode_ESTest extends DecisionMode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      BasicLauncher<DimacsOutputSolver> basicLauncher0 = new BasicLauncher<DimacsOutputSolver>((ASolverFactory<DimacsOutputSolver>) null);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("c ");
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
      decisionMode0.solve(dimacsStringSolver0, groupedCNFReader0, basicLauncher0, mockPrintWriter0, (-1378L));
      assertFalse(groupedCNFReader0.hasAMapping());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("LpL zex8t}y3a");
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      // Undeclared exception!
      try { 
        decisionMode0.solve((IProblem) null, dimacsReader0, mUSLauncher0, mockPrintWriter0, (-967L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      StringWriter stringWriter0 = new StringWriter();
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, false);
      maxSatDecorator0.setTimeoutMs((-3777L));
      DimacsReader dimacsReader0 = new DimacsReader(maxSatDecorator0);
      // Undeclared exception!
      try { 
        decisionMode0.solve(iSolver0, dimacsReader0, (ILogAble) null, printWriter0, 7L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative delay.
         //
         verifyException("java.util.Timer", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        decisionMode0.onSolutionFound(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      decisionMode0.onUnsatTermination();
      ExitCode exitCode0 = decisionMode0.getCurrentExitCode();
      assertEquals(ExitCode.UNKNOWN, exitCode0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      int[] intArray0 = new int[1];
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dimacsOutputSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(dimacsOutputSolver0).modelWithInternalVariables();
      FullClauseSelectorSolver<DimacsOutputSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0, false);
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
      StringWriter stringWriter0 = new StringWriter();
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      decisionMode0.solve(fullClauseSelectorSolver0, groupedCNFReader0, (ILogAble) null, printWriter0, 1907L);
      decisionMode0.onSolutionFound(intArray0);
      // Undeclared exception!
      try { 
        decisionMode0.displayResult(fullClauseSelectorSolver0, fullClauseSelectorSolver0, (ILogAble) null, printWriter0, groupedCNFReader0, 544L, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(dimacsOutputSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      FullClauseSelectorSolver<DimacsOutputSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0, false);
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
      StringWriter stringWriter0 = new StringWriter();
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      decisionMode0.solve(fullClauseSelectorSolver0, groupedCNFReader0, (ILogAble) null, printWriter0, 1907L);
      // Undeclared exception!
      try { 
        decisionMode0.displayResult(fullClauseSelectorSolver0, (IProblem) null, (ILogAble) null, printWriter0, groupedCNFReader0, 746L, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      int[] intArray0 = new int[1];
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(dimacsOutputSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(dimacsOutputSolver0).modelWithInternalVariables();
      FullClauseSelectorSolver<DimacsOutputSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0, false);
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
      StringWriter stringWriter0 = new StringWriter();
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      decisionMode0.solve(fullClauseSelectorSolver0, groupedCNFReader0, (ILogAble) null, printWriter0, 1907L);
      // Undeclared exception!
      try { 
        decisionMode0.displayResult(fullClauseSelectorSolver0, fullClauseSelectorSolver0, (ILogAble) null, printWriter0, groupedCNFReader0, 544L, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<DimacsOutputSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0, false);
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
      StringWriter stringWriter0 = new StringWriter();
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        decisionMode0.displayResult(fullClauseSelectorSolver0, fullClauseSelectorSolver0, (ILogAble) null, printWriter0, groupedCNFReader0, 544L, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      DimacsOutputSolver dimacsOutputSolver0 = mock(DimacsOutputSolver.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<DimacsOutputSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0, false);
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
      StringWriter stringWriter0 = new StringWriter();
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      decisionMode0.displayResult((ISolver) null, fullClauseSelectorSolver0, (ILogAble) null, printWriter0, groupedCNFReader0, (-255L), false);
      assertFalse(groupedCNFReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      ExitCode exitCode0 = ExitCode.UNSATISFIABLE;
      decisionMode0.setExitCode(exitCode0);
      assertEquals(ExitCode.UNSATISFIABLE, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      decisionMode0.setIncomplete(true);
      assertEquals(ExitCode.UNKNOWN, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      // Undeclared exception!
      try { 
        decisionMode0.onSolutionFound((IVecInt) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      ExitCode exitCode0 = decisionMode0.getCurrentExitCode();
      assertEquals(0, exitCode0.value());
  }
}
