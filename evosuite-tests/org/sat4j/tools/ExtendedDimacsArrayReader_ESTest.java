/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:47:34 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.ExtendedDimacsArrayReader;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.OptToSatAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExtendedDimacsArrayReader_ESTest extends ExtendedDimacsArrayReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(iSolver0);
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(4, 7, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(iSolver0);
      int[] intArray0 = new int[0];
      extendedDimacsArrayReader0.handleConstr(2, 1, intArray0);
      assertEquals(1, iSolver0.nVars());
      assertEquals(1, iSolver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(iSolver0);
      int[] intArray0 = new int[5];
      intArray0[0] = 8;
      intArray0[1] = 14;
      intArray0[2] = 7;
      intArray0[3] = (-1430);
      intArray0[4] = (-272);
      extendedDimacsArrayReader0.handleConstr(11, 764, intArray0);
      assertEquals(32, iSolver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(gateTranslator0).addClause(any(org.sat4j.specs.IVecInt.class));
      LexicoDecorator<GateTranslator> lexicoDecorator0 = new LexicoDecorator<GateTranslator>(gateTranslator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(optToSatAdapter0);
      int[] intArray0 = new int[7];
      boolean boolean0 = extendedDimacsArrayReader0.handleConstr(8, 307, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(gateTranslator0).addClause(any(org.sat4j.specs.IVecInt.class));
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(gateTranslator0);
      int[] intArray0 = new int[7];
      boolean boolean0 = extendedDimacsArrayReader0.handleConstr(4, 4, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[1];
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null).when(gateTranslator0).addClause(any(org.sat4j.specs.IVecInt.class));
      gateTranslatorArray0[0] = gateTranslator0;
      ManyCore<GateTranslator> manyCore0 = new ManyCore<GateTranslator>(true, gateTranslatorArray0);
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(manyCore0);
      int[] intArray0 = new int[1];
      boolean boolean0 = extendedDimacsArrayReader0.handleConstr(6, 0, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(iSolver0);
      int[] intArray0 = new int[9];
      intArray0[0] = 4;
      intArray0[1] = 3;
      intArray0[2] = 1351;
      intArray0[3] = 7;
      intArray0[4] = 6;
      intArray0[5] = 12;
      intArray0[6] = 1351;
      intArray0[7] = 8;
      intArray0[8] = 14;
      // Undeclared exception!
      extendedDimacsArrayReader0.handleConstr(8, 5, intArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[1];
      GateTranslator gateTranslator0 = mock(GateTranslator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(gateTranslator0).addClause(any(org.sat4j.specs.IVecInt.class));
      gateTranslatorArray0[0] = gateTranslator0;
      ManyCore<GateTranslator> manyCore0 = new ManyCore<GateTranslator>(true, gateTranslatorArray0);
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(manyCore0);
      int[] intArray0 = new int[3];
      boolean boolean0 = extendedDimacsArrayReader0.handleConstr(12, 7, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(3, 3, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(2, 2, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(1, 6, intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(iSolver0);
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr((-1992), 2, (int[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Gate type -1992 not handled yet
         //
         verifyException("org.sat4j.tools.ExtendedDimacsArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(12, (-1934), intArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(10, 11, intArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Gate type 10 not handled yet
         //
         verifyException("org.sat4j.tools.ExtendedDimacsArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(9, 2648, intArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Gate type 9 not handled yet
         //
         verifyException("org.sat4j.tools.ExtendedDimacsArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(iSolver0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(7, (-575), intArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Gate type 7 not handled yet
         //
         verifyException("org.sat4j.tools.ExtendedDimacsArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(6, 6, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader((ISolver) null);
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(5, (-700), intArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Gate type 5 not handled yet
         //
         verifyException("org.sat4j.tools.ExtendedDimacsArrayReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(iSolver0);
      int[][] intArray0 = new int[7][1];
      // Undeclared exception!
      try { 
        extendedDimacsArrayReader0.handleConstr(3, 6, intArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(iSolver0);
      int[] intArray0 = new int[0];
      extendedDimacsArrayReader0.handleConstr(2, 2, intArray0);
      try { 
        extendedDimacsArrayReader0.handleConstr(1, 2, intArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      ExtendedDimacsArrayReader extendedDimacsArrayReader0 = new ExtendedDimacsArrayReader(iSolver0);
      int[] intArray0 = new int[0];
      extendedDimacsArrayReader0.handleConstr(1, 7, intArray0);
      assertEquals(7, iSolver0.nVars());
      assertEquals(7, iSolver0.realNumberOfVariables());
  }
}
