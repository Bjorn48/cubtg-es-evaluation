/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:30:22 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.minisat.core.Heap;
import org.sat4j.minisat.orders.ActivityBasedVariableComparator;
import org.sat4j.minisat.orders.LevelAndActivityVariableComparator;
import org.sat4j.minisat.orders.VariableComparator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Heap_ESTest extends Heap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
      Heap heap0 = new Heap(activityBasedVariableComparator0);
      heap0.setBounds(0);
      assertEquals(0, heap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      // Undeclared exception!
      try { 
        heap0.increase(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
      Heap heap0 = new Heap(activityBasedVariableComparator0);
      heap0.setBounds(518);
      heap0.insert(128);
      assertEquals(128, heap0.getmin());
      
      int int0 = heap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
      Heap heap0 = new Heap(activityBasedVariableComparator0);
      heap0.setBounds(2272);
      boolean boolean0 = heap0.ok(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
      Heap heap0 = new Heap(activityBasedVariableComparator0);
      boolean boolean0 = heap0.ok((-2170));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      heap0.setBounds(1442);
      heap0.insert(128);
      heap0.getmin();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      heap0.setBounds(2423);
      // Undeclared exception!
      try { 
        heap0.setBounds(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      // Undeclared exception!
      try { 
        heap0.percolateUp(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Heap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      // Undeclared exception!
      try { 
        heap0.percolateUp((-2280));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      // Undeclared exception!
      try { 
        heap0.percolateDown(201);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
      Heap heap0 = new Heap(activityBasedVariableComparator0);
      heap0.setBounds(527);
      heap0.insert(128);
      // Undeclared exception!
      try { 
        heap0.insert(128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 128
         //
         verifyException("org.sat4j.minisat.orders.ActivityBasedVariableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
      Heap heap0 = new Heap(activityBasedVariableComparator0);
      heap0.setBounds(518);
      heap0.percolateUp(2);
      heap0.insert(2);
      // Undeclared exception!
      try { 
        heap0.increase(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.sat4j.minisat.orders.ActivityBasedVariableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      // Undeclared exception!
      try { 
        heap0.get((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
      Heap heap0 = new Heap(activityBasedVariableComparator0);
      heap0.setBounds(527);
      heap0.insert(1);
      assertEquals(1, heap0.getmin());
      
      boolean boolean0 = heap0.heapProperty(1);
      assertTrue(heap0.empty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      LevelAndActivityVariableComparator levelAndActivityVariableComparator0 = new LevelAndActivityVariableComparator(doubleArray0, (int[]) null);
      Heap heap0 = new Heap(levelAndActivityVariableComparator0);
      boolean boolean0 = heap0.heapProperty(939);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
      Heap heap0 = new Heap(activityBasedVariableComparator0);
      heap0.setBounds(518);
      heap0.insert(128);
      assertEquals(128, heap0.getmin());
      
      boolean boolean0 = heap0.inHeap(128);
      assertFalse(boolean0);
      assertTrue(heap0.empty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
      Heap heap0 = new Heap(activityBasedVariableComparator0);
      heap0.setBounds(518);
      boolean boolean0 = heap0.inHeap(128);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      // Undeclared exception!
      try { 
        heap0.heapProperty((-2043));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      // Undeclared exception!
      try { 
        heap0.insert((-570));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      heap0.setBounds(1903);
      heap0.insert(143);
      heap0.get(2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      boolean boolean0 = heap0.empty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      ActivityBasedVariableComparator activityBasedVariableComparator0 = new ActivityBasedVariableComparator(doubleArray0);
      Heap heap0 = new Heap(activityBasedVariableComparator0);
      heap0.setBounds(493);
      heap0.insert(128);
      assertEquals(128, heap0.getmin());
      
      boolean boolean0 = heap0.empty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      heap0.setBounds(1045);
      heap0.insert(201);
      heap0.increase(201);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      // Undeclared exception!
      try { 
        heap0.inHeap(201);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      heap0.setBounds(518);
      // Undeclared exception!
      try { 
        heap0.increase(1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      // Undeclared exception!
      try { 
        heap0.setBounds((-918));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      // Undeclared exception!
      try { 
        heap0.percolateDown(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Heap", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      heap0.percolateDown(1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      heap0.setBounds(1903);
      heap0.insert(120);
      //  // Unstable assertion: assertEquals(0, heap0.size());
      
      // Undeclared exception!
      try { 
        heap0.insert(1896);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Heap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      int int0 = heap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      // Undeclared exception!
      try { 
        heap0.getmin();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      heap0.setBounds(1903);
      heap0.insert(143);
      assertEquals(143, heap0.getmin());
      
      boolean boolean0 = heap0.heapProperty();
      assertTrue(boolean0);
      assertTrue(heap0.empty());
  }
}
