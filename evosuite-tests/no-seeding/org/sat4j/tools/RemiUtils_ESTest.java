/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:30:54 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.RemiUtils;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RemiUtils_ESTest extends RemiUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      IVecInt iVecInt0 = RemiUtils.backbone(statisticsSolver0);
      assertTrue(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      VecInt vecInt0 = new VecInt(0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(statisticsSolver0, vecInt0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(minimal4CardinalityModel0);
      FullClauseSelectorSolver<MinOneDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MinOneDecorator>(minOneDecorator0, false);
      fullClauseSelectorSolver0.newVar(3845);
      SubModelIterator subModelIterator0 = new SubModelIterator(fullClauseSelectorSolver0, vecInt0);
      try { 
        RemiUtils.backbone(subModelIterator0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      String[] stringArray0 = new String[0];
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[4];
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(2719).when(minOneDecorator0).nVars();
      minOneDecoratorArray0[0] = minOneDecorator0;
      minOneDecoratorArray0[1] = minOneDecoratorArray0[0];
      minOneDecoratorArray0[2] = minOneDecoratorArray0[0];
      minOneDecoratorArray0[3] = minOneDecoratorArray0[2];
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(stringArray0, minOneDecoratorArray0);
      // Undeclared exception!
      try { 
        RemiUtils.backbone(manyCore0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      LexicoDecorator<MinOneDecorator> lexicoDecorator0 = new LexicoDecorator<MinOneDecorator>(minOneDecorator0);
      MinOneDecorator minOneDecorator1 = new MinOneDecorator(lexicoDecorator0);
      lexicoDecorator0.setDecorated(minOneDecorator1);
      // Undeclared exception!
      try { 
        RemiUtils.backbone(lexicoDecorator0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      // Undeclared exception!
      try { 
        RemiUtils.backbone((ISolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.RemiUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(minOneDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(582, (-1)).when(minOneDecorator0).nVars();
      LexicoDecorator<MinOneDecorator> lexicoDecorator0 = new LexicoDecorator<MinOneDecorator>(minOneDecorator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      // Undeclared exception!
      try { 
        RemiUtils.backbone(optToSatAdapter0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.LexicoDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[0];
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(false, minOneDecoratorArray0);
      // Undeclared exception!
      try { 
        RemiUtils.backbone(manyCore0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[7];
      int int0 = 5;
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(minOneDecorator0).model();
      doReturn((int[]) null).when(minOneDecorator0).modelWithInternalVariables();
      doReturn(true).when(minOneDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(false, false).when(minOneDecorator0).model(anyInt());
      doReturn(582, 5, 582, 582, 0).when(minOneDecorator0).nVars();
      LexicoDecorator<MinOneDecorator> lexicoDecorator0 = new LexicoDecorator<MinOneDecorator>(minOneDecorator0);
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(lexicoDecorator0);
      // Undeclared exception!
      try { 
        RemiUtils.backbone(optToSatAdapter0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, true, false).when(minOneDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(3983).when(minOneDecorator0).nVars();
      GroupClauseSelectorSolver<MinOneDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MinOneDecorator>(minOneDecorator0);
      MinOneDecorator minOneDecorator1 = new MinOneDecorator(groupClauseSelectorSolver0);
      NegationDecorator<MinOneDecorator> negationDecorator0 = new NegationDecorator<MinOneDecorator>(minOneDecorator1);
      // Undeclared exception!
      RemiUtils.backbone(negationDecorator0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, true, false).when(minOneDecorator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(3983).when(minOneDecorator0).nVars();
      IVecInt iVecInt0 = RemiUtils.backbone(minOneDecorator0);
      assertEquals((-3983), iVecInt0.last());
      assertEquals(3983, iVecInt0.size());
  }
}
