/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 08:05:48 GMT 2019
 */

package org.sat4j.minisat.constraints.card;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.math.BigInteger;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.card.MaxWatchCard;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.MandatoryLiteralListener;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.DotSearchTracing;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MaxWatchCard_ESTest extends MaxWatchCard_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 1);
      vecInt0.unsafePush((-6189));
      int int0 = maxWatchCard0.getAssertionLevel(vecInt0, (-6189));
      assertEquals((-1), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(714);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 714);
      vecInt0.growTo(674, 714);
      int int0 = maxWatchCard0.getAssertionLevel(vecInt0, (-1762));
      assertEquals(714, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      vecInt0.push(0);
      lits0.getFromPool(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 0);
      maxWatchCard0.undo((-1512));
      maxWatchCard0.simplify();
      assertEquals(0, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0, 0);
      lits0.satisfies(0);
      vecInt0.push(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 0);
      lits0.getFromPool(10);
      boolean boolean0 = maxWatchCard0.propagate((UnitPropagationListener) null, 20);
      assertEquals(1, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(1);
      vecInt0.push(1);
      MaxWatchCard maxWatchCard0 = null;
      try {
        maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      lits0.getFromPool(0);
      Constr constr0 = MaxWatchCard.maxWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, true, 0);
      assertNull(constr0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      vecInt0.push(0);
      lits0.getFromPool(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 0);
      DotSearchTracing<Object> dotSearchTracing0 = new DotSearchTracing<Object>("YB/aaOobfdB]G`<");
      String string0 = maxWatchCard0.toString((VarMapper) dotSearchTracing0);
      assertEquals("0 >= 0", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      lits0.satisfies(0);
      vecInt0.push(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 0);
      maxWatchCard0.size();
      assertEquals(1, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 0);
      int int0 = maxWatchCard0.requiredNumberOfSatisfiedLiterals();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Lits lits0 = new Lits();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(1.0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams((-1.0), 1840.200199, 2744.5024849, 714);
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, false, 7);
      int int0 = maxWatchCard0.requiredNumberOfSatisfiedLiterals();
      assertEquals((-7), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.getFromPool(1580);
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(1.0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(1.0, (-1.0), 1.0, 1224);
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, true, 964);
      maxWatchCard0.getVocabulary();
      assertEquals(964, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(728);
      lits0.ensurePool(1016);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 713);
      maxWatchCard0.getVocabulary();
      assertEquals((-713), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Lits lits0 = new Lits();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(1.0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(1.0, (-1.0), 1.0, 1224);
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, true, 964);
      BigInteger bigInteger0 = maxWatchCard0.getDegree();
      assertEquals((short)964, bigInteger0.shortValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Lits lits0 = new Lits();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(1.0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(714, 714);
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, false, 1213);
      BigInteger bigInteger0 = maxWatchCard0.getDegree();
      assertEquals((byte)67, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      lits0.getFromPool(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 1573);
      maxWatchCard0.get(0);
      assertEquals(1573, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      lits0.satisfies(0);
      vecInt0.push(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 2);
      maxWatchCard0.get(0);
      assertEquals((-1), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0, 0);
      lits0.satisfies(0);
      vecInt0.push(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 0);
      lits0.getFromPool(0);
      // Undeclared exception!
      try { 
        maxWatchCard0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 0);
      // Undeclared exception!
      try { 
        maxWatchCard0.propagate((UnitPropagationListener) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, (-8));
      // Undeclared exception!
      try { 
        maxWatchCard0.propagate((UnitPropagationListener) null, (-8));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -8
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      lits0.getFromPool((-5558));
      // Undeclared exception!
      MaxWatchCard.maxWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, true, (-1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        MaxWatchCard.maxWatchCardNew((UnitPropagationListener) null, lits0, iVecInt0, true, (-582));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 612);
      // Undeclared exception!
      try { 
        maxWatchCard0.getAssertionLevel((IVecInt) null, 612);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      lits0.ensurePool(5449);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 5449);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      MaxWatchCard maxWatchCard0 = null;
      try {
        maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 1572);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(15, 15);
      MaxWatchCard maxWatchCard0 = null;
      try {
        maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 0);
      maxWatchCard0.normalize();
      assertEquals(0, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      lits0.satisfies(0);
      vecInt0.push(0);
      vecInt0.push(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 0);
      String string0 = maxWatchCard0.toString((VarMapper) null);
      assertEquals(">= 2", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      lits0.getFromPool(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, false, 0);
      // Undeclared exception!
      try { 
        maxWatchCard0.toString((VarMapper) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 1664);
      maxWatchCard0.toString((VarMapper) null);
      assertEquals(1664, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      lits0.satisfies(0);
      IVecInt iVecInt0 = vecInt0.push(0);
      IVecInt iVecInt1 = iVecInt0.push(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt1, false, 2);
      iVecInt0.shrink((-233));
      int int0 = maxWatchCard0.getAssertionLevel(vecInt0, 2);
      assertEquals(1, int0);
      assertEquals(0, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      lits0.satisfies(0);
      IVecInt iVecInt0 = vecInt0.push(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 0);
      maxWatchCard0.calcReason(0, iVecInt0);
      int int0 = maxWatchCard0.getAssertionLevel(vecInt0, 0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      lits0.satisfies(0);
      vecInt0.push(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 0);
      lits0.getFromPool(0);
      // Undeclared exception!
      try { 
        maxWatchCard0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      lits0.satisfies(0);
      vecInt0.push(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 0);
      maxWatchCard0.assertConstraint((UnitPropagationListener) null);
      assertEquals(1, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      lits0.satisfies(0);
      vecInt0.push(0);
      IVecInt iVecInt0 = vecInt0.push(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, false, 0);
      String string0 = maxWatchCard0.toString();
      assertEquals(">= 2", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      lits0.getFromPool(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 2);
      String string0 = maxWatchCard0.toString();
      assertEquals("-0 >= -1", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0, 0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 0);
      maxWatchCard0.toString();
      assertEquals(0, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      vecInt0.push(0);
      lits0.getFromPool(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 0);
      boolean boolean0 = maxWatchCard0.simplify();
      assertEquals(1, maxWatchCard0.size());
      assertEquals(0, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      lits0.satisfies(0);
      vecInt0.push(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 0);
      maxWatchCard0.simplify();
      assertEquals(1, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      lits0.getFromPool(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 0);
      boolean boolean0 = maxWatchCard0.simplify();
      assertFalse(boolean0);
      assertEquals(1, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      lits0.satisfies(0);
      vecInt0.push(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 0);
      // Undeclared exception!
      try { 
        maxWatchCard0.remove((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 0);
      maxWatchCard0.remove((UnitPropagationListener) null);
      assertEquals(0, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 2);
      lits0.getFromPool(2);
      maxWatchCard0.propagate((UnitPropagationListener) null, 4);
      boolean boolean0 = maxWatchCard0.propagate((UnitPropagationListener) null, 4);
      assertTrue(boolean0);
      assertEquals((-2), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 0);
      lits0.getFromPool(0);
      boolean boolean0 = maxWatchCard0.propagate((UnitPropagationListener) null, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(0);
      lits0.getFromPool(0);
      // Undeclared exception!
      try { 
        MaxWatchCard.maxWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, false, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      Constr constr0 = MaxWatchCard.maxWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, true, (-1182));
      assertNull(constr0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      try { 
        MaxWatchCard.maxWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, false, (-1768));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(2174, 2174);
      // Undeclared exception!
      try { 
        MaxWatchCard.maxWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, false, 2174);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      Constr constr0 = MaxWatchCard.maxWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, true, 0);
      assertTrue(constr0.isSatisfied());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      try { 
        MaxWatchCard.maxWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, true, 1766);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating trivially inconsistent constraint
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0);
      IVecInt iVecInt0 = vecInt0.push(0);
      lits0.getFromPool(0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 0);
      maxWatchCard0.calcReason(1393, iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertEquals(1, maxWatchCard0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0, 0);
      vecInt0.push(0);
      vecInt0.push(1);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 0);
      assertEquals((-1), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(40, (-3003));
      // Undeclared exception!
      try { 
        MaxWatchCard.maxWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, false, (-3003));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 23);
      double double0 = maxWatchCard0.getActivity();
      assertEquals(0.0, double0, 0.01);
      assertEquals((-23), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Lits lits0 = new Lits();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(1.0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0.0, (-1.0), 1.0, 714);
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, false, 714);
      maxWatchCard0.rescaleBy(955.506613145);
      assertEquals((-714), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 1572);
      boolean boolean0 = maxWatchCard0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertEquals((-1572), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 0);
      BigInteger bigInteger0 = maxWatchCard0.getDegree();
      assertEquals((byte)0, bigInteger0.byteValue());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 7435);
      // Undeclared exception!
      try { 
        maxWatchCard0.register();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 124);
      maxWatchCard0.getCoef(124);
      assertEquals(124, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Lits lits0 = new Lits();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(1.0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams((-1.0), 1840.200199, 2744.5024849, 714);
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, false, 7);
      maxWatchCard0.forwardActivity(2744.5024849);
      assertEquals((-7), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, (-2390));
      maxWatchCard0.getVocabulary();
      assertEquals((-2390), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, (-2501));
      // Undeclared exception!
      try { 
        maxWatchCard0.propagatePI((MandatoryLiteralListener) null, (-2501));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, (-579));
      boolean boolean0 = maxWatchCard0.learnt();
      assertEquals((-579), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Lits lits0 = new Lits();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(1.0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(714, 714);
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, false, (-24));
      maxWatchCard0.setActivity((-24));
      assertEquals(24, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 1572);
      // Undeclared exception!
      try { 
        maxWatchCard0.isSatisfied();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 46);
      boolean boolean0 = maxWatchCard0.locked();
      assertTrue(boolean0);
      assertEquals((-46), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Lits lits0 = new Lits();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(1.0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(714);
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, false, (-36));
      int int0 = maxWatchCard0.requiredNumberOfSatisfiedLiterals();
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 112);
      // Undeclared exception!
      try { 
        maxWatchCard0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, (-2390));
      boolean boolean0 = maxWatchCard0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
      assertEquals((-2390), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 612);
      maxWatchCard0.size();
      assertEquals((-612), maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, true, 2);
      // Undeclared exception!
      try { 
        maxWatchCard0.get(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, (-2509));
      // Undeclared exception!
      try { 
        maxWatchCard0.calcReasonOnTheFly((-2509), vecInt0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0, 0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 0);
      Constr constr0 = maxWatchCard0.toConstraint();
      assertEquals(0, constr0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Lits lits0 = new Lits();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>(1.0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams((-1.0), 1840.200199, 2744.5024849, 714);
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, iVecInt0, true, 7);
      maxWatchCard0.incActivity(0.0);
      assertEquals(7, maxWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(0, 0);
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 0);
      // Undeclared exception!
      try { 
        maxWatchCard0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }
}
