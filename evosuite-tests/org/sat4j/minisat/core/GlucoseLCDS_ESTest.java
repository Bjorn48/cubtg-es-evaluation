/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:42:43 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVec;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.Glucose2LCDS;
import org.sat4j.minisat.core.GlucoseLCDS;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy;
import org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GlucoseLCDS_ESTest extends GlucoseLCDS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>((-1086));
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      int[] intArray0 = new int[3];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, subsetVarOrder0, eMARestarts0);
      solver0.newVar(2731);
      GlucoseLCDS<MixedDataStructureDanielWLConciseBinary> glucoseLCDS0 = new GlucoseLCDS<MixedDataStructureDanielWLConciseBinary>(solver0, eMARestarts0);
      glucoseLCDS0.init();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      GlucoseLCDS<MixedDataStructureDanielHT> glucoseLCDS0 = new GlucoseLCDS<MixedDataStructureDanielHT>(solver0, (ConflictTimer) null);
      UnitClause unitClause0 = new UnitClause((-3024));
      glucoseLCDS0.onConflictAnalysis(unitClause0);
      assertFalse(unitClause0.simplify());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams(1713.9, 0);
      PhaseCachingAutoEraseStrategy phaseCachingAutoEraseStrategy0 = new PhaseCachingAutoEraseStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseCachingAutoEraseStrategy0);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      Glucose2LCDS<ClausalDataStructureWL> glucose2LCDS0 = new Glucose2LCDS<ClausalDataStructureWL>(solver0, (ConflictTimer) null);
      ConflictTimer conflictTimer0 = glucose2LCDS0.getTimer();
      assertNull(conflictTimer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      GlucoseLCDS<CardinalityDataStructureYanMin> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructureYanMin>((Solver<CardinalityDataStructureYanMin>) null, fixedPeriodRestarts0);
      FixedPeriodRestarts fixedPeriodRestarts1 = (FixedPeriodRestarts)glucoseLCDS0.getTimer();
      assertTrue(fixedPeriodRestarts1.shouldRestart());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Glucose2LCDS<CardinalityDataStructureYanMin> glucose2LCDS0 = new Glucose2LCDS<CardinalityDataStructureYanMin>((Solver<CardinalityDataStructureYanMin>) null, glucose21Restarts0);
      Vec<Constr> vec0 = new Vec<Constr>();
      // Undeclared exception!
      try { 
        glucose2LCDS0.reduce(vec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, varOrderHeap0, arminRestarts0);
      Glucose2LCDS<MixedDataStructureDanielHT> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielHT>(solver0, arminRestarts0);
      // Undeclared exception!
      try { 
        glucose2LCDS0.onClauseLearning((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>((-1468.108));
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, noRestarts0);
      Glucose2LCDS<CardinalityDataStructureYanMax> glucose2LCDS0 = new Glucose2LCDS<CardinalityDataStructureYanMax>(solver0, noRestarts0);
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        glucose2LCDS0.onClauseLearning(originalBinaryClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Glucose2LCDS<MixedDataStructureDanielWLConciseBinary> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielWLConciseBinary>((Solver<MixedDataStructureDanielWLConciseBinary>) null, (ConflictTimer) null);
      // Undeclared exception!
      try { 
        glucose2LCDS0.init();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, varOrderHeap0, lubyRestarts0);
      GlucoseLCDS<ClausalDataStructureWL> glucoseLCDS0 = new GlucoseLCDS<ClausalDataStructureWL>(solver0, lubyRestarts0);
      // Undeclared exception!
      try { 
        glucoseLCDS0.computeLBD((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>((-1468.108));
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, noRestarts0);
      Glucose2LCDS<CardinalityDataStructureYanMax> glucose2LCDS0 = new Glucose2LCDS<CardinalityDataStructureYanMax>(solver0, noRestarts0);
      int[] intArray0 = new int[2];
      glucose2LCDS0.init();
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      int int0 = glucose2LCDS0.computeLBD(originalBinaryClause0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>((-1468.108));
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, noRestarts0);
      Glucose2LCDS<CardinalityDataStructureYanMax> glucose2LCDS0 = new Glucose2LCDS<CardinalityDataStructureYanMax>(solver0, noRestarts0);
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, (ILits) null);
      // Undeclared exception!
      try { 
        glucose2LCDS0.computeLBD(originalBinaryClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>((-1086));
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      int[] intArray0 = new int[3];
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, subsetVarOrder0, eMARestarts0);
      GlucoseLCDS<MixedDataStructureDanielWLConciseBinary> glucoseLCDS0 = new GlucoseLCDS<MixedDataStructureDanielWLConciseBinary>(solver0, eMARestarts0);
      glucoseLCDS0.init();
      glucoseLCDS0.init();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      ArminRestarts arminRestarts0 = new ArminRestarts();
      UnitClause unitClause0 = new UnitClause(894);
      NoRestarts noRestarts0 = new NoRestarts();
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, (SearchParams) null, varOrderHeap0, noRestarts0);
      GlucoseLCDS<CardinalityDataStructure> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructure>(solver0, arminRestarts0);
      Vec<Constr> vec0 = new Vec<Constr>(2153, unitClause0);
      ReadOnlyVec<Constr> readOnlyVec0 = new ReadOnlyVec<Constr>(vec0);
      // Undeclared exception!
      try { 
        glucoseLCDS0.reduce(readOnlyVec0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, searchParams0, varOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      GlucoseLCDS<CardinalityDataStructure> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructure>(solver0, lubyRestarts0);
      Vec<Constr> vec0 = new Vec<Constr>();
      glucoseLCDS0.reduce(vec0);
      assertEquals(0, vec0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      Constr constr0 = Constr.TAUTOLOGY;
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap0, lubyRestarts0);
      Glucose2LCDS<ClausalDataStructureWL> glucose2LCDS0 = new Glucose2LCDS<ClausalDataStructureWL>(solver0, lubyRestarts0);
      glucose2LCDS0.onClauseLearning(constr0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(4);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams(1);
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = new PhaseInLastLearnedClauseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(phaseInLastLearnedClauseSelectionStrategy0);
      EMARestarts eMARestarts0 = new EMARestarts();
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<StatisticsSolver> basicLauncher0 = new BasicLauncher<StatisticsSolver>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, varOrderHeap0, eMARestarts0, basicLauncher0);
      GlucoseLCDS<CardinalityDataStructureYanMax> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructureYanMax>(solver0, eMARestarts0);
      glucoseLCDS0.onPropagation((Constr) null);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder();
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, pureOrder0, (RestartStrategy) null);
      GlucoseLCDS<MixedDataStructureDanielWLConciseBinary> glucoseLCDS0 = new GlucoseLCDS<MixedDataStructureDanielWLConciseBinary>(solver0, (ConflictTimer) null);
      String string0 = glucoseLCDS0.toString();
      assertEquals("Glucose learned constraints deletion strategy with timer null", string0);
  }
}
