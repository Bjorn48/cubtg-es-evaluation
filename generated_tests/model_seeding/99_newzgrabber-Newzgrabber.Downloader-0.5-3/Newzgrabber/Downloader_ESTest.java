/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 11:24:13 GMT 2019
 */

package Newzgrabber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Newzgrabber.Downloader;
import Newzgrabber.Newzgrabber;
import Newzgrabber.TransferPanel;
import java.io.File;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Downloader_ESTest extends Downloader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.setTotalLines((-685L));
      long long0 = downloader0.getTotalLines();
      assertEquals((-685L), long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.setGroup("Index");
      downloader0.getGroup();
      assertFalse(downloader0.ABORT);
      assertEquals((-1), downloader0.getTimeout());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.setGroup("");
      downloader0.getGroup();
      assertFalse(downloader0.ABORT);
      assertEquals((-1), downloader0.getTimeout());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      long[] longArray0 = new long[1];
      longArray0[0] = 2225L;
      downloader0.setIds(longArray0);
      downloader0.getBaseMessageId();
      assertEquals((-1), downloader0.getTimeout());
      assertFalse(downloader0.ABORT);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(2736, 2736);
      TransferPanel.downloading = defaultTableModel0;
      // Undeclared exception!
      try { 
        downloader0.startDownload();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      long[] longArray0 = new long[0];
      downloader0.setIds(longArray0);
      // Undeclared exception!
      try { 
        downloader0.getBaseMessageId();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("Newzgrabber.Downloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      long[] longArray0 = new long[4];
      Newzgrabber.verbose = true;
      downloader0.setIds(longArray0);
      // Undeclared exception!
      try { 
        downloader0.startDownload();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.Downloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      long[] longArray0 = new long[0];
      downloader0.setIds(longArray0);
      downloader0.startDownload();
      assertEquals((-1), downloader0.getTimeout());
      assertFalse(downloader0.ABORT);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      long[] longArray0 = new long[7];
      downloader0.setIds(longArray0);
      // Undeclared exception!
      try { 
        downloader0.startDownload();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.Downloader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      Newzgrabber.verbose = false;
      Newzgrabber.verbose = true;
      downloader0.close();
      assertEquals((-1), downloader0.getTimeout());
      assertFalse(downloader0.ABORT);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.close();
      assertEquals((-1), downloader0.getTimeout());
      assertFalse(downloader0.ABORT);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      long long0 = downloader0.getBaseMessageId();
      assertEquals((-1), downloader0.getTimeout());
      assertEquals((-1L), long0);
      assertFalse(downloader0.ABORT);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      int int0 = downloader0.getTimeout();
      assertFalse(downloader0.ABORT);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      File file0 = new File("base64");
      downloader0.setDownloadDirectory(file0);
      assertEquals((-1), downloader0.getTimeout());
      assertFalse(downloader0.ABORT);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.setPassword("");
      assertEquals((-1), downloader0.getTimeout());
      assertFalse(downloader0.ABORT);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      long[] longArray0 = new long[7];
      downloader0.setIds(longArray0);
      long long0 = downloader0.getBaseMessageId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.setTimeout((-2272));
      assertEquals((-2272), downloader0.getTimeout());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.getTotalLines();
      assertEquals((-1), downloader0.getTimeout());
      assertFalse(downloader0.ABORT);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.getGroup();
      assertEquals((-1), downloader0.getTimeout());
      assertFalse(downloader0.ABORT);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.setUsername((String) null);
      assertFalse(downloader0.ABORT);
      assertEquals((-1), downloader0.getTimeout());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.setTitle("Closing the downloader object for ");
      assertEquals((-1), downloader0.getTimeout());
      assertFalse(downloader0.ABORT);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.setServer("(#Vb\"NgZHqV,[m?XT");
      assertEquals((-1), downloader0.getTimeout());
      assertFalse(downloader0.ABORT);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.setTableIndex(1097);
      assertFalse(downloader0.ABORT);
      assertEquals((-1), downloader0.getTimeout());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      Object[] objectArray0 = new Object[0];
      downloader0.setDownloadData(objectArray0);
      assertEquals((-1), downloader0.getTimeout());
      assertFalse(downloader0.ABORT);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Downloader downloader0 = new Downloader();
      downloader0.setTotalLines(2400L);
      long long0 = downloader0.getTotalLines();
      assertEquals(2400L, long0);
  }
}
