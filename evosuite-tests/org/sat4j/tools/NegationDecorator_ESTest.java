/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:22:32 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.specs.FakeConstr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NegationDecorator_ESTest extends NegationDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      IConstr iConstr0 = FakeConstr.instance();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(0, 0).when(iSolver0).nVars();
      doReturn(iConstr0).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(iSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(solutionCounter0, solutionFoundListener0);
      NegationDecorator<AbstractMinimalModel> negationDecorator0 = new NegationDecorator<AbstractMinimalModel>(minimal4CardinalityModel0);
      boolean boolean0 = negationDecorator0.isSatisfiable((IVecInt) null, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(0, 0).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(iSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solutionCounter0);
      NegationDecorator<SolutionCounter> negationDecorator0 = new NegationDecorator<SolutionCounter>(solutionCounter0);
      boolean boolean0 = negationDecorator0.isSatisfiable(iVecInt0, true);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(statisticsSolver0);
      NegationDecorator<AbstractMinimalModel> negationDecorator0 = new NegationDecorator<AbstractMinimalModel>(abstractMinimalModel0);
      // Undeclared exception!
      try { 
        negationDecorator0.isSatisfiable((IVecInt) null, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NegationDecorator<AbstractMinimalModel> negationDecorator0 = new NegationDecorator<AbstractMinimalModel>((AbstractMinimalModel) null);
      // Undeclared exception!
      try { 
        negationDecorator0.isSatisfiable((IVecInt) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      NegationDecorator<SolutionCounter> negationDecorator0 = new NegationDecorator<SolutionCounter>(solutionCounter0);
      // Undeclared exception!
      try { 
        negationDecorator0.addClause((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(0, 0).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(iSolver0).nextFreeVarId(anyBoolean());
      doReturn(false).when(iSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solutionCounter0);
      NegationDecorator<SolutionCounter> negationDecorator0 = new NegationDecorator<SolutionCounter>(solutionCounter0);
      negationDecorator0.addClause(iVecInt0);
      boolean boolean0 = negationDecorator0.isSatisfiable(iVecInt0, false);
      assertTrue(iVecInt0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solutionCounter0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector((ISolver) null);
      NegationDecorator<SingleSolutionDetector> negationDecorator0 = new NegationDecorator<SingleSolutionDetector>(singleSolutionDetector0);
      // Undeclared exception!
      try { 
        negationDecorator0.addAtLeast(iVecInt0, (-2092));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      NegationDecorator<SubModelIterator> negationDecorator0 = new NegationDecorator<SubModelIterator>((SubModelIterator) null);
      // Undeclared exception!
      try { 
        negationDecorator0.addAtMost((IVecInt) null, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(709);
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      NegationDecorator<GroupClauseSelectorSolver<DimacsStringSolver>> negationDecorator0 = new NegationDecorator<GroupClauseSelectorSolver<DimacsStringSolver>>(groupClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        negationDecorator0.addExactly((IVecInt) null, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      NegationDecorator<SolutionCounter> negationDecorator0 = new NegationDecorator<SolutionCounter>(solutionCounter0);
      Collection<Integer> collection0 = negationDecorator0.getAddedVars();
      assertNotNull(collection0);
  }
}
