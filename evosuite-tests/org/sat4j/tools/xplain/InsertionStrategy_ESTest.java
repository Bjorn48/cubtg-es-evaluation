/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:27:16 GMT 2019
 */

package org.sat4j.tools.xplain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.IVisualizationTool;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.SubModelIterator;
import org.sat4j.tools.xplain.InsertionStrategy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InsertionStrategy_ESTest extends InsertionStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(2023, 2023, (-690)).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = mock(Minimal4CardinalityModel.class, new ViolatedAssumptionAnswer());
      doReturn(2023, 2023, 0).when(minimal4CardinalityModel0).nVars();
      doReturn(iVecInt0).when(minimal4CardinalityModel0).unsatExplanation();
      ClausalCardinalitiesDecorator<Minimal4CardinalityModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      IVecInt iVecInt1 = AbstractMinimalModel.negativeLiterals(clausalCardinalitiesDecorator0);
      SubModelIterator subModelIterator0 = new SubModelIterator(clausalCardinalitiesDecorator0, iVecInt1, 4133L);
      HashMap<Integer, MixedDataStructureSingleWL> hashMap0 = new HashMap<Integer, MixedDataStructureSingleWL>();
      IVecInt iVecInt2 = insertionStrategy0.explain(subModelIterator0, hashMap0, iVecInt1);
      assertTrue(iVecInt2.equals((Object)iVecInt1));
      assertNotSame(iVecInt2, iVecInt1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(2023, 2023, 2023, 2023, 2023).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = mock(Minimal4CardinalityModel.class, new ViolatedAssumptionAnswer());
      doReturn("Replay (Insertion-based) minimization strategy").when(minimal4CardinalityModel0).getLogPrefix();
      doReturn(true).when(minimal4CardinalityModel0).isVerbose();
      doReturn(iVecInt0).when(minimal4CardinalityModel0).unsatExplanation();
      ClausalCardinalitiesDecorator<Minimal4CardinalityModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      SubModelIterator subModelIterator0 = new SubModelIterator(clausalCardinalitiesDecorator0, iVecInt0, 4133L);
      HashMap<Integer, MixedDataStructureSingleWL> hashMap0 = new HashMap<Integer, MixedDataStructureSingleWL>();
      // Undeclared exception!
      insertionStrategy0.explain(subModelIterator0, hashMap0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(50);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(dimacsStringSolver0, hashMap0, iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      // Undeclared exception!
      try { 
        insertionStrategy0.explain((ISolver) null, hashMap0, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(43, 43, 43, (-1)).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = mock(Minimal4CardinalityModel.class, new ViolatedAssumptionAnswer());
      doReturn("Replay (Insertion-based) minimization strategy", " is mandatory ").when(minimal4CardinalityModel0).getLogPrefix();
      doReturn(true, false, false, false, false).when(minimal4CardinalityModel0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(false, true, true).when(minimal4CardinalityModel0).isVerbose();
      doReturn(iVecInt0, iVecInt0).when(minimal4CardinalityModel0).unsatExplanation();
      ClausalCardinalitiesDecorator<Minimal4CardinalityModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      SubModelIterator subModelIterator0 = new SubModelIterator(clausalCardinalitiesDecorator0, iVecInt0, 2023);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<Integer, Object> hashMap1 = new HashMap<Integer, Object>();
      Integer integer0 = IVisualizationTool.NOTGOOD;
      hashMap0.put(integer0, "Replay (Insertion-based) minimization strategy");
      IVecInt iVecInt1 = insertionStrategy0.explain(subModelIterator0, hashMap1, iVecInt0);
      IVecInt iVecInt2 = insertionStrategy0.explain(subModelIterator0, hashMap0, iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertFalse(iVecInt2.equals((Object)iVecInt1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      insertionStrategy0.toString();
      int[] intArray0 = new int[0];
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(43, 43, 43, (-1)).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      iVecInt0.growTo(0, 0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = mock(Minimal4CardinalityModel.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, true, false).when(minimal4CardinalityModel0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(false, false).when(minimal4CardinalityModel0).isVerbose();
      doReturn(iVecInt0).when(minimal4CardinalityModel0).unsatExplanation();
      ClausalCardinalitiesDecorator<Minimal4CardinalityModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      SubModelIterator subModelIterator0 = new SubModelIterator(clausalCardinalitiesDecorator0, iVecInt0, 2023);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      insertionStrategy0.explain(subModelIterator0, hashMap0, iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals("Replay (Insertion-based) minimization strategy", insertionStrategy0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(2023, 2023, 2992, 2023, 2023).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = mock(Minimal4CardinalityModel.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, false, true).when(minimal4CardinalityModel0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(minimal4CardinalityModel0).isVerbose();
      doReturn(iVecInt0).when(minimal4CardinalityModel0).unsatExplanation();
      ClausalCardinalitiesDecorator<Minimal4CardinalityModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      HashMap<Integer, MixedDataStructureSingleWL> hashMap0 = new HashMap<Integer, MixedDataStructureSingleWL>();
      Integer integer0 = new Integer(20);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      hashMap0.put(integer0, mixedDataStructureSingleWL0);
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(clausalCardinalitiesDecorator0, hashMap0, iVecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(2023, 2023, 2023, 2023, 2023).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = mock(Minimal4CardinalityModel.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(minimal4CardinalityModel0).isVerbose();
      doReturn(2023, 2023, 0).when(minimal4CardinalityModel0).nVars();
      doReturn(iVecInt0).when(minimal4CardinalityModel0).unsatExplanation();
      ClausalCardinalitiesDecorator<Minimal4CardinalityModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      IVecInt iVecInt1 = AbstractMinimalModel.negativeLiterals(clausalCardinalitiesDecorator0);
      SubModelIterator subModelIterator0 = new SubModelIterator(clausalCardinalitiesDecorator0, iVecInt1, 4133L);
      HashMap<Integer, MixedDataStructureSingleWL> hashMap0 = new HashMap<Integer, MixedDataStructureSingleWL>();
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(subModelIterator0, hashMap0, iVecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(2023, 2023, 12, (-1)).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = mock(Minimal4CardinalityModel.class, new ViolatedAssumptionAnswer());
      doReturn("Replay (Insertion-based) minimization strategy").when(minimal4CardinalityModel0).getLogPrefix();
      doReturn(true, false, false, false).when(minimal4CardinalityModel0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(true, false).when(minimal4CardinalityModel0).isVerbose();
      doReturn(iVecInt0).when(minimal4CardinalityModel0).unsatExplanation();
      ClausalCardinalitiesDecorator<Minimal4CardinalityModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      SubModelIterator subModelIterator0 = new SubModelIterator(clausalCardinalitiesDecorator0, iVecInt0, 4133L);
      HashMap<Integer, MixedDataStructureSingleWL> hashMap0 = new HashMap<Integer, MixedDataStructureSingleWL>();
      insertionStrategy0.explain(subModelIterator0, hashMap0, iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      insertionStrategy0.toString();
      int[] intArray0 = new int[0];
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(2023, 2023, 12, (-1)).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = mock(Minimal4CardinalityModel.class, new ViolatedAssumptionAnswer());
      doReturn("Replay (Insertion-based) minimization strategy").when(minimal4CardinalityModel0).getLogPrefix();
      doReturn(false).when(minimal4CardinalityModel0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn(true).when(minimal4CardinalityModel0).isVerbose();
      doReturn(iVecInt0, (IVecInt) null).when(minimal4CardinalityModel0).unsatExplanation();
      ClausalCardinalitiesDecorator<Minimal4CardinalityModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      SubModelIterator subModelIterator0 = new SubModelIterator(clausalCardinalitiesDecorator0, iVecInt0, 4133L);
      HashMap<Integer, MixedDataStructureSingleWL> hashMap0 = new HashMap<Integer, MixedDataStructureSingleWL>();
      IVecInt iVecInt1 = insertionStrategy0.explain(subModelIterator0, hashMap0, iVecInt0);
      // Undeclared exception!
      try { 
        insertionStrategy0.explain(subModelIterator0, hashMap0, iVecInt1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InsertionStrategy insertionStrategy0 = new InsertionStrategy();
      insertionStrategy0.cancelExplanationComputation();
      assertEquals("Replay (Insertion-based) minimization strategy", insertionStrategy0.toString());
  }
}
