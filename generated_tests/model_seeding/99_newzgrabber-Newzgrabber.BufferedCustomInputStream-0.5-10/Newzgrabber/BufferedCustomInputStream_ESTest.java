/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 18:56:57 GMT 2019
 */

package Newzgrabber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Newzgrabber.BufferedCustomInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BufferedCustomInputStream_ESTest extends BufferedCustomInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      boolean boolean0 = true;
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream((InputStream) null, true);
      bufferedCustomInputStream0.setRemoveCarriages(true);
      bufferedCustomInputStream0.closeTemp();
      try { 
        bufferedCustomInputStream0.available();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(pipedInputStream0, 2306);
      bufferedCustomInputStream0.setTempfile("INDEX:");
      bufferedCustomInputStream0.ready();
      pipedInputStream0.markSupported();
      BufferedCustomInputStream bufferedCustomInputStream1 = new BufferedCustomInputStream(pipedInputStream0, true);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          byte[] byteArray0 = new byte[1];
          byteArray0[0] = (byte) (-84);
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-84), (byte) (-84));
          byteArrayInputStream0.mark(1);
          int int0 = new Byte((byte) (-84));
          BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, false);
          bufferedCustomInputStream0.readLine();
          bufferedCustomInputStream0.setTempfile("Directory Dialog");
          BufferedCustomInputStream.main((String[]) null);
          bufferedCustomInputStream0.readLine();
          bufferedCustomInputStream0.ready();
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (-1));
      boolean boolean0 = false;
      byteArrayInputStream0.mark(1);
      byteArrayInputStream0.read(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, false);
      bufferedCustomInputStream0.readLine();
      bufferedCustomInputStream0.TIMEOUT = 0;
      // Undeclared exception!
      try { 
        bufferedCustomInputStream0.setTempfile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }
}
