/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:50:25 GMT 2019
 */

package org.ow2.proactive.scripting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.Serializable;
import java.net.URL;
import java.util.Hashtable;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.script.Bindings;
import javax.script.SimpleBindings;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.ow2.proactive.scripting.ForkEnvironmentScript;
import org.ow2.proactive.scripting.Script;
import org.ow2.proactive.scripting.ScriptResult;
import org.ow2.proactive.scripting.ScriptTest;
import org.ow2.proactive.scripting.SelectionScript;
import org.ow2.proactive.scripting.SimpleScript;
import org.ow2.proactive.scripting.TaskScript;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Script_ESTest extends Script_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Script<String> script0 = (Script<String>) mock(Script.class, CALLS_REAL_METHODS);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(script0);
      forkEnvironmentScript0.setScript("addappender(): add an appender");
      String string0 = forkEnvironmentScript0.display();
      assertEquals(" { \nScript 'null'\n\tscriptEngineLookupName = 'null'\n\tscript = \naddappender(): add an appender\n\tid = \nnull\n\tparameters = null\n}", string0);
      assertEquals("addappender(): add an appender", forkEnvironmentScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Serializable[] serializableArray0 = new Serializable[2];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, "/fake/but/wellformed/url", serializableArray0);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      forkEnvironmentScript0.hashCode();
      assertEquals("/fake/but/wellformed/url", forkEnvironmentScript0.getScriptName());
      assertEquals("/fake/but/wellformed/url", forkEnvironmentScript0.getEngineName());
      assertEquals("file://some/fake/but/wellformed/url", forkEnvironmentScript0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Serializable[] serializableArray0 = new Serializable[9];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      boolean boolean0 = simpleScript0.equals(forkEnvironmentScript0);
      assertEquals("/fake/but/wellformed/url", forkEnvironmentScript0.getScriptName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("ew]Z_", "zY'H2-p^W=<`AH");
      simpleScript0.execute();
      assertEquals("ew]Z_", simpleScript0.getScript());
      assertEquals("zY'H2-p^W=<`AH", simpleScript0.getEngineName());
      assertEquals("ew]Z_", simpleScript0.getId());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Script<String> script0 = (Script<String>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      taskScript0.script = "args";
      String string0 = taskScript0.fetchScriptWithExceptionHandling();
      assertNotNull(string0);
      assertEquals("args", string0);
      assertEquals("args", taskScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      File file0 = MockFile.createTempFile("Urpx!o#M~sz", "UiUl");
      Serializable[] serializableArray0 = new Serializable[2];
      SimpleScript simpleScript0 = new SimpleScript(file0, serializableArray0);
      String string0 = simpleScript0.fetchScript();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("l][-!pLunA", "MD5", true);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(selectionScript0);
      forkEnvironmentScript0.fetchUrlIfNeeded();
      assertEquals("l][-!pLunA", forkEnvironmentScript0.getId());
      assertEquals("MD5", forkEnvironmentScript0.getEngineName());
      assertEquals("SelectionScript", forkEnvironmentScript0.getScriptName());
      assertEquals("l][-!pLunA", forkEnvironmentScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("IJ", "IJ");
      boolean boolean0 = simpleScript0.equals(simpleScript0);
      assertEquals("IJ", simpleScript0.getEngineName());
      assertEquals("IJ", simpleScript0.getId());
      assertTrue(boolean0);
      assertEquals("IJ", simpleScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("text/plain");
      SelectionScript selectionScript0 = null;
      try {
        selectionScript0 = new SelectionScript(mockFile0, (Serializable[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Unable to read script : /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/text/plain
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Script<String> script0 = (Script<String>) mock(Script.class, CALLS_REAL_METHODS);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(script0);
      String string0 = forkEnvironmentScript0.toString();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = MockFile.createTempFile("\tparameters = ", "https");
      String string0 = Script.readFile(file0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Script<String> script0 = (Script<String>) mock(Script.class, CALLS_REAL_METHODS);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(script0);
      SimpleScript simpleScript0 = new SimpleScript(forkEnvironmentScript0);
      String string0 = simpleScript0.getScriptName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("", "");
      String string0 = simpleScript0.getScriptName();
      assertEquals("", simpleScript0.getScript());
      assertEquals("", simpleScript0.getId());
      assertEquals("SimpleScript", string0);
      assertEquals("", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("FTd]Ds9$|>oA", "root-ref");
      simpleScript0.overrideDefaultScriptName("");
      simpleScript0.getScriptName();
      assertEquals("", simpleScript0.getScriptName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("nashorn", "nashorn");
      String string0 = simpleScript0.getScript();
      assertNotNull(string0);
      assertEquals("nashorn", simpleScript0.getEngineName());
      assertEquals("nashorn", string0);
      assertEquals("nashorn", simpleScript0.getId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests((String) null, "FTd]Ds9$|>oA");
      scriptTest_ScriptForTests0.script = "args";
      scriptTest_ScriptForTests0.getReader();
      assertEquals("FTd]Ds9$|>oA", scriptTest_ScriptForTests0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("3X.?@re", "3X.?@re");
      simpleScript0.getParameters();
      assertEquals("3X.?@re", simpleScript0.getScript());
      assertEquals("3X.?@re", simpleScript0.getId());
      assertEquals("3X.?@re", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, "args", serializableArray0);
      simpleScript0.getId();
      assertEquals("args", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("ew]Z_", "zY'H2-p^W=<`AH");
      String string0 = simpleScript0.getEngineName();
      assertNotNull(string0);
      assertEquals("zY'H2-p^W=<`AH", string0);
      assertEquals("ew]Z_", simpleScript0.getId());
      assertEquals("ew]Z_", simpleScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("http", "http");
      String string0 = simpleScript0.fetchScript();
      assertEquals("http", simpleScript0.getEngineName());
      assertEquals("http", simpleScript0.getId());
      assertEquals("http", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript((String) null, "&~uO!nEU");
      simpleScript0.createScriptEngine();
      assertEquals("&~uO!nEU", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Script.readFile((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("nashorn");
      try { 
        Script.readFile(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Script<String> script0 = (Script<String>) mock(Script.class, CALLS_REAL_METHODS);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(script0);
      // Undeclared exception!
      try { 
        forkEnvironmentScript0.overrideDefaultScriptName("args");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Script<ForkEnvironmentScript> script0 = (Script<ForkEnvironmentScript>) mock(Script.class, CALLS_REAL_METHODS);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(script0);
      SimpleScript simpleScript0 = new SimpleScript(forkEnvironmentScript0);
      // Undeclared exception!
      try { 
        simpleScript0.getReader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Serializable[] serializableArray0 = new Serializable[2];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, "/fake/but/wellformed/url", serializableArray0);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      // Undeclared exception!
      try { 
        forkEnvironmentScript0.fetchScriptWithExceptionHandling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Script.digest((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[8];
      SimpleScript simpleScript0 = new SimpleScript("", "", serializableArray0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      MockPrintStream mockPrintStream0 = new MockPrintStream("MD5");
      simpleScript0.execute((Map<String, Object>) hashtable0, (PrintStream) mockPrintStream0, (PrintStream) mockPrintStream0);
      assertEquals("", simpleScript0.getEngineName());
      assertEquals("", simpleScript0.getId());
      assertEquals("", simpleScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, "args", serializableArray0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      simpleScript0.execute((Map<String, Object>) hashtable0, (PrintStream) null, (PrintStream) null);
      assertEquals("args", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests("\tscript = ", "\tscript = ");
      TaskScript taskScript0 = new TaskScript(scriptTest_ScriptForTests0);
      taskScript0.overrideDefaultScriptName("args");
      assertEquals("TestScript", taskScript0.getScriptName());
      assertEquals("\tscript = ", taskScript0.getId());
      assertEquals("\tscript = ", taskScript0.getEngineName());
      assertEquals("\tscript = ", taskScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("IJ", "IJ");
      SimpleScript simpleScript1 = new SimpleScript("args", "args");
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      boolean boolean0 = simpleScript1.equals(forkEnvironmentScript0);
      assertEquals("SimpleScript", forkEnvironmentScript0.getScriptName());
      assertEquals("IJ", forkEnvironmentScript0.getScript());
      assertEquals("IJ", forkEnvironmentScript0.getEngineName());
      assertEquals("IJ", forkEnvironmentScript0.getId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("IJ", "IJ");
      Script<SimpleScript> script0 = (Script<SimpleScript>) mock(Script.class, CALLS_REAL_METHODS);
      SimpleScript simpleScript1 = new SimpleScript(script0);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      boolean boolean0 = simpleScript1.equals(forkEnvironmentScript0);
      assertFalse(boolean0);
      assertEquals("IJ", forkEnvironmentScript0.getId());
      assertEquals("SimpleScript", forkEnvironmentScript0.getScriptName());
      assertEquals("IJ", forkEnvironmentScript0.getScript());
      assertEquals("IJ", forkEnvironmentScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Script<ForkEnvironmentScript> script0 = (Script<ForkEnvironmentScript>) mock(Script.class, CALLS_REAL_METHODS);
      SimpleScript simpleScript0 = new SimpleScript(script0);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      boolean boolean0 = simpleScript0.equals(forkEnvironmentScript0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript((String) null, "nashorn");
      boolean boolean0 = simpleScript0.equals((Object) null);
      assertEquals("nashorn", simpleScript0.getEngineName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Script<ScriptTest.ScriptForTests> script0 = (Script<ScriptTest.ScriptForTests>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      taskScript0.hashCode();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      File file0 = MockFile.createTempFile("%3d", "Could not flush the end of the script execution output");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/%3d0Could not flush the end of the script execution output");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "args");
      String string0 = Script.readFile(file0);
      assertEquals("args\n", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Script<String> script0 = (Script<String>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      Serializable[] serializableArray0 = new Serializable[3];
      taskScript0.parameters = serializableArray0;
      // Undeclared exception!
      try { 
        taskScript0.prepareBindings((Bindings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.ow2.proactive.scripting.Script", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Script<String> script0 = (Script<String>) mock(Script.class, CALLS_REAL_METHODS);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(script0);
      SimpleBindings simpleBindings0 = new SimpleBindings();
      TaskScript taskScript0 = new TaskScript(forkEnvironmentScript0);
      taskScript0.prepareBindings(simpleBindings0);
      assertNull(taskScript0.getId());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Script<SelectionScript> script0 = (Script<SelectionScript>) mock(Script.class, CALLS_REAL_METHODS);
      TaskScript taskScript0 = new TaskScript(script0);
      ScriptResult<Serializable> scriptResult0 = taskScript0.execute();
      assertNull(scriptResult0.getOutput());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, "org.ow2.proactive.scripting.Script$ScriptContentAndEngineName", serializableArray0);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      simpleScript0.execute((Map<String, Object>) hashtable0, (PrintStream) null, (PrintStream) null);
      assertEquals("org.ow2.proactive.scripting.Script$ScriptContentAndEngineName", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, "args", serializableArray0);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(simpleScript0);
      // Undeclared exception!
      forkEnvironmentScript0.fetchScriptWithExceptionHandling();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Script<String> script0 = (Script<String>) mock(Script.class, CALLS_REAL_METHODS);
      ForkEnvironmentScript forkEnvironmentScript0 = new ForkEnvironmentScript(script0);
      TaskScript taskScript0 = new TaskScript(forkEnvironmentScript0);
      String string0 = taskScript0.fetchScriptWithExceptionHandling();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript((String) null, "&~uO!nEU");
      String string0 = simpleScript0.fetchScript();
      assertNull(string0);
      assertEquals("&~uO!nEU", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, "args", serializableArray0);
      simpleScript0.fetchScript();
      assertEquals("args", simpleScript0.getEngineName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      SelectionScript selectionScript0 = new SelectionScript(uRL0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = Script.digest("MD5");
      assertEquals("\u0013\uFFFD\t\u0016\uFFFD%\u000E\uFFFD\uFFFD7\uFFFD@\uFFFDsx", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("MD5", "TaskScript");
      simpleScript0.getScriptUrl();
      assertEquals("MD5", simpleScript0.getId());
      assertEquals("TaskScript", simpleScript0.getEngineName());
      assertEquals("MD5", simpleScript0.getScript());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      File file0 = MockFile.createTempFile("r$sKf\"_>?[", "Script could not be fetched");
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(file0);
      assertEquals("/tmp/r$sKf\"_>?[0Script could not be fetched", scriptTest_ScriptForTests0.getId());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript();
      assertTrue(selectionScript0.isDynamic());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ScriptTest scriptTest0 = new ScriptTest();
      URL uRL0 = MockURL.getFileExample();
      ScriptTest.ScriptForTests scriptTest_ScriptForTests0 = scriptTest0.new ScriptForTests(uRL0, "TaskScript", false);
      // Undeclared exception!
      try { 
        scriptTest_ScriptForTests0.fetchUrlIfNeeded();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("MD5", "03!^77vekw!`nhzu8(+q");
      String string0 = simpleScript0.display();
      assertEquals(" { \nScript 'SimpleScript'\n\tscriptEngineLookupName = '03!^77vekw!`nhzu8(+q'\n\tscript = \nMD5\n\tid = \nMD5\n\tparameters = null\n}", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript(uRL0, serializableArray0);
      boolean boolean0 = simpleScript0.equals(",Cj2{wIqsY_U");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SimpleScript simpleScript0 = new SimpleScript("nashorn", "nashorn");
          // Undeclared exception!
          try { 
            simpleScript0.execute();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"nashorn.createContext\")
             // java.lang.Thread.getStackTrace(Thread.java:1552)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // jdk.nashorn.internal.runtime.Context.<init>(Context.java:492)
             // jdk.nashorn.internal.runtime.Context.<init>(Context.java:463)
             // jdk.nashorn.api.scripting.NashornScriptEngine$1.run(NashornScriptEngine.java:129)
             // jdk.nashorn.api.scripting.NashornScriptEngine$1.run(NashornScriptEngine.java:125)
             // java.security.AccessController.doPrivileged(Native Method)
             // jdk.nashorn.api.scripting.NashornScriptEngine.<init>(NashornScriptEngine.java:125)
             // jdk.nashorn.api.scripting.NashornScriptEngineFactory.getScriptEngine(NashornScriptEngineFactory.java:148)
             // org.ow2.proactive.scripting.Script.findScriptEngineCandidates(Script.java:545)
             // org.ow2.proactive.scripting.Script.createScriptEngine(Script.java:521)
             // org.ow2.proactive.scripting.Script.execute(Script.java:375)
             // org.ow2.proactive.scripting.Script.execute(Script.java:352)
             // sun.reflect.GeneratedMethodAccessor145.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
             // java.lang.Thread.run(Thread.java:745)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Serializable[] serializableArray0 = new Serializable[0];
      SimpleScript simpleScript0 = new SimpleScript((String) null, (String) null, serializableArray0);
      String string0 = simpleScript0.getEngineName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SelectionScript selectionScript0 = new SelectionScript("", "");
      TaskScript taskScript0 = new TaskScript(selectionScript0);
      String string0 = taskScript0.fetchScriptWithExceptionHandling();
      assertEquals("", taskScript0.getId());
      assertEquals("SelectionScript", taskScript0.getScriptName());
      assertEquals("", string0);
      assertEquals("", taskScript0.getEngineName());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SimpleScript simpleScript0 = new SimpleScript("nashorn", "nashorn");
      String string0 = simpleScript0.toString();
      assertEquals("nashorn", simpleScript0.getId());
      assertEquals("nashorn", simpleScript0.getScript());
      assertEquals("nashorn", simpleScript0.getEngineName());
      assertEquals("SimpleScript", string0);
  }
}
