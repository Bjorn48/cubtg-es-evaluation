/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 02:39:14 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DoorOrWindow;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Light;
import com.eteks.sweethome3d.model.PieceOfFurniture;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.net.URL;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomePieceOfFurniture_ESTest extends HomePieceOfFurniture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 2.0F;
      floatArray0[2] = 2.0F;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, false, false);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(2.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(2.0F);
      homePieceOfFurniture0.isTopRightPointAt(2.0F, 0.0F, 0.0F);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.isBackFaceShown();
      homePieceOfFurniture0.getNameYOffset();
      Level level0 = new Level("<.EbfL(1*d", 2.0F, 2734.917F, 2.0F);
      level0.getElevation();
      level0.getElevation();
      level0.getHeight();
      homePieceOfFurniture0.isAtLevel(level0);
      homePieceOfFurniture0.isNameCenterPointAt(0.0F, 0.3926991F, 2.0F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "jW/rp'{*2-tU)gO7|", "", (Content) null, (Content) null, (Content) null, (-2734.917F), (-294.1F), 1.0F, (-2734.917F), true, floatArray0, "<.EbfL(1*d", true, true, true, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      catalogPieceOfFurniture0.getName();
      bigDecimal1.toString();
      catalogPieceOfFurniture0.getDescription();
      bigDecimal1.multiply(bigDecimal0);
      Float float0 = new Float(662.572F);
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setHeight(2.0F);
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.setWidth(1.0F);
      homePieceOfFurniture0.setModelMirrored(false);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      float[][] floatArray0 = new float[16][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = 2.0F;
      floatArray1[2] = 2.0F;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(2.0F);
      Float float1 = new Float(2.0F);
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      catalogPieceOfFurniture0.getCurrency();
      bigDecimal0.intValue();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.isNameCenterPointAt(1984.66F, (float) float1, (-897.024F));
      BigDecimal bigDecimal2 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.isTopRightPointAt((-897.024F), 2.0F, 3.4028235E38F);
      homePieceOfFurniture1.setNameAngle(2752.1875F);
      homePieceOfFurniture0.isBackFaceShown();
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture1.isBottomLeftPointAt(1.8505604F, 2.0F, 3.4028235E38F);
      homePieceOfFurniture1.isPointAt(2.0F, (-741.74F), (-1.0F));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-2734.917F);
      floatArray1[2] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-2734.917F), (-2734.917F), 0.0F, true, false);
      BigDecimal bigDecimal1 = BigDecimal.valueOf((-2399.4792419406867));
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      bigDecimal0.multiply(bigDecimal1);
      Float float0 = new Float(3.4028235E38F);
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth((-2734.917F));
      Float.floatToIntBits((-1015.1F));
      homePieceOfFurniture0.isModelMirrored();
      homePieceOfFurniture0.setShininess((Float) (-1015.1F));
      homePieceOfFurniture0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = (-1.0F);
      floatArray1[4] = (-2734.917F);
      floatArray0[2] = floatArray1;
      float[] floatArray2 = new float[16];
      floatArray2[2] = (-1.0F);
      floatArray2[3] = 3363.4F;
      floatArray2[4] = 0.0F;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), 0.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getModel();
      catalogPieceOfFurniture0.getWidth();
      catalogPieceOfFurniture0.getHeight();
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isResizable();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isTopLeftPointAt(0.0F, (-1.0F), (-1.0F));
      Integer.valueOf(0);
      Integer integer0 = Integer.valueOf(0);
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setColor(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      floatArray0[3] = floatArray0[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), (-2734.917F), (-2734.917F));
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setY(1984.66F);
      homePieceOfFurniture0.setElevation(1454.4005F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), (-1.0F), 3375.0F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(0.31653136F);
      homePieceOfFurniture0.setName(".EbfL(1EH");
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.getName();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, (-1.0F), (-1.0F), 2171.98F, false, false);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(569.0544F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(3554.6655F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      homePieceOfFurniture1.setAngle(3554.6655F);
      homePieceOfFurniture0.setY(3554.6655F);
      homePieceOfFurniture1.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(2752.1875F, 1.0F, 1.0F);
      homePieceOfFurniture1.containsPoint((-533.38696F), 1.0F, 419.0F);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture1.setAngle(2156.675F);
      homePieceOfFurniture0.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("+ua&zp]lLZO", (Content) null, (Content) null, 0.0F, (-2363.64F), 0.15233545F, false, false);
      float float0 = new Float(0.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.containsPoint(1306.7F, (-6250.7F), 0.0F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      homePieceOfFurniture0.setNameYOffset(0.0F);
      homePieceOfFurniture0.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isDoorOrWindow();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      bigDecimal1.intValue();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), (-2734.917F), (-1.0F));
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.setY((-1.0F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), 1406.0687F, 1836.0F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.setX(1836.0F);
      homePieceOfFurniture0.getX();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray1[4] = (-2734.917F);
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      float[] floatArray2 = new float[1];
      floatArray0[4] = floatArray2;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), 8.46725F, 3375.0F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.setAngle((-2734.917F));
      homePieceOfFurniture0.isPointAt((-2734.917F), (-1173.0F), 1634.52F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray0[3] = floatArray0[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), (-2734.917F), (-2734.917F));
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.setY(1984.66F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), (-1.0F), 3375.0F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isNameCenterPointAt((-1.0F), (-906.6F), (-1.0F));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[][] floatArray0 = new float[10][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.Ebf(V*d", "<.Ebf(V*d", "<.Ebf(V*d", (Content) null, (Content) null, (Content) null, 3.161524F, 3.161524F, 3.161524F, 3.161524F, false, floatArray0, "<.Ebf(V*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = Integer.valueOf((-3319));
      Object object0 = new Object();
      Integer.compareUnsigned((-3319), (-3319));
      integer0.equals(object0);
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setColor(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 2.0F, 0.31653136F, 2.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isNameVisible();
      homePieceOfFurniture0.setNameVisible(true);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".ElUYbfL(1E", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[7];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "<.EbfL(1*d", "", (Content) null, (Content) null, (Content) null, 0.0F, (-294.1F), (-2734.917F), 0.0F, true, floatArray0, "<.EbfL(1*d", true, true, true, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getName();
      bigDecimal1.toString();
      catalogPieceOfFurniture0.getDescription();
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      Float float0 = new Float((-294.1F));
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setX((-2734.917F));
      homePieceOfFurniture0.setDescription("");
      homePieceOfFurniture0.setHeight((-2734.917F));
      homePieceOfFurniture0.getY();
      homePieceOfFurniture0.getX();
      homePieceOfFurniture0.setName("<.EbfL(1*d");
      homePieceOfFurniture0.getIcon();
      homePieceOfFurniture0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 2.0F;
      floatArray0[2] = 2.0F;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, false, false);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(2.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(2.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      homePieceOfFurniture1.setAngle((-1088.0F));
      homePieceOfFurniture1.setY((-1928.0F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(2.0F, 2.0F, 2.0F);
      homePieceOfFurniture0.setMovable(false);
      homePieceOfFurniture0.containsPoint((-1.0F), (-1928.0F), 0.3926991F);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.setAngle(2.0F);
      homePieceOfFurniture1.isDoorOrWindow();
      homePieceOfFurniture1.getHeight();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray0[3] = floatArray0[2];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), false, false);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getPlanIcon();
      Float float0 = new Float((-2734.917F));
      Float float1 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setName((String) null);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), (-2734.917F), (-2734.917F));
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      homePieceOfFurniture0.getColor();
      catalogPieceOfFurniture0.getModelRotation();
      homePieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      homePieceOfFurniture0.isResizable();
      homePieceOfFurniture0.isTexturable();
      homePieceOfFurniture0.getPrice();
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture1.isBottomRightPointAt(3.4028235E38F, (-2442.735F), (-2734.917F));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      float[] floatArray2 = new float[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.setY(1984.66F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), (-1.0F), 3375.0F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.intersectsRectangle(1984.66F, (-305.2F), (-305.2F), 1984.66F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[15];
      floatArray1[2] = (-2734.917F);
      floatArray1[3] = (-2734.917F);
      floatArray1[4] = 0.0F;
      float[] floatArray2 = new float[5];
      floatArray2[1] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[4] = (-2734.917F);
      floatArray0[2] = floatArray2;
      floatArray0[3] = floatArray2;
      float[] floatArray3 = new float[0];
      floatArray0[4] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      BigDecimal.valueOf((double) (-2734.917F));
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(0.0F);
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setHeight(1.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2610.6943F), false, true);
      BigDecimal.valueOf(337.75048);
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((double) (-2734.917F));
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Float.min((-2610.6943F), 1.0F);
      homePieceOfFurniture0.setVisible(false);
      Float.floatToIntBits(1.0F);
      homePieceOfFurniture0.isVisible();
      homePieceOfFurniture0.setShininess((Float) null);
      homePieceOfFurniture0.setShininess((Float) null);
      homePieceOfFurniture0.getPlanIcon();
      homePieceOfFurniture0.getModel();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-2734.917F);
      floatArray1[2] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "jW/rp'{*2-tU)gO7|", (Content) null, (Content) null, (Content) null, 662.572F, (-2734.917F), 3.4028235E38F, 0.0F, false, floatArray0, "", true, true, false, bigDecimal0, bigDecimal0);
      BigDecimal.valueOf((-2399.4792419406867));
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(3.4028235E38F);
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setHeight(2.0F);
      homePieceOfFurniture0.move(662.572F, 0.0F);
      homePieceOfFurniture0.getPrice();
      homePieceOfFurniture0.setElevation((-2734.917F));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 2.0F;
      floatArray1[1] = (-2734.917F);
      floatArray1[2] = 2.0F;
      floatArray1[3] = 2.0F;
      floatArray1[4] = (-2734.917F);
      floatArray1[5] = 2.0F;
      floatArray1[6] = (-2734.917F);
      floatArray1[7] = (-2734.917F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = 2.0F;
      floatArray2[1] = 662.572F;
      floatArray2[2] = (-2734.917F);
      floatArray2[3] = 2.0F;
      floatArray2[4] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 0.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 662.572F;
      floatArray3[3] = 0.0F;
      floatArray3[4] = (-2734.917F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[5];
      floatArray4[0] = (-2734.917F);
      floatArray4[1] = (-2734.917F);
      floatArray4[2] = 662.572F;
      floatArray4[3] = 3363.4F;
      floatArray4[4] = 2.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[0];
      floatArray0[4] = floatArray5;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), 2.0F, false, floatArray0, "<.EbfL(1*d", false, true, true, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getIcon();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getModel();
      catalogPieceOfFurniture0.getWidth();
      catalogPieceOfFurniture0.getDepth();
      catalogPieceOfFurniture0.getHeight();
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getColor();
      catalogPieceOfFurniture0.getModelRotation();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isResizable();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-2734.917F);
      floatArray1[2] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "jW/rp'{*2-tU)gO7|", (Content) null, (Content) null, (Content) null, 662.572F, (-2734.917F), 3.4028235E38F, 0.0F, false, floatArray0, "", true, true, false, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.valueOf((-2399.4792419406867));
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      bigDecimal0.multiply(bigDecimal1);
      Float float0 = new Float(3.4028235E38F);
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), 1985.66F, 4.5518017F);
      homePieceOfFurniture0.setDepth((-2734.917F));
      Float.floatToIntBits((-1015.1F));
      homePieceOfFurniture0.isModelMirrored();
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setShininess((Float) (-1015.1F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = 2.0F;
      floatArray1[2] = 2.0F;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(2.0F);
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      catalogPieceOfFurniture0.getCurrency();
      bigDecimal0.intValue();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.isNameCenterPointAt(1984.66F, 2.0F, (-897.024F));
      BigDecimal bigDecimal2 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.isTopRightPointAt((-897.024F), 2.0F, 3.4028235E38F);
      homePieceOfFurniture1.setNameAngle(2752.1875F);
      homePieceOfFurniture0.isBackFaceShown();
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture1.isBottomLeftPointAt(1.8505604F, 2.0F, 3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "jW/rp'{*2-tU)gO7|", "", (Content) null, (Content) null, (Content) null, (-2734.917F), (-294.1F), 1.0F, (-2734.917F), true, floatArray0, "<.EbfL(1*d", true, true, true, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      bigDecimal1.multiply(bigDecimal0);
      Float float0 = new Float(662.572F);
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setHeight(2.0F);
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.getNameStyle();
      homePieceOfFurniture0.setDepth((-2796.2F));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setWidth(0.5F);
      homePieceOfFurniture0.setNameVisible(true);
      HomePieceOfFurniture.SortableProperty.values();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(0.31653136F);
      homePieceOfFurniture0.isBottomRightPointAt(0.31653136F, 0.31653136F, 0.31653136F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-2734.917F), (-2734.917F), 3.4028235E38F, false, true);
      BigDecimal.valueOf(338.0);
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((double) (-2734.917F));
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Float.min(3.4028235E38F, 1.0F);
      Float.floatToIntBits(3.4028235E38F);
      homePieceOfFurniture0.setDepth(3.4028235E38F);
      homePieceOfFurniture0.isVisible();
      homePieceOfFurniture0.setShininess(float0);
      homePieceOfFurniture0.setShininess(float0);
      homePieceOfFurniture0.getPlanIcon();
      homePieceOfFurniture0.getShininess();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 15.066022F, 15.066022F, 15.066022F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(15.066022F, 15.066022F, 15.066022F);
      homePieceOfFurniture0.getIcon();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, true, floatArray0, "<.EbfL(1*d", true, true, true, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 704.1679F, 2116.069F, 704.1679F, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Level level0 = new Level((String) null, 2116.069F, (-1.0F), (-1.0F));
      Float float0 = new Float(2116.069F);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      Integer integer0 = Integer.valueOf(17);
      homePieceOfFurniture0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "jW/rp'{*2-tU)gO7|", "", (Content) null, (Content) null, (Content) null, (-2734.917F), (-294.1F), 1.0F, (-2734.917F), true, floatArray0, "<.EbfL(1*d", true, true, true, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      catalogPieceOfFurniture0.getName();
      bigDecimal1.toString();
      catalogPieceOfFurniture0.getDescription();
      bigDecimal1.multiply(bigDecimal0);
      Float float0 = new Float(662.572F);
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setX((-1750.78F));
      homePieceOfFurniture0.setX((-294.1F));
      homePieceOfFurniture0.setHeight(2.0F);
      homePieceOfFurniture0.setWidth(1.0F);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.setWidth((-1311.0863F));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 0.15233545F, 0.15233545F, 0.15233545F, false, true);
      catalogPieceOfFurniture0.getName();
      Float float0 = new Float(0.15233545F);
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isNameCenterPointAt(0.076167725F, 0.0F, (-4027.0F));
      homePieceOfFurniture0.containsPoint((-1116.8077F), (-2104.743F), 0.076167725F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      homePieceOfFurniture0.isTopLeftPointAt(0.15233545F, (-2104.743F), (-2104.743F));
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.setNameAngle((-2995.8958F));
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.setDescription("i>#V68DE[f_aGr");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float[][] floatArray0 = new float[16][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = 2.0F;
      floatArray1[2] = 2.0F;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(2.0F);
      Float float1 = new Float(2.0F);
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.getCurrency();
      bigDecimal0.intValue();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("4Zs");
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      float[][] floatArray2 = new float[0][5];
      float[][] floatArray3 = new float[8][2];
      float[] floatArray4 = new float[8];
      floatArray4[0] = 0.3926991F;
      floatArray4[1] = 0.3926991F;
      floatArray4[2] = 0.3926991F;
      floatArray4[3] = 0.3926991F;
      floatArray4[4] = (-4.309F);
      floatArray4[5] = 1.0F;
      floatArray4[6] = (-4.309F);
      floatArray4[7] = 1.0F;
      floatArray3[0] = floatArray4;
      float[] floatArray5 = new float[4];
      floatArray5[0] = 379.36435F;
      floatArray5[1] = 1.0F;
      floatArray5[2] = (-4.309F);
      floatArray5[3] = 1.0F;
      floatArray3[1] = floatArray5;
      float[] floatArray6 = new float[4];
      floatArray6[0] = 1.0F;
      floatArray6[1] = (-4.309F);
      floatArray6[2] = 0.3926991F;
      floatArray6[3] = (-4.309F);
      floatArray3[2] = floatArray6;
      float[] floatArray7 = new float[9];
      floatArray7[0] = 0.3926991F;
      floatArray7[1] = 0.3926991F;
      floatArray7[2] = 379.36435F;
      floatArray7[3] = 1.0F;
      floatArray7[4] = 1.0F;
      floatArray7[5] = 379.36435F;
      floatArray7[6] = (-1384.63F);
      floatArray7[7] = 0.3926991F;
      floatArray7[8] = 379.36435F;
      floatArray3[3] = floatArray7;
      float[] floatArray8 = new float[7];
      floatArray8[0] = 1.0F;
      floatArray8[1] = (-2461.76F);
      floatArray8[2] = (-1384.63F);
      floatArray8[3] = (-4.309F);
      floatArray8[4] = (-1384.63F);
      floatArray8[5] = 379.36435F;
      floatArray8[6] = (-1384.63F);
      floatArray3[4] = floatArray8;
      float[] floatArray9 = new float[9];
      floatArray9[0] = 1.0F;
      floatArray9[1] = 0.3926991F;
      floatArray9[2] = (-2461.76F);
      floatArray9[3] = (-2461.76F);
      floatArray9[4] = 1.0F;
      floatArray9[5] = 1.0F;
      floatArray9[6] = 1.0F;
      floatArray9[7] = 1.0F;
      floatArray9[8] = 0.3926991F;
      floatArray3[5] = floatArray9;
      float[] floatArray10 = new float[5];
      floatArray10[0] = (-1384.63F);
      floatArray10[1] = (-2461.76F);
      floatArray10[2] = (-4.309F);
      floatArray10[3] = (-1384.63F);
      floatArray10[4] = (-2461.76F);
      floatArray3[6] = floatArray10;
      float[] floatArray11 = new float[2];
      floatArray11[0] = (-2461.76F);
      floatArray11[1] = (-4.309F);
      floatArray3[7] = floatArray11;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("", "=nflkk6J$yfQYb9a0Dj", "4Zs", content0, content0, 0.3926991F, 1.0F, (-1384.63F), (-4.309F), false, false, floatArray3, "=nflkk6J$yfQYb9a0Dj", false, bigDecimal1, bigDecimal1);
      furnitureCategory0.getIndexOfPieceOfFurniture(catalogPieceOfFurniture1);
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isNameCenterPointAt(2.0F, (float) float1, (-897.024F));
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.isTopRightPointAt((-897.024F), 2.0F, 2.0F);
      homePieceOfFurniture1.setNameAngle(2752.1875F);
      homePieceOfFurniture1.clone();
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture1.isBottomLeftPointAt(1.8505604F, 2.0F, 3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 1986.66F, 1986.66F, 1986.66F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt(380.7511F, 380.7511F, (-637.9F));
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.setNameVisible(true);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = 2.0F;
      floatArray1[2] = 2.0F;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(2.0F);
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      catalogPieceOfFurniture0.getCurrency();
      bigDecimal0.intValue();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      homePieceOfFurniture0.isNameCenterPointAt(1984.66F, 2.0F, (-897.024F));
      BigDecimal bigDecimal3 = BigDecimal.TEN;
      homePieceOfFurniture0.clone();
      homePieceOfFurniture0.isTopRightPointAt((-897.024F), 2.0F, 3.4028235E38F);
      homePieceOfFurniture0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 704.1679F, 2645.968F, 704.1679F, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Level level0 = new Level((String) null, 2645.968F, (-1.0F), (-1.0F));
      level0.getElevation();
      level0.getElevation();
      level0.getHeight();
      homePieceOfFurniture0.setElevation(704.1679F);
      homePieceOfFurniture0.setLevel(level0);
      Level level1 = new Level("", 3062.767F, 2645.968F, 704.1679F);
      Float float0 = new Float(704.1679F);
      homePieceOfFurniture0.isAtLevel(level1);
      homePieceOfFurniture0.getAngle();
      Integer integer0 = new Integer((-21));
      homePieceOfFurniture0.isBottomRightPointAt((-7230.38F), 2478.227F, 2.0F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      float[][] floatArray0 = new float[14][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 2.0F;
      floatArray1[2] = (-2734.917F);
      floatArray1[3] = 2.0F;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      float[] floatArray2 = new float[16];
      floatArray2[0] = 0.0F;
      floatArray2[1] = (-2734.917F);
      floatArray2[2] = 662.572F;
      floatArray2[15] = 3363.4F;
      floatArray2[0] = 2.0F;
      floatArray0[3] = floatArray2;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), false, true);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getIcon();
      catalogPieceOfFurniture0.getModel();
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getColor();
      catalogPieceOfFurniture0.getModelRotation();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isResizable();
      catalogPieceOfFurniture0.getPrice();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(0.0F, 0.0F, (-1.0F));
      homePieceOfFurniture0.getShininess();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 704.1679F, 2116.069F, 704.1679F, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Level level0 = new Level("", 2116.069F, (-1.0F), (-1.0F));
      level0.getElevation();
      Float float0 = new Float(3062.767F);
      homePieceOfFurniture0.setLevel(level0);
      Level level1 = new Level("", 3062.767F, 2116.069F, 704.1679F);
      Float float1 = new Float(704.1679F);
      homePieceOfFurniture0.isAtLevel(level1);
      homePieceOfFurniture0.getAngle();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 2.0F;
      floatArray1[2] = (-2734.917F);
      floatArray1[3] = 2.0F;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "com.eteks.sweethome3d.model.HomePieceOfFurniture$14", (Content) null, (Content) null, (Content) null, 662.572F, (-2734.917F), 3.4028235E38F, 0.0F, false, floatArray0, "", true, true, false, bigDecimal0, bigDecimal0);
      BigDecimal.valueOf((-2399.4792419406867));
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(3.4028235E38F);
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setHeight(2.0F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "jW/rp'{*2-tU)gO7|", "", (Content) null, (Content) null, (Content) null, 0.0F, (-294.1F), (-2734.917F), 0.0F, true, floatArray0, "<.EbfL(1*d", true, true, true, bigDecimal0, bigDecimal0);
      bigDecimal0.toString();
      catalogPieceOfFurniture0.getDescription();
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBackFaceShown();
      homePieceOfFurniture0.isNameCenterPointAt((-294.1F), (-2067.0F), (-1.0F));
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.setMovable(false);
      homePieceOfFurniture0.setElevation((-2067.0F));
      homePieceOfFurniture0.setName("c=kY=>");
      homePieceOfFurniture0.getHeight();
      homePieceOfFurniture0.isVisible();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[21];
      floatArray1[2] = (-2734.917F);
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[1] = 0.0F;
      floatArray2[4] = (-2734.917F);
      floatArray0[2] = floatArray2;
      float[] floatArray3 = new float[0];
      floatArray0[4] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-4.4539986F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(3375.0F, 1384.7291F, 0.0F);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isTopRightPointAt(773.3398F, (-4.4539986F), 773.3398F);
      homePieceOfFurniture0.isBackFaceShown();
      homePieceOfFurniture0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-2734.917F);
      floatArray1[2] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "jW/rp'{*2-tU)gO7|", (Content) null, (Content) null, (Content) null, 662.572F, (-2734.917F), 3.4028235E38F, 0.0F, false, floatArray0, "", true, true, false, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      bigDecimal0.multiply(bigDecimal1);
      Float float0 = new Float(3.4028235E38F);
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setHeight(2.0F);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("}P*V>");
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = mock(CatalogPieceOfFurniture.class, new ViolatedAssumptionAnswer());
      furnitureCategory0.add(catalogPieceOfFurniture1);
      CatalogPieceOfFurniture catalogPieceOfFurniture2 = mock(CatalogPieceOfFurniture.class, new ViolatedAssumptionAnswer());
      furnitureCategory0.getIndexOfPieceOfFurniture(catalogPieceOfFurniture2);
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      homePieceOfFurniture0.setNameYOffset((-826.0485F));
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.setNameAngle(197.79F);
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.getY();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 2.0F;
      floatArray1[2] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "jW/rp'{*2-tU)gO7|", (Content) null, (Content) null, (Content) null, 662.572F, (-2734.917F), 3.4028235E38F, 0.0F, false, floatArray0, "", true, true, false, bigDecimal0, bigDecimal0);
      BigDecimal.valueOf((-2399.4792419406867));
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(3.4028235E38F);
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setHeight(2.0F);
      homePieceOfFurniture0.isVisible();
      HomePieceOfFurniture.SortableProperty.values();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("[wLXz'3IShJp>{81>lq", propertyChangeListener0);
      homePieceOfFurniture0.addPropertyChangeListener(propertyChangeListenerProxy0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      homePieceOfFurniture0.setVisible(true);
      homePieceOfFurniture0.containsPoint(1285.7295F, 1285.7295F, 1285.7295F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float[] floatArray0 = new float[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<EbfL(1*d", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      Float float0 = new Float(0.0F);
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameAngle((-0.19340181F));
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
      Integer integer0 = new Integer(298);
      Integer.min(298, 982);
      homePieceOfFurniture0.isTopRightPointAt((-0.19340181F), 298, 0.3926991F);
      integer0.equals("");
      homePieceOfFurniture0.setColor((Integer) null);
      homePieceOfFurniture0.setHeight(298);
      homePieceOfFurniture0.setNameYOffset(298);
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.setNameAngle(298);
      homePieceOfFurniture0.getPoints();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float[] floatArray0 = new float[41];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.clone();
      homePieceOfFurniture0.getDescription();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[1] = 0.0F;
      floatArray2[4] = (-2734.917F);
      floatArray0[0] = floatArray2;
      float[] floatArray3 = new float[6];
      floatArray0[4] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 0.0F, (-2734.917F), (-2734.917F), false, false);
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-0.19340181F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.containsPoint((-2734.917F), 0.0F, (-1206.49F));
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
      Integer.valueOf(2);
      Integer integer0 = new Integer(298);
      Integer.min(298, 982);
      integer0.equals("");
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.isPointAt((-2734.917F), (-1680.0F), 3164.3984F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      try {
        homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[5];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<EbfL(1*d", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      Float float0 = new Float(0.0F);
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameAngle((-0.19340181F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
      Integer integer0 = new Integer(298);
      Integer.min(298, 982);
      Integer.max(298, 298);
      homePieceOfFurniture0.isTopRightPointAt((-0.19340181F), 298, 0.3926991F);
      integer0.equals("");
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      homePieceOfFurniture0.setDepth(298);
      homePieceOfFurniture0.setWidth((-0.19340181F));
      homePieceOfFurniture0.getDepth();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray1[4] = (-2734.917F);
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      float[] floatArray2 = new float[1];
      floatArray0[4] = floatArray2;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.setY(1984.66F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), (-1.0F), 3375.0F);
      homePieceOfFurniture0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("|i#[U", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setY(0.31653136F);
      homePieceOfFurniture0.setName("|i#[U");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-1097.6111F), 0.0F, (-2734.917F), false, false);
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(395.073F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(80.7F, 3164.3984F, (-1367.4585F));
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isTopRightPointAt((-1514.8599F), (-2734.917F), (-982.6F));
      homePieceOfFurniture1.setNameVisible(true);
      homePieceOfFurniture1.isBackFaceShown();
      homePieceOfFurniture0.getElevation();
      homePieceOfFurniture0.getLevel();
      homePieceOfFurniture0.getX();
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture1.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, (-15.701547F), (-15.701547F), (-15.701547F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isPointAt((-15.701547F), 4.7123857F, (-15.701547F));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setHeight(0.31653136F);
      homePieceOfFurniture0.isPointAt(0.31653136F, 4.3774214F, 0.31653136F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "<.EbfL(1*d";
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[7];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "<.EbfL(1*d", "", (Content) null, (Content) null, (Content) null, 0.0F, (-294.1F), (-2734.917F), 0.0F, true, floatArray0, "<.EbfL(1*d", false, false, true, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getName();
      bigDecimal1.toString();
      catalogPieceOfFurniture0.getDescription();
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      Float float0 = new Float((-294.1F));
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setX((-2734.917F));
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setHeight((-2734.917F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray0[3] = floatArray0[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), false, false);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setName((String) null);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), (-2734.917F), (-2734.917F));
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), (-1.0F), 3375.0F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float[] floatArray0 = new float[41];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.getTexture();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      float[] floatArray0 = new float[14];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("bLR1Sd", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      Float float0 = new Float(0.0F);
      catalogPieceOfFurniture0.isTexturable();
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setX(0.0F);
      homePieceOfFurniture0.setNameAngle((-0.19340181F));
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      Integer integer0 = new Integer(8192);
      integer0.equals("");
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.setHeight(0.0F);
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.getLevel();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".ElUYbfL(1E", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy(".ElUYbfL(1E", propertyChangeListener0);
      homePieceOfFurniture0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.isBottomRightPointAt(3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 0.15233545F, 0.15233545F, 0.15233545F, false, true);
      catalogPieceOfFurniture0.getName();
      Float float0 = new Float(0.15233545F);
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isNameCenterPointAt(0.3926991F, 1.0F, 0.3926991F);
      homePieceOfFurniture0.containsPoint((-1116.8077F), (-513.4628F), 0.15233545F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.setNameAngle(0.15233545F);
      homePieceOfFurniture0.isBottomRightPointAt(0.3926991F, (-1116.8077F), (-1796.0F));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[0];
      floatArray0[4] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1*d", ".EbfL(1*d", ".EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), true, floatArray0, ".EbfL(1*d", true, true, true, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-4.4539986F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.intersectsRectangle((-2734.917F), (-4.4539986F), (-4.4539986F), (-2734.917F));
      homePieceOfFurniture0.isNameCenterPointAt(0.3926991F, (-2458.3433F), (-1116.382F));
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.clone();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float[] floatArray0 = new float[5];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      Float float0 = new Float(0.0F);
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameAngle((-0.19340181F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
      Integer integer0 = new Integer(298);
      Integer.min(298, 982);
      integer0.equals("");
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      homePieceOfFurniture0.setDepth(1285.7295F);
      homePieceOfFurniture0.getColor();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-2734.917F);
      floatArray1[2] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "jW/rp'{*2-tU)gO7|", (Content) null, (Content) null, (Content) null, 662.572F, (-2734.917F), 3.4028235E38F, 0.0F, false, floatArray0, "", true, true, false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(5, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      
      String string0 = catalogPieceOfFurniture0.getName();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotNull(string0);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("<.EbfL(1*d", string0);
      
      String string1 = catalogPieceOfFurniture0.getDescription();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotNull(string1);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("jW/rp'{*2-tU)gO7|", string1);
      
      BigDecimal bigDecimal2 = bigDecimal0.multiply(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertNotNull(bigDecimal2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((byte)10, bigDecimal2.byteValue());
      assertEquals((short)10, bigDecimal2.shortValue());
      
      Float float0 = new Float(3.4028235E38F);
      assertNotNull(float0);
      assertEquals(3.4028235E38F, (float)float0, 0.01F);
      
      String string2 = catalogPieceOfFurniture0.getStaircaseCutOutShape();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNull(string2);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      
      boolean boolean0 = catalogPieceOfFurniture0.isBackFaceShown();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(boolean0);
      
      boolean boolean1 = catalogPieceOfFurniture0.isTexturable();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertTrue(boolean1 == boolean0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(boolean1);
      
      BigDecimal bigDecimal3 = catalogPieceOfFurniture0.getPrice();
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertSame(bigDecimal3, bigDecimal0);
      assertNotNull(bigDecimal3);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((short)1, bigDecimal3.shortValue());
      assertEquals((byte)1, bigDecimal3.byteValue());
      
      BigDecimal bigDecimal4 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertSame(bigDecimal4, bigDecimal0);
      assertNotSame(bigDecimal4, bigDecimal2);
      assertSame(bigDecimal4, bigDecimal3);
      assertNotNull(bigDecimal4);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((short)1, bigDecimal4.shortValue());
      assertEquals((byte)1, bigDecimal4.byteValue());
      
      String string3 = catalogPieceOfFurniture0.getCurrency();
      assertSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNull(string3);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals(331.286F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(662.572F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("jW/rp'{*2-tU)gO7|", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      
      homePieceOfFurniture0.setHeight(2.0F);
      assertSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(331.286F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(662.572F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("jW/rp'{*2-tU)gO7|", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      
      homePieceOfFurniture0.setNameYOffset((-826.0485F));
      assertSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(331.286F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-826.0485F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(662.572F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("jW/rp'{*2-tU)gO7|", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      
      float float1 = homePieceOfFurniture0.getGroundElevation();
      assertSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(331.286F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-826.0485F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(662.572F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("jW/rp'{*2-tU)gO7|", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, float1, 0.01F);
      
      homePieceOfFurniture0.setNameAngle(197.79F);
      assertSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(331.286F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-826.0485F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(3.0112488F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(662.572F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("jW/rp'{*2-tU)gO7|", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      
      float[][] floatArray2 = homePieceOfFurniture0.getPoints();
      assertNotSame(floatArray0, floatArray2);
      assertSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertEquals(5, floatArray0.length);
      assertEquals(4, floatArray2.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(331.286F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-826.0485F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(3.0112488F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(662.572F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("jW/rp'{*2-tU)gO7|", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 2.0F;
      floatArray0[2] = 2.0F;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, false, false);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(2.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(2.0F);
      homePieceOfFurniture0.isTopRightPointAt(2.0F, 0.0F, 0.0F);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.isBackFaceShown();
      homePieceOfFurniture0.getNameYOffset();
      Level level0 = new Level("<.EbfL(1*d", 2.0F, 2734.917F, 2.0F);
      level0.getElevation();
      level0.getElevation();
      level0.getHeight();
      homePieceOfFurniture0.isAtLevel(level0);
      homePieceOfFurniture0.isBottomLeftPointAt(2.0F, 2.0F, 2.0F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = new float[5];
      floatArray1[1] = 0.0F;
      floatArray1[4] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 0.0F, (-2734.917F), (-2734.917F), false, false);
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-0.19340181F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.containsPoint((-2734.917F), 0.0F, (-1206.49F));
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
      Integer integer0 = new Integer(298);
      Integer.remainderUnsigned(298, (-193));
      Integer.min(298, 982);
      integer0.equals("");
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.isPointAt((-2734.917F), 3164.3984F, 2826.0F);
      homePieceOfFurniture0.setMovable(false);
      homePieceOfFurniture0.getX();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray0[3] = floatArray0[2];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), false, false);
      catalogPieceOfFurniture0.getName();
      Float float0 = new Float((-2734.917F));
      Float float1 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setName((String) null);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), (-2734.917F), (-2734.917F));
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), (-1.0F), 3375.0F);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getModelRotation();
      homePieceOfFurniture0.setName((String) null);
      homePieceOfFurniture0.isBottomRightPointAt((-1748.6565F), (-2734.917F), (-2734.917F));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-1.0F));
      homePieceOfFurniture0.move(1.0F, (-2734.917F));
      homePieceOfFurniture0.setY(2.0F);
      Level level0 = new Level((String) null, 1.0F, (-1.0F), (-1.0F));
      level0.getElevation();
      level0.getElevation();
      level0.getHeight();
      homePieceOfFurniture0.setLevel(level0);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), 1.0F, 2.0F);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("^(T[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.^(T[
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[2] = (-2734.917F);
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[1] = 0.0F;
      floatArray2[1] = (-2734.917F);
      floatArray2[4] = (-2734.917F);
      floatArray0[2] = floatArray2;
      float[] floatArray3 = new float[0];
      floatArray0[4] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-2734.917F));
      Float float1 = new Float((-2734.917F));
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-4.4539986F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(3375.0F, 1384.7291F, 0.0F);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isTopRightPointAt(773.3398F, (-4.4539986F), 773.3398F);
      homePieceOfFurniture0.setNameStyle((TextStyle) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 2.0F, 2.0F, 0.31653136F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      TextStyle textStyle0 = new TextStyle((-3656.45F));
      homePieceOfFurniture0.setNameStyle(textStyle0);
      homePieceOfFurniture0.isBottomRightPointAt(2.0F, 2.0F, 2.0F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1d", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setShininess((Float) null);
      homePieceOfFurniture0.setShininess((Float) null);
      homePieceOfFurniture0.setNameAngle((-170.18F));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[3] = 2.0F;
      floatArray1[4] = 2.0F;
      floatArray1[0] = 2.0F;
      floatArray0[2] = floatArray1;
      float[] floatArray2 = new float[0];
      floatArray0[4] = floatArray2;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2736.0657F), (-2736.0657F), (-2736.0657F), 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getIcon();
      catalogPieceOfFurniture0.getPlanIcon();
      Float float0 = new Float(2.0F);
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(2752.1875F);
      homePieceOfFurniture0.setY(1.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2736.0657F), 2.0F, (-1974.0F));
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.isMovable();
      homePieceOfFurniture0.getCatalogId();
      homePieceOfFurniture0.isPointAt(0.0F, 960.0F, (-215.6F));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray0[3] = floatArray0[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setAngle((-2734.917F));
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), (-2734.917F), (-2734.917F));
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(56.0F, (-2734.917F), 2077.2F);
      BigDecimal bigDecimal2 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isTopRightPointAt((-1.0F), 773.3398F, (-2734.917F));
      homePieceOfFurniture0.getX();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "jW/rp'{*2-tU)gO7|", "", (Content) null, (Content) null, (Content) null, (-2734.917F), (-294.1F), 1.0F, (-2734.917F), true, floatArray0, "<.EbfL(1*d", true, true, true, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      catalogPieceOfFurniture0.getName();
      bigDecimal1.toString();
      bigDecimal1.floatValue();
      catalogPieceOfFurniture0.getDescription();
      bigDecimal1.multiply(bigDecimal0);
      Float float0 = new Float(662.572F);
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isTopRightPointAt(662.572F, (-451.066F), (-2734.917F));
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      homePieceOfFurniture0.setDepth(3419.255F);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setName(".EbfL(1EH");
      homePieceOfFurniture0.isNameCenterPointAt(0.31653136F, 0.31653136F, 0.31653136F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2977.287F), (-2977.287F), (-2977.287F), (-2977.287F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2977.287F));
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getPoints();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Float.floatToIntBits((-2977.287F));
      homePieceOfFurniture0.isTopRightPointAt((-2977.287F), (-986049384), (-2977.287F));
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setShininess(float0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("i(g:QL", (Content) null, (Content) null, 4141.7197F, 4141.7197F, 4141.7197F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.containsPoint(4141.7197F, 4141.7197F, 2.0F);
      homePieceOfFurniture0.setNameVisible(true);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setName(".EbfL(1EH");
      homePieceOfFurniture0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.move(541.41F, 4742.4585F);
      homePieceOfFurniture0.setY(1984.66F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), (-1.0F), 3375.0F);
      homePieceOfFurniture0.getValueAddedTax();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("+<aMNXP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.+<aMNXP
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setHeight((-2128.2336F));
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.isModelMirrored();
      homePieceOfFurniture0.getTexture();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float[] floatArray0 = new float[14];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<EbfL(1*d", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      Float float0 = new Float(0.0F);
      catalogPieceOfFurniture0.isTexturable();
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setX(0.0F);
      homePieceOfFurniture0.setNameAngle(0.0F);
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      homePieceOfFurniture0.setHeight(298);
      homePieceOfFurniture0.isBottomLeftPointAt(0.0F, 1.5746664F, 0.0F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getTexture();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[1] = 0.0F;
      floatArray2[4] = (-2734.917F);
      floatArray0[0] = floatArray2;
      float[] floatArray3 = new float[6];
      floatArray0[4] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 0.0F, (-2734.917F), (-2734.917F), false, false);
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-4.4539986F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(3375.0F, 1384.7291F, 0.0F);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isTopRightPointAt(773.3398F, (-4.4539986F), 773.3398F);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.isBackFaceShown();
      homePieceOfFurniture0.getElevation();
      homePieceOfFurniture0.getLevel();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 2.0F;
      floatArray1[1] = (-2734.917F);
      floatArray1[2] = 2.0F;
      floatArray1[3] = 2.0F;
      floatArray1[4] = (-2734.917F);
      floatArray1[5] = 2.0F;
      floatArray1[6] = (-2734.917F);
      floatArray1[7] = (-2734.917F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = 2.0F;
      floatArray2[1] = 662.572F;
      floatArray2[2] = (-2734.917F);
      floatArray2[3] = 2.0F;
      floatArray2[4] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 0.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 662.572F;
      floatArray3[3] = 0.0F;
      floatArray3[4] = (-2734.917F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[5];
      floatArray4[0] = (-2734.917F);
      floatArray4[1] = (-2734.917F);
      floatArray4[2] = 662.572F;
      floatArray4[3] = 3363.4F;
      floatArray4[4] = 2.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[0];
      floatArray0[4] = floatArray5;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), 2.0F, false, floatArray0, "<.EbfL(1*d", false, true, true, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getIcon();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getModel();
      catalogPieceOfFurniture0.getWidth();
      catalogPieceOfFurniture0.getDepth();
      catalogPieceOfFurniture0.getHeight();
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getColor();
      catalogPieceOfFurniture0.getModelRotation();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isResizable();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getX();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(1370.6F);
      homePieceOfFurniture0.setAngle(1370.6F);
      homePieceOfFurniture0.setNameVisible(true);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("X", (Content) null, (Content) null, 0.15233545F, (-0.6209725F), (-0.6209725F), false, true);
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.containsPoint(0.15233545F, 0.15233545F, 0.0F);
      homePieceOfFurniture0.isNameCenterPointAt(0.15233545F, 0.0F, 0.15233545F);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 952.72833F, 952.72833F, 952.72833F, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isTopLeftPointAt(1.0F, 1.0F, (-1745.0F));
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      homePieceOfFurniture0.getPrice();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray1[4] = (-2734.917F);
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      float[] floatArray2 = new float[1];
      floatArray0[4] = floatArray2;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), (-1.0F), 3375.0F);
      homePieceOfFurniture0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1d", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt(3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray0[3] = floatArray0[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), (-2734.917F), (-2734.917F));
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.setY(1984.66F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), (-1.0F), 3375.0F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getAngle();
      homePieceOfFurniture0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray1[4] = (-2734.917F);
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      float[] floatArray2 = new float[0];
      floatArray0[4] = floatArray2;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setDepth((-2734.917F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.move(2.0F, 2.0F);
      homePieceOfFurniture0.setDescription("<.EbfL(1*d");
      homePieceOfFurniture0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 2.0F;
      floatArray0[2] = 2.0F;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, false, false);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(2.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(2.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      homePieceOfFurniture0.setAngle(195.0F);
      homePieceOfFurniture0.setY(1.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(0.3926991F, 0.3926991F, 2.0F);
      homePieceOfFurniture0.containsPoint(1.0F, 2.0F, 1.0F);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      homePieceOfFurniture1.getValueAddedTax();
      homePieceOfFurniture1.setAngle(2.0F);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), (-169.0F), 1539.0459F);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = 2.0F;
      floatArray1[1] = 2.0F;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(2.0F);
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      catalogPieceOfFurniture0.getCurrency();
      bigDecimal0.intValue();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), 2.0F, 2.0F);
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      homePieceOfFurniture0.containsPoint(2.0F, 1.0F, (-1.0F));
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
      Integer.valueOf(17);
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.isPointAt(2.0F, 2.0F, 2.0F);
      homePieceOfFurniture0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-2734.917F);
      floatArray1[2] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "jW/rp'{*2-tU)gO7|", (Content) null, (Content) null, (Content) null, 662.572F, (-2734.917F), 3.4028235E38F, 0.0F, false, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      bigDecimal0.multiply(bigDecimal1);
      Float float0 = new Float(3.4028235E38F);
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setHeight(3.4028235E38F);
      homePieceOfFurniture0.setNameYOffset((-826.0485F));
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.setNameAngle(197.79F);
      homePieceOfFurniture0.getPoints();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1d", (Content) null, (Content) null, 712.251F, 712.251F, 712.251F, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Level level0 = new Level("<.EbfL(1d", 3043.7139F, 712.251F, 3043.7139F);
      level0.getHeight();
      homePieceOfFurniture0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[1] = 0.0F;
      floatArray2[4] = (-2734.917F);
      floatArray0[0] = floatArray2;
      float[] floatArray3 = new float[6];
      floatArray0[4] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 0.0F, (-2734.917F), (-2734.917F), false, false);
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-4.4539986F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.containsPoint((-2734.917F), 0.0F, (-1206.49F));
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
      Integer.valueOf(2);
      Integer integer0 = new Integer(298);
      integer0.equals("");
      homePieceOfFurniture0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 0.15233545F, (-4027.0F), 0.15233545F, false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homePieceOfFurniture0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.setNameXOffset(0.0F);
      homePieceOfFurniture0.setNameVisible(false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".ElUYbfLZ(1E", (Content) null, uRLContent0, (-1.0F), 2.0F, 4.3774214F, true, true);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("ByY!GH]B\"IYdi}tf)");
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.io.HomeURLContent", temporaryURLContent0, temporaryURLContent0, 326.7197F, 326.7197F, 326.7197F, true, false);
      furnitureCategory0.getIndexOfPieceOfFurniture(catalogPieceOfFurniture1);
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      homePieceOfFurniture0.getModel();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 2.0F;
      floatArray0[2] = 2.0F;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, false, false);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(2.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(2.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(2.0F, 2734.917F, 2734.917F);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setHeight(2.0F);
      homePieceOfFurniture0.isTopRightPointAt(2.0F, 2.0F, (-1514.8599F));
      homePieceOfFurniture1.setNameVisible(true);
      homePieceOfFurniture0.isBackFaceShown();
      homePieceOfFurniture0.getElevation();
      homePieceOfFurniture1.getLevel();
      homePieceOfFurniture1.isDoorOrWindow();
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray0[3] = floatArray0[2];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("r+;\"", (Content) null, (Content) null, 1905.4567F, 1905.4567F, 1905.4567F, false, false);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getPlanIcon();
      Float float0 = new Float(0.0F);
      Float float1 = new Float(1905.4567F);
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), 0.0F, 1905.4567F);
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.isNameCenterPointAt(0.0F, (-1.0F), 3375.0F);
      homePieceOfFurniture0.isPointAt(1905.4567F, 2826.0F, 1905.4567F);
      homePieceOfFurniture0.setNameAngle((-1.0F));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 952.72833F, 952.72833F, 952.72833F, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isTopLeftPointAt(5.314663F, 5.314663F, (-1745.0F));
      homePieceOfFurniture0.isBottomRightPointAt(952.72833F, (-1745.0F), 952.72833F);
      homePieceOfFurniture0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray1[4] = (-2734.917F);
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      float[] floatArray2 = new float[0];
      floatArray0[4] = floatArray2;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-4.4539986F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.intersectsRectangle((-2734.917F), (-4.4539986F), (-4.4539986F), (-2734.917F));
      homePieceOfFurniture0.isNameCenterPointAt(0.3926991F, (-2458.3433F), (-1116.382F));
      homePieceOfFurniture0.getValueAddedTax();
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isModelMirrored();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(0.31653136F, 0.31653136F, 0.31653136F);
      homePieceOfFurniture0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      float[] floatArray0 = new float[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      Integer integer0 = Integer.valueOf((-1659362961));
      Integer.valueOf((-643));
      Integer integer1 = new Integer(298);
      integer1.equals("");
      integer1.equals(integer0);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.setY(0.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-2734.917F), 0.0F, 3.4028235E38F, false, true);
      BigDecimal bigDecimal1 = BigDecimal.valueOf(337.75048);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      bigDecimal0.multiply(bigDecimal1);
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Float.min((-1015.1F), 1.0F);
      homePieceOfFurniture0.setDepth((-1015.1F));
      homePieceOfFurniture0.setVisible(false);
      Float.floatToIntBits(3.4028235E38F);
      homePieceOfFurniture0.isVisible();
      homePieceOfFurniture0.setShininess(float0);
      homePieceOfFurniture0.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray1[4] = (-2734.917F);
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      float[] floatArray2 = new float[1];
      floatArray0[4] = floatArray2;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), true, floatArray0, "<.EbfL(1*d", true, true, true, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(21.898485F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.setAngle((-2734.917F));
      homePieceOfFurniture0.isPointAt((-2734.917F), 21.898485F, 1634.52F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-1097.6111F), 0.0F, (-2734.917F), false, false);
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(395.073F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(80.7F, 3164.3984F, (-1367.4585F));
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setLevel((Level) null);
      homePieceOfFurniture1.isTopRightPointAt((-1514.8599F), (-2734.917F), (-982.6F));
      homePieceOfFurniture1.setNameVisible(true);
      homePieceOfFurniture1.isBackFaceShown();
      homePieceOfFurniture0.getElevation();
      homePieceOfFurniture0.getLevel();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray1[4] = (-2734.917F);
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      float[] floatArray2 = new float[0];
      floatArray0[4] = floatArray2;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getElevation();
      bigDecimal0.byteValueExact();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(1385.5244F);
      homePieceOfFurniture0.setY(1.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), 1385.5244F, (-2734.917F));
      homePieceOfFurniture0.containsPoint((-2734.917F), 1385.5244F, (-1.0F));
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
      Integer integer0 = Integer.valueOf(17);
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setColor(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      float[] floatArray1 = new float[24];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray1[4] = (-2734.917F);
      floatArray0[3] = floatArray1;
      float[] floatArray2 = new float[0];
      floatArray0[4] = floatArray2;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getElevation();
      bigDecimal0.byteValueExact();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(1385.5244F);
      homePieceOfFurniture0.setAngle(1244.7964F);
      homePieceOfFurniture0.setY(1.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), 1385.5244F, (-2734.917F));
      homePieceOfFurniture0.containsPoint((-2734.917F), 1385.5244F, (-1.0F));
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.setAngle(1244.7964F);
      Integer integer0 = Integer.valueOf(17);
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setColor(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("MODEL_MIRRORED", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isPointAt(2116.069F, 2116.069F, 2116.069F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = new float[5];
      floatArray1[1] = 0.0F;
      floatArray1[4] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 0.0F, (-2734.917F), (-2734.917F), false, false);
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-0.19340181F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.containsPoint((-2734.917F), 0.0F, (-1206.49F));
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
      Integer integer0 = new Integer(298);
      Integer.min(298, 982);
      integer0.equals("");
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.isPointAt((-2734.917F), 3164.3984F, 2826.0F);
      homePieceOfFurniture0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".VNEbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      float[] floatArray0 = new float[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      catalogPieceOfFurniture0.isDeformable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      homePieceOfFurniture0.getWidth();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-2734.917F);
      floatArray1[2] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "jW/rp'{*2-tU)gO7|", (Content) null, (Content) null, (Content) null, 662.572F, (-2734.917F), 3.4028235E38F, 0.0F, false, floatArray0, "", true, true, false, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.valueOf((-2399.4792419406867));
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      bigDecimal0.multiply(bigDecimal1);
      Float float0 = new Float(3.4028235E38F);
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth((-2734.917F));
      Float.floatToIntBits((-1015.1F));
      homePieceOfFurniture0.isModelMirrored();
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setShininess((Float) (-1015.1F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("u/.EbL(1*", "u/.EbL(1*", "u/.EbL(1*", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "u/.EbL(1*", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isDoorOrWindow();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      catalogPieceOfFurniture0.getCurrency();
      bigDecimal1.intValue();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), (-2734.917F), (-1.0F));
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.setY((-1.0F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.intersectsRectangle((-792.809F), (-2734.917F), 1.0F, 1);
      homePieceOfFurniture0.isNameCenterPointAt((-792.809F), (-2715.4646F), 1.0F);
      homePieceOfFurniture0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[0];
      floatArray0[4] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-2734.917F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(1384.7291F, 662.572F, (-2734.917F));
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isTopRightPointAt(773.3398F, 1977.8F, (-42.131737F));
      homePieceOfFurniture1.containsPoint((-2734.917F), (-3733.94F), 1384.7291F);
      homePieceOfFurniture1.setElevation((-2758.27F));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      float[][] floatArray0 = new float[9][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.E,fL(1*d", "<.E,fL(1*d", "<.E,fL(1*d", (Content) null, (Content) null, (Content) null, (-1280.8234F), (-1280.8234F), (-1280.8234F), (-1280.8234F), false, floatArray0, "<.E,fL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-1280.8234F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setName("");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 2.0F;
      floatArray1[2] = (-2734.917F);
      floatArray1[3] = 2.0F;
      floatArray1[4] = 0.0F;
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[1] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 662.572F;
      floatArray2[3] = 0.0F;
      floatArray2[4] = (-2734.917F);
      floatArray0[2] = floatArray2;
      float[] floatArray3 = new float[16];
      floatArray3[0] = (-2734.917F);
      floatArray3[1] = (-2734.917F);
      floatArray3[2] = 662.572F;
      floatArray3[3] = 3363.4F;
      floatArray3[4] = 2.0F;
      floatArray0[3] = floatArray3;
      float[] floatArray4 = new float[0];
      floatArray0[4] = floatArray4;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), 2.0F, false, floatArray0, "<.EbfL(1*d", false, true, true, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getIcon();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getModel();
      catalogPieceOfFurniture0.getWidth();
      catalogPieceOfFurniture0.getHeight();
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getColor();
      catalogPieceOfFurniture0.getModelRotation();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isResizable();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(0.0F, 2.0F, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.clone();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[1] = 0.0F;
      floatArray2[4] = (-2734.917F);
      floatArray0[0] = floatArray2;
      float[] floatArray3 = new float[6];
      floatArray0[4] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 0.0F, (-2734.917F), (-2734.917F), false, false);
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-4.4539986F));
      homePieceOfFurniture0.setNameXOffset((-4.4539986F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(3375.0F, 1384.7291F, 0.0F);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isTopRightPointAt(773.3398F, (-4.4539986F), 773.3398F);
      homePieceOfFurniture0.setNameXOffset(3375.0F);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-2734.917F), (-2734.917F), 0.0F, true, false);
      BigDecimal bigDecimal1 = BigDecimal.valueOf((-2399.4792419406867));
      catalogPieceOfFurniture0.getDescription();
      bigDecimal1.min(bigDecimal0);
      catalogPieceOfFurniture0.getWidth();
      bigDecimal0.multiply(bigDecimal1);
      Float float0 = new Float((double) 0.0F);
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isTexturable();
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBackFaceShown();
      homePieceOfFurniture0.setVisible(true);
      homePieceOfFurniture0.setElevation((-2734.917F));
      homePieceOfFurniture0.setNameXOffset(0.0F);
      homePieceOfFurniture0.setElevation(2.0F);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.TEXTURE;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      HomeDoorOrWindow homeDoorOrWindow0 = null;
      try {
        homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isTopLeftPointAt((-1.0F), (-1.0F), 0.31653136F);
      homePieceOfFurniture0.isBottomRightPointAt(0.31653136F, 0.31653136F, 0.31653136F);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[1] = 0.0F;
      floatArray2[4] = (-2734.917F);
      floatArray0[0] = floatArray2;
      float[] floatArray3 = new float[6];
      floatArray0[4] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 0.0F, (-2734.917F), (-2734.917F), false, false);
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt((-2734.917F), 0.0F, (-2734.917F));
      homePieceOfFurniture0.setDescription("MipiN_N");
      homePieceOfFurniture0.setNameYOffset(2.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-1.0F), 1317.7F, 1.0F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getModelRotation();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf(".EbfL(1EH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty..EbfL(1EH
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      float[][] floatArray0 = new float[16][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = 2.0F;
      floatArray1[2] = 2.0F;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, false, false);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(2.0F);
      Float float1 = new Float(2.0F);
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      catalogPieceOfFurniture0.getCurrency();
      bigDecimal0.intValue();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isNameCenterPointAt(2.0F, (float) float1, (-897.024F));
      BigDecimal bigDecimal2 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.isTopRightPointAt((-897.024F), 2.0F, 3.4028235E38F);
      homePieceOfFurniture1.getY();
      homePieceOfFurniture0.setWidth((-897.024F));
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture1.getPlanIcon();
      homePieceOfFurniture0.clone();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[6];
      floatArray1[0] = (-2735.4897F);
      floatArray1[2] = (-2735.4897F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "jW/rp'{*2-tU)gO7|", (Content) null, (Content) null, (Content) null, 662.572F, (-2735.4897F), 3.4028235E38F, 0.0F, false, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      bigDecimal0.multiply(bigDecimal1);
      Float float0 = new Float(3.4028235E38F);
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setHeight(3.4028235E38F);
      homePieceOfFurniture0.setNameYOffset((-826.0485F));
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.setNameAngle(197.79F);
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.isBottomLeftPointAt((-826.0485F), 504.7F, (-2735.4897F));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.setY(1984.66F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), (-2734.917F), 3375.0F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      float[] floatArray0 = new float[41];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".VNEbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameVisible(false);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 2.0F;
      floatArray1[2] = (-2734.917F);
      floatArray1[3] = 2.0F;
      floatArray1[4] = 0.0F;
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[1] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 662.572F;
      floatArray2[3] = 0.0F;
      floatArray2[4] = (-2734.917F);
      floatArray0[2] = floatArray2;
      float[] floatArray3 = new float[16];
      floatArray3[0] = (-2734.917F);
      floatArray3[1] = (-2734.917F);
      floatArray3[2] = 662.572F;
      floatArray3[15] = 3363.4F;
      floatArray3[0] = 2.0F;
      floatArray0[3] = floatArray3;
      floatArray0[4] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), 2.0F, false, floatArray0, "<.EbfL(1*d", false, true, true, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getIcon();
      catalogPieceOfFurniture0.getModel();
      Float float0 = new Float(662.572F);
      catalogPieceOfFurniture0.getHeight();
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getColor();
      catalogPieceOfFurniture0.getModelRotation();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isResizable();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(0.0F, 0.0F, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1d", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("NAME_Y_OFFSET", (Content) null, (Content) null, 0.0F, (-4213.3237F), 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(0.0F);
      homePieceOfFurniture0.getGroundElevation();
      HomePieceOfFurniture.SortableProperty.values();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.X;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("M|f6rZq`\";");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.M|f6rZq`\";
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[3] = 2.0F;
      floatArray1[4] = 0.0F;
      float[] floatArray2 = new float[5];
      floatArray1[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray0[2] = floatArray2;
      float[] floatArray3 = new float[0];
      floatArray0[4] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2736.0657F), (-2736.0657F), (-2736.0657F), 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getIcon();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(0.0F);
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isResizable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isNameCenterPointAt(0.0F, (-1.0F), 3375.0F);
      homePieceOfFurniture0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.E,fL(1*d", "<.E,fL(1*d", "<.E,fL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, "<.E,fL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.setNameYOffset((-1.0F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      float float0 = (-1280.8234F);
      float[][] floatArray0 = new float[9][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.E,fL(1*d", "<.E,fL(1*d", "<.E,fL(1*d", (Content) null, (Content) null, (Content) null, (-1280.8234F), (-1280.8234F), (-1280.8234F), (-1280.8234F), false, floatArray0, "<.E,fL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setDepth((-1280.8234F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL([C1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(0.31653136F, 2.0F, 2.0F);
      homePieceOfFurniture0.setNameStyle((TextStyle) null);
      homePieceOfFurniture0.setName(".EbfL(1EH");
      homePieceOfFurniture0.getDescription();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 704.1679F, 2645.968F, 704.1679F, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Level level0 = new Level((String) null, 2645.968F, (-1.0F), (-1.0F));
      level0.getElevation();
      level0.getElevation();
      level0.getHeight();
      homePieceOfFurniture0.setLevel(level0);
      Level level1 = new Level("", 3062.767F, 2645.968F, 704.1679F);
      Float float0 = new Float(704.1679F);
      homePieceOfFurniture0.isAtLevel(level1);
      homePieceOfFurniture0.getAngle();
      Integer integer0 = new Integer((-21));
      homePieceOfFurniture0.isBottomRightPointAt((-3181.9492F), 2.1655672F, 1109.366F);
      homePieceOfFurniture0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "jW/rp'{*2-tU)gO7|", "", (Content) null, (Content) null, (Content) null, 0.0F, (-294.1F), (-2734.917F), 0.0F, true, floatArray0, "<.EbfL(1*d", true, true, true, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getName();
      bigDecimal1.toString();
      catalogPieceOfFurniture0.getDescription();
      bigDecimal1.multiply(bigDecimal0);
      Float float0 = new Float((-294.1F));
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setX((-2734.917F));
      homePieceOfFurniture0.setHeight((-2734.917F));
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.setWidth(1.0F);
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 704.1679F, 2116.069F, 704.1679F, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Level level0 = new Level((String) null, 2116.069F, (-1.0F), (-1.0F));
      Float float0 = new Float(2116.069F);
      level0.getElevation();
      level0.getHeight();
      homePieceOfFurniture0.setLevel(level0);
      Level level1 = new Level("", 3062.767F, 2116.069F, 704.1679F);
      homePieceOfFurniture0.isTopLeftPointAt(841.857F, 2116.069F, (-2903.4023F));
      homePieceOfFurniture0.isBottomRightPointAt(704.1679F, 3.3681219F, 841.857F);
      homePieceOfFurniture0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 0.15233545F, 0.15233545F, 0.15233545F, false, true);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getPlanIcon();
      Float float0 = new Float(0.15233545F);
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isNameCenterPointAt(0.3926991F, 1.0F, 2753.0725F);
      homePieceOfFurniture0.isTopLeftPointAt(1.0F, 3353.7175F, 1.0F);
      Float.min(312.09723F, 0.0F);
      homePieceOfFurniture0.setVisible(true);
      Float.floatToIntBits(1510.7574F);
      homePieceOfFurniture0.isVisible();
      homePieceOfFurniture0.isBottomLeftPointAt(1153226813, 1.0F, 2753.0725F);
      homePieceOfFurniture0.isBackFaceShown();
      homePieceOfFurniture0.getDescription();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Level level0 = new Level((String) null, (-1.0F), 3062.767F, (-747.83F));
      Float float0 = new Float(0.0F);
      level0.getElevation();
      Float float1 = new Float((-1.0F));
      homePieceOfFurniture0.setLevel(level0);
      Level level1 = new Level(".EbfL(1EH", (-3346.3672F), (-747.83F), (-1918.0F));
      Float float2 = new Float(3062.767F);
      homePieceOfFurniture0.isAtLevel(level1);
      homePieceOfFurniture0.getAngle();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[2] = (-2734.917F);
      floatArray1[3] = (-2734.917F);
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[1] = (-2734.917F);
      floatArray2[1] = (-2734.917F);
      floatArray2[4] = (-2734.917F);
      floatArray0[2] = floatArray2;
      float[] floatArray3 = new float[0];
      floatArray0[4] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), false, false);
      Float float0 = new Float((-2734.917F));
      Float float1 = new Float((-2734.917F));
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-4.4539986F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(3375.0F, 1384.7291F, 0.0F);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setAngle((-2734.917F));
      homePieceOfFurniture1.isTopRightPointAt(773.3398F, (-4.4539986F), 773.3398F);
      homePieceOfFurniture0.isMovable();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      float[] floatArray0 = new float[41];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getLevel();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 2193.06F, 2193.06F, 2193.06F, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Level level0 = new Level((String) null, 3062.767F, (-1.0F), 2193.06F);
      level0.getElevation();
      level0.getElevation();
      level0.getHeight();
      homePieceOfFurniture0.setLevel(level0);
      Level level1 = new Level((String) null, 0.0F, 3062.767F, (-1.0F));
      Float float0 = new Float((-1.0F));
      homePieceOfFurniture0.isAtLevel(level1);
      homePieceOfFurniture0.getAngle();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-839));
      Integer integer2 = new Integer((-1));
      integer2.equals((Object) null);
      integer2.equals(".EbfL(1EH");
      Integer integer3 = new Integer(0);
      Object object0 = new Object();
      integer3.equals(object0);
      homePieceOfFurniture0.setColor(integer3);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      floatArray0[3] = floatArray0[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      bigDecimal0.toEngineeringString();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt(0.17669809F, (-2734.917F), (-2734.917F));
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setY(1984.66F);
      homePieceOfFurniture0.setElevation(1454.4005F);
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), (-1.0F), 3375.0F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.setMovable(false);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[2] = (-2734.917F);
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[1] = 0.0F;
      floatArray2[4] = (-2734.917F);
      floatArray0[2] = floatArray2;
      float[] floatArray3 = new float[0];
      floatArray0[4] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-4.4539986F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(3375.0F, 1384.7291F, 0.0F);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isTopRightPointAt(773.3398F, (-4.4539986F), 773.3398F);
      homePieceOfFurniture0.isBackFaceShown();
      homePieceOfFurniture0.getCurrency();
      homePieceOfFurniture0.clone();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-2734.917F), (-2734.917F), 3.4028235E38F, false, false);
      float float0 = new Float((-2734.917F));
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Float.floatToIntBits(3.4028235E38F);
      homePieceOfFurniture0.isVisible();
      homePieceOfFurniture0.setNameAngle(3.4028235E38F);
      homePieceOfFurniture0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "<.EbfL(1*d";
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = 2.0F;
      floatArray1[2] = 2.0F;
      floatArray0[3] = floatArray0[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, false, false);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(2.0F);
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.move(1.0F, 1.0F);
      homePieceOfFurniture0.setY(2.0F);
      homePieceOfFurniture0.move((-6152.5166F), 1.0F);
      homePieceOfFurniture0.setY((-1592.6F));
      // Undeclared exception!
      try { 
        catalogPieceOfFurniture0.compareTo((CatalogPieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[2] = (-2734.917F);
      floatArray1[3] = (-2734.917F);
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[1] = (-2734.917F);
      floatArray2[1] = (-2734.917F);
      floatArray2[4] = (-2734.917F);
      floatArray0[2] = floatArray2;
      float[] floatArray3 = new float[0];
      floatArray0[4] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-2734.917F));
      Float float1 = new Float((-2734.917F));
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-4.4539986F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(3375.0F, 1384.7291F, 0.0F);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isTopRightPointAt(773.3398F, (-4.4539986F), 773.3398F);
      homePieceOfFurniture0.isMovable();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2734.917F);
      floatArray0[2] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("F", (Content) null, (Content) null, (-2734.917F), (-2734.917F), 0.0F, true, false);
      BigDecimal bigDecimal1 = BigDecimal.valueOf((-2399.4792419406867));
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      bigDecimal0.multiply(bigDecimal1);
      Float float0 = new Float(3.4028235E38F);
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth((-2734.917F));
      homePieceOfFurniture0.setVisible(false);
      Float.floatToIntBits((-1015.1F));
      homePieceOfFurniture0.isModelMirrored();
      homePieceOfFurniture0.setShininess((Float) (-1015.1F));
      Level level0 = new Level((String) null, 1.0F, (-1.0F), (-1.0F));
      level0.getElevation();
      level0.getElevation();
      level0.getHeight();
      homePieceOfFurniture0.setLevel(level0);
      homePieceOfFurniture0.getPlanIcon();
      homePieceOfFurniture0.isResizable();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      float[] floatArray0 = new float[41];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.getValueAddedTaxPercentage();
      homePieceOfFurniture1.setDescription(".EbfL(1EH");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      float[] floatArray0 = new float[5];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.setNameVisible(true);
      Integer integer0 = new Integer(298);
      Level level0 = new Level("", 298, 298, 298);
      homePieceOfFurniture0.getY();
      level0.getHeight();
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getNameStyle();
      homePieceOfFurniture0.getHeight();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 2.0F;
      floatArray0[2] = 2.0F;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, false, false);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(2.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(2.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      homePieceOfFurniture1.setNameYOffset(2.0F);
      homePieceOfFurniture0.setAngle(195.0F);
      homePieceOfFurniture0.setY(1.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(0.3926991F, 0.3926991F, 2.0F);
      homePieceOfFurniture0.containsPoint(1.0F, 2.0F, (-206.22293F));
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      homePieceOfFurniture1.getValueAddedTax();
      homePieceOfFurniture1.setAngle((-1178.646F));
      homePieceOfFurniture0.isDoorOrWindow();
      homePieceOfFurniture1.getWidth();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      float[] floatArray0 = new float[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<EbfL(1*d", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      Float float0 = new Float(0.0F);
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameAngle(0.0F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
      Integer integer0 = new Integer(298);
      Integer.min(298, 982);
      homePieceOfFurniture0.isTopRightPointAt(0.0F, 298, 0.3926991F);
      integer0.equals("");
      homePieceOfFurniture0.setColor((Integer) null);
      homePieceOfFurniture0.setHeight(298);
      homePieceOfFurniture0.setNameYOffset(298);
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.setNameAngle(298);
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.getNameYOffset();
      Level level0 = new Level((String) null, 1.0F, (-1.0F), (-1.0F));
      level0.getElevation();
      level0.getElevation();
      level0.getHeight();
      homePieceOfFurniture0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray0[3] = floatArray0[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), (-2734.917F), (-2734.917F));
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.setY(1984.66F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), (-1.0F), 3375.0F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getElevation();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      homePieceOfFurniture0.removePropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture0.isBottomRightPointAt(0.31653136F, 0.31653136F, 0.31653136F);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      float[][] floatArray0 = new float[16][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = 2.0F;
      floatArray1[2] = 2.0F;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(2.0F);
      Float float1 = new Float(2.0F);
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.getCurrency();
      bigDecimal0.intValue();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isNameCenterPointAt(2.0F, (float) float1, (-897.024F));
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.isTopRightPointAt((-897.024F), 2.0F, 2.0F);
      homePieceOfFurniture1.setNameAngle(2752.1875F);
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture1.isBottomLeftPointAt(1.8505604F, 2.0F, 3.4028235E38F);
      homePieceOfFurniture1.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-2734.917F);
      floatArray1[2] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "jW/rp'{*2-tU)gO7|", (Content) null, (Content) null, (Content) null, 662.572F, (-2734.917F), 3.4028235E38F, 0.0F, false, floatArray0, "", true, true, false, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.valueOf((-2399.4792419406867));
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      bigDecimal1.intValue();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      bigDecimal0.multiply(bigDecimal1);
      Float float0 = new Float(3.4028235E38F);
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameXOffset(929.8945F);
      homePieceOfFurniture0.setDepth((-2734.917F));
      Float.floatToIntBits((-1015.1F));
      homePieceOfFurniture0.isModelMirrored();
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setShininess((Float) (-1015.1F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-2734.917F);
      floatArray1[2] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.movePointRight((-726));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "jW/rp'{*2-tU)gO7|", (Content) null, (Content) null, (Content) null, 662.572F, (-2734.917F), 3.4028235E38F, 0.0F, false, floatArray0, "", true, true, false, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.valueOf((-2399.4792419406867));
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      bigDecimal0.multiply(bigDecimal1);
      Float float0 = new Float(3.4028235E38F);
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-2734.917F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(3375.0F, 0.0F, 662.572F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.setAngle((-1.0F));
      homePieceOfFurniture0.getIcon();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, false, false);
      catalogPieceOfFurniture0.getName();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDescription("<.EbfL(1*d");
      homePieceOfFurniture0.isMovable();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(0.31653136F, 0.31653136F, 0.31653136F);
      homePieceOfFurniture0.getShininess();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      float[] floatArray0 = new float[41];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setAngle(1.0F);
      homePieceOfFurniture0.clone();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2734.917F);
      floatArray0[2] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), true, false);
      BigDecimal bigDecimal1 = BigDecimal.valueOf((-2399.4792419406867));
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      bigDecimal0.multiply(bigDecimal1);
      Float float0 = new Float(3.4028235E38F);
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth((-2734.917F));
      homePieceOfFurniture0.setVisible(false);
      Float.floatToIntBits((-1015.1F));
      homePieceOfFurniture0.isModelMirrored();
      homePieceOfFurniture0.setShininess((Float) (-1015.1F));
      homePieceOfFurniture0.getPlanIcon();
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setShininess((Float) (-2734.917F));
      Float.valueOf(124.72F);
      Float float1 = Float.valueOf(124.72F);
      homePieceOfFurniture1.setShininess(float1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      float[] floatArray0 = new float[41];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.clone();
      homePieceOfFurniture0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".VNEbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setMovable(false);
      homePieceOfFurniture0.setNameVisible(true);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 2.0F;
      floatArray0[2] = 2.0F;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, false, false);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(2.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(2.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      homePieceOfFurniture0.setAngle(195.0F);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("4Zs");
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      float[][] floatArray1 = new float[0][5];
      float[][] floatArray2 = new float[8][2];
      float[] floatArray3 = new float[8];
      floatArray3[0] = 0.3926991F;
      floatArray3[1] = 0.3926991F;
      floatArray3[2] = 0.3926991F;
      floatArray3[3] = 0.3926991F;
      floatArray3[4] = (-4.309F);
      floatArray3[5] = 1.0F;
      floatArray3[6] = (-4.309F);
      floatArray3[7] = 1.0F;
      floatArray2[0] = floatArray3;
      float[] floatArray4 = new float[4];
      floatArray4[0] = 379.36435F;
      floatArray4[1] = 1.0F;
      floatArray4[2] = (-4.309F);
      floatArray4[3] = 1.0F;
      floatArray2[1] = floatArray4;
      float[] floatArray5 = new float[4];
      floatArray5[0] = 1.0F;
      floatArray5[1] = (-4.309F);
      floatArray5[2] = 0.3926991F;
      floatArray5[3] = (-4.309F);
      floatArray2[2] = floatArray5;
      float[] floatArray6 = new float[9];
      floatArray6[0] = 0.3926991F;
      floatArray6[1] = 0.3926991F;
      floatArray6[2] = 379.36435F;
      floatArray6[3] = 1.0F;
      floatArray6[4] = 1.0F;
      floatArray6[5] = 379.36435F;
      floatArray6[6] = (-1384.63F);
      floatArray6[7] = 0.3926991F;
      floatArray6[8] = 379.36435F;
      floatArray2[3] = floatArray6;
      float[] floatArray7 = new float[7];
      floatArray7[0] = 1.0F;
      floatArray7[1] = (-2461.76F);
      floatArray7[2] = (-1384.63F);
      floatArray7[3] = (-4.309F);
      floatArray7[4] = (-1384.63F);
      floatArray7[5] = 379.36435F;
      floatArray7[6] = (-1384.63F);
      floatArray2[4] = floatArray7;
      float[] floatArray8 = new float[9];
      floatArray8[0] = 1.0F;
      floatArray8[1] = 0.3926991F;
      floatArray8[2] = (-2461.76F);
      floatArray8[3] = (-2461.76F);
      floatArray8[4] = 1.0F;
      floatArray8[5] = 1.0F;
      floatArray8[6] = 1.0F;
      floatArray8[7] = 1.0F;
      floatArray8[8] = 0.3926991F;
      floatArray2[5] = floatArray8;
      float[] floatArray9 = new float[5];
      floatArray9[0] = (-1384.63F);
      floatArray9[1] = (-2461.76F);
      floatArray9[2] = (-4.309F);
      floatArray9[3] = (-1384.63F);
      floatArray9[4] = (-2461.76F);
      floatArray2[6] = floatArray9;
      float[] floatArray10 = new float[2];
      floatArray10[0] = (-2461.76F);
      floatArray10[1] = (-4.309F);
      floatArray2[7] = floatArray10;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("", "=nflkk6J$yfQYb9a0Dj", "4Zs", content0, content0, 0.3926991F, 1.0F, (-1384.63F), (-4.309F), false, false, floatArray2, "=nflkk6J$yfQYb9a0Dj", false, bigDecimal1, bigDecimal1);
      furnitureCategory0.getIndexOfPieceOfFurniture(catalogPieceOfFurniture1);
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      homePieceOfFurniture0.setY(1.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isBottomRightPointAt(2.0F, 2.0F, 1.0F);
      homePieceOfFurniture0.isNameCenterPointAt(0.3926991F, 0.3926991F, 2.0F);
      homePieceOfFurniture0.containsPoint(1.0F, 2.0F, 1.0F);
      BigDecimal bigDecimal2 = BigDecimal.TEN;
      homePieceOfFurniture1.getValueAddedTax();
      homePieceOfFurniture1.setAngle(2.0F);
      homePieceOfFurniture0.isDoorOrWindow();
      homePieceOfFurniture1.isBottomRightPointAt((-1696.94F), 0.5F, 1067.581F);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-1.0F));
      homePieceOfFurniture0.move((-2734.917F), (-2734.917F));
      homePieceOfFurniture0.setY(2.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), 1.0F, 2.0F);
      homePieceOfFurniture0.getValueAddedTax();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("^(T[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.^(T[
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      float[][] floatArray0 = new float[10][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isPointAt((-6.5441246F), 1.0F, 2826.0F);
      homePieceOfFurniture0.isBottomRightPointAt((-6.5441246F), 2.0F, 3444.51F);
      homePieceOfFurniture0.getPoints();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = 2.0F;
      floatArray1[1] = 2.0F;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(2.0F);
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      bigDecimal0.intValue();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), 2.0F, 2.0F);
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.setY(1984.66F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(2.0F, (-1.0F), 3375.0F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(*", ".EbfL(*", ".EbfL(*", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, ".EbfL(*", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 2.0F;
      floatArray1[1] = (-2734.917F);
      floatArray1[2] = 2.0F;
      floatArray1[3] = 2.0F;
      floatArray1[4] = (-2734.917F);
      floatArray1[5] = 2.0F;
      floatArray1[6] = (-2734.917F);
      floatArray1[7] = (-2734.917F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = 2.0F;
      floatArray2[1] = 662.572F;
      floatArray2[2] = (-2734.917F);
      floatArray2[3] = 2.0F;
      floatArray2[4] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 0.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 662.572F;
      floatArray3[3] = 0.0F;
      floatArray3[4] = (-2734.917F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[5];
      floatArray4[0] = (-2734.917F);
      floatArray4[1] = (-2734.917F);
      floatArray4[2] = 662.572F;
      floatArray4[3] = 3363.4F;
      floatArray4[4] = 2.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[0];
      floatArray0[4] = floatArray5;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), 2.0F, false, floatArray0, "<.EbfL(1*d", false, true, true, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getIcon();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getModel();
      catalogPieceOfFurniture0.getWidth();
      catalogPieceOfFurniture0.getDepth();
      catalogPieceOfFurniture0.getHeight();
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getColor();
      catalogPieceOfFurniture0.getModelRotation();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isResizable();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isNameCenterPointAt(0.0F, (-1.0F), 3374.8F);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[1] = 0.0F;
      floatArray2[4] = (-2734.917F);
      floatArray0[0] = floatArray2;
      float[] floatArray3 = new float[6];
      floatArray0[4] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 0.0F, (-2734.917F), (-2734.917F), false, false);
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-4.4539986F));
      homePieceOfFurniture0.isTopRightPointAt(773.3398F, 773.3398F, 773.3398F);
      homePieceOfFurniture0.setAngle((-42.131737F));
      homePieceOfFurniture0.containsPoint(773.3398F, 1.0F, (-2734.917F));
      homePieceOfFurniture0.setElevation((-2026.64F));
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.setY((-42.131737F));
      homePieceOfFurniture0.getColor();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(0.31653136F, 0.31653136F, 0.31653136F);
      homePieceOfFurniture0.getColor();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray0[3] = floatArray0[2];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), false, false);
      catalogPieceOfFurniture0.getName();
      Float float0 = new Float((-2734.917F));
      Float float1 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setName((String) null);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), (-2734.917F), (-2734.917F));
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), (-1.0F), 3375.0F);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getModelRotation();
      homePieceOfFurniture0.setName((String) null);
      homePieceOfFurniture0.isBottomRightPointAt((-1748.6565F), (-2734.917F), (-2734.917F));
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.CatalogDoorOrWindow", (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), true, true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Float float0 = new Float((-2734.917F));
      Float float1 = new Float((-2734.917F));
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Float.floatToIntBits((-2734.917F));
      homePieceOfFurniture0.setShininess(float1);
      homePieceOfFurniture0.setNameAngle((-2734.917F));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      float[][] floatArray0 = new float[9][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.E,fL(1*d", "<.E,fL(1*d", "<.E,fL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, "<.E,fL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isDeformable();
      float float0 = (-1.0F);
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setWidth(2.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray0[3] = floatArray0[2];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), false, false);
      catalogPieceOfFurniture0.getName();
      Float float0 = new Float((-2734.917F));
      Float float1 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setName((String) null);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), (-2734.917F), (-2734.917F));
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), (-1.0F), 3375.0F);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getModelRotation();
      homePieceOfFurniture0.getIcon();
      homePieceOfFurniture0.getWidth();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".VNEbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt((-1.0F), (-1.0F), (-1.0F));
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 0.0F, (-619.0F), (-619.0F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isTopRightPointAt((-619.0F), (-619.0F), 1583.64F);
      homePieceOfFurniture0.isPointAt(0.0F, 0.0F, (-619.0F));
      homePieceOfFurniture0.clone();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("|i#[U", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = new Integer(298);
      homePieceOfFurniture0.setElevation(298);
      integer0.equals("");
      homePieceOfFurniture0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      float[] floatArray0 = new float[41];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.clone();
      homePieceOfFurniture0.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 2.0F;
      floatArray0[2] = 2.0F;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, false, false);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(2.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(2.0F);
      homePieceOfFurniture0.isNameCenterPointAt(2.0F, 2734.917F, 2.0F);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.isTopRightPointAt(2.0F, 2.0F, (-1514.8599F));
      homePieceOfFurniture1.setNameAngle((-1123.2175F));
      homePieceOfFurniture1.setNameVisible(true);
      homePieceOfFurniture1.setDepth(2.0F);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      float[][] floatArray0 = new float[10][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = 2.0F;
      floatArray1[2] = 2.0F;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(2.0F);
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      catalogPieceOfFurniture0.getCurrency();
      bigDecimal0.intValue();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isDeformable();
      homePieceOfFurniture0.isNameCenterPointAt(1984.66F, 2.0F, (-897.024F));
      BigDecimal bigDecimal3 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.isTopRightPointAt((-897.024F), 2.0F, 3.4028235E38F);
      homePieceOfFurniture1.setNameAngle(2752.1875F);
      homePieceOfFurniture0.isBackFaceShown();
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture0.getY();
      homePieceOfFurniture1.isBottomLeftPointAt(88.32F, 1984.66F, 528.2654F);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.getModel();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-2734.917F);
      floatArray1[2] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "jW/rp'{*2-tU)gO7|", (Content) null, (Content) null, (Content) null, 662.572F, (-2734.917F), 3.4028235E38F, 0.0F, false, floatArray0, "", true, true, false, bigDecimal0, bigDecimal0);
      BigDecimal.valueOf((-2399.4792419406867));
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(3.4028235E38F);
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setHeight(2.0F);
      homePieceOfFurniture0.getName();
      homePieceOfFurniture0.getPoints();
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 704.1679F, 2645.968F, 704.1679F, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Level level0 = new Level((String) null, 2645.968F, (-1.0F), (-1.0F));
      level0.getElevation();
      level0.getElevation();
      level0.getHeight();
      homePieceOfFurniture0.setLevel(level0);
      Level level1 = new Level("", 3062.767F, 2645.968F, 704.1679F);
      Float float0 = new Float(704.1679F);
      homePieceOfFurniture0.isAtLevel(level1);
      homePieceOfFurniture0.getAngle();
      homePieceOfFurniture0.isBottomLeftPointAt(2645.968F, (-1.0F), (-1.0F));
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = new float[5];
      floatArray1[1] = 0.0F;
      floatArray1[4] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 0.0F, (-2734.917F), (-2734.917F), false, false);
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-0.19340181F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.containsPoint((-2734.917F), 0.0F, (-1206.49F));
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
      Integer.valueOf(2);
      Integer integer0 = new Integer(298);
      Integer.min(298, 982);
      integer0.equals("");
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.isPointAt((-2734.917F), 3164.3984F, 2826.0F);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setName(".EbfL(1EH");
      homePieceOfFurniture0.getDescription();
      homePieceOfFurniture0.getName();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      floatArray0[3] = floatArray0[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt(0.17669809F, (-2734.917F), (-2734.917F));
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.setY(1984.66F);
      homePieceOfFurniture0.setElevation(1454.4005F);
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), (-1.0F), 3375.0F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.setMovable(true);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setElevation(2.0F);
      homePieceOfFurniture0.setDescription("<.EbfL(1*d");
      homePieceOfFurniture0.isBottomLeftPointAt(2.0F, 2.0F, 2.0F);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "jW/rp'{*2-tU)gO7|", "", (Content) null, (Content) null, (Content) null, 0.0F, (-294.1F), 1.0F, 0.0F, true, floatArray0, "<.EbfL(1*d", true, true, true, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      catalogPieceOfFurniture0.getName();
      bigDecimal1.toString();
      catalogPieceOfFurniture0.getDescription();
      bigDecimal1.multiply(bigDecimal0);
      Float float0 = new Float(662.572F);
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setX((-294.1F));
      homePieceOfFurniture0.setHeight(2.0F);
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.setWidth(1.0F);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.getPlanIcon();
      homePieceOfFurniture0.getCurrency();
      homePieceOfFurniture0.isMovable();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      float[] floatArray0 = new float[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      Float float0 = new Float(0.0F);
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      Integer integer0 = new Integer(298);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.isBackFaceShown();
      Integer integer1 = new Integer(298);
      Level level0 = new Level("<.EbfL(1*d", 298, 4084.61F, 298);
      Float float1 = new Float(3.4028235E38F);
      homePieceOfFurniture0.getY();
      level0.getHeight();
      homePieceOfFurniture0.isAtLevel((Level) null);
      homePieceOfFurniture0.isPointAt((-2429.9F), 3.4028235E38F, 3.4028235E38F);
      homePieceOfFurniture0.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray0[3] = floatArray0[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      String string0 = catalogPieceOfFurniture0.getName();
      assertNotNull(string0);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("<.EbfL(1*d", string0);
      
      String string1 = catalogPieceOfFurniture0.getDescription();
      assertNotNull(string1);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("<.EbfL(1*d", string1);
      
      Content content0 = catalogPieceOfFurniture0.getPlanIcon();
      assertNull(content0);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      float float0 = catalogPieceOfFurniture0.getWidth();
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-2734.917F), float0, 0.01F);
      
      Float float1 = new Float((-2734.917F));
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2734.917F), (float)float1, 0.01F);
      
      float float2 = catalogPieceOfFurniture0.getElevation();
      assertEquals(20, floatArray0.length);
      assertEquals(float2, float0, 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-2734.917F), float2, 0.01F);
      
      boolean boolean0 = catalogPieceOfFurniture0.isMovable();
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(boolean0);
      
      boolean boolean1 = catalogPieceOfFurniture0.isDoorOrWindow();
      assertEquals(20, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(boolean1);
      
      boolean boolean2 = catalogPieceOfFurniture0.isDeformable();
      assertEquals(20, floatArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(boolean2);
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      BigDecimal bigDecimal2 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotNull(bigDecimal2);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal2.byteValue());
      assertEquals((short)1, bigDecimal2.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      String string2 = catalogPieceOfFurniture0.getCurrency();
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNull(string2);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(20, floatArray0.length);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      boolean boolean3 = homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), (-2734.917F), (-2734.917F));
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertEquals(20, floatArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(boolean3);
      
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertEquals(20, floatArray0.length);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getDescription());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      homePieceOfFurniture0.setNameYOffset(1.0F);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertEquals(20, floatArray0.length);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getDescription());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      BigDecimal bigDecimal3 = homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotNull(bigDecimal3);
      assertEquals(20, floatArray0.length);
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getDescription());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((short)2, bigDecimal3.shortValue());
      assertEquals((byte)2, bigDecimal3.byteValue());
      
      boolean boolean4 = homePieceOfFurniture0.isNameCenterPointAt(56.0F, (-2734.917F), 2077.2F);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertEquals(20, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getDescription());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(boolean4);
      
      BigDecimal bigDecimal4 = BigDecimal.TEN;
      assertNotSame(bigDecimal4, bigDecimal1);
      assertNotSame(bigDecimal4, bigDecimal2);
      assertNotSame(bigDecimal4, bigDecimal0);
      assertNotSame(bigDecimal4, bigDecimal3);
      assertNotNull(bigDecimal4);
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertFalse(bigDecimal4.equals((Object)bigDecimal0));
      assertFalse(bigDecimal4.equals((Object)bigDecimal3));
      assertEquals((short)10, bigDecimal4.shortValue());
      assertEquals((byte)10, bigDecimal4.byteValue());
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotNull(homePieceOfFurniture1);
      assertEquals(20, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal4));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getDescription());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-2734.917F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getCatalogId());
      assertEquals((-2734.917F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isResizable());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture1.getDescription());
      assertEquals((-1367.4585F), homePieceOfFurniture1.getY(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(1.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture1.getElevation(), 0.01F);
      
      boolean boolean5 = homePieceOfFurniture1.isTopRightPointAt((-1.0F), 773.3398F, (-2734.917F));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertEquals(20, floatArray0.length);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal4));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getDescription());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-2734.917F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getCatalogId());
      assertEquals((-2734.917F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isResizable());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture1.getDescription());
      assertEquals((-1367.4585F), homePieceOfFurniture1.getY(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(1.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(boolean5);
      
      Content content1 = homePieceOfFurniture0.getModel();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertNull(content1);
      assertEquals(20, floatArray0.length);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal4));
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getDescription());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".ElUYbfL(1E", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer0 = Integer.valueOf((-3319));
      homePieceOfFurniture0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      TextStyle textStyle0 = new TextStyle((-841.1334F));
      TextStyle textStyle1 = textStyle0.deriveItalicStyle(false);
      TextStyle textStyle2 = textStyle1.deriveBoldStyle(false);
      homePieceOfFurniture0.setNameStyle(textStyle2);
      homePieceOfFurniture0.setNameYOffset((-1.0F));
      homePieceOfFurniture0.move(1.0F, (-2734.917F));
      homePieceOfFurniture0.setY(2.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), 1.0F, 2.0F);
      homePieceOfFurniture0.getValueAddedTax();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("^(T[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.^(T[
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      float[] floatArray0 = new float[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      Float float0 = new Float(0.0F);
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      Integer integer0 = new Integer(298);
      Integer.divideUnsigned(298, 298);
      integer0.equals("");
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      homePieceOfFurniture0.setDepth(1285.7295F);
      homePieceOfFurniture0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "jW/rp'{*2-tU)gO7|", "", (Content) null, (Content) null, (Content) null, (-2734.917F), (-294.1F), 1.0F, (-2734.917F), true, floatArray0, "<.EbfL(1*d", true, true, true, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      catalogPieceOfFurniture0.getName();
      bigDecimal1.toString();
      catalogPieceOfFurniture0.getDescription();
      bigDecimal1.multiply(bigDecimal0);
      Float float0 = new Float(662.572F);
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setX((-294.1F));
      homePieceOfFurniture0.setHeight(2.0F);
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.setWidth(1.0F);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.setWidth(0.0F);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray0[3] = floatArray0[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setName((String) null);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), (-2734.917F), (-2734.917F));
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.setY(1984.66F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), (-1.0F), 3375.0F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      float[][] floatArray0 = new float[7][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 2.0F;
      floatArray1[2] = (-2734.917F);
      floatArray1[3] = 2.0F;
      floatArray1[4] = 1385.5244F;
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[1] = 1385.5244F;
      floatArray2[1] = 1385.5244F;
      floatArray2[2] = 662.572F;
      floatArray2[4] = (-2734.917F);
      floatArray0[2] = floatArray2;
      float[] floatArray3 = new float[16];
      floatArray3[1] = (-2734.917F);
      floatArray3[2] = 1385.5244F;
      floatArray3[3] = 3363.4F;
      floatArray3[4] = 2.0F;
      floatArray0[3] = floatArray2;
      float[] floatArray4 = new float[1];
      floatArray0[4] = floatArray4;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getIcon();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getModel();
      catalogPieceOfFurniture0.getWidth();
      catalogPieceOfFurniture0.getHeight();
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getColor();
      catalogPieceOfFurniture0.getModelRotation();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isResizable();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isDeformable();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[3] = 2.0F;
      floatArray1[1] = 2.0F;
      floatArray1[0] = 2.0F;
      floatArray0[2] = floatArray1;
      float[] floatArray2 = new float[0];
      floatArray0[4] = floatArray2;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2736.0657F), (-2736.0657F), (-2736.0657F), 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getIcon();
      catalogPieceOfFurniture0.getPlanIcon();
      Float float0 = new Float(2.0F);
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getModelRotation();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isResizable();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.isTopLeftPointAt(2.0F, 2.0F, 1383.7291F);
      homePieceOfFurniture0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 410.708F, 410.708F, 1.5F, true, true);
      catalogPieceOfFurniture0.isDeformable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.intersectsRectangle(0.5F, (-4659.2F), 1.5F, 1.5F);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      homePieceOfFurniture0.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-2734.917F), 0.0F, 3.4028235E38F, false, true);
      BigDecimal bigDecimal1 = BigDecimal.valueOf(337.75048);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getName();
      bigDecimal1.toString();
      catalogPieceOfFurniture0.getDescription();
      BigDecimal bigDecimal3 = BigDecimal.ZERO;
      Float float0 = new Float(0.0F);
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setX(3.4028235E38F);
      homePieceOfFurniture0.setHeight((-2734.917F));
      homePieceOfFurniture0.getY();
      homePieceOfFurniture0.getX();
      homePieceOfFurniture0.setName((String) null);
      homePieceOfFurniture0.getIcon();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[1] = 2.0F;
      floatArray0[2] = 2.0F;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, false, false);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(2.0F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(2.0F);
      homePieceOfFurniture0.isNameCenterPointAt(2.0F, 2734.917F, 2734.917F);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.isTopRightPointAt(2.0F, 2.0F, (-1514.8599F));
      Integer integer0 = new Integer(0);
      integer0.equals("PkMO=>T>G");
      homePieceOfFurniture1.setColor(integer0);
      homePieceOfFurniture1.setTexture((HomeTexture) null);
      homePieceOfFurniture0.setDepth((-1696.94F));
      homePieceOfFurniture1.setWidth(2.0F);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 2.0F;
      floatArray1[2] = (-2734.917F);
      floatArray1[3] = 2.0F;
      floatArray1[4] = 0.0F;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      float[] floatArray2 = new float[16];
      floatArray2[0] = (-2734.917F);
      floatArray2[1] = (-2734.917F);
      floatArray2[2] = 662.572F;
      floatArray2[15] = 3363.4F;
      floatArray2[0] = 2.0F;
      floatArray0[3] = floatArray2;
      floatArray0[4] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      float[][] floatArray3 = new float[5][6];
      float[] floatArray4 = new float[8];
      floatArray4[0] = 2.0F;
      floatArray4[1] = (-2734.917F);
      floatArray4[2] = 2.0F;
      floatArray4[3] = 2.0F;
      floatArray4[4] = (-2734.917F);
      floatArray4[5] = 2.0F;
      floatArray4[6] = (-2734.917F);
      floatArray4[7] = (-2734.917F);
      floatArray3[0] = floatArray4;
      float[] floatArray5 = new float[5];
      floatArray5[0] = 2.0F;
      floatArray5[1] = 662.572F;
      floatArray5[2] = (-2734.917F);
      floatArray5[3] = 2.0F;
      floatArray5[4] = 0.0F;
      floatArray3[1] = floatArray5;
      float[] floatArray6 = new float[5];
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = 662.572F;
      floatArray6[3] = 0.0F;
      floatArray6[4] = (-2734.917F);
      floatArray3[2] = floatArray6;
      float[] floatArray7 = new float[5];
      floatArray7[0] = (-2734.917F);
      floatArray7[1] = (-2734.917F);
      floatArray7[2] = 662.572F;
      floatArray7[3] = 3363.4F;
      floatArray7[4] = 2.0F;
      floatArray3[3] = floatArray7;
      float[] floatArray8 = new float[0];
      floatArray3[4] = floatArray8;
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), 2.0F, false, floatArray3, "<.EbfL(1*d", false, true, true, bigDecimal1, bigDecimal1);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getIcon();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getModel();
      catalogPieceOfFurniture0.getWidth();
      catalogPieceOfFurniture0.getDepth();
      catalogPieceOfFurniture0.getHeight();
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getColor();
      catalogPieceOfFurniture0.getModelRotation();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isResizable();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isVisible();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      float[] floatArray0 = new float[15];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("i(g:QL", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(2.0F, 2.0F, 2.0F);
      homePieceOfFurniture0.isBottomLeftPointAt((-911.12F), (-911.12F), 2.0F);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 704.1679F, 2645.968F, 704.1679F, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Level level0 = new Level((String) null, 1.0F, (-1.0F), (-1.0F));
      level0.getElevation();
      level0.getElevation();
      level0.getHeight();
      homePieceOfFurniture0.setLevel(level0);
      Level level1 = new Level("", 3062.767F, 2645.968F, 704.1679F);
      float float0 = new Float(704.1679F);
      homePieceOfFurniture0.isAtLevel(level1);
      homePieceOfFurniture0.getAngle();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "jW/rp'{*2-tU)gO7|", "", (Content) null, (Content) null, (Content) null, (-2734.917F), (-294.1F), 1.0F, (-2734.917F), true, floatArray0, "<.EbfL(1*d", true, true, true, bigDecimal0, bigDecimal0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      catalogPieceOfFurniture0.getName();
      bigDecimal1.toString();
      catalogPieceOfFurniture0.getDescription();
      bigDecimal1.multiply(bigDecimal0);
      Float float0 = new Float(662.572F);
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.containsPoint((-1.0F), 2037.7584F, 662.572F);
      homePieceOfFurniture0.setElevation((-1.0F));
      homePieceOfFurniture0.setNameXOffset((-1.0F));
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 704.1679F, 2116.069F, 704.1679F, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Level level0 = new Level((String) null, 2116.069F, (-1.0F), (-1.0F));
      level0.getElevation();
      Float float0 = new Float(3062.767F);
      homePieceOfFurniture0.setLevel(level0);
      Level level1 = new Level("", 3062.767F, 2116.069F, 704.1679F);
      homePieceOfFurniture0.setNameAngle((-1.0F));
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setMovable(true);
      homePieceOfFurniture0.isBottomRightPointAt(0.31653136F, 0.31653136F, 0.31653136F);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-2734.917F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(1384.7291F, 662.572F, (-2734.917F));
      BigDecimal bigDecimal2 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isTopRightPointAt(773.3398F, 1977.8F, (-42.131737F));
      homePieceOfFurniture1.setAngle(1.0F);
      homePieceOfFurniture1.containsPoint((-2734.917F), (-3733.94F), 1384.7291F);
      homePieceOfFurniture0.setElevation((-1750.78F));
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture1.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[0];
      floatArray0[4] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-4.4539986F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.intersectsRectangle((-2734.917F), (-4.4539986F), (-4.4539986F), (-2734.917F));
      homePieceOfFurniture0.isNameCenterPointAt(0.3926991F, (-2458.3433F), (-1116.382F));
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.clone();
      homePieceOfFurniture0.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")~RcCspl");
      homePieceOfFurniture0.setDescription("<.EbfL(1*d");
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.getHeight();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 2.0F;
      floatArray1[1] = (-2734.917F);
      floatArray1[2] = 2.0F;
      floatArray1[3] = 2.0F;
      floatArray1[4] = (-2734.917F);
      floatArray1[5] = 2.0F;
      floatArray1[6] = (-2734.917F);
      floatArray1[7] = (-2734.917F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = 2.0F;
      floatArray2[1] = 662.572F;
      floatArray2[2] = (-2734.917F);
      floatArray2[3] = 2.0F;
      floatArray2[4] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 0.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 662.572F;
      floatArray3[3] = 0.0F;
      floatArray3[4] = (-2734.917F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[5];
      floatArray4[0] = (-2734.917F);
      floatArray4[1] = (-2734.917F);
      floatArray4[2] = 662.572F;
      floatArray4[3] = 3363.4F;
      floatArray4[4] = 2.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[0];
      floatArray0[4] = floatArray5;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), 2.0F, false, floatArray0, "<.EbfL(1*d", false, true, true, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getIcon();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getModel();
      catalogPieceOfFurniture0.getWidth();
      catalogPieceOfFurniture0.getDepth();
      catalogPieceOfFurniture0.getHeight();
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getModelRotation();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isNameCenterPointAt(0.0F, (-1.0F), (-2734.917F));
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 2.0F;
      floatArray1[2] = (-2734.917F);
      floatArray1[3] = 2.0F;
      floatArray1[4] = 0.0F;
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[1] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 662.572F;
      floatArray2[3] = 0.0F;
      floatArray2[4] = (-2734.917F);
      floatArray0[2] = floatArray2;
      float[] floatArray3 = new float[16];
      floatArray3[0] = (-2734.917F);
      floatArray3[1] = (-2734.917F);
      floatArray3[2] = 662.572F;
      floatArray3[15] = 3363.4F;
      floatArray3[0] = 2.0F;
      floatArray0[3] = floatArray3;
      floatArray0[4] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), 2.0F, false, floatArray0, "<.EbfL(1*d", false, true, true, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getIcon();
      catalogPieceOfFurniture0.getModel();
      Float float0 = new Float(662.572F);
      catalogPieceOfFurniture0.getHeight();
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getColor();
      catalogPieceOfFurniture0.getModelRotation();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isResizable();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(0.0F, 0.0F, 640.75F);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-2732.9695F), (-2732.9695F), 3.4028235E38F, false, false);
      BigDecimal bigDecimal1 = new BigDecimal(3.4028235E38F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setVisible(false);
      Float.floatToIntBits(3.4028235E38F);
      homePieceOfFurniture0.intersectsRectangle(2139095039, 3.4028235E38F, 2139095039, 2139095039);
      homePieceOfFurniture0.getPoints();
      System.setCurrentTimeMillis(2139095039);
      homePieceOfFurniture0.setModelMirrored(false);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[1] = 0.0F;
      floatArray2[4] = (-2734.917F);
      floatArray0[0] = floatArray2;
      float[] floatArray3 = new float[6];
      floatArray0[4] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 0.0F, (-2734.917F), (-2734.917F), false, false);
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-4.4539986F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(3375.0F, 1384.7291F, 0.0F);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isTopRightPointAt(773.3398F, (-4.4539986F), 773.3398F);
      homePieceOfFurniture0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal1 = catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.setY(1984.66F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      bigDecimal0.min(bigDecimal1);
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), (-2734.917F), 3375.0F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("#p\"Fu,iz}A", (Content) null, (Content) null, 0.15233545F, 0.15233545F, 0.15233545F, false, true);
      catalogPieceOfFurniture0.getElevation();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.containsPoint(0.0F, 0.0F, 0.0F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      homePieceOfFurniture0.setNameYOffset(0.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setVisible(true);
      homePieceOfFurniture0.isModelMirrored();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, (Content) null, (Content) null, (-138.20297F), (-138.20297F), 1454.4005F, true, false);
      Float float0 = new Float((-138.20297F));
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(1984.66F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.containsPoint((-1206.49F), (-1206.49F), 3375.0F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
      Integer integer0 = new Integer(298);
      Integer.min((-570), (-124));
      integer0.equals((Object) null);
      homePieceOfFurniture0.setColor((Integer) null);
      homePieceOfFurniture0.isPointAt(1367.4585F, 1454.4005F, 2826.0F);
      homePieceOfFurniture0.getDepth();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray1[4] = (-2734.917F);
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      float[] floatArray2 = new float[0];
      floatArray0[4] = floatArray2;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      float float1 = (-1.0F);
      float float2 = 1.0F;
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setWidth((-2069.825F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 704.1679F, 2645.968F, 704.1679F, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Level level0 = new Level((String) null, 2645.968F, (-1.0F), (-1.0F));
      level0.getElevation();
      level0.getElevation();
      level0.getHeight();
      homePieceOfFurniture0.setLevel(level0);
      Level level1 = new Level("", 3062.767F, 2645.968F, 704.1679F);
      Float float0 = new Float(704.1679F);
      homePieceOfFurniture0.isAtLevel(level1);
      homePieceOfFurniture0.getAngle();
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      integer0.equals(integer1);
      homePieceOfFurniture0.setColor(integer1);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 2.0F;
      floatArray1[2] = (-2734.917F);
      floatArray1[3] = 2.0F;
      floatArray1[4] = 1385.5244F;
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[1] = 1385.5244F;
      floatArray2[1] = 1385.5244F;
      floatArray2[2] = 662.572F;
      floatArray2[4] = (-2734.917F);
      floatArray0[2] = floatArray2;
      float[] floatArray3 = new float[16];
      floatArray3[1] = (-2734.917F);
      floatArray3[2] = 1385.5244F;
      floatArray3[3] = 3363.4F;
      floatArray3[4] = 2.0F;
      floatArray0[3] = floatArray2;
      float[] floatArray4 = new float[1];
      floatArray0[4] = floatArray4;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getIcon();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getModel();
      catalogPieceOfFurniture0.getWidth();
      catalogPieceOfFurniture0.getHeight();
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getColor();
      catalogPieceOfFurniture0.getModelRotation();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isResizable();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isTopLeftPointAt(2.0F, 1385.5244F, 1385.5244F);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray0[3] = floatArray0[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setName((String) null);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), (-2734.917F), (-2734.917F));
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.setY(1984.66F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), (-1.0F), 3375.0F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      float[] floatArray1 = new float[3];
      floatArray1[0] = 2.0F;
      floatArray0[0] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.isDoorOrWindow();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setName("<.EbfL(1*d");
      homePieceOfFurniture0.setNameYOffset(5.5986314F);
      homePieceOfFurniture0.setY((-2268.1245F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.getPlanIcon();
      homePieceOfFurniture0.isResizable();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameXOffset(0.31653136F);
      homePieceOfFurniture0.isBottomRightPointAt(0.31653136F, 0.31653136F, 0.31653136F);
      homePieceOfFurniture0.getPrice();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      float[] floatArray1 = new float[3];
      floatArray1[0] = 2.0F;
      floatArray0[0] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.isDoorOrWindow();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setName("<.EbfL(1*d");
      homePieceOfFurniture0.isTopRightPointAt(2.0F, 0.0F, 2.0F);
      homePieceOfFurniture0.setNameAngle(2752.1875F);
      homePieceOfFurniture0.isBottomLeftPointAt((-1184.0F), 0.0F, 0.18597035F);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-1097.6111F), 0.0F, (-2734.917F), false, false);
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(395.073F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(80.7F, 3164.3984F, (-1367.4585F));
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.isNameCenterPointAt((-1366.4585F), 2387.722F, 994.0F);
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getModelRotation();
      homePieceOfFurniture0.setName("jar:");
      homePieceOfFurniture0.isBottomRightPointAt((-1366.4585F), 395.073F, (-1514.8599F));
      homePieceOfFurniture1.setX(376.96744F);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float((-2734.917F));
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), (-2734.917F), (-2734.917F));
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      homePieceOfFurniture0.setNameYOffset(1.0F);
      homePieceOfFurniture0.setY(1984.66F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), (-1.0F), 3375.0F);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.CatalogDoorOrWindow", (Content) null, (Content) null, (-2734.917F), (-2734.917F), 3.4028235E38F, true, true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Float float0 = new Float(3.4028235E38F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setShininess(float0);
      homePieceOfFurniture0.setShininess(float0);
      homePieceOfFurniture0.setNameAngle((-2734.917F));
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[2] = (-2734.917F);
      floatArray1[3] = (-2734.917F);
      floatArray1[4] = 0.0F;
      float[] floatArray2 = new float[5];
      floatArray2[1] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[4] = (-2734.917F);
      floatArray0[2] = floatArray2;
      floatArray0[3] = floatArray2;
      float[] floatArray3 = new float[0];
      floatArray0[4] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      BigDecimal.valueOf((double) (-2734.917F));
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      Float float0 = new Float(0.0F);
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.getStaircaseCutOutShape();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isNameCenterPointAt(0.0F, (-1.0F), 3375.0F);
      homePieceOfFurniture0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameAngle(0.31653136F);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      float[] floatArray0 = new float[41];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setDescription((String) null);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDescription("<.EbfL(1*d");
      homePieceOfFurniture0.isBottomLeftPointAt(2.0F, 2.0F, 2.0F);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.isTopLeftPointAt(0.0F, 0.0F, 0.5F);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 0.15233545F, 0.15233545F, 0.15233545F, false, true);
      catalogPieceOfFurniture0.getName();
      Float float0 = new Float(0.15233545F);
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.containsPoint(0.0F, 0.0F, 0.0F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.setAngle((-4027.0F));
      homePieceOfFurniture0.isBottomLeftPointAt(850.5418F, 70.0F, 3430.831F);
      homePieceOfFurniture0.isBottomLeftPointAt(0.0F, 0.15233545F, (-1922.5331F));
      homePieceOfFurniture0.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      float[][] floatArray0 = new float[10][6];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.Ebf(V*d", "<.Ebf(V*d", "<.Ebf(V*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, "<.Ebf(V*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameVisible(false);
      homePieceOfFurniture0.setNameVisible(false);
      Float.floatToIntBits((-41.5F));
      Float.floatToIntBits((-1037697024));
      Float.floatToIntBits((-831035392));
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setShininess((Float) (-41.5F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("8kd%#+>wQ", (Content) null, (Content) null, 176.441F, 1819.1F, 1.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(1.0F, 1819.1F, (-5903.531F));
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 0.15233545F, 0.15233545F, 0.15233545F, false, true);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getElevation();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setX(0.0F);
      homePieceOfFurniture0.isNameCenterPointAt((-3720.2F), 0.0F, 0.0F);
      homePieceOfFurniture0.containsPoint((-3720.2F), 2734.917F, 2553.0F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Integer.valueOf(0);
      Integer integer0 = Integer.valueOf(0);
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.setAngle(2734.917F);
      homePieceOfFurniture0.isDoorOrWindow();
      homePieceOfFurniture0.getIcon();
      homePieceOfFurniture0.getAngle();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.LEVEL;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      float[] floatArray1 = new float[3];
      floatArray1[0] = 2.0F;
      floatArray1[0] = 2.0F;
      floatArray0[0] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.getName();
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.isDoorOrWindow();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt(2098.407F, 2098.407F, (-1.0F));
      homePieceOfFurniture0.setDescription("<.EbfL(1*d");
      homePieceOfFurniture0.setAngle((-1589.4866F));
      homePieceOfFurniture0.setNameYOffset(5.5986314F);
      homePieceOfFurniture0.setY((-2268.1245F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.getPrice();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.isModelMirrored();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[2] = (-2734.917F);
      floatArray1[3] = (-2734.917F);
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[1] = (-2734.917F);
      floatArray2[1] = (-2734.917F);
      floatArray2[4] = (-2734.917F);
      floatArray0[2] = floatArray2;
      float[] floatArray3 = new float[0];
      floatArray0[4] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-2734.917F));
      float float1 = new Float((-2734.917F));
      catalogPieceOfFurniture0.isMovable();
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isBackFaceShown();
      catalogPieceOfFurniture0.isDeformable();
      catalogPieceOfFurniture0.isTexturable();
      catalogPieceOfFurniture0.getPrice();
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset((-4.4539986F));
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isNameCenterPointAt(3375.0F, 1384.7291F, 0.0F);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isTopRightPointAt(773.3398F, (-4.4539986F), 773.3398F);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt(0.31653136F, 4.3774214F, 2033.5492F);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2734.917F);
      floatArray0[2] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-2734.917F), (-2734.917F), 0.0F, true, false);
      BigDecimal bigDecimal1 = BigDecimal.valueOf((-2399.4792419406867));
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      bigDecimal0.multiply(bigDecimal1);
      Float float0 = new Float(0.0F);
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isTexturable();
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameVisible(false);
      homePieceOfFurniture0.setHeight((-2002.75F));
      homePieceOfFurniture0.setNameYOffset((-2734.917F));
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.setNameAngle((-2734.917F));
      homePieceOfFurniture0.getPoints();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-2734.917F);
      floatArray0[2] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-2734.917F), (-2734.917F), 0.0F, true, false);
      BigDecimal bigDecimal1 = BigDecimal.valueOf((-2399.4792419406867));
      catalogPieceOfFurniture0.getDescription();
      catalogPieceOfFurniture0.getPlanIcon();
      catalogPieceOfFurniture0.getWidth();
      bigDecimal0.multiply(bigDecimal1);
      Float float0 = new Float(3.4028235E38F);
      catalogPieceOfFurniture0.isDoorOrWindow();
      catalogPieceOfFurniture0.isTexturable();
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameYOffset(3747.0F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.isModelMirrored();
      BigDecimal bigDecimal3 = BigDecimal.TEN;
      homePieceOfFurniture0.clone();
      homePieceOfFurniture0.isTopRightPointAt(0.0F, (-1845.0F), (-4.4539986F));
      homePieceOfFurniture0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      float[] floatArray0 = new float[24];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      catalogPieceOfFurniture0.isDeformable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.setNameAngle(0.0F);
      homePieceOfFurniture0.getPoints();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.intersectsRectangle(0.31653136F, 4.3774214F, 4.3774214F, 4.3774214F);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isPointAt(0.31653136F, 4.3774214F, 0.31653136F);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(0.31653136F, 0.31653136F, 0.31653136F);
      homePieceOfFurniture0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setWidth(0.31653136F);
      homePieceOfFurniture0.isPointAt(0.31653136F, 4.3774214F, 0.31653136F);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 2.0F;
      floatArray1[1] = (-2734.917F);
      floatArray1[2] = 2.0F;
      floatArray1[3] = 2.0F;
      floatArray1[4] = (-2734.917F);
      floatArray1[5] = 2.0F;
      floatArray1[6] = (-2734.917F);
      floatArray1[7] = (-2734.917F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[1] = 662.572F;
      floatArray2[2] = (-2734.917F);
      floatArray2[3] = 2.0F;
      floatArray2[4] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 0.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 662.572F;
      floatArray3[3] = 0.0F;
      floatArray3[4] = (-2734.917F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[5];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = (-2734.917F);
      floatArray4[1] = 0.0F;
      floatArray4[2] = 662.572F;
      floatArray4[3] = 3363.4F;
      floatArray4[4] = 2.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[0];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray1));
      
      floatArray0[4] = floatArray5;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), 2.0F, false, floatArray0, "<.EbfL(1*d", false, true, true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      String string0 = catalogPieceOfFurniture0.getDescription();
      assertNotNull(string0);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("<.EbfL(1*d", string0);
      
      Content content0 = catalogPieceOfFurniture0.getIcon();
      assertNull(content0);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      Content content1 = catalogPieceOfFurniture0.getPlanIcon();
      assertNull(content1);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      Content content2 = catalogPieceOfFurniture0.getModel();
      assertNull(content2);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      float float0 = catalogPieceOfFurniture0.getWidth();
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-2734.917F), float0, 0.01F);
      
      float float1 = catalogPieceOfFurniture0.getDepth();
      assertEquals(5, floatArray0.length);
      assertEquals(float1, float0, 0.01F);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-2734.917F), float1, 0.01F);
      
      float float2 = catalogPieceOfFurniture0.getHeight();
      assertEquals(5, floatArray0.length);
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-2734.917F), float2, 0.01F);
      
      Float float3 = new Float(2.0F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(2.0F, (float)float3, 0.01F);
      
      boolean boolean0 = catalogPieceOfFurniture0.isMovable();
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(boolean0);
      
      boolean boolean1 = catalogPieceOfFurniture0.isDoorOrWindow();
      assertEquals(5, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(boolean1);
      
      Integer integer0 = catalogPieceOfFurniture0.getColor();
      assertNull(integer0);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      float[][] floatArray6 = catalogPieceOfFurniture0.getModelRotation();
      assertNotSame(floatArray0, floatArray6);
      assertNotSame(floatArray6, floatArray0);
      assertNotNull(floatArray6);
      assertEquals(5, floatArray0.length);
      assertEquals(3, floatArray6.length);
      assertFalse(floatArray6.equals((Object)floatArray0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      String string1 = catalogPieceOfFurniture0.getStaircaseCutOutShape();
      assertNotSame(floatArray0, floatArray6);
      assertNull(string1);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray6));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      boolean boolean2 = catalogPieceOfFurniture0.isBackFaceShown();
      assertNotSame(floatArray0, floatArray6);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(floatArray0.equals((Object)floatArray6));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(boolean2);
      
      boolean boolean3 = catalogPieceOfFurniture0.isResizable();
      assertNotSame(floatArray0, floatArray6);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray6));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(boolean3);
      
      boolean boolean4 = catalogPieceOfFurniture0.isDeformable();
      assertNotSame(floatArray0, floatArray6);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray6));
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(boolean4);
      
      boolean boolean5 = catalogPieceOfFurniture0.isTexturable();
      assertNotSame(floatArray0, floatArray6);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray6));
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(boolean5);
      
      BigDecimal bigDecimal1 = catalogPieceOfFurniture0.getPrice();
      assertNotSame(floatArray0, floatArray6);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray6));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      BigDecimal bigDecimal2 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertNotSame(floatArray0, floatArray6);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertNotNull(bigDecimal2);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray6));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((short)1, bigDecimal2.shortValue());
      assertEquals((byte)1, bigDecimal2.byteValue());
      
      String string2 = catalogPieceOfFurniture0.getCurrency();
      assertNotSame(floatArray0, floatArray6);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNull(string2);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray6));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray6));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      
      boolean boolean6 = homePieceOfFurniture0.isBackFaceShown();
      assertNotSame(floatArray0, floatArray6);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray6));
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(boolean6);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(20, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      String string0 = catalogPieceOfFurniture0.getName();
      assertNotNull(string0);
      assertEquals(20, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("<.EbfL(1*d", string0);
      
      String string1 = catalogPieceOfFurniture0.getDescription();
      assertNotNull(string1);
      assertEquals(20, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("<.EbfL(1*d", string1);
      
      float float0 = catalogPieceOfFurniture0.getWidth();
      assertEquals(20, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), float0, 0.01F);
      
      Float float1 = new Float((-2734.917F));
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2734.917F), (float)float1, 0.01F);
      
      float float2 = catalogPieceOfFurniture0.getElevation();
      assertEquals(20, floatArray0.length);
      assertEquals(float2, float0, 0.01F);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), float2, 0.01F);
      
      boolean boolean0 = catalogPieceOfFurniture0.isMovable();
      assertEquals(20, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(boolean0);
      
      boolean boolean1 = catalogPieceOfFurniture0.isDoorOrWindow();
      assertEquals(20, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(boolean1);
      
      String string2 = catalogPieceOfFurniture0.getStaircaseCutOutShape();
      assertNull(string2);
      assertEquals(20, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      String string3 = catalogPieceOfFurniture0.getCurrency();
      assertNull(string3);
      assertEquals(20, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(20, floatArray0.length);
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      homePieceOfFurniture0.setNameYOffset((-1.0F));
      assertEquals(20, floatArray0.length);
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1.0F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      homePieceOfFurniture0.move(1.0F, (-2734.917F));
      assertEquals(20, floatArray0.length);
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-4102.3755F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-1366.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1.0F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      homePieceOfFurniture0.setY(2.0F);
      assertEquals(20, floatArray0.length);
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-1366.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1.0F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(2.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      BigDecimal bigDecimal1 = homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotNull(bigDecimal1);
      assertEquals(20, floatArray0.length);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-1366.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1.0F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(2.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals((byte)2, bigDecimal1.byteValue());
      assertEquals((short)2, bigDecimal1.shortValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      boolean boolean2 = homePieceOfFurniture0.isTopRightPointAt(2.0F, (-2734.917F), (-1.0F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(20, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-1366.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1.0F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(2.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(boolean2);
      
      BigDecimal bigDecimal2 = BigDecimal.TEN;
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotNull(bigDecimal2);
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal2.shortValue());
      assertEquals((byte)10, bigDecimal2.byteValue());
      
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("^(T[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.^(T[
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-2734.917F);
      floatArray1[2] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "jW/rp'{*2-tU)gO7|", (Content) null, (Content) null, (Content) null, 662.572F, (-2734.917F), 3.4028235E38F, 0.0F, false, floatArray0, "", true, true, false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(5, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      
      String string0 = catalogPieceOfFurniture0.getName();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotNull(string0);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("<.EbfL(1*d", string0);
      
      String string1 = catalogPieceOfFurniture0.getDescription();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotNull(string1);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("jW/rp'{*2-tU)gO7|", string1);
      
      BigDecimal bigDecimal2 = bigDecimal0.multiply(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertNotNull(bigDecimal2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((byte)10, bigDecimal2.byteValue());
      assertEquals((short)10, bigDecimal2.shortValue());
      
      Float float0 = new Float(3.4028235E38F);
      assertNotNull(float0);
      assertEquals(3.4028235E38F, (float)float0, 0.01F);
      
      boolean boolean0 = catalogPieceOfFurniture0.isDoorOrWindow();
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(boolean0);
      
      String string2 = catalogPieceOfFurniture0.getStaircaseCutOutShape();
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNull(string2);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      
      boolean boolean1 = catalogPieceOfFurniture0.isBackFaceShown();
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(boolean1 == boolean0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(boolean1);
      
      boolean boolean2 = catalogPieceOfFurniture0.isTexturable();
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(boolean2);
      
      BigDecimal bigDecimal3 = catalogPieceOfFurniture0.getPrice();
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotNull(bigDecimal3);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((short)1, bigDecimal3.shortValue());
      assertEquals((byte)1, bigDecimal3.byteValue());
      
      BigDecimal bigDecimal4 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertNotSame(bigDecimal4, bigDecimal2);
      assertSame(bigDecimal4, bigDecimal0);
      assertSame(bigDecimal4, bigDecimal3);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotNull(bigDecimal4);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((byte)1, bigDecimal4.byteValue());
      assertEquals((short)1, bigDecimal4.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      
      String string3 = catalogPieceOfFurniture0.getCurrency();
      assertSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertNull(string3);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      
      catalogPieceOfFurniture0.setCategory((FurnitureCategory) null);
      assertSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(662.572F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("jW/rp'{*2-tU)gO7|", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(331.286F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      
      homePieceOfFurniture0.setHeight(2.0F);
      assertSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(662.572F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("jW/rp'{*2-tU)gO7|", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(331.286F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      
      float float1 = homePieceOfFurniture0.getGroundElevation();
      assertSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(662.572F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("jW/rp'{*2-tU)gO7|", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(331.286F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      String string4 = homePieceOfFurniture0.getDescription();
      assertSame(bigDecimal0, bigDecimal4);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotNull(string4);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(662.572F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("jW/rp'{*2-tU)gO7|", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(331.286F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("jW/rp'{*2-tU)gO7|", string4);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = 2.0F;
      floatArray1[2] = 2.0F;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, true, floatArray0, "<.EbfL(1*d", true, true, true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      
      String string0 = catalogPieceOfFurniture0.getName();
      assertNotNull(string0);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", string0);
      
      String string1 = catalogPieceOfFurniture0.getDescription();
      assertNotNull(string1);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", string1);
      
      float float0 = catalogPieceOfFurniture0.getWidth();
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(2.0F, float0, 0.01F);
      
      Float float1 = new Float(2.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2.0F, (float)float1, 0.01F);
      
      float float2 = catalogPieceOfFurniture0.getElevation();
      assertEquals(20, floatArray0.length);
      assertEquals(float2, float0, 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(2.0F, float2, 0.01F);
      
      boolean boolean0 = catalogPieceOfFurniture0.isDoorOrWindow();
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = catalogPieceOfFurniture0.isDeformable();
      assertEquals(20, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(boolean1);
      
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      
      String string2 = catalogPieceOfFurniture0.getCurrency();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNull(string2);
      assertEquals(20, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      
      int int0 = bigDecimal0.intValue();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(1, int0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(20, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      
      boolean boolean2 = homePieceOfFurniture0.isDeformable();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(20, floatArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(boolean2);
      
      boolean boolean3 = homePieceOfFurniture0.isNameCenterPointAt(1984.66F, 2.0F, (-897.024F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(20, floatArray0.length);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(boolean3);
      
      BigDecimal bigDecimal2 = BigDecimal.TEN;
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotNull(bigDecimal2);
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal2.shortValue());
      assertEquals((byte)10, bigDecimal2.byteValue());
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotNull(homePieceOfFurniture1);
      assertEquals(20, floatArray0.length);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(1.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(1.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(2.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getName());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      
      BigDecimal bigDecimal3 = homePieceOfFurniture1.getPriceValueAddedTaxIncluded();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotNull(bigDecimal3);
      assertEquals(20, floatArray0.length);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(1.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(1.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(2.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getName());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal3.byteValue());
      assertEquals((short)2, bigDecimal3.shortValue());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      
      boolean boolean4 = homePieceOfFurniture0.isNameCenterPointAt((-2734.917F), 1984.66F, (-4102.3755F));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(20, floatArray0.length);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(boolean4);
      
      BigDecimal bigDecimal4 = BigDecimal.ONE;
      assertNotSame(bigDecimal4, bigDecimal1);
      assertSame(bigDecimal4, bigDecimal0);
      assertNotSame(bigDecimal4, bigDecimal2);
      assertNotSame(bigDecimal4, bigDecimal3);
      assertNotNull(bigDecimal4);
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertFalse(bigDecimal4.equals((Object)bigDecimal3));
      assertEquals((short)1, bigDecimal4.shortValue());
      assertEquals((byte)1, bigDecimal4.byteValue());
      
      BigDecimal bigDecimal5 = homePieceOfFurniture1.getValueAddedTax();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal4);
      assertSame(bigDecimal0, bigDecimal5);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal5, bigDecimal1);
      assertNotSame(bigDecimal5, bigDecimal3);
      assertSame(bigDecimal5, bigDecimal0);
      assertNotSame(bigDecimal5, bigDecimal2);
      assertSame(bigDecimal5, bigDecimal4);
      assertNotNull(bigDecimal5);
      assertEquals(20, floatArray0.length);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal5.equals((Object)bigDecimal1));
      assertFalse(bigDecimal5.equals((Object)bigDecimal3));
      assertFalse(bigDecimal5.equals((Object)bigDecimal2));
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(1.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(1.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(2.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getName());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((byte)1, bigDecimal5.byteValue());
      assertEquals((short)1, bigDecimal5.shortValue());
      
      float[][] floatArray2 = homePieceOfFurniture1.getModelRotation();
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal4);
      assertSame(bigDecimal0, bigDecimal5);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertEquals(20, floatArray0.length);
      assertEquals(3, floatArray2.length);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(1.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(1.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(2.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getName());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      
      homePieceOfFurniture0.setName("<.EbfL(1*d");
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal4);
      assertSame(bigDecimal0, bigDecimal5);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(20, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      
      boolean boolean5 = homePieceOfFurniture0.isBottomRightPointAt((-897.024F), (-897.024F), 2.0F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal4);
      assertSame(bigDecimal0, bigDecimal5);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(20, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(boolean5);
      
      homePieceOfFurniture0.setX((-2969.402F));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal4);
      assertSame(bigDecimal0, bigDecimal5);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(20, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-2969.402F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-2734.917F);
      floatArray1[2] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "jW/rp'{*2-tU)gO7|", (Content) null, (Content) null, (Content) null, 662.572F, (-2734.917F), 3.4028235E38F, 0.0F, false, floatArray0, "", true, true, false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(5, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      
      String string0 = catalogPieceOfFurniture0.getName();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotNull(string0);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", string0);
      
      String string1 = catalogPieceOfFurniture0.getDescription();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotNull(string1);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("jW/rp'{*2-tU)gO7|", string1);
      
      float float0 = catalogPieceOfFurniture0.getWidth();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(662.572F, float0, 0.01F);
      
      BigDecimal bigDecimal2 = bigDecimal0.multiply(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertNotNull(bigDecimal2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((short)10, bigDecimal2.shortValue());
      assertEquals((byte)10, bigDecimal2.byteValue());
      
      Float float1 = new Float(3.4028235E38F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3.4028235E38F, (float)float1, 0.01F);
      
      boolean boolean0 = catalogPieceOfFurniture0.isDoorOrWindow();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(boolean0);
      
      String string2 = catalogPieceOfFurniture0.getStaircaseCutOutShape();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNull(string2);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      
      boolean boolean1 = catalogPieceOfFurniture0.isBackFaceShown();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertTrue(boolean1 == boolean0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(boolean1);
      
      boolean boolean2 = catalogPieceOfFurniture0.isTexturable();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(boolean2);
      
      BigDecimal bigDecimal3 = catalogPieceOfFurniture0.getPrice();
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertSame(bigDecimal3, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotNull(bigDecimal3);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((short)1, bigDecimal3.shortValue());
      assertEquals((byte)1, bigDecimal3.byteValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      
      BigDecimal bigDecimal4 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertNotSame(bigDecimal4, bigDecimal2);
      assertSame(bigDecimal4, bigDecimal0);
      assertSame(bigDecimal4, bigDecimal3);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal4);
      assertNotNull(bigDecimal4);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((byte)1, bigDecimal4.byteValue());
      assertEquals((short)1, bigDecimal4.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      
      String string3 = catalogPieceOfFurniture0.getCurrency();
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal4);
      assertNull(string3);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(662.572F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("jW/rp'{*2-tU)gO7|", homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(331.286F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      
      homePieceOfFurniture0.setNameYOffset(0.0F);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal4);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(662.572F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("jW/rp'{*2-tU)gO7|", homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(331.286F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      
      homePieceOfFurniture0.setHeight(2.0F);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal4);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(662.572F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("jW/rp'{*2-tU)gO7|", homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(331.286F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      
      float float2 = homePieceOfFurniture0.getGroundElevation();
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal4);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertNotEquals(float2, float0, 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(662.572F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("jW/rp'{*2-tU)gO7|", homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(331.286F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = 2.0F;
      floatArray1[2] = 2.0F;
      floatArray0[3] = floatArray0[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      
      String string0 = catalogPieceOfFurniture0.getName();
      assertNotNull(string0);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", string0);
      
      String string1 = catalogPieceOfFurniture0.getDescription();
      assertNull(string1);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      
      float float0 = catalogPieceOfFurniture0.getWidth();
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(2.0F, float0, 0.01F);
      
      Float float1 = new Float(2.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2.0F, (float)float1, 0.01F);
      
      BigDecimal bigDecimal1 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertNull(bigDecimal1);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      
      homePieceOfFurniture0.setNameYOffset(2.0F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(2.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      
      BigDecimal bigDecimal2 = homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      assertNull(bigDecimal2);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(2.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      
      boolean boolean0 = homePieceOfFurniture0.isNameCenterPointAt(2.0F, 2734.917F, 2734.917F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(2.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(boolean0);
      
      BigDecimal bigDecimal3 = BigDecimal.TEN;
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotNull(bigDecimal3);
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertEquals((byte)10, bigDecimal3.byteValue());
      assertEquals((short)10, bigDecimal3.shortValue());
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotNull(homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals(2.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(2.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(1.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertNull(homePieceOfFurniture1.getColor());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(2.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      
      boolean boolean1 = homePieceOfFurniture0.isTopRightPointAt(2.0F, 2.0F, (-1514.8599F));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertFalse(boolean1 == boolean0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(2.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(boolean1);
      
      homePieceOfFurniture1.setNameVisible(true);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertEquals(2.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(2.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(1.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertNull(homePieceOfFurniture1.getColor());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(2.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      
      boolean boolean2 = homePieceOfFurniture0.isBackFaceShown();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(2.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(boolean2);
      
      float float2 = homePieceOfFurniture0.getElevation();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotEquals(float2, float0, 0.01F);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(2.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      Level level0 = homePieceOfFurniture1.getLevel();
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNull(level0);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertEquals(2.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(2.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(1.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertNull(homePieceOfFurniture1.getColor());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(2.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      
      BigDecimal bigDecimal4 = homePieceOfFurniture0.getPrice();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNull(bigDecimal4);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(2.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 2.0F;
      floatArray1[2] = (-2734.917F);
      floatArray1[3] = 2.0F;
      floatArray1[4] = 0.30851448F;
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[1] = 0.30851448F;
      floatArray2[1] = 0.30851448F;
      floatArray2[2] = 662.572F;
      floatArray2[3] = 0.30851448F;
      floatArray2[4] = (-2734.917F);
      floatArray0[2] = floatArray2;
      float[] floatArray3 = new float[16];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = (-2734.917F);
      floatArray3[1] = (-2734.917F);
      floatArray3[2] = 662.572F;
      floatArray3[3] = 3363.4F;
      floatArray3[4] = 2.0F;
      floatArray0[3] = floatArray3;
      float[] floatArray4 = new float[1];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray1));
      
      floatArray0[4] = floatArray4;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), 2.0F, false, floatArray0, "<.EbfL(1*d", false, true, true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      
      String string0 = catalogPieceOfFurniture0.getName();
      assertNotNull(string0);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<.EbfL(1*d", string0);
      
      String string1 = catalogPieceOfFurniture0.getDescription();
      assertNotNull(string1);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<.EbfL(1*d", string1);
      
      Content content0 = catalogPieceOfFurniture0.getIcon();
      assertNull(content0);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      
      Content content1 = catalogPieceOfFurniture0.getPlanIcon();
      assertNull(content1);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      
      Content content2 = catalogPieceOfFurniture0.getModel();
      assertNull(content2);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      
      float float0 = catalogPieceOfFurniture0.getWidth();
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), float0, 0.01F);
      
      float float1 = catalogPieceOfFurniture0.getHeight();
      assertEquals(5, floatArray0.length);
      assertEquals(float1, float0, 0.01F);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), float1, 0.01F);
      
      float float2 = catalogPieceOfFurniture0.getElevation();
      assertEquals(5, floatArray0.length);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(2.0F, float2, 0.01F);
      
      boolean boolean0 = catalogPieceOfFurniture0.isMovable();
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(boolean0);
      
      boolean boolean1 = catalogPieceOfFurniture0.isDoorOrWindow();
      assertEquals(5, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(boolean1);
      
      Integer integer0 = catalogPieceOfFurniture0.getColor();
      assertNull(integer0);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      
      float[][] floatArray5 = catalogPieceOfFurniture0.getModelRotation();
      assertNotSame(floatArray0, floatArray5);
      assertNotSame(floatArray5, floatArray0);
      assertNotNull(floatArray5);
      assertEquals(5, floatArray0.length);
      assertEquals(3, floatArray5.length);
      assertFalse(floatArray5.equals((Object)floatArray0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      
      String string2 = catalogPieceOfFurniture0.getStaircaseCutOutShape();
      assertNotSame(floatArray0, floatArray5);
      assertNull(string2);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray5));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      
      boolean boolean2 = catalogPieceOfFurniture0.isBackFaceShown();
      assertNotSame(floatArray0, floatArray5);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray5));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(boolean2);
      
      boolean boolean3 = catalogPieceOfFurniture0.isResizable();
      assertNotSame(floatArray0, floatArray5);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray5));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(boolean3);
      
      boolean boolean4 = catalogPieceOfFurniture0.isDeformable();
      assertNotSame(floatArray0, floatArray5);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray5));
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(boolean4);
      
      boolean boolean5 = catalogPieceOfFurniture0.isTexturable();
      assertNotSame(floatArray0, floatArray5);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray5));
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(boolean5);
      
      BigDecimal bigDecimal1 = catalogPieceOfFurniture0.getPrice();
      assertNotSame(floatArray0, floatArray5);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray5));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      BigDecimal bigDecimal2 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertNotSame(floatArray0, floatArray5);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertNotNull(bigDecimal2);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray5));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((byte)1, bigDecimal2.byteValue());
      assertEquals((short)1, bigDecimal2.shortValue());
      
      String string3 = catalogPieceOfFurniture0.getCurrency();
      assertNotSame(floatArray0, floatArray5);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNull(string3);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray5));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray5));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      
      boolean boolean6 = homePieceOfFurniture0.isTopLeftPointAt(2.0F, 0.30851448F, 662.572F);
      assertNotSame(floatArray0, floatArray5);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray5));
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(boolean6);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".VNEbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(".VNEbfL(1EH", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(".VNEbfL(1EH", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(".VNEbfL(1EH", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      
      homePieceOfFurniture0.setNameVisible(true);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(".VNEbfL(1EH", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(".VNEbfL(1EH", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      
      BigDecimal bigDecimal0 = homePieceOfFurniture0.getPrice();
      assertNull(bigDecimal0);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(".VNEbfL(1EH", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(".VNEbfL(1EH", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      float[] floatArray0 = new float[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<EbfL(1*d", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      
      Float float0 = new Float(0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      boolean boolean0 = catalogPieceOfFurniture0.isDeformable();
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(boolean0);
      
      boolean boolean1 = catalogPieceOfFurniture0.isTexturable();
      assertTrue(boolean1 == boolean0);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(boolean1);
      
      BigDecimal bigDecimal1 = catalogPieceOfFurniture0.getPrice();
      assertNull(bigDecimal1);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      
      BigDecimal bigDecimal2 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertNull(bigDecimal2);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("<EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      
      homePieceOfFurniture0.setX((-0.19340181F));
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-0.19340181F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("<EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      
      homePieceOfFurniture0.setNameAngle((-0.19340181F));
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(6.0897837F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-0.19340181F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("<EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      
      BigDecimal bigDecimal3 = homePieceOfFurniture0.getValueAddedTax();
      assertNull(bigDecimal3);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(6.0897837F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-0.19340181F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("<EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      
      Integer integer0 = new Integer(298);
      assertNotNull(integer0);
      assertEquals(298, (int)integer0);
      
      int int0 = Integer.min(298, 982);
      assertEquals(298, int0);
      
      boolean boolean2 = homePieceOfFurniture0.isTopRightPointAt((-0.19340181F), 298, 0.3926991F);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(6.0897837F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-0.19340181F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("<EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(boolean2);
      
      homePieceOfFurniture0.setColor((Integer) null);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(6.0897837F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-0.19340181F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("<EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      
      homePieceOfFurniture0.setHeight(298);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(6.0897837F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(298.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-0.19340181F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("<EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      
      homePieceOfFurniture0.setNameYOffset(298);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(298.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(6.0897837F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(298.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-0.19340181F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("<EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      
      float float1 = homePieceOfFurniture0.getGroundElevation();
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(298.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(6.0897837F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(298.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-0.19340181F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("<EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(298.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(6.0897837F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(298.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-0.19340181F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("<EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      
      float float2 = homePieceOfFurniture0.getNameAngle();
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("<EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(298.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(6.0897837F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(298.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-0.19340181F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("<EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(6.0897837F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(".EbfL(1EH", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(".EbfL(1EH", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(".EbfL(1EH", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      
      homePieceOfFurniture0.setAngle(0.0F);
      assertEquals(".EbfL(1EH", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(".EbfL(1EH", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      
      boolean boolean0 = homePieceOfFurniture0.isBottomLeftPointAt((-992.49664F), (-992.49664F), 3.4028235E38F);
      assertEquals(".EbfL(1EH", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(".EbfL(1EH", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(boolean0);
      
      boolean boolean1 = homePieceOfFurniture0.isBottomLeftPointAt(4.3018956F, (-1922.5331F), 0.0F);
      assertTrue(boolean1 == boolean0);
      assertEquals(".EbfL(1EH", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(".EbfL(1EH", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(boolean1);
      
      TextStyle textStyle0 = homePieceOfFurniture0.getNameStyle();
      assertNull(textStyle0);
      assertEquals(".EbfL(1EH", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(".EbfL(1EH", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 2.0F;
      floatArray1[1] = (-2734.917F);
      floatArray1[2] = 2.0F;
      floatArray1[3] = 2.0F;
      floatArray1[4] = (-2734.917F);
      floatArray1[5] = 2.0F;
      floatArray1[6] = (-2734.917F);
      floatArray1[7] = (-2734.917F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 2.0F;
      floatArray2[1] = 662.572F;
      floatArray2[2] = (-2734.917F);
      floatArray2[3] = 2.0F;
      floatArray2[4] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 0.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 662.572F;
      floatArray3[3] = 0.0F;
      floatArray3[4] = (-2734.917F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[5];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = (-2734.917F);
      floatArray4[1] = (-2734.917F);
      floatArray4[2] = 662.572F;
      floatArray4[3] = 3363.4F;
      floatArray4[4] = 2.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[0];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      floatArray0[4] = floatArray5;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 662.572F, 662.572F, (-2734.917F), false, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      
      String string0 = catalogPieceOfFurniture0.getName();
      assertNotNull(string0);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", string0);
      
      String string1 = catalogPieceOfFurniture0.getDescription();
      assertNull(string1);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      
      Content content0 = catalogPieceOfFurniture0.getIcon();
      assertNull(content0);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      
      Content content1 = catalogPieceOfFurniture0.getPlanIcon();
      assertNull(content1);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      
      Content content2 = catalogPieceOfFurniture0.getModel();
      assertNull(content2);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      
      float float0 = catalogPieceOfFurniture0.getWidth();
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(662.572F, float0, 0.01F);
      
      float float1 = catalogPieceOfFurniture0.getDepth();
      assertEquals(float1, float0, 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(662.572F, float1, 0.01F);
      
      float float2 = catalogPieceOfFurniture0.getHeight();
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), float2, 0.01F);
      
      float float3 = catalogPieceOfFurniture0.getElevation();
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      
      boolean boolean0 = catalogPieceOfFurniture0.isMovable();
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = catalogPieceOfFurniture0.isDoorOrWindow();
      assertTrue(boolean1 == boolean0);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(boolean1);
      
      Integer integer0 = catalogPieceOfFurniture0.getColor();
      assertNull(integer0);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      
      float[][] floatArray6 = catalogPieceOfFurniture0.getModelRotation();
      assertNotSame(floatArray6, floatArray0);
      assertNotNull(floatArray6);
      assertEquals(3, floatArray6.length);
      assertFalse(floatArray6.equals((Object)floatArray0));
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      
      String string2 = catalogPieceOfFurniture0.getStaircaseCutOutShape();
      assertNull(string2);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      
      boolean boolean2 = catalogPieceOfFurniture0.isBackFaceShown();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(boolean2);
      
      boolean boolean3 = catalogPieceOfFurniture0.isResizable();
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(boolean3);
      
      boolean boolean4 = catalogPieceOfFurniture0.isDeformable();
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(boolean4);
      
      boolean boolean5 = catalogPieceOfFurniture0.isTexturable();
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(boolean5);
      
      BigDecimal bigDecimal1 = catalogPieceOfFurniture0.getPrice();
      assertNull(bigDecimal1);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      
      BigDecimal bigDecimal2 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertNull(bigDecimal2);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      
      String string3 = catalogPieceOfFurniture0.getCurrency();
      assertNull(string3);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(331.286F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(331.286F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(662.572F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(662.572F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      
      BigDecimal bigDecimal3 = homePieceOfFurniture0.getValueAddedTax();
      assertNull(bigDecimal3);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(662.572F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(662.572F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(331.286F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(331.286F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(662.572F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(662.572F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[2] = (-2734.917F);
      floatArray1[3] = (-2734.917F);
      floatArray1[4] = (-2734.917F);
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[1] = (-2734.917F);
      floatArray2[1] = (-2734.917F);
      floatArray2[4] = (-2734.917F);
      floatArray0[2] = floatArray2;
      floatArray0[2] = floatArray2;
      float[] floatArray3 = new float[0];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray0[4] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      Float float0 = new Float((-2734.917F));
      assertNotNull(float0);
      assertEquals((-2734.917F), (float)float0, 0.01F);
      
      float float1 = catalogPieceOfFurniture0.getElevation();
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-2734.917F), float1, 0.01F);
      
      boolean boolean0 = catalogPieceOfFurniture0.isMovable();
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(boolean0);
      
      boolean boolean1 = catalogPieceOfFurniture0.isDoorOrWindow();
      assertEquals(5, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(boolean1);
      
      String string0 = catalogPieceOfFurniture0.getStaircaseCutOutShape();
      assertNull(string0);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      boolean boolean2 = catalogPieceOfFurniture0.isBackFaceShown();
      assertEquals(5, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(boolean2);
      
      boolean boolean3 = catalogPieceOfFurniture0.isDeformable();
      assertEquals(5, floatArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(boolean3);
      
      boolean boolean4 = catalogPieceOfFurniture0.isTexturable();
      assertEquals(5, floatArray0.length);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(boolean4);
      
      BigDecimal bigDecimal1 = catalogPieceOfFurniture0.getPrice();
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotNull(bigDecimal1);
      assertEquals(5, floatArray0.length);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      BigDecimal bigDecimal2 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotNull(bigDecimal2);
      assertEquals(5, floatArray0.length);
      assertEquals((byte)1, bigDecimal2.byteValue());
      assertEquals((short)1, bigDecimal2.shortValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      String string1 = catalogPieceOfFurniture0.getCurrency();
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNull(string1);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(5, floatArray0.length);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      homePieceOfFurniture0.setNameYOffset((-4.4539986F));
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertEquals(5, floatArray0.length);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-4.4539986F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      BigDecimal bigDecimal3 = homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotNull(bigDecimal3);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-4.4539986F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((short)2, bigDecimal3.shortValue());
      assertEquals((byte)2, bigDecimal3.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      boolean boolean5 = homePieceOfFurniture0.isNameCenterPointAt(3375.0F, 1384.7291F, (-2734.917F));
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-4.4539986F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(boolean5);
      
      BigDecimal bigDecimal4 = homePieceOfFurniture0.getValueAddedTax();
      assertSame(bigDecimal0, bigDecimal4);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal4, bigDecimal2);
      assertNotSame(bigDecimal4, bigDecimal3);
      assertSame(bigDecimal4, bigDecimal1);
      assertSame(bigDecimal4, bigDecimal0);
      assertNotNull(bigDecimal4);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal4.equals((Object)bigDecimal3));
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-4.4539986F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal4.byteValue());
      assertEquals((short)1, bigDecimal4.shortValue());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertSame(bigDecimal0, bigDecimal4);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotNull(homePieceOfFurniture1);
      assertEquals(5, floatArray0.length);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals((-4.4539986F), homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals((-2734.917F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture1.getX(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals((-2734.917F), homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals((-2734.917F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertFalse(homePieceOfFurniture1.isResizable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-4.4539986F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".VNEbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(".VNEbfL(1EH", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(".VNEbfL(1EH", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(".VNEbfL(1EH", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      
      boolean boolean0 = homePieceOfFurniture0.isTopRightPointAt((-4584.4575F), 1040.254F, 2.0F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(".VNEbfL(1EH", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(".VNEbfL(1EH", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(boolean0);
      
      homePieceOfFurniture0.setNameVisible(false);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(".VNEbfL(1EH", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(".VNEbfL(1EH", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 704.1679F, 2645.968F, 704.1679F, false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(".EbfL(1EH", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(704.1679F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(704.1679F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(2645.968F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(".EbfL(1EH", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(704.1679F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(704.1679F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(2645.968F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(352.08395F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(2645.968F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(".EbfL(1EH", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(704.1679F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(704.1679F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(1322.984F, homePieceOfFurniture0.getY(), 0.01F);
      
      catalogPieceOfFurniture0.setCategory((FurnitureCategory) null);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(".EbfL(1EH", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(704.1679F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(704.1679F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(2645.968F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      
      Level level0 = new Level((String) null, 2645.968F, (-1.0F), (-1.0F));
      assertNotNull(level0);
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(2645.968F, level0.getElevation(), 0.01F);
      
      float float0 = level0.getElevation();
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(2645.968F, level0.getElevation(), 0.01F);
      assertEquals(2645.968F, float0, 0.01F);
      
      float float1 = level0.getElevation();
      assertEquals(float1, float0, 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(2645.968F, level0.getElevation(), 0.01F);
      assertEquals(2645.968F, float1, 0.01F);
      
      float float2 = level0.getHeight();
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(2645.968F, level0.getElevation(), 0.01F);
      assertEquals((-1.0F), float2, 0.01F);
      
      homePieceOfFurniture0.setLevel(level0);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(".EbfL(1EH", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(704.1679F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(704.1679F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(2645.968F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(352.08395F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(2645.968F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(".EbfL(1EH", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(704.1679F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(704.1679F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2645.968F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(1322.984F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(2645.968F, level0.getElevation(), 0.01F);
      
      Level level1 = new Level("", 3062.767F, 2645.968F, 704.1679F);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertTrue(level1.isVisible());
      assertEquals(2645.968F, level1.getFloorThickness(), 0.01F);
      assertEquals(3062.767F, level1.getElevation(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(704.1679F, level1.getHeight(), 0.01F);
      
      Float float3 = new Float(704.1679F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(704.1679F, (float)float3, 0.01F);
      
      boolean boolean1 = homePieceOfFurniture0.isAtLevel(level1);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      assertTrue(boolean1 == boolean0);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(".EbfL(1EH", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(704.1679F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(704.1679F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(2645.968F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(352.08395F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(2645.968F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(".EbfL(1EH", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(704.1679F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(704.1679F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2645.968F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(1322.984F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2645.968F, level1.getFloorThickness(), 0.01F);
      assertEquals(3062.767F, level1.getElevation(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(704.1679F, level1.getHeight(), 0.01F);
      assertTrue(boolean1);
      
      float float4 = homePieceOfFurniture0.getAngle();
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(".EbfL(1EH", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(704.1679F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(704.1679F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(2645.968F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(352.08395F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(2645.968F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(".EbfL(1EH", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(704.1679F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(704.1679F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2645.968F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(1322.984F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, float4, 0.01F);
      
      Integer integer0 = new Integer((-21));
      assertNotNull(integer0);
      assertEquals((-21), (int)integer0);
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotNull(homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(".EbfL(1EH", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(704.1679F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(704.1679F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(2645.968F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(352.08395F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(2645.968F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(".EbfL(1EH", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(704.1679F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(704.1679F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2645.968F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(1322.984F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(2645.968F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(".EbfL(1EH", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(352.08395F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(1322.984F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(704.1679F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(704.1679F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      
      Level level2 = homePieceOfFurniture0.getLevel();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertSame(level2, level0);
      assertNotSame(level2, level1);
      assertNotNull(level2);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(level2.equals((Object)level1));
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(".EbfL(1EH", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(704.1679F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(704.1679F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(2645.968F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(352.08395F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(2645.968F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(".EbfL(1EH", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(704.1679F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(704.1679F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2645.968F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(1322.984F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-1.0F), level2.getHeight(), 0.01F);
      assertEquals(2645.968F, level2.getElevation(), 0.01F);
      assertNull(level2.getName());
      assertEquals((-1.0F), level2.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[0];
      floatArray0[4] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      
      String string0 = catalogPieceOfFurniture0.getName();
      assertNotNull(string0);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", string0);
      
      String string1 = catalogPieceOfFurniture0.getDescription();
      assertNotNull(string1);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", string1);
      
      Content content0 = catalogPieceOfFurniture0.getPlanIcon();
      assertNull(content0);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      
      float float0 = catalogPieceOfFurniture0.getWidth();
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), float0, 0.01F);
      
      Float float1 = new Float((-2734.917F));
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2734.917F), (float)float1, 0.01F);
      
      float float2 = catalogPieceOfFurniture0.getElevation();
      assertEquals(5, floatArray0.length);
      assertEquals(float2, float0, 0.01F);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), float2, 0.01F);
      
      boolean boolean0 = catalogPieceOfFurniture0.isDoorOrWindow();
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(boolean0);
      
      boolean boolean1 = catalogPieceOfFurniture0.isBackFaceShown();
      assertEquals(5, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(boolean1);
      
      boolean boolean2 = catalogPieceOfFurniture0.isDeformable();
      assertEquals(5, floatArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(boolean2);
      
      boolean boolean3 = catalogPieceOfFurniture0.isTexturable();
      assertEquals(5, floatArray0.length);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(boolean3);
      
      BigDecimal bigDecimal1 = catalogPieceOfFurniture0.getPrice();
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      boolean boolean4 = catalogPieceOfFurniture0.isTexturable();
      assertSame(bigDecimal0, bigDecimal1);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(boolean4);
      
      BigDecimal bigDecimal2 = catalogPieceOfFurniture0.getPrice();
      assertSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotNull(bigDecimal2);
      assertEquals(5, floatArray0.length);
      assertEquals((byte)1, bigDecimal2.byteValue());
      assertEquals((short)1, bigDecimal2.shortValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      
      BigDecimal bigDecimal3 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertSame(bigDecimal3, bigDecimal1);
      assertSame(bigDecimal3, bigDecimal2);
      assertSame(bigDecimal3, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotNull(bigDecimal3);
      assertEquals(5, floatArray0.length);
      assertEquals((byte)1, bigDecimal3.byteValue());
      assertEquals((short)1, bigDecimal3.shortValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      
      String string2 = catalogPieceOfFurniture0.getCurrency();
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal3);
      assertNull(string2);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      
      BigDecimal bigDecimal4 = bigDecimal0.pow(21);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal4, bigDecimal2);
      assertNotSame(bigDecimal4, bigDecimal0);
      assertNotSame(bigDecimal4, bigDecimal3);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertNotNull(bigDecimal4);
      assertTrue(bigDecimal4.equals((Object)bigDecimal1));
      assertTrue(bigDecimal4.equals((Object)bigDecimal2));
      assertTrue(bigDecimal4.equals((Object)bigDecimal3));
      assertTrue(bigDecimal4.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal4.byteValue());
      assertEquals((short)1, bigDecimal4.shortValue());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(5, floatArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal4));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      
      homePieceOfFurniture0.setNameYOffset((-2734.917F));
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertSame(bigDecimal0, bigDecimal3);
      assertEquals(5, floatArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal4));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      
      BigDecimal bigDecimal5 = homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal5);
      assertNotSame(bigDecimal5, bigDecimal3);
      assertNotSame(bigDecimal5, bigDecimal2);
      assertNotSame(bigDecimal5, bigDecimal0);
      assertNotSame(bigDecimal5, bigDecimal1);
      assertNotSame(bigDecimal5, bigDecimal4);
      assertNotNull(bigDecimal5);
      assertEquals(5, floatArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal4));
      assertFalse(bigDecimal5.equals((Object)bigDecimal3));
      assertFalse(bigDecimal5.equals((Object)bigDecimal2));
      assertFalse(bigDecimal5.equals((Object)bigDecimal0));
      assertFalse(bigDecimal5.equals((Object)bigDecimal1));
      assertFalse(bigDecimal5.equals((Object)bigDecimal4));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((byte)2, bigDecimal5.byteValue());
      assertEquals((short)2, bigDecimal5.shortValue());
      
      boolean boolean5 = homePieceOfFurniture0.isNameCenterPointAt(1384.7291F, 662.572F, (-2734.917F));
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal5);
      assertEquals(5, floatArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal4));
      assertFalse(bigDecimal0.equals((Object)bigDecimal5));
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(boolean5);
      
      BigDecimal bigDecimal6 = BigDecimal.TEN;
      assertNotSame(bigDecimal6, bigDecimal5);
      assertNotSame(bigDecimal6, bigDecimal2);
      assertNotSame(bigDecimal6, bigDecimal1);
      assertNotSame(bigDecimal6, bigDecimal0);
      assertNotSame(bigDecimal6, bigDecimal3);
      assertNotSame(bigDecimal6, bigDecimal4);
      assertNotNull(bigDecimal6);
      assertFalse(bigDecimal6.equals((Object)bigDecimal5));
      assertFalse(bigDecimal6.equals((Object)bigDecimal2));
      assertFalse(bigDecimal6.equals((Object)bigDecimal1));
      assertFalse(bigDecimal6.equals((Object)bigDecimal0));
      assertFalse(bigDecimal6.equals((Object)bigDecimal3));
      assertFalse(bigDecimal6.equals((Object)bigDecimal4));
      assertEquals((short)10, bigDecimal6.shortValue());
      assertEquals((byte)10, bigDecimal6.byteValue());
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal5);
      assertNotSame(bigDecimal0, bigDecimal6);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotNull(homePieceOfFurniture1);
      assertEquals(5, floatArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal4));
      assertFalse(bigDecimal0.equals((Object)bigDecimal5));
      assertFalse(bigDecimal0.equals((Object)bigDecimal6));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals((-2734.917F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals((-1367.4585F), homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getShininess());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isResizable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getCatalogId());
      assertEquals((-2734.917F), homePieceOfFurniture1.getHeight(), 0.01F);
      
      boolean boolean6 = homePieceOfFurniture1.isTopRightPointAt(773.3398F, 1977.8F, (-42.131737F));
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal5);
      assertNotSame(bigDecimal0, bigDecimal6);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertEquals(5, floatArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal4));
      assertFalse(bigDecimal0.equals((Object)bigDecimal5));
      assertFalse(bigDecimal0.equals((Object)bigDecimal6));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals((-2734.917F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals((-1367.4585F), homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getShininess());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isResizable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getCatalogId());
      assertEquals((-2734.917F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(boolean6);
      
      boolean boolean7 = homePieceOfFurniture1.containsPoint((-2734.917F), (-2734.917F), 1384.7291F);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal5);
      assertNotSame(bigDecimal0, bigDecimal6);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertEquals(5, floatArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal4));
      assertFalse(bigDecimal0.equals((Object)bigDecimal5));
      assertFalse(bigDecimal0.equals((Object)bigDecimal6));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals((-2734.917F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals((-1367.4585F), homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getShininess());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isResizable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getCatalogId());
      assertEquals((-2734.917F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(boolean7);
      
      homePieceOfFurniture1.setNameXOffset((-2758.27F));
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal5);
      assertNotSame(bigDecimal0, bigDecimal6);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertEquals(5, floatArray0.length);
      assertTrue(bigDecimal0.equals((Object)bigDecimal4));
      assertFalse(bigDecimal0.equals((Object)bigDecimal5));
      assertFalse(bigDecimal0.equals((Object)bigDecimal6));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-2734.917F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals((-2734.917F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals((-1367.4585F), homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals((-2758.27F), homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals((-2734.917F), homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getShininess());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertFalse(homePieceOfFurniture1.isResizable());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getCatalogId());
      assertEquals((-2734.917F), homePieceOfFurniture1.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = 2.0F;
      floatArray1[2] = 2.0F;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, 2.0F, 2.0F, 2.0F, 2.0F, false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      
      String string0 = catalogPieceOfFurniture0.getName();
      assertNotNull(string0);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", string0);
      
      String string1 = catalogPieceOfFurniture0.getDescription();
      assertNotNull(string1);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", string1);
      
      float float0 = catalogPieceOfFurniture0.getWidth();
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(2.0F, float0, 0.01F);
      
      Float float1 = new Float(2.0F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2.0F, (float)float1, 0.01F);
      
      BigDecimal bigDecimal1 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      
      homePieceOfFurniture0.setNameYOffset(2.0F);
      assertSame(bigDecimal0, bigDecimal1);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(2.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      
      BigDecimal bigDecimal2 = homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotNull(bigDecimal2);
      assertEquals(20, floatArray0.length);
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(2.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals((byte)2, bigDecimal2.byteValue());
      assertEquals((short)2, bigDecimal2.shortValue());
      
      boolean boolean0 = homePieceOfFurniture0.isNameCenterPointAt(2.0F, 2734.917F, 2734.917F);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertEquals(20, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(2.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertTrue(boolean0);
      
      BigDecimal bigDecimal3 = BigDecimal.TEN;
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotNull(bigDecimal3);
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal3.shortValue());
      assertEquals((byte)10, bigDecimal3.byteValue());
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotNull(homePieceOfFurniture1);
      assertEquals(20, floatArray0.length);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(1.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(1.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getName());
      assertEquals(2.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getCatalogId());
      assertFalse(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(2.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(2.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals(2.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(2.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      
      boolean boolean1 = homePieceOfFurniture0.isTopRightPointAt(2.0F, 2.0F, (-1514.8599F));
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertEquals(20, floatArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(2.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertFalse(boolean1);
      
      homePieceOfFurniture1.setNameVisible(false);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertEquals(20, floatArray0.length);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(1.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(1.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getName());
      assertEquals(2.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getCatalogId());
      assertFalse(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(2.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(2.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals(2.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(2.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      
      boolean boolean2 = homePieceOfFurniture0.isBackFaceShown();
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertEquals(20, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(2.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertFalse(boolean2);
      
      float float2 = homePieceOfFurniture0.getElevation();
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertEquals(20, floatArray0.length);
      assertEquals(float2, float0, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(2.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(2.0F, float2, 0.01F);
      
      Level level0 = homePieceOfFurniture1.getLevel();
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNull(level0);
      assertEquals(20, floatArray0.length);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(1.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(1.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertEquals(2.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getName());
      assertEquals(2.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getCatalogId());
      assertFalse(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(2.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals(2.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals(2.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(2.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(2.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("X", (Content) null, (Content) null, 0.15233545F, (-0.6209725F), (-0.6209725F), false, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals("X", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-0.6209725F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-0.6209725F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      
      Content content0 = catalogPieceOfFurniture0.getPlanIcon();
      assertNull(content0);
      assertEquals("X", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-0.6209725F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-0.6209725F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      
      float float0 = catalogPieceOfFurniture0.getElevation();
      assertEquals("X", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-0.6209725F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-0.6209725F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, float0, 0.01F);
      
      String string0 = catalogPieceOfFurniture0.getCurrency();
      assertNull(string0);
      assertEquals("X", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-0.6209725F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-0.6209725F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals("X", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-0.6209725F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-0.6209725F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-0.6209725F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals("X", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-0.6209725F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-0.31048626F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.076167725F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.15233545F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotNull(homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals("X", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-0.6209725F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-0.6209725F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-0.6209725F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals("X", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-0.6209725F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-0.31048626F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.076167725F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.15233545F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.076167725F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals("X", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals((-0.6209725F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals((-0.31048626F), homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals((-0.6209725F), homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      
      boolean boolean1 = homePieceOfFurniture0.isNameCenterPointAt(0.15233545F, 0.0F, 0.15233545F);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(boolean1 == boolean0);
      assertEquals("X", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-0.6209725F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-0.6209725F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-0.6209725F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals("X", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-0.6209725F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-0.31048626F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.076167725F, homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.15233545F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray0[3] = floatArray0[2];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      
      String string0 = catalogPieceOfFurniture0.getName();
      assertNotNull(string0);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("<.EbfL(1*d", string0);
      
      String string1 = catalogPieceOfFurniture0.getDescription();
      assertNotNull(string1);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("<.EbfL(1*d", string1);
      
      Content content0 = catalogPieceOfFurniture0.getPlanIcon();
      assertNull(content0);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      
      float float0 = catalogPieceOfFurniture0.getWidth();
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), float0, 0.01F);
      
      Float float1 = new Float((-2734.917F));
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2734.917F), (float)float1, 0.01F);
      
      float float2 = catalogPieceOfFurniture0.getElevation();
      assertEquals(20, floatArray0.length);
      assertEquals(float2, float0, 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-2734.917F), float2, 0.01F);
      
      boolean boolean0 = catalogPieceOfFurniture0.isMovable();
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(boolean0);
      
      boolean boolean1 = catalogPieceOfFurniture0.isDoorOrWindow();
      assertEquals(20, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(boolean1);
      
      boolean boolean2 = catalogPieceOfFurniture0.isDeformable();
      assertEquals(20, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(boolean2);
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      BigDecimal bigDecimal2 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotNull(bigDecimal2);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal2.byteValue());
      assertEquals((short)1, bigDecimal2.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      
      String string2 = catalogPieceOfFurniture0.getCurrency();
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNull(string2);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(20, floatArray0.length);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      
      boolean boolean3 = homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), (-2734.917F), (-2734.917F));
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertEquals(20, floatArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(boolean3);
      
      homePieceOfFurniture0.setDescription("NAME_Y_OFFSET");
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertEquals(20, floatArray0.length);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      
      homePieceOfFurniture0.setNameYOffset(1.0F);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertEquals(20, floatArray0.length);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      
      BigDecimal bigDecimal3 = homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotNull(bigDecimal3);
      assertEquals(20, floatArray0.length);
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((byte)2, bigDecimal3.byteValue());
      assertEquals((short)2, bigDecimal3.shortValue());
      
      homePieceOfFurniture0.setY((-2734.917F));
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertEquals(20, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      
      BigDecimal bigDecimal4 = homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal4, bigDecimal3);
      assertNotSame(bigDecimal4, bigDecimal0);
      assertNotSame(bigDecimal4, bigDecimal2);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertNotNull(bigDecimal4);
      assertEquals(20, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal4.equals((Object)bigDecimal0));
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((byte)2, bigDecimal4.byteValue());
      assertEquals((short)2, bigDecimal4.shortValue());
      
      boolean boolean4 = homePieceOfFurniture0.isNameCenterPointAt(2063.0F, 2.0F, (-2734.917F));
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertEquals(20, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal4));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(boolean4);
      
      BigDecimal bigDecimal5 = homePieceOfFurniture0.getValueAddedTax();
      assertSame(bigDecimal0, bigDecimal5);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal5, bigDecimal1);
      assertNotSame(bigDecimal5, bigDecimal4);
      assertSame(bigDecimal5, bigDecimal2);
      assertSame(bigDecimal5, bigDecimal0);
      assertNotSame(bigDecimal5, bigDecimal3);
      assertNotNull(bigDecimal5);
      assertEquals(20, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal4));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal5.equals((Object)bigDecimal4));
      assertFalse(bigDecimal5.equals((Object)bigDecimal3));
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((short)1, bigDecimal5.shortValue());
      assertEquals((byte)1, bigDecimal5.byteValue());
      
      BigDecimal bigDecimal6 = homePieceOfFurniture0.getValueAddedTax();
      assertSame(bigDecimal0, bigDecimal5);
      assertSame(bigDecimal0, bigDecimal6);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal6, bigDecimal3);
      assertSame(bigDecimal6, bigDecimal2);
      assertSame(bigDecimal6, bigDecimal1);
      assertNotSame(bigDecimal6, bigDecimal4);
      assertSame(bigDecimal6, bigDecimal5);
      assertSame(bigDecimal6, bigDecimal0);
      assertNotNull(bigDecimal6);
      assertEquals(20, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal4));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal6.equals((Object)bigDecimal3));
      assertFalse(bigDecimal6.equals((Object)bigDecimal4));
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(1.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("NAME_Y_OFFSET", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((byte)1, bigDecimal6.byteValue());
      assertEquals((short)1, bigDecimal6.shortValue());
      
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.31653136F, 0.31653136F, 0.31653136F, true, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(".EbfL(1EH", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.31653136F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.31653136F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.31653136F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(".EbfL(1EH", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.31653136F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.31653136F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.31653136F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.31653136F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.31653136F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(".EbfL(1EH", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.15826568F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.15826568F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.31653136F, homePieceOfFurniture0.getDepth(), 0.01F);
      
      boolean boolean0 = homePieceOfFurniture0.isTexturable();
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(".EbfL(1EH", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.31653136F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.31653136F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.31653136F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.31653136F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.31653136F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(".EbfL(1EH", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.15826568F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.15826568F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.31653136F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 0.15233545F, 0.15233545F, 0.15233545F, false, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      
      String string0 = catalogPieceOfFurniture0.getName();
      assertNotNull(string0);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", string0);
      
      Float float0 = new Float(0.15233545F);
      assertNotNull(float0);
      assertEquals(0.15233545F, (float)float0, 0.01F);
      
      float float1 = catalogPieceOfFurniture0.getElevation();
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      boolean boolean0 = catalogPieceOfFurniture0.isDoorOrWindow();
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = catalogPieceOfFurniture0.isDeformable();
      assertFalse(boolean1 == boolean0);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(boolean1);
      
      String string1 = catalogPieceOfFurniture0.getCurrency();
      assertNull(string1);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.076167725F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.15233545F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.076167725F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      
      boolean boolean2 = homePieceOfFurniture0.isNameCenterPointAt(0.3926991F, 1.0F, 2734.917F);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.076167725F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.15233545F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.076167725F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(boolean2);
      
      boolean boolean3 = homePieceOfFurniture0.containsPoint((-1116.8077F), (-513.4628F), 0.15233545F);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.076167725F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.15233545F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.076167725F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(boolean3);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      float[][] floatArray0 = homePieceOfFurniture0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.076167725F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.15233545F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.076167725F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      
      BigDecimal bigDecimal1 = homePieceOfFurniture0.getValueAddedTax();
      assertNull(bigDecimal1);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.076167725F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.15233545F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.076167725F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      
      float float2 = homePieceOfFurniture0.getGroundElevation();
      assertEquals(float2, float1, 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.076167725F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.15233545F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.076167725F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, float2, 0.01F);
      
      homePieceOfFurniture0.setNameAngle(0.15233545F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.076167725F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.15233545F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.076167725F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.15233545F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      
      float[][] floatArray1 = homePieceOfFurniture0.getPoints();
      assertNotSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.076167725F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.15233545F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.076167725F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.15233545F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      
      String string2 = homePieceOfFurniture0.getName();
      assertNotNull(string2);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.076167725F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.15233545F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.076167725F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.15233545F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", string2);
      
      Level level0 = new Level((String) null, 1.0F, (-1.0F), (-1.0F));
      assertNotNull(level0);
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      
      float float3 = level0.getElevation();
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(1.0F, float3, 0.01F);
      
      float float4 = level0.getElevation();
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(float4, float3, 0.01F);
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(1.0F, float4, 0.01F);
      
      float float5 = level0.getHeight();
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-1.0F), float5, 0.01F);
      
      boolean boolean4 = homePieceOfFurniture0.isAtLevel(level0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.076167725F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.15233545F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.076167725F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.15233545F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".VNEbfL(1EH", (Content) null, (Content) null, 2116.069F, (-1.0F), (-1.0F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(".VNEbfL(1EH", catalogPieceOfFurniture0.getName());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(2116.069F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(".VNEbfL(1EH", catalogPieceOfFurniture0.getName());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(2116.069F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(".VNEbfL(1EH", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(2116.069F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1058.0345F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-1.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-1.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      
      Level level0 = new Level("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", (-1.0F), 789.85F, (-1.0F));
      assertNotNull(level0);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", level0.getName());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(789.85F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      
      Float float0 = new Float(704.1679F);
      assertNotNull(float0);
      assertEquals(704.1679F, (float)float0, 0.01F);
      
      float float1 = level0.getElevation();
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", level0.getName());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(789.85F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertEquals((-1.0F), float1, 0.01F);
      
      homePieceOfFurniture0.setName("yBl%*0#");
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(".VNEbfL(1EH", catalogPieceOfFurniture0.getName());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(2116.069F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(2116.069F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1058.0345F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-1.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("yBl%*0#", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-1.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      
      float float2 = level0.getHeight();
      assertEquals(float2, float1, 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", level0.getName());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(789.85F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertEquals((-1.0F), float2, 0.01F);
      
      homePieceOfFurniture0.setLevel(level0);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(".VNEbfL(1EH", catalogPieceOfFurniture0.getName());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(2116.069F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(2116.069F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1058.0345F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1.0F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-1.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("yBl%*0#", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-1.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", level0.getName());
      assertEquals((-1.0F), level0.getElevation(), 0.01F);
      assertEquals(789.85F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Level level1 = new Level("icZ`GA( wUAj%", (-1.0F), (-1280.8234F), 0.0F);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals("icZ`GA( wUAj%", level1.getName());
      assertEquals((-1.0F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1280.8234F), level1.getFloorThickness(), 0.01F);
      
      Float float3 = new Float(704.1679F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(704.1679F, (float)float3, 0.01F);
      
      boolean boolean1 = homePieceOfFurniture0.isAtLevel(level1);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      assertFalse(boolean1 == boolean0);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(".VNEbfL(1EH", catalogPieceOfFurniture0.getName());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(2116.069F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(2116.069F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1058.0345F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1.0F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-1.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("yBl%*0#", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-1.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals("icZ`GA( wUAj%", level1.getName());
      assertEquals((-1.0F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1280.8234F), level1.getFloorThickness(), 0.01F);
      assertFalse(boolean1);
      
      float float4 = homePieceOfFurniture0.getAngle();
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(".VNEbfL(1EH", catalogPieceOfFurniture0.getName());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(2116.069F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(2116.069F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(1058.0345F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-1.0F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-1.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("yBl%*0#", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-1.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, float4, 0.01F);
      
      Integer integer0 = new Integer(649);
      assertNotNull(integer0);
      assertEquals(649, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      float[][] floatArray0 = new float[20][6];
      float[] floatArray1 = new float[5];
      floatArray1[1] = (-2734.917F);
      floatArray1[1] = (-2734.917F);
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      String string0 = catalogPieceOfFurniture0.getName();
      assertNotNull(string0);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("<.EbfL(1*d", string0);
      
      String string1 = catalogPieceOfFurniture0.getDescription();
      assertNotNull(string1);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("<.EbfL(1*d", string1);
      
      float float0 = catalogPieceOfFurniture0.getWidth();
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), float0, 0.01F);
      
      Float float1 = new Float((-2734.917F));
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2734.917F), (float)float1, 0.01F);
      
      float float2 = catalogPieceOfFurniture0.getElevation();
      assertEquals(20, floatArray0.length);
      assertEquals(float2, float0, 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), float2, 0.01F);
      
      boolean boolean0 = catalogPieceOfFurniture0.isMovable();
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(boolean0);
      
      boolean boolean1 = catalogPieceOfFurniture0.isDoorOrWindow();
      assertEquals(20, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(boolean1);
      
      String string2 = catalogPieceOfFurniture0.getStaircaseCutOutShape();
      assertNull(string2);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      String string3 = catalogPieceOfFurniture0.getCurrency();
      assertNull(string3);
      assertEquals(20, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(20, floatArray0.length);
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      homePieceOfFurniture0.setElevation((-2734.917F));
      assertEquals(20, floatArray0.length);
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      homePieceOfFurniture0.setNameYOffset((-1.0F));
      assertEquals(20, floatArray0.length);
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals((-1.0F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      homePieceOfFurniture0.move(1.0F, (-2734.917F));
      assertEquals(20, floatArray0.length);
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-4102.3755F), homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals((-1.0F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1366.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      homePieceOfFurniture0.setY(2.0F);
      assertEquals(20, floatArray0.length);
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals((-1.0F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1366.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      BigDecimal bigDecimal1 = homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotNull(bigDecimal1);
      assertEquals(20, floatArray0.length);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals((-1.0F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1366.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((byte)2, bigDecimal1.byteValue());
      assertEquals((short)2, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      boolean boolean2 = homePieceOfFurniture0.isTopRightPointAt(2.0F, (-2734.917F), (-1.0F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(20, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals((-1.0F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-1366.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(boolean2);
      
      BigDecimal bigDecimal2 = BigDecimal.TEN;
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotNull(bigDecimal2);
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((byte)10, bigDecimal2.byteValue());
      assertEquals((short)10, bigDecimal2.shortValue());
      
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "jW/rp'{*2-tU)gO7|", "", (Content) null, (Content) null, (Content) null, (-2734.917F), (-294.1F), 1.0F, (-2734.917F), true, floatArray0, "<.EbfL(1*d", true, true, true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-294.1F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      
      String string0 = catalogPieceOfFurniture0.getName();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotNull(string0);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-294.1F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("jW/rp'{*2-tU)gO7|", string0);
      
      String string1 = bigDecimal1.toString();
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(string1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(string1.equals((Object)string0));
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals("10", string1);
      
      float float0 = bigDecimal1.floatValue();
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals(10.0F, float0, 0.01F);
      
      String string2 = catalogPieceOfFurniture0.getDescription();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotNull(string2);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-294.1F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", string2);
      
      BigDecimal bigDecimal2 = bigDecimal1.multiply(bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotNull(bigDecimal2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((byte)10, bigDecimal2.byteValue());
      assertEquals((short)10, bigDecimal2.shortValue());
      
      Float float1 = new Float(662.572F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(662.572F, (float)float1, 0.01F);
      
      String string3 = catalogPieceOfFurniture0.getStaircaseCutOutShape();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNull(string3);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-294.1F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      boolean boolean0 = catalogPieceOfFurniture0.isBackFaceShown();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-294.1F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(boolean0);
      
      boolean boolean1 = catalogPieceOfFurniture0.isTexturable();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(boolean1 == boolean0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-294.1F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(boolean1);
      
      BigDecimal bigDecimal3 = catalogPieceOfFurniture0.getPrice();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertSame(bigDecimal3, bigDecimal0);
      assertNotNull(bigDecimal3);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-294.1F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((byte)1, bigDecimal3.byteValue());
      assertEquals((short)1, bigDecimal3.shortValue());
      
      BigDecimal bigDecimal4 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertNotSame(bigDecimal4, bigDecimal2);
      assertSame(bigDecimal4, bigDecimal3);
      assertSame(bigDecimal4, bigDecimal0);
      assertNotSame(bigDecimal4, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal4);
      assertNotNull(bigDecimal4);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((byte)1, bigDecimal4.byteValue());
      assertEquals((short)1, bigDecimal4.shortValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-294.1F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      String string4 = catalogPieceOfFurniture0.getCurrency();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal4);
      assertNull(string4);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-294.1F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-294.1F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertEquals("jW/rp'{*2-tU)gO7|", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-147.05F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-294.1F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal4);
      assertNotNull(homePieceOfFurniture1);
      assertEquals(5, floatArray0.length);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-294.1F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertEquals("jW/rp'{*2-tU)gO7|", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-147.05F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals((-2734.917F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals((-294.1F), homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals((-147.05F), homePieceOfFurniture1.getY(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals((-2734.917F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isMovable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals("jW/rp'{*2-tU)gO7|", homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals("", homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-294.1F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      boolean boolean2 = homePieceOfFurniture0.isTopRightPointAt(662.572F, (-451.066F), (-2734.917F));
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal4);
      assertEquals(5, floatArray0.length);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-294.1F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertEquals("jW/rp'{*2-tU)gO7|", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-147.05F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-294.1F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(boolean2);
      
      float[][] floatArray2 = homePieceOfFurniture0.getPoints();
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal4);
      assertNotSame(floatArray2, floatArray0);
      assertNotNull(floatArray2);
      assertEquals(5, floatArray0.length);
      assertEquals(4, floatArray2.length);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-294.1F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertEquals("jW/rp'{*2-tU)gO7|", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-147.05F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-294.1F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal4);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-294.1F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertEquals("jW/rp'{*2-tU)gO7|", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-147.05F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-294.1F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      homePieceOfFurniture0.setDepth(3419.255F);
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal4);
      assertEquals(5, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getDescription());
      assertEquals(3419.255F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("jW/rp'{*2-tU)gO7|", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-147.05F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-294.1F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("jW/rp'{*2-tU)gO7|", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float[] floatArray1 = new float[5];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[1] = 0.0F;
      floatArray1[4] = (-2734.917F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 0.0F, (-2734.917F), (-2734.917F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      
      Float float0 = new Float((-2734.917F));
      assertNotNull(float0);
      assertEquals((-2734.917F), (float)float0, 0.01F);
      
      boolean boolean0 = catalogPieceOfFurniture0.isDoorOrWindow();
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(boolean0);
      
      boolean boolean1 = catalogPieceOfFurniture0.isDeformable();
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(boolean1);
      
      boolean boolean2 = catalogPieceOfFurniture0.isTexturable();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(boolean2);
      
      BigDecimal bigDecimal1 = catalogPieceOfFurniture0.getPrice();
      assertNull(bigDecimal1);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      
      BigDecimal bigDecimal2 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertNull(bigDecimal2);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      
      homePieceOfFurniture0.setNameYOffset((-0.19340181F));
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals((-0.19340181F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      
      BigDecimal bigDecimal3 = homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      assertNull(bigDecimal3);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals((-0.19340181F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      
      boolean boolean3 = homePieceOfFurniture0.containsPoint((-2734.917F), 0.0F, (-1206.49F));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals((-0.19340181F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(boolean3);
      
      BigDecimal bigDecimal4 = homePieceOfFurniture0.getValueAddedTax();
      assertNull(bigDecimal4);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals((-0.19340181F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      
      BigDecimal bigDecimal5 = homePieceOfFurniture0.getValueAddedTax();
      assertNull(bigDecimal5);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals((-0.19340181F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      
      Integer integer0 = new Integer(298);
      assertNotNull(integer0);
      assertEquals(298, (int)integer0);
      
      int int0 = Integer.min(298, 982);
      assertEquals(298, int0);
      
      boolean boolean4 = integer0.equals("");
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      
      homePieceOfFurniture0.setColor(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(298, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals((-0.19340181F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      
      boolean boolean5 = homePieceOfFurniture0.isPointAt((-2734.917F), 3164.3984F, 2826.0F);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(298, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals((-0.19340181F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(boolean5);
      
      boolean boolean6 = homePieceOfFurniture0.isTexturable();
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean1);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(298, (int)homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals((-0.19340181F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(boolean6);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      float[] floatArray0 = new float[5];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      
      boolean boolean0 = catalogPieceOfFurniture0.isDeformable();
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(boolean0);
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      Content content0 = catalogPieceOfFurniture0.getPlanIcon();
      assertNull(content0);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      
      float float0 = catalogPieceOfFurniture0.getWidth();
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean1 = catalogPieceOfFurniture0.isDoorOrWindow();
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(boolean1);
      
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      assertNotSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertNotNull(bigDecimal2);
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      
      boolean boolean2 = homePieceOfFurniture0.isTopLeftPointAt(2.0F, 0.0F, 0.0F);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(boolean2);
      
      float float1 = Float.min(5.753865F, 0.0F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      homePieceOfFurniture0.setNameAngle((-1015.1F));
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2.7760441F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      
      float[][] floatArray1 = homePieceOfFurniture0.getPoints();
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2.7760441F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      
      boolean boolean3 = homePieceOfFurniture0.isBottomLeftPointAt((-1675.33F), 2.0F, 2.0F);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2.7760441F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(boolean3);
      
      float float2 = homePieceOfFurniture0.getDepth();
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(2.7760441F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 0.15233545F, 0.15233545F, 0.15233545F, false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      
      float float0 = catalogPieceOfFurniture0.getElevation();
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.076167725F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.076167725F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.15233545F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      homePieceOfFurniture0.setAngle((-4026.7656F));
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.076167725F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.076167725F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.7561569F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.15233545F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.15233545F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      
      boolean boolean0 = homePieceOfFurniture0.isBottomLeftPointAt((-4026.7656F), 0.0F, 0.15233545F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.076167725F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.076167725F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.7561569F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.15233545F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.15233545F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(boolean0);
      
      boolean boolean1 = homePieceOfFurniture0.isBottomLeftPointAt(0.0F, 0.15233545F, (-1922.5331F));
      assertFalse(boolean1 == boolean0);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.15233545F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.15233545F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.076167725F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.076167725F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.7561569F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.15233545F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.15233545F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      float[] floatArray0 = new float[24];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(".EbfL(1EH", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(".EbfL(1EH", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(".EbfL(1EH", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(".EbfL(1EH", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      
      float float0 = homePieceOfFurniture0.getNameYOffset();
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(".EbfL(1EH", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(".EbfL(1EH", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, float0, 0.01F);
      
      TextStyle textStyle0 = homePieceOfFurniture0.getNameStyle();
      assertNull(textStyle0);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(".EbfL(1EH", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(".EbfL(1EH", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertNotNull(resourceURLContent0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, (Content) null, 3.4028235E38F, 0.0F, 0.0F, false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      
      String string0 = catalogPieceOfFurniture0.getName();
      assertNotNull(string0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", string0);
      
      float float0 = catalogPieceOfFurniture0.getWidth();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(3.4028235E38F, float0, 0.01F);
      
      Float float1 = new Float((-2734.917F));
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2734.917F), (float)float1, 0.01F);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      
      homePieceOfFurniture0.setNameYOffset(1567.3369F);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(1567.3369F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      
      boolean boolean0 = homePieceOfFurniture0.isNameCenterPointAt(2.0F, 1927.621F, 2.0F);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(1567.3369F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(boolean0);
      
      BigDecimal bigDecimal2 = BigDecimal.TEN;
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotNull(bigDecimal2);
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((byte)10, bigDecimal2.byteValue());
      assertEquals((short)10, bigDecimal2.shortValue());
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotNull(homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(1567.3369F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(1567.3369F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals("", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(3.4028235E38F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      
      boolean boolean1 = homePieceOfFurniture0.isTopRightPointAt(3.4028235E38F, 116.381F, 1567.3369F);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertTrue(boolean1 == boolean0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(1567.3369F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(boolean1);
      
      homePieceOfFurniture1.setNameAngle(783.89233F);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(1567.3369F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(1567.3369F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(4.7773557F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(3.4028235E38F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      
      homePieceOfFurniture1.setNameVisible(true);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(1567.3369F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertEquals(1567.3369F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(4.7773557F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(3.4028235E38F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("ByY!GH]B\"IYdi}tf)");
      assertNotNull(furnitureCategory0);
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertEquals("ByY!GH]B\"IYdi}tf)", furnitureCategory0.getName());
      
      URL uRL1 = MockURL.getHttpExample();
      assertNotSame(uRL1, uRL0);
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.io.HomeURLContent", temporaryURLContent0, temporaryURLContent0, 326.7197F, 326.7197F, 326.7197F, true, false);
      assertNotNull(catalogPieceOfFurniture1);
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture1.isResizable());
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertTrue(catalogPieceOfFurniture1.isDeformable());
      assertEquals(326.7197F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isMovable());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertEquals(326.7197F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getColor());
      assertEquals(326.7197F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertNull(catalogPieceOfFurniture1.getId());
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertNull(catalogPieceOfFurniture1.getCreator());
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertEquals("com.eteks.sweethome3d.io.HomeURLContent", catalogPieceOfFurniture1.getName());
      
      int int0 = furnitureCategory0.getIndexOfPieceOfFurniture(catalogPieceOfFurniture1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(catalogPieceOfFurniture1, catalogPieceOfFurniture0);
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertEquals("ByY!GH]B\"IYdi}tf)", furnitureCategory0.getName());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture1.isResizable());
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertTrue(catalogPieceOfFurniture1.isDeformable());
      assertEquals(326.7197F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isMovable());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertEquals(326.7197F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getColor());
      assertEquals(326.7197F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertNull(catalogPieceOfFurniture1.getId());
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertNull(catalogPieceOfFurniture1.getCreator());
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertEquals("com.eteks.sweethome3d.io.HomeURLContent", catalogPieceOfFurniture1.getName());
      assertEquals((-1), int0);
      
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(catalogPieceOfFurniture0, catalogPieceOfFurniture1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(catalogPieceOfFurniture0.equals((Object)catalogPieceOfFurniture1));
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertEquals("ByY!GH]B\"IYdi}tf)", furnitureCategory0.getName());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      
      homePieceOfFurniture1.setDepth(0.0F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(catalogPieceOfFurniture0, catalogPieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(catalogPieceOfFurniture0.equals((Object)catalogPieceOfFurniture1));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(1567.3369F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture1.isNameVisible());
      assertEquals(1567.3369F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(4.7773557F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(3.4028235E38F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getShininess());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-2734.917F), 0.0F, 3.4028235E38F, false, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      
      BigDecimal bigDecimal1 = BigDecimal.valueOf(337.75048);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)81, bigDecimal1.byteValue());
      assertEquals((short)337, bigDecimal1.shortValue());
      
      String string0 = catalogPieceOfFurniture0.getName();
      assertNotNull(string0);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", string0);
      
      String string1 = catalogPieceOfFurniture0.getDescription();
      assertNull(string1);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      
      Content content0 = catalogPieceOfFurniture0.getPlanIcon();
      assertNull(content0);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      
      float float0 = catalogPieceOfFurniture0.getWidth();
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-2734.917F), float0, 0.01F);
      
      BigDecimal bigDecimal2 = bigDecimal0.multiply(bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotNull(bigDecimal2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertTrue(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)81, bigDecimal1.byteValue());
      assertEquals((short)337, bigDecimal1.shortValue());
      assertEquals((byte)81, bigDecimal2.byteValue());
      assertEquals((short)337, bigDecimal2.shortValue());
      
      Float float1 = new Float((-2734.917F));
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2734.917F), (float)float1, 0.01F);
      
      boolean boolean0 = catalogPieceOfFurniture0.isDoorOrWindow();
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = catalogPieceOfFurniture0.isBackFaceShown();
      assertTrue(boolean1 == boolean0);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(boolean1);
      
      boolean boolean2 = catalogPieceOfFurniture0.isTexturable();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(boolean2);
      
      BigDecimal bigDecimal3 = BigDecimal.ONE;
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertSame(bigDecimal3, bigDecimal0);
      assertNotNull(bigDecimal3);
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertEquals((short)1, bigDecimal3.shortValue());
      assertEquals((byte)1, bigDecimal3.byteValue());
      
      BigDecimal bigDecimal4 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertNull(bigDecimal4);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      
      String string2 = catalogPieceOfFurniture0.getCurrency();
      assertNull(string2);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      
      float float2 = Float.min((-1015.1F), 1.0F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((-1015.1F), float2, 0.01F);
      
      homePieceOfFurniture0.setDepth((-1015.1F));
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1015.1F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      
      homePieceOfFurniture0.setVisible(false);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1015.1F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      
      int int0 = Float.floatToIntBits(3.4028235E38F);
      assertEquals(2139095039, int0);
      
      boolean boolean3 = homePieceOfFurniture0.isModelMirrored();
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1015.1F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(boolean3);
      
      homePieceOfFurniture0.setShininess(float1);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1015.1F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals((-2734.917F), homePieceOfFurniture0.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      
      Content content1 = homePieceOfFurniture0.getPlanIcon();
      assertNull(content1);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1015.1F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals((-2734.917F), homePieceOfFurniture0.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      
      homePieceOfFurniture0.setShininess(float1);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1015.1F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals((-2734.917F), homePieceOfFurniture0.getShininess(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[2] = (-2734.917F);
      floatArray1[3] = (-2734.917F);
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[1] = (-2734.917F);
      floatArray2[4] = (-2734.917F);
      floatArray0[2] = floatArray2;
      float[] floatArray3 = new float[0];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray0[4] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("<.EbfL(1*d", "<.EbfL(1*d", "<.EbfL(1*d", (Content) null, (Content) null, (Content) null, (-2734.917F), (-2734.917F), (-2734.917F), (-2734.917F), false, floatArray0, "<.EbfL(1*d", false, false, false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(5, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      
      Float float0 = new Float((-2734.917F));
      assertNotNull(float0);
      assertEquals((-2734.917F), (float)float0, 0.01F);
      
      boolean boolean0 = catalogPieceOfFurniture0.isMovable();
      assertEquals(5, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(boolean0);
      
      boolean boolean1 = catalogPieceOfFurniture0.isDoorOrWindow();
      assertEquals(5, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(boolean1);
      
      boolean boolean2 = catalogPieceOfFurniture0.isDeformable();
      assertEquals(5, floatArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(boolean2);
      
      boolean boolean3 = catalogPieceOfFurniture0.isTexturable();
      assertEquals(5, floatArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(boolean3);
      
      BigDecimal bigDecimal1 = catalogPieceOfFurniture0.getPrice();
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotNull(bigDecimal1);
      assertEquals(5, floatArray0.length);
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      
      BigDecimal bigDecimal2 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotNull(bigDecimal2);
      assertEquals(5, floatArray0.length);
      assertEquals((short)1, bigDecimal2.shortValue());
      assertEquals((byte)1, bigDecimal2.byteValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals(5, floatArray0.length);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      
      homePieceOfFurniture0.setNameYOffset((-4.4539986F));
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertEquals(5, floatArray0.length);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-4.4539986F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      
      BigDecimal bigDecimal3 = homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotNull(bigDecimal3);
      assertEquals(5, floatArray0.length);
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-4.4539986F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((short)2, bigDecimal3.shortValue());
      assertEquals((byte)2, bigDecimal3.byteValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      
      boolean boolean4 = homePieceOfFurniture0.isNameCenterPointAt(3375.0F, 1384.7291F, 0.0F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal2);
      assertEquals(5, floatArray0.length);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-4.4539986F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(boolean4);
      
      BigDecimal bigDecimal4 = BigDecimal.TEN;
      assertNotSame(bigDecimal4, bigDecimal1);
      assertNotSame(bigDecimal4, bigDecimal3);
      assertNotSame(bigDecimal4, bigDecimal0);
      assertNotSame(bigDecimal4, bigDecimal2);
      assertNotNull(bigDecimal4);
      assertFalse(bigDecimal4.equals((Object)bigDecimal1));
      assertFalse(bigDecimal4.equals((Object)bigDecimal3));
      assertFalse(bigDecimal4.equals((Object)bigDecimal0));
      assertFalse(bigDecimal4.equals((Object)bigDecimal2));
      assertEquals((short)10, bigDecimal4.shortValue());
      assertEquals((byte)10, bigDecimal4.byteValue());
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertNotNull(homePieceOfFurniture1);
      assertEquals(5, floatArray0.length);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal4));
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-4.4539986F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertEquals((-2734.917F), homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals((-2734.917F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals((-2734.917F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isResizable());
      assertEquals((-2734.917F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals((-4.4539986F), homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getName());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture1.getY(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getDescription());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      
      boolean boolean5 = homePieceOfFurniture1.isTopRightPointAt(773.3398F, (-4.4539986F), 773.3398F);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertEquals(5, floatArray0.length);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal4));
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-4.4539986F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.isDeformable());
      assertEquals((-2734.917F), homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals((-2734.917F), homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isTexturable());
      assertEquals((-2734.917F), homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isResizable());
      assertEquals((-2734.917F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals((-4.4539986F), homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getName());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture1.getY(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture1.getX(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals("<.EbfL(1*d", homePieceOfFurniture1.getDescription());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(boolean5);
      
      float float1 = homePieceOfFurniture0.getDepth();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal4);
      assertEquals(5, floatArray0.length);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal4));
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-4.4539986F), homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals((-2734.917F), homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1367.4585F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-2734.917F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2734.917F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getCreator());
      assertEquals("<.EbfL(1*d", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals((-2734.917F), float1, 0.01F);
  }
}
