/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 17:06:38 GMT 2019
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleCharStream_ESTest extends SimpleCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5mTt)1C5Hf>Tcx8j");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4089, 4089, 4089);
      simpleCharStream0.GetImage();
      StringReader stringReader1 = new StringReader("");
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader1);
      int int0 = 4083;
      simpleCharStream0.ReInit((Reader) stringReader1, 0, 4083, 4089);
      simpleCharStream0.getBeginColumn();
      InputStream inputStream0 = null;
      stringReader0.reset();
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("R");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      simpleCharStream0.getBeginLine();
      // Undeclared exception!
      try { 
        simpleCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">4B+Gb");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.readChar();
      simpleCharStream0.GetSuffix(4069);
      simpleCharStream0.getEndLine();
      simpleCharStream0.GetSuffix(1);
      simpleCharStream0.getBeginColumn();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(dataInputStream0, (-1320), 837);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(dataInputStream0, 2028, 2028);
      simpleCharStream0.backup(2028);
      StringReader stringReader0 = new StringReader("D l&&z$buI %]l~W;/");
      stringReader0.read();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(dataInputStream0);
      try { 
        simpleCharStream1.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, (-3960), 0);
      // Undeclared exception!
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5mTt)1C5Hf>Tcx8j");
      stringReader0.read();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1), (-1094));
      simpleCharStream0.ExpandBuff(false);
      StringReader stringReader1 = new StringReader("5mTt)1C5Hf>Tcx8j");
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = 'C';
      charArray0[2] = ' ';
      charArray0[3] = '|';
      charArray0[4] = '^';
      charArray0[5] = 'x';
      charArray0[6] = '\'';
      // Undeclared exception!
      try { 
        stringReader1.read(charArray0, (-1), (-1094));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      String string0 = null;
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(mockFileInputStream0, 2048, (-2211), (-1391));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      int int0 = 4096;
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, 4096, 4090);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{}$nEi>/*5i2W");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.backup(0);
      stringReader0.read();
      // Undeclared exception!
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4096
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "d8Y*";
      StringReader stringReader0 = new StringReader("d8Y*");
      int int0 = 10;
      int int1 = (-3960);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 10, (-3960), 10);
      simpleCharStream0.bufsize = (-3558);
      simpleCharStream0.FillBuff();
      stringReader0.markSupported();
      int int2 = (-4760);
      simpleCharStream0.adjustBeginLineColumn((-4760), (-3960));
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.backup(1744);
      stringReader0.read();
      simpleCharStream0.adjustBeginLineColumn(0, (-1));
      simpleCharStream0.GetImage();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte) (-67);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(dataInputStream0, "", (byte)0, (byte)79);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wUg");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 7, (-3960), 7);
      simpleCharStream0.FillBuff();
      stringReader0.markSupported();
      simpleCharStream0.adjustBeginLineColumn(1, (-1));
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      String string0 = "";
      SimpleCharStream simpleCharStream1 = null;
      try {
        simpleCharStream1 = new SimpleCharStream(sequenceInputStream0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(dataInputStream0, 2028, 2028);
      simpleCharStream0.ReInit((InputStream) pipedInputStream0);
      simpleCharStream0.adjustBeginLineColumn((-1), (-1));
      simpleCharStream0.GetImage();
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (String) null, 4064, (byte) (-38));
      simpleCharStream0.adjustBeginLineColumn((-2953), (byte)46);
      simpleCharStream0.getBeginLine();
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (String) null);
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 4096, 4096, 4096);
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn('r');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-1);
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)0;
      int int0 = 1102;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 1102);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      int int1 = (-485);
      byteArrayInputStream0.mark((byte)0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (-485), (-1741), 0);
      simpleCharStream0.tokenBegin = (int) (byte) (-32);
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, "Sc+^Rh-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InputStream inputStream0 = null;
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">4B+Gb");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.BeginToken();
      char[] charArray0 = new char[9];
      charArray0[1] = '>';
      simpleCharStream0.adjustBeginLineColumn(11, 4090);
      simpleCharStream0.getLine();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-39);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4083, 4064);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 11);
      try { 
        simpleCharStream0.ReInit((InputStream) bufferedInputStream0, "", 4087, 11);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{}$nEi>/*5i2W");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.backup(1);
      stringReader0.read();
      simpleCharStream0.BeginToken();
      simpleCharStream0.setTabSize(1);
      stringReader0.markSupported();
      simpleCharStream0.ReInit((Reader) stringReader0, 127, 1, 1627);
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("9lReoDpRZ3.651\"eT");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.getBeginColumn();
      InputStream inputStream0 = null;
      stringReader1.reset();
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-14);
      byteArray0[1] = (byte) (-46);
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte) (-4);
      byteArray0[7] = (byte) (-37);
      byteArray0[8] = (byte) (-120);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-4);
      intArray0[1] = (int) (byte)64;
      simpleCharStream0.maxNextCharInd = (-595);
      intArray0[2] = 1578;
      intArray0[3] = (int) (byte) (-46);
      intArray0[4] = (-224);
      intArray0[5] = (int) (byte)64;
      simpleCharStream0.bufline = intArray0;
      // Undeclared exception!
      try { 
        simpleCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      StringReader stringReader1 = new StringReader(".a3");
      simpleCharStream0.Done();
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn('u');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (-773), (-773));
      simpleCharStream0.adjustBeginLineColumn((-773), 4096);
      SimpleCharStream simpleCharStream1 = null;
      try {
        simpleCharStream1 = new SimpleCharStream(dataInputStream0, "com.pmdesigns.jvc.tools.SimpleCharStream", (-1), 4077, 1632);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.adjustBeginLineColumn(0, 0);
      simpleCharStream0.GetImage();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-38);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (String) null, 2322, 306);
      simpleCharStream0.ReInit((InputStream) pushbackInputStream0, 4049, 0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{}$nEi>/*5i2W");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.backup(1);
      stringReader0.read();
      simpleCharStream0.BeginToken();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      // Undeclared exception!
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4096
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 1102);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      byteArrayInputStream0.mark((byte)0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (-485), (-1741), 0);
      StringReader stringReader0 = new StringReader("0.C]cX#_[?aogaBm3uc");
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      simpleCharStream1.BeginToken();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(dataInputStream0, (-1320), 810);
      simpleCharStream0.backup(810);
      simpleCharStream0.getLine();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      stringReader0.close();
      simpleCharStream0.ReInit((Reader) stringReader0);
      simpleCharStream0.getBeginColumn();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)1;
      simpleCharStream0.GetSuffix((byte)1);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((Reader) stringReader0, (int) (byte)1, 0, (-606));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      stringReader0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      StringReader stringReader1 = new StringReader("");
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader1);
      simpleCharStream1.backup(1744);
      simpleCharStream1.getEndColumn();
      simpleCharStream1.getBeginLine();
      InputStream inputStream0 = null;
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0, (String) null, (-2211), (-2211));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5mTt)1C5Hf>Tcx8j");
      stringReader0.mark(4088);
      int int0 = (-1094);
      stringReader0.read();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1), (-1094));
      simpleCharStream0.ExpandBuff(false);
      StringReader stringReader1 = new StringReader("5mTt)1C5Hf>Tcx8j");
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = 'C';
      StringReader stringReader2 = new StringReader("/\"#^^!4s>?=");
      simpleCharStream0.ReInit((Reader) stringReader0, 0, (-1094), 0);
      // Undeclared exception!
      try { 
        simpleCharStream0.getBeginColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 1102);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      byteArrayInputStream0.mark((byte)0);
      StringReader stringReader0 = new StringReader("T*(I`aiMM=aY/");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4085, 0);
      simpleCharStream0.ReInit((Reader) stringReader0, (int) (byte) (-1), 0, 4085);
      simpleCharStream0.getBeginColumn();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, (byte)0, 157);
      simpleCharStream1.adjustBeginLineColumn(4088, 4065);
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(pushbackInputStream0, 4059, 8);
      simpleCharStream2.GetImage();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v@& EtLm9I5W");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 626, 626, 626);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleCharStream0.ReInit((Reader) stringReader0, 626, 626, 626);
      simpleCharStream0.readChar();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.backup(10);
      stringReader0.read();
      simpleCharStream0.BeginToken();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      simpleCharStream0.GetImage();
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        simpleCharStream0.ReInit((InputStream) sequenceInputStream0, "", (int) (byte)0, 924, (int) (byte) (-1));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      stringReader0.close();
      simpleCharStream0.ReInit((Reader) stringReader0);
      simpleCharStream0.getBeginColumn();
      stringReader0.markSupported();
      simpleCharStream0.adjustBeginLineColumn((-4760), 0);
      simpleCharStream0.getColumn();
  }
}
