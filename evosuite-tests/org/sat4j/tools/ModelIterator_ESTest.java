/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 21:49:44 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ModelIterator_ESTest extends ModelIterator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FullClauseSelectorSolver<FullClauseSelectorSolver<MinOneDecorator>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<FullClauseSelectorSolver<MinOneDecorator>>((FullClauseSelectorSolver<MinOneDecorator>) null, true);
      VecInt vecInt0 = new VecInt(0);
      SubModelIterator subModelIterator0 = new SubModelIterator(fullClauseSelectorSolver0, vecInt0);
      NegationDecorator<SubModelIterator> negationDecorator0 = new NegationDecorator<SubModelIterator>(subModelIterator0);
      ModelIterator modelIterator0 = new ModelIterator(negationDecorator0, (-2036L));
      modelIterator0.isSatisfiable((IVecInt) vecInt0);
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, searchParams0, varOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      SubModelIterator subModelIterator0 = new SubModelIterator(minimal4CardinalityModel0, iVecInt0, 100);
      subModelIterator0.isSatisfiable();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(minimal4CardinalityModel0, checkMUSSolutionListener0);
      modelIteratorToSATAdapter0.primeImplicant();
      assertEquals(1L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FullClauseSelectorSolver<MinOneDecorator> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<MinOneDecorator>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(fullClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((IConstr) null).when(fullClauseSelectorSolver0).discardCurrentModel();
      doReturn((int[]) null).when(fullClauseSelectorSolver0).modelWithInternalVariables();
      FullClauseSelectorSolver<FullClauseSelectorSolver<MinOneDecorator>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<MinOneDecorator>>(fullClauseSelectorSolver0, false);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver1, 723, solutionFoundListener0);
      modelIteratorToSATAdapter0.isSatisfiable();
      long long0 = modelIteratorToSATAdapter0.numberOfModelsFoundSoFar();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FullClauseSelectorSolver<MinOneDecorator> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<MinOneDecorator>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<FullClauseSelectorSolver<MinOneDecorator>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<MinOneDecorator>>(fullClauseSelectorSolver0, false);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver1, 723, solutionFoundListener0);
      modelIteratorToSATAdapter0.model();
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, searchParams0, varOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      SubModelIterator subModelIterator0 = new SubModelIterator(minimal4CardinalityModel0, iVecInt0, 100);
      subModelIterator0.isSatisfiable();
      subModelIterator0.model();
      assertEquals(2L, subModelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null, 392L);
      // Undeclared exception!
      try { 
        modelIterator0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      NoLearningNoHeuristics<MixedDataStructureSingleWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(noLearningNoHeuristics0, mixedDataStructureSingleWL0, searchParams0, varOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      SubModelIterator subModelIterator0 = new SubModelIterator(minimal4CardinalityModel0, iVecInt0, 100);
      // Undeclared exception!
      try { 
        subModelIterator0.primeImplicant();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SubModelIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FullClauseSelectorSolver<MinOneDecorator> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<MinOneDecorator>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(723).when(fullClauseSelectorSolver0).nVars();
      doReturn((int[]) null).when(fullClauseSelectorSolver0).primeImplicant();
      FullClauseSelectorSolver<FullClauseSelectorSolver<MinOneDecorator>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<MinOneDecorator>>(fullClauseSelectorSolver0, false);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver1, 723, solutionFoundListener0);
      // Undeclared exception!
      try { 
        modelIteratorToSATAdapter0.primeImplicant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ModelIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>(307);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams(1.0E20, 307);
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(userFixedPhaseSelectionStrategy0);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, searchParams0, varOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      SubModelIterator subModelIterator0 = new SubModelIterator(solver0, iVecInt0, (-3847L));
      // Undeclared exception!
      try { 
        subModelIterator0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null, (-3847L));
      // Undeclared exception!
      try { 
        modelIterator0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ModelIterator modelIterator0 = new ModelIterator(statisticsSolver0, 3637L);
      try { 
        modelIterator0.isSatisfiable(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[0];
      FullClauseSelectorSolver<MinOneDecorator> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<MinOneDecorator>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, false).when(fullClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null).when(fullClauseSelectorSolver0).discardCurrentModel();
      doReturn((Object) null, (Object) null, (Object) null).when(fullClauseSelectorSolver0).modelWithInternalVariables();
      FullClauseSelectorSolver<FullClauseSelectorSolver<MinOneDecorator>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<MinOneDecorator>>(fullClauseSelectorSolver0, true);
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver1, 9223372036854775807L, checkMUSSolutionListener0);
      boolean boolean0 = modelIteratorToSATAdapter0.isSatisfiable(true);
      assertEquals(3L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FullClauseSelectorSolver<FullClauseSelectorSolver<MinOneDecorator>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<FullClauseSelectorSolver<MinOneDecorator>>((FullClauseSelectorSolver<MinOneDecorator>) null, true);
      VecInt vecInt0 = new VecInt(8);
      SubModelIterator subModelIterator0 = new SubModelIterator(fullClauseSelectorSolver0, vecInt0);
      // Undeclared exception!
      try { 
        subModelIterator0.isSatisfiable(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      VecInt vecInt0 = new VecInt();
      ModelIterator modelIterator0 = new ModelIterator(dimacsStringSolver0, 5067L);
      try { 
        modelIterator0.isSatisfiable((IVecInt) vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[0];
      FullClauseSelectorSolver<MinOneDecorator> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<MinOneDecorator>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, true, false).when(fullClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      doReturn((IConstr) null).when(fullClauseSelectorSolver0).discardCurrentModel();
      doReturn((int[]) null).when(fullClauseSelectorSolver0).modelWithInternalVariables();
      FullClauseSelectorSolver<FullClauseSelectorSolver<MinOneDecorator>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<MinOneDecorator>>(fullClauseSelectorSolver0, true);
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver1, 9223372036854775807L, checkMUSSolutionListener0);
      VecInt vecInt0 = new VecInt();
      modelIteratorToSATAdapter0.isSatisfiable(true);
      modelIteratorToSATAdapter0.isSatisfiable();
      boolean boolean0 = modelIteratorToSATAdapter0.isSatisfiable((IVecInt) vecInt0);
      assertEquals(1L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null, 1292L);
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        modelIterator0.isSatisfiable(iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>(1.0E100);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      PureOrder pureOrder0 = new PureOrder((-340));
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, (-340));
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, tabuListDecorator0, miniSATRestarts0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      SubModelIterator subModelIterator0 = new SubModelIterator(abstractMinimalModel0, iVecInt0);
      abstractMinimalModel0.newVar((-1226));
      // Undeclared exception!
      try { 
        subModelIterator0.isSatisfiable(iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsStringSolver0, checkMUSSolutionListener0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      SubModelIterator subModelIterator0 = new SubModelIterator(modelIteratorToSATAdapter0, iVecInt0);
      try { 
        subModelIterator0.isSatisfiable();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FullClauseSelectorSolver<FullClauseSelectorSolver<MinOneDecorator>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<FullClauseSelectorSolver<MinOneDecorator>>((FullClauseSelectorSolver<MinOneDecorator>) null, true);
      VecInt vecInt0 = new VecInt(0);
      SubModelIterator subModelIterator0 = new SubModelIterator(fullClauseSelectorSolver0, vecInt0);
      // Undeclared exception!
      try { 
        subModelIterator0.isSatisfiable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(iSolver0, checkMUSSolutionListener0);
      boolean boolean0 = modelIteratorToSATAdapter0.isSatisfiable();
      assertEquals(1L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[1];
      FullClauseSelectorSolver<MinOneDecorator> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<MinOneDecorator>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(fullClauseSelectorSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((-2146893354)).when(fullClauseSelectorSolver0).nVars();
      doReturn(intArray0).when(fullClauseSelectorSolver0).primeImplicant();
      FullClauseSelectorSolver<FullClauseSelectorSolver<MinOneDecorator>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<MinOneDecorator>>(fullClauseSelectorSolver0, true);
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver1, checkMUSSolutionListener0);
      modelIteratorToSATAdapter0.primeImplicant();
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>((-2054114792));
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, searchParams0, varOrderHeap0, (RestartStrategy) null, mUSLauncher0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      SubModelIterator subModelIterator0 = new SubModelIterator(minimal4CardinalityModel0, iVecInt0, 0);
      boolean boolean0 = subModelIterator0.isSatisfiable(iVecInt0);
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      VecInt vecInt0 = new VecInt();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(iSolver0, checkMUSSolutionListener0);
      boolean boolean0 = modelIteratorToSATAdapter0.isSatisfiable((IVecInt) vecInt0);
      assertEquals(1L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      VecInt vecInt0 = new VecInt();
      SubModelIterator subModelIterator0 = new SubModelIterator(dimacsStringSolver0, vecInt0, (-2146893372));
      boolean boolean0 = subModelIterator0.isSatisfiable();
      assertFalse(boolean0);
      assertEquals(0L, subModelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ModelIterator modelIterator0 = new ModelIterator((ISolver) null);
      assertEquals(0L, modelIterator0.numberOfModelsFoundSoFar());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      ModelIterator modelIterator0 = new ModelIterator(iSolver0, 4952L);
      long long0 = modelIterator0.numberOfModelsFoundSoFar();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FullClauseSelectorSolver<MinOneDecorator> fullClauseSelectorSolver0 = (FullClauseSelectorSolver<MinOneDecorator>) mock(FullClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      FullClauseSelectorSolver<FullClauseSelectorSolver<MinOneDecorator>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<FullClauseSelectorSolver<MinOneDecorator>>(fullClauseSelectorSolver0, true);
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver1, 9223372036854775807L, checkMUSSolutionListener0);
      modelIteratorToSATAdapter0.reset();
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
  }
}
