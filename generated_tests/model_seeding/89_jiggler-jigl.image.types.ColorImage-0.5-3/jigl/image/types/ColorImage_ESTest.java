/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 11:19:47 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.image.ColorConvertOp;
import javax.swing.JLayeredPane;
import jigl.image.ColorModel;
import jigl.image.InterpolationMethod;
import jigl.image.ROI;
import jigl.image.types.ColorImage;
import jigl.image.types.InterpolatedColorImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ColorImage_ESTest extends ColorImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = colorImage0.X();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, int0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int1 = 0;
      int int2 = (-1);
      // Undeclared exception!
      try { 
        colorImage0.subtract(0, (-1), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 8);
      assertEquals(8, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage((ColorImage) interpolatedColorImage0);
      assertEquals(8, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(8, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      
      InterpolatedColorImage interpolatedColorImage2 = new InterpolatedColorImage(interpolatedColorImage1);
      assertEquals(8, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(8, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(8, interpolatedColorImage2.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage2.X());
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage1));
      assertNotNull(interpolatedColorImage2);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = rOI0.lx();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      int int4 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      
      int int5 = rOI0.lx();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertEquals(0, int5);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1657;
      intArray0[2] = 0;
      InterpolatedColorImage interpolatedColorImage3 = (InterpolatedColorImage)interpolatedColorImage0.multiply(intArray0);
      assertEquals(8, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage3.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage3.getInterpolationMethod());
      assertEquals(8, interpolatedColorImage3.Y());
      assertEquals(0, interpolatedColorImage3.X());
      assertSame(interpolatedColorImage0, interpolatedColorImage3);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage3, interpolatedColorImage0);
      assertNotSame(interpolatedColorImage3, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage3, interpolatedColorImage1);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage2));
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage3.equals((Object)interpolatedColorImage2));
      assertFalse(interpolatedColorImage3.equals((Object)interpolatedColorImage1));
      assertArrayEquals(new int[] {0, 1657, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(interpolatedColorImage3);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage2.subtract(0, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 8);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(8, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage((ColorImage) interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(8, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(8, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      
      InterpolatedColorImage interpolatedColorImage2 = new InterpolatedColorImage(interpolatedColorImage1);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(8, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(8, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(0, interpolatedColorImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(8, interpolatedColorImage2.Y());
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage2);
      
      int int0 = (-16777216);
      int int1 = (-674);
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = rOI0.ly();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      int int4 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      
      int int5 = rOI0.lx();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertEquals(0, int5);
      
      int int6 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int6 == int3);
      assertFalse(int6 == int0);
      assertTrue(int6 == int2);
      assertTrue(int6 == int5);
      assertFalse(int6 == int1);
      assertTrue(int6 == int4);
      assertEquals(0, int6);
      
      int int7 = rOI0.lx();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int7 == int0);
      assertTrue(int7 == int6);
      assertTrue(int7 == int4);
      assertTrue(int7 == int3);
      assertFalse(int7 == int1);
      assertTrue(int7 == int2);
      assertTrue(int7 == int5);
      assertEquals(0, int7);
      
      int int8 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int8 == int6);
      assertFalse(int8 == int0);
      assertTrue(int8 == int3);
      assertTrue(int8 == int5);
      assertTrue(int8 == int2);
      assertTrue(int8 == int4);
      assertTrue(int8 == int7);
      assertFalse(int8 == int1);
      assertEquals(0, int8);
      
      int int9 = rOI0.lx();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int9 == int6);
      assertTrue(int9 == int2);
      assertFalse(int9 == int0);
      assertFalse(int9 == int1);
      assertTrue(int9 == int4);
      assertTrue(int9 == int7);
      assertTrue(int9 == int3);
      assertTrue(int9 == int5);
      assertTrue(int9 == int8);
      assertEquals(0, int9);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage2.multiply((-16777216), 0, (-674), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(7, 7);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(7, colorImage0.X());
      assertEquals(7, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI(7, 7, 7, 7);
      assertEquals(1, rOI0.X());
      assertEquals(7, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(7, rOI0.ux());
      assertEquals(7, rOI0.lx());
      assertEquals(7, rOI0.ly());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(7, 7);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(7, interpolatedColorImage0.X());
      assertEquals(7, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 739;
      intArray0[1] = (-4675);
      intArray0[2] = 0;
      intArray0[3] = (-4675);
      intArray0[4] = (-4675);
      // Undeclared exception!
      try { 
        colorImage0.subtract(intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(255, 0);
      assertEquals(0, colorImage0.Y());
      assertEquals(255, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = rOI0.lx();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      
      int int4 = rOI0.ux();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 255;
      intArray0[4] = 0;
      intArray0[5] = 0;
      ColorImage colorImage1 = colorImage0.multiply(intArray0);
      assertEquals(0, colorImage0.Y());
      assertEquals(255, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(255, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      assertArrayEquals(new int[] {0, 0, 0, 255, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(colorImage1);
      
      Integer integer0 = colorImage1.minComponent();
      assertEquals(0, colorImage0.Y());
      assertEquals(255, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(255, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      assertArrayEquals(new int[] {0, 0, 0, 255, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNull(integer0);
      
      Integer[] integerArray0 = colorImage1.min();
      assertEquals(0, colorImage0.Y());
      assertEquals(255, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(255, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      assertArrayEquals(new int[] {0, 0, 0, 255, 0, 0}, intArray0);
      assertEquals(3, integerArray0.length);
      assertEquals(6, intArray0.length);
      assertNotNull(integerArray0);
      
      // Undeclared exception!
      try { 
        colorImage1.subtract(228, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 228
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 2141;
      ColorImage colorImage0 = new ColorImage(2141, 2141);
      assertEquals(2141, colorImage0.X());
      assertEquals(2141, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2141;
      intArray0[1] = 2141;
      intArray0[2] = 2141;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int1 = rOI1.ux();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI1.ly();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = rOI1.ux();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      int int4 = rOI1.lx();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      
      int int5 = rOI1.ux();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int2);
      assertFalse(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertEquals(0, int5);
      
      int int6 = rOI1.lx();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int1);
      assertFalse(int6 == int0);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertTrue(int6 == int2);
      assertEquals(0, int6);
      
      int int7 = rOI1.ux();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int4);
      assertTrue(int7 == int6);
      assertTrue(int7 == int2);
      assertTrue(int7 == int5);
      assertFalse(int7 == int0);
      assertTrue(int7 == int3);
      assertTrue(int7 == int1);
      assertEquals(0, int7);
      
      int int8 = rOI1.lx();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int8 == int5);
      assertTrue(int8 == int2);
      assertTrue(int8 == int7);
      assertTrue(int8 == int1);
      assertTrue(int8 == int6);
      assertFalse(int8 == int0);
      assertTrue(int8 == int3);
      assertTrue(int8 == int4);
      assertEquals(0, int8);
      
      String string0 = colorImage0.toString(rOI1);
      assertEquals(2141, colorImage0.X());
      assertEquals(2141, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals("2141:2141\nnull \n2141:2141\nnull \n2141:2141\nnull \n", string0);
      assertNotNull(string0);
      
      rOI0.setROI(2141, 2141, 3159, 2141);
      assertEquals(2141, rOI0.ly());
      assertEquals(1019, rOI0.X());
      assertEquals(3159, rOI0.lx());
      assertEquals(2141, rOI0.uy());
      assertEquals(2141, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertNotSame(rOI0, rOI1);
      assertFalse(rOI0.equals((Object)rOI1));
      
      int int9 = rOI0.ux();
      assertEquals(2141, rOI0.ly());
      assertEquals(1019, rOI0.X());
      assertEquals(3159, rOI0.lx());
      assertEquals(2141, rOI0.uy());
      assertEquals(2141, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertNotSame(rOI0, rOI1);
      assertTrue(int9 == int0);
      assertFalse(int9 == int1);
      assertFalse(int9 == int4);
      assertFalse(int9 == int2);
      assertFalse(int9 == int7);
      assertFalse(int9 == int8);
      assertFalse(int9 == int6);
      assertFalse(int9 == int3);
      assertFalse(int9 == int5);
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals(2141, int9);
      
      Integer integer0 = new Integer(2141);
      assertFalse(integer0.equals((Object)int6));
      assertTrue(integer0.equals((Object)int9));
      assertFalse(integer0.equals((Object)int7));
      assertFalse(integer0.equals((Object)int8));
      assertFalse(integer0.equals((Object)int5));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertEquals(2141, (int)integer0);
      assertNotNull(integer0);
      
      int int10 = rOI0.lx();
      assertEquals(2141, rOI0.ly());
      assertEquals(1019, rOI0.X());
      assertEquals(3159, rOI0.lx());
      assertEquals(2141, rOI0.uy());
      assertEquals(2141, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertNotSame(rOI0, rOI1);
      assertFalse(int10 == int7);
      assertFalse(int10 == int3);
      assertFalse(int10 == int0);
      assertFalse(int10 == int8);
      assertFalse(int10 == int2);
      assertFalse(int10 == int1);
      assertFalse(int10 == int9);
      assertFalse(int10 == int5);
      assertFalse(int10 == int6);
      assertFalse(int10 == int4);
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals(3159, int10);
      
      rOI0.setROI(2141, 2141, 2141, 2141);
      assertEquals(2141, rOI0.ly());
      assertEquals(2141, rOI0.lx());
      assertEquals(2141, rOI0.uy());
      assertEquals(2141, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotSame(rOI0, rOI1);
      assertFalse(rOI0.equals((Object)rOI1));
      
      int int11 = rOI0.ux();
      assertEquals(2141, rOI0.ly());
      assertEquals(2141, rOI0.lx());
      assertEquals(2141, rOI0.uy());
      assertEquals(2141, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotSame(rOI0, rOI1);
      assertFalse(int11 == int10);
      assertTrue(int11 == int0);
      assertFalse(int11 == int5);
      assertFalse(int11 == int4);
      assertFalse(int11 == int3);
      assertFalse(int11 == int6);
      assertTrue(int11 == int9);
      assertFalse(int11 == int2);
      assertFalse(int11 == int1);
      assertFalse(int11 == int8);
      assertFalse(int11 == int7);
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals(2141, int11);
      
      int int12 = rOI0.lx();
      assertEquals(2141, rOI0.ly());
      assertEquals(2141, rOI0.lx());
      assertEquals(2141, rOI0.uy());
      assertEquals(2141, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotSame(rOI0, rOI1);
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int12 == int5);
      assertFalse(int12 == int6);
      assertFalse(int12 == int8);
      assertFalse(int12 == int1);
      assertTrue(int12 == int9);
      assertFalse(int12 == int3);
      assertTrue(int12 == int0);
      assertFalse(int12 == int10);
      assertFalse(int12 == int4);
      assertFalse(int12 == int2);
      assertFalse(int12 == int7);
      assertTrue(int12 == int11);
      assertEquals(2141, int12);
      
      int int13 = rOI0.ux();
      assertEquals(2141, rOI0.ly());
      assertEquals(2141, rOI0.lx());
      assertEquals(2141, rOI0.uy());
      assertEquals(2141, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotSame(rOI0, rOI1);
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int13 == int6);
      assertFalse(int13 == int4);
      assertTrue(int13 == int0);
      assertFalse(int13 == int2);
      assertFalse(int13 == int5);
      assertTrue(int13 == int12);
      assertTrue(int13 == int9);
      assertFalse(int13 == int3);
      assertTrue(int13 == int11);
      assertFalse(int13 == int10);
      assertFalse(int13 == int8);
      assertFalse(int13 == int7);
      assertFalse(int13 == int1);
      assertEquals(2141, int13);
      
      Integer integer1 = new Integer(3159);
      assertFalse(integer1.equals((Object)int4));
      assertFalse(integer1.equals((Object)int13));
      assertTrue(integer1.equals((Object)int10));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int6));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)int12));
      assertFalse(integer1.equals((Object)int8));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int9));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int7));
      assertFalse(integer1.equals((Object)int11));
      assertFalse(integer1.equals((Object)int5));
      assertEquals(3159, (int)integer1);
      assertNotNull(integer1);
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2141
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1073);
      intArray0[1] = (-1073);
      ColorModel colorModel0 = ColorModel.HSV;
      colorImage0.setColorModel(colorModel0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.HSV, colorImage0.getColorModel());
      
      intArray0[3] = (-1073);
      // Undeclared exception!
      try { 
        colorImage0.divide((-1073), (-1073), intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      Integer integer0 = new Integer((-2));
      assertEquals((-2), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(400, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(0);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      rOI1.setROI((-2), (-2), (-2), 0);
      assertEquals((-2), rOI1.uy());
      assertEquals((-2), rOI1.ux());
      assertEquals((-2), rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(3, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((-72), 1886, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -72
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1130, 1130);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(1130, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(1130, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = Integer.valueOf(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-30000), (int)integer1);
      assertNotNull(integer1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, 1, 3181, 3181);
      assertEquals(3181, rOI0.lx());
      assertEquals(3181, rOI0.ly());
      assertEquals(3181, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(3182, rOI0.X());
      assertEquals(0, rOI0.ux());
      
      Integer integer2 = JLayeredPane.PALETTE_LAYER;
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(100, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = new Integer(1442);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(1442, (int)integer3);
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(1);
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertEquals(1, (int)integer4);
      assertNotNull(integer4);
      
      Integer integer5 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertEquals(400, (int)integer5);
      assertNotNull(integer5);
      
      Integer integer6 = new Integer(2258);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertEquals(2258, (int)integer6);
      assertNotNull(integer6);
      
      Integer integer7 = JLayeredPane.PALETTE_LAYER;
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertEquals(100, (int)integer7);
      assertNotNull(integer7);
      
      Integer integer8 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer0));
      assertEquals(400, (int)integer8);
      assertNotNull(integer8);
      
      ROI rOI1 = new ROI(2974, 1, 3181, 0);
      assertEquals(2, rOI1.Y());
      assertEquals(3181, rOI1.lx());
      assertEquals(208, rOI1.X());
      assertEquals(1, rOI1.ly());
      assertEquals(2974, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set((-3914), 3181, integerArray0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3181
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int int0 = 1115;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(1115, 1115, (-500), (-500));
      assertEquals((-500), rOI0.uy());
      assertEquals((-500), rOI0.ux());
      assertEquals(1115, rOI0.lx());
      assertEquals(1616, rOI0.Y());
      assertEquals(1115, rOI0.ly());
      assertEquals(1616, rOI0.X());
      assertNotNull(rOI0);
      
      int int1 = rOI0.ux();
      assertEquals((-500), rOI0.uy());
      assertEquals((-500), rOI0.ux());
      assertEquals(1115, rOI0.lx());
      assertEquals(1616, rOI0.Y());
      assertEquals(1115, rOI0.ly());
      assertEquals(1616, rOI0.X());
      assertFalse(int1 == int0);
      assertEquals((-500), int1);
      
      int int2 = rOI0.lx();
      assertEquals((-500), rOI0.uy());
      assertEquals((-500), rOI0.ux());
      assertEquals(1115, rOI0.lx());
      assertEquals(1616, rOI0.Y());
      assertEquals(1115, rOI0.ly());
      assertEquals(1616, rOI0.X());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1115, int2);
      
      int int3 = 0;
      rOI0.setROI(1115, 0, (-500), 0);
      assertEquals(0, rOI0.uy());
      assertEquals((-500), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(1115, rOI0.lx());
      assertEquals(1616, rOI0.X());
      
      int int4 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals((-500), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(1115, rOI0.lx());
      assertEquals(1616, rOI0.X());
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals((-500), int4);
      
      int int5 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals((-500), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(1115, rOI0.lx());
      assertEquals(1616, rOI0.X());
      assertTrue(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertTrue(int5 == int2);
      assertFalse(int5 == int3);
      assertEquals(1115, int5);
      
      int int6 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals((-500), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(1115, rOI0.lx());
      assertEquals(1616, rOI0.X());
      assertTrue(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int5);
      assertEquals((-500), int6);
      
      Integer integer0 = new Integer((-500));
      assertTrue(integer0.equals((Object)int6));
      assertTrue(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int5));
      assertEquals((-500), (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      int int1 = (-16777216);
      // Undeclared exception!
      interpolatedColorImage0.addbuffer(0, 1853, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(255, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(255, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 255;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      ColorImage colorImage1 = colorImage0.addbuffer(0, 0, intArray0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(255, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertArrayEquals(new int[] {255, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(colorImage1);
      
      int int4 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 0;
      // Undeclared exception!
      try { 
        colorImage0.addbuffer(0, 0, 0, 3306, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1130, 1130);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(1130, interpolatedColorImage0.X());
      assertEquals(1130, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = Integer.valueOf(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(1);
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf((-637));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-637), (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(400, (int)integer3);
      assertNotNull(integer3);
      
      byte byte0 = integer3.byteValue();
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals((byte) (-112), byte0);
      
      integerArray0[0] = integer3;
      Integer integer4 = JLayeredPane.PALETTE_LAYER;
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(100, (int)integer4);
      assertNotNull(integer4);
      
      // Undeclared exception!
      interpolatedColorImage0.copy();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = null;
      try {
        interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 8);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(8, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage((ColorImage) interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(8, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(8, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      
      InterpolatedColorImage interpolatedColorImage2 = new InterpolatedColorImage(interpolatedColorImage1);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(8, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(8, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(8, interpolatedColorImage2.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage2.X());
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage1));
      assertNotNull(interpolatedColorImage2);
      
      int int0 = (-16777216);
      int int1 = 0;
      int int2 = (-674);
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int3 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      int int4 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(0, int4);
      
      int int5 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertFalse(int5 == int2);
      assertTrue(int5 == int1);
      assertFalse(int5 == int0);
      assertEquals(0, int5);
      
      int int6 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int6 == int4);
      assertFalse(int6 == int2);
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertFalse(int6 == int0);
      assertTrue(int6 == int1);
      assertEquals(0, int6);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage2.InitFromImage((Image) null, (-99), (-674), 0, 1767);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.PixelGrabber", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      String string0 = colorImage0.toString();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertNotNull(string0);
      
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      Integer integer0 = colorImage0.maxComponent();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNull(integer0);
      
      // Undeclared exception!
      try { 
        colorImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = 0;
      ColorImage colorImage1 = null;
      try {
        colorImage1 = new ColorImage(colorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = 0;
      rOI0.setROI(0, 0, 0, 0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        colorImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = colorImage0.X();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, int0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertFalse(integer0.equals((Object)int0));
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(400, (int)integer1);
      assertNotNull(integer1);
      
      ROI rOI0 = new ROI(1115, 1, 1115, (-2885));
      assertEquals(2887, rOI0.Y());
      assertEquals(1115, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-2885), rOI0.uy());
      assertEquals(1, rOI0.ly());
      assertEquals(1115, rOI0.ux());
      assertNotNull(rOI0);
      
      int int1 = 0;
      rOI0.setROI(1, 0, (-2885), 1115);
      assertEquals(2887, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(1116, rOI0.Y());
      assertEquals(1115, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals((-2885), rOI0.ux());
      
      ColorImage colorImage1 = new ColorImage();
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.X());
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertNotNull(colorImage1);
      
      ColorImage colorImage2 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage2.getColorModel());
      assertEquals(0, colorImage2.Y());
      assertEquals(0, colorImage2.X());
      assertFalse(colorImage2.equals((Object)colorImage1));
      assertFalse(colorImage2.equals((Object)colorImage0));
      assertNotNull(colorImage2);
      
      // Undeclared exception!
      try { 
        colorImage2.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int int0 = (-1653);
      int int1 = (-16777216);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1653);
      intArray0[1] = 2050;
      intArray0[2] = (-16777216);
      intArray0[3] = (-16777216);
      intArray0[4] = (-1653);
      intArray0[5] = 8;
      intArray0[6] = (-16777216);
      intArray0[7] = (-16777216);
      // Undeclared exception!
      try { 
        colorImage0.addbuffer((-1653), (-1653), intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1130;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1130, 1130);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(1130, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(1130, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      Integer integer0 = Integer.valueOf(1130);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1130, (int)integer0);
      assertNotNull(integer0);
      
      int int1 = interpolatedColorImage0.X();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(1130, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(1130, interpolatedColorImage0.X());
      assertTrue(int1 == int0);
      assertEquals(1130, int1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(1130, (-1), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1130
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(255, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(255, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      
      int int4 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      
      int int5 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertEquals(0, int5);
      
      // Undeclared exception!
      try { 
        colorImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 1153;
      int int1 = (-154);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      int int0 = 0;
      int int1 = 0;
      // Undeclared exception!
      try { 
        colorImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(255, 0);
      assertEquals(0, colorImage0.Y());
      assertEquals(255, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      int int4 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 255;
      intArray0[4] = 0;
      intArray0[5] = 0;
      ColorImage colorImage1 = colorImage0.multiply(intArray0);
      assertEquals(0, colorImage0.Y());
      assertEquals(255, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(255, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      assertArrayEquals(new int[] {0, 0, 0, 255, 0, 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(colorImage1);
      
      // Undeclared exception!
      try { 
        colorImage1.subtract(228, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 228
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1130, 1130);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(1130, interpolatedColorImage0.Y());
      assertEquals(1130, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = new Integer[8];
      int int0 = 1;
      Integer integer0 = Integer.valueOf(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(1);
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf((-637));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-637), (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(400, (int)integer3);
      assertNotNull(integer3);
      
      byte byte0 = integer3.byteValue();
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals((byte) (-112), byte0);
      
      integerArray0[0] = integer3;
      Integer integer4 = JLayeredPane.PALETTE_LAYER;
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(100, (int)integer4);
      assertNotNull(integer4);
      
      integerArray0[1] = integer4;
      int int1 = 0;
      Integer integer5 = new Integer(0);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertTrue(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals(0, (int)integer5);
      assertNotNull(integer5);
      
      integerArray0[2] = integer5;
      Integer integer6 = new Integer(1);
      assertTrue(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer4));
      assertTrue(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer3));
      assertTrue(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer2));
      assertEquals(1, (int)integer6);
      assertNotNull(integer6);
      
      integerArray0[3] = integerArray0[1];
      Integer integer7 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertEquals(400, (int)integer7);
      assertNotNull(integer7);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, 0, 2215, 3801);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(3802, rOI0.Y());
      assertEquals(2215, rOI0.lx());
      assertEquals(2216, rOI0.X());
      assertEquals(3801, rOI0.ly());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(7, 7);
      assertEquals(7, colorImage0.X());
      assertEquals(7, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI(1168, 1168, 1168, 0);
      assertEquals(0, rOI0.uy());
      assertEquals(1168, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1169, rOI0.Y());
      assertEquals(1168, rOI0.ly());
      assertEquals(1168, rOI0.lx());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1168, 7);
      assertEquals(1168, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(7, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = (-4675);
      int int1 = 3985;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(8, 8);
      assertEquals(8, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(8, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(11, 2, 0, 11);
      assertEquals(11, rOI0.lx());
      assertEquals(11, rOI0.ly());
      assertEquals(2, rOI0.uy());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(12, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(11, rOI0.lx());
      assertEquals(11, rOI0.ly());
      assertEquals(2, rOI0.uy());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(12, rOI0.X());
      assertEquals(12, int0);
      
      int int1 = rOI0.Y();
      assertEquals(11, rOI0.lx());
      assertEquals(11, rOI0.ly());
      assertEquals(2, rOI0.uy());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(12, rOI0.X());
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 12;
      intArray0[2] = 0;
      intArray0[3] = 11;
      intArray0[4] = 12;
      intArray0[5] = 2;
      intArray0[6] = 10;
      ColorImage colorImage0 = interpolatedColorImage0.addbuffer(10, 0, intArray0);
      assertEquals(8, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(8, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, colorImage0.Y());
      assertEquals(10, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertArrayEquals(new int[] {0, 12, 0, 11, 12, 2, 10}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(colorImage0);
      
      int int2 = colorImage0.X();
      assertEquals(8, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(8, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, colorImage0.Y());
      assertEquals(10, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new int[] {0, 12, 0, 11, 12, 2, 10}, intArray0);
      assertEquals(10, int2);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 2);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI(11, 2, 0, 11);
      assertEquals(2, rOI0.uy());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(12, rOI0.X());
      assertEquals(11, rOI0.lx());
      assertEquals(11, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(2, rOI0.uy());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(12, rOI0.X());
      assertEquals(11, rOI0.lx());
      assertEquals(11, rOI0.ly());
      assertEquals(12, int0);
      
      int int1 = rOI0.Y();
      assertEquals(2, rOI0.uy());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(12, rOI0.X());
      assertEquals(11, rOI0.lx());
      assertEquals(11, rOI0.ly());
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      int int2 = rOI0.uy();
      assertEquals(2, rOI0.uy());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(12, rOI0.X());
      assertEquals(11, rOI0.lx());
      assertEquals(11, rOI0.ly());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2, int2);
      
      int int3 = rOI0.X();
      assertEquals(2, rOI0.uy());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(12, rOI0.X());
      assertEquals(11, rOI0.lx());
      assertEquals(11, rOI0.ly());
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(12, int3);
      
      int int4 = rOI0.Y();
      assertEquals(2, rOI0.uy());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(12, rOI0.X());
      assertEquals(11, rOI0.lx());
      assertEquals(11, rOI0.ly());
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(10, int4);
      
      int int5 = rOI0.Y();
      assertEquals(2, rOI0.uy());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(12, rOI0.X());
      assertEquals(11, rOI0.lx());
      assertEquals(11, rOI0.ly());
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertTrue(int5 == int4);
      assertFalse(int5 == int2);
      assertTrue(int5 == int1);
      assertEquals(10, int5);
      
      Integer integer0 = colorImage0.minComponent();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertNull(integer0);
      
      int int6 = rOI0.uy();
      assertEquals(2, rOI0.uy());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(12, rOI0.X());
      assertEquals(11, rOI0.lx());
      assertEquals(11, rOI0.ly());
      assertTrue(int6 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertEquals(2, int6);
      
      rOI0.setROI(12, 0, 12, 2452);
      assertEquals(12, rOI0.ux());
      assertEquals(2452, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(12, rOI0.lx());
      assertEquals(2453, rOI0.Y());
      
      int int7 = rOI0.X();
      assertEquals(12, rOI0.ux());
      assertEquals(2452, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(12, rOI0.lx());
      assertEquals(2453, rOI0.Y());
      assertFalse(int7 == int2);
      assertFalse(int7 == int4);
      assertFalse(int7 == int6);
      assertFalse(int7 == int5);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int0);
      assertEquals(1, int7);
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(0, 0, 0, 2, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.minComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[7];
      intArray0[3] = 0;
      String string0 = colorImage0.toString();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertNotNull(string0);
      
      intArray0[3] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      ColorImage colorImage1 = colorImage0.copy();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertNotNull(colorImage1);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = integer0;
      integerArray0[2] = (Integer) 0;
      ColorImage colorImage2 = colorImage1.clear(integerArray0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage2.Y());
      assertEquals(0, colorImage2.X());
      assertEquals(ColorModel.RGB, colorImage2.getColorModel());
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage0, colorImage2);
      assertSame(colorImage1, colorImage2);
      assertNotSame(colorImage1, colorImage0);
      assertSame(colorImage2, colorImage1);
      assertNotSame(colorImage2, colorImage0);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertFalse(colorImage2.equals((Object)colorImage0));
      assertEquals(3, integerArray0.length);
      assertNotNull(colorImage2);
      
      // Undeclared exception!
      try { 
        colorImage0.addbuffer(Integer.MIN_VALUE, 0, (-1513), 0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1130, 1130);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(1130, interpolatedColorImage0.X());
      assertEquals(1130, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = Integer.valueOf(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      ROI rOI0 = new ROI(1130, 532, 1130, 0);
      assertEquals(0, rOI0.uy());
      assertEquals(1130, rOI0.lx());
      assertEquals(532, rOI0.ly());
      assertEquals(1130, rOI0.ux());
      assertEquals(533, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(1130, rOI0.lx());
      assertEquals(532, rOI0.ly());
      assertEquals(1130, rOI0.ux());
      assertEquals(533, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.uy());
      assertEquals(1130, rOI0.lx());
      assertEquals(532, rOI0.ly());
      assertEquals(1130, rOI0.ux());
      assertEquals(533, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(int1 == int0);
      assertEquals(533, int1);
      
      int int2 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(1130, rOI0.lx());
      assertEquals(532, rOI0.ly());
      assertEquals(1130, rOI0.ux());
      assertEquals(533, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(1130, rOI0.lx());
      assertEquals(532, rOI0.ly());
      assertEquals(1130, rOI0.ux());
      assertEquals(533, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      int int4 = rOI0.Y();
      assertEquals(0, rOI0.uy());
      assertEquals(1130, rOI0.lx());
      assertEquals(532, rOI0.ly());
      assertEquals(1130, rOI0.ux());
      assertEquals(533, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(533, int4);
      
      int int5 = rOI0.Y();
      assertEquals(0, rOI0.uy());
      assertEquals(1130, rOI0.lx());
      assertEquals(532, rOI0.ly());
      assertEquals(1130, rOI0.ux());
      assertEquals(533, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertEquals(533, int5);
      
      // Undeclared exception!
      interpolatedColorImage0.minComponent();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1073);
      intArray0[1] = (-1073);
      intArray0[2] = 8;
      ColorModel colorModel0 = ColorModel.HSV;
      colorImage0.setColorModel(colorModel0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.HSV, colorImage0.getColorModel());
      
      intArray0[3] = (-1073);
      // Undeclared exception!
      try { 
        colorImage0.divide((-1073), (-1073), intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[5];
      intArray0[3] = 0;
      String string0 = colorImage0.toString();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertNotNull(string0);
      
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      ColorImage colorImage1 = colorImage0.copy();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertNotNull(colorImage1);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        colorImage0.clear(integerArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 2141;
      ColorImage colorImage0 = new ColorImage(2141, 2141);
      assertEquals(2141, colorImage0.X());
      assertEquals(2141, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2141;
      intArray0[1] = 2141;
      intArray0[2] = 2141;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      rOI0.setROI(2141, 2141, 3159, 2141);
      assertEquals(1019, rOI0.X());
      assertEquals(3159, rOI0.lx());
      assertEquals(2141, rOI0.ux());
      assertEquals(2141, rOI0.uy());
      assertEquals(2141, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.ux();
      assertEquals(1019, rOI0.X());
      assertEquals(3159, rOI0.lx());
      assertEquals(2141, rOI0.ux());
      assertEquals(2141, rOI0.uy());
      assertEquals(2141, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int1 == int0);
      assertEquals(2141, int1);
      
      int int2 = rOI0.ly();
      assertEquals(1019, rOI0.X());
      assertEquals(3159, rOI0.lx());
      assertEquals(2141, rOI0.ux());
      assertEquals(2141, rOI0.uy());
      assertEquals(2141, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2141, int2);
      
      int int3 = rOI0.ux();
      assertEquals(1019, rOI0.X());
      assertEquals(3159, rOI0.lx());
      assertEquals(2141, rOI0.ux());
      assertEquals(2141, rOI0.uy());
      assertEquals(2141, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(2141, int3);
      
      int int4 = rOI0.lx();
      assertEquals(1019, rOI0.X());
      assertEquals(3159, rOI0.lx());
      assertEquals(2141, rOI0.ux());
      assertEquals(2141, rOI0.uy());
      assertEquals(2141, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(3159, int4);
      
      rOI0.setROI(2141, 2141, 0, 2141);
      assertEquals(2142, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(2141, rOI0.uy());
      assertEquals(2141, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(2141, rOI0.lx());
      
      int int5 = rOI0.ux();
      assertEquals(2142, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(2141, rOI0.uy());
      assertEquals(2141, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(2141, rOI0.lx());
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertEquals(0, int5);
      
      int int6 = rOI0.lx();
      assertEquals(2142, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(2141, rOI0.uy());
      assertEquals(2141, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(2141, rOI0.lx());
      assertFalse(int6 == int4);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertFalse(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertEquals(2141, int6);
      
      int int7 = rOI0.ux();
      assertEquals(2142, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(2141, rOI0.uy());
      assertEquals(2141, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(2141, rOI0.lx());
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      assertFalse(int7 == int2);
      assertTrue(int7 == int5);
      assertFalse(int7 == int0);
      assertEquals(0, int7);
      
      int int8 = rOI0.lx();
      assertEquals(2142, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(2141, rOI0.uy());
      assertEquals(2141, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(2141, rOI0.lx());
      assertTrue(int8 == int2);
      assertTrue(int8 == int0);
      assertFalse(int8 == int7);
      assertTrue(int8 == int3);
      assertTrue(int8 == int1);
      assertTrue(int8 == int6);
      assertFalse(int8 == int5);
      assertFalse(int8 == int4);
      assertEquals(2141, int8);
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2141
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      int int0 = colorImage0.Y();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 8;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 8);
      assertEquals(8, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage((ColorImage) interpolatedColorImage0);
      assertEquals(8, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(8, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      
      InterpolatedColorImage interpolatedColorImage2 = new InterpolatedColorImage(interpolatedColorImage1);
      assertEquals(8, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(8, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(8, interpolatedColorImage2.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage1));
      assertNotNull(interpolatedColorImage2);
      
      int int1 = (-16777216);
      int int2 = (-674);
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int3 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      
      int int4 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(0, int4);
      
      int int5 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertTrue(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertTrue(int5 == int3);
      assertFalse(int5 == int0);
      assertEquals(0, int5);
      
      int int6 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertFalse(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertEquals(0, int6);
      
      int int7 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertTrue(int7 == int4);
      assertTrue(int7 == int6);
      assertTrue(int7 == int5);
      assertFalse(int7 == int0);
      assertTrue(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertEquals(0, int7);
      
      int int8 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertTrue(int8 == int6);
      assertFalse(int8 == int2);
      assertTrue(int8 == int7);
      assertFalse(int8 == int1);
      assertTrue(int8 == int4);
      assertTrue(int8 == int3);
      assertFalse(int8 == int0);
      assertTrue(int8 == int5);
      assertEquals(0, int8);
      
      int int9 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertTrue(int9 == int7);
      assertTrue(int9 == int4);
      assertFalse(int9 == int1);
      assertFalse(int9 == int2);
      assertTrue(int9 == int3);
      assertTrue(int9 == int8);
      assertFalse(int9 == int0);
      assertTrue(int9 == int5);
      assertTrue(int9 == int6);
      assertEquals(0, int9);
      
      int int10 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertTrue(int10 == int6);
      assertTrue(int10 == int7);
      assertFalse(int10 == int2);
      assertFalse(int10 == int1);
      assertTrue(int10 == int4);
      assertTrue(int10 == int5);
      assertFalse(int10 == int0);
      assertTrue(int10 == int3);
      assertTrue(int10 == int8);
      assertTrue(int10 == int9);
      assertEquals(0, int10);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage2.multiply((-16777216), 0, (-674), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 2);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI(11, 2, 0, 11);
      assertEquals(12, rOI0.X());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(2, rOI0.uy());
      assertEquals(11, rOI0.ly());
      assertEquals(11, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(12, rOI0.X());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(2, rOI0.uy());
      assertEquals(11, rOI0.ly());
      assertEquals(11, rOI0.lx());
      assertEquals(12, int0);
      
      int int1 = rOI0.Y();
      assertEquals(12, rOI0.X());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(2, rOI0.uy());
      assertEquals(11, rOI0.ly());
      assertEquals(11, rOI0.lx());
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      int int2 = rOI0.uy();
      assertEquals(12, rOI0.X());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(2, rOI0.uy());
      assertEquals(11, rOI0.ly());
      assertEquals(11, rOI0.lx());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, int2);
      
      int int3 = rOI0.X();
      assertEquals(12, rOI0.X());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(2, rOI0.uy());
      assertEquals(11, rOI0.ly());
      assertEquals(11, rOI0.lx());
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(12, int3);
      
      int int4 = rOI0.Y();
      assertEquals(12, rOI0.X());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(2, rOI0.uy());
      assertEquals(11, rOI0.ly());
      assertEquals(11, rOI0.lx());
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertEquals(10, int4);
      
      int int5 = rOI0.Y();
      assertEquals(12, rOI0.X());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(2, rOI0.uy());
      assertEquals(11, rOI0.ly());
      assertEquals(11, rOI0.lx());
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      assertEquals(10, int5);
      
      Integer integer0 = colorImage0.minComponent();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertNull(integer0);
      
      int int6 = rOI0.uy();
      assertEquals(12, rOI0.X());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(2, rOI0.uy());
      assertEquals(11, rOI0.ly());
      assertEquals(11, rOI0.lx());
      assertTrue(int6 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertEquals(2, int6);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 2;
      ColorImage colorImage1 = colorImage0.addbuffer(2, 6, (-1889), (-2586), intArray0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertEquals(2, colorImage1.X());
      assertEquals(6, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertArrayEquals(new int[] {0, 2, 2}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(colorImage1);
      
      rOI0.setROI(12, 0, 12, 2452);
      assertEquals(1, rOI0.X());
      assertEquals(2453, rOI0.Y());
      assertEquals(12, rOI0.ux());
      assertEquals(2452, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(12, rOI0.lx());
      
      int int7 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(2453, rOI0.Y());
      assertEquals(12, rOI0.ux());
      assertEquals(2452, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(12, rOI0.lx());
      assertFalse(int7 == int0);
      assertFalse(int7 == int1);
      assertFalse(int7 == int3);
      assertFalse(int7 == int4);
      assertFalse(int7 == int5);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertEquals(1, int7);
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(0, 0, 0, 2, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(255, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(255, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      int int4 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertEquals(0, int4);
      
      int int5 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertEquals(0, int5);
      
      int int6 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertEquals(0, int6);
      
      int int7 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int7 == int5);
      assertTrue(int7 == int3);
      assertTrue(int7 == int0);
      assertTrue(int7 == int2);
      assertTrue(int7 == int6);
      assertTrue(int7 == int1);
      assertTrue(int7 == int4);
      assertEquals(0, int7);
      
      // Undeclared exception!
      try { 
        colorImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      rOI0.setROI(3687, 3687, 1493, 4258);
      assertEquals(2195, rOI0.X());
      assertEquals(3687, rOI0.lx());
      assertEquals(572, rOI0.Y());
      assertEquals(4258, rOI0.ly());
      assertEquals(1493, rOI0.ux());
      assertEquals(3687, rOI0.uy());
      
      rOI0.setROI(0, (-2224), 0, (-447));
      assertEquals(1778, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-447), rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((-2224), rOI0.uy());
      assertEquals(1, rOI0.X());
      
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.get((-3917), 1460);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int int0 = 3976;
      ROI rOI0 = new ROI(3976, 1115, 1115, 1115);
      assertEquals(1115, rOI0.ux());
      assertEquals(1115, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1115, rOI0.uy());
      assertEquals(2862, rOI0.X());
      assertEquals(3976, rOI0.lx());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get(3976, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1130, 1130);
      assertEquals(1130, interpolatedColorImage0.Y());
      assertEquals(1130, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = Integer.valueOf(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(1);
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(400, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = JLayeredPane.PALETTE_LAYER;
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(100, (int)integer3);
      assertNotNull(integer3);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, (-16777216), 0, 0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(16777217, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(16, 0, (-2922), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      Integer integer0 = colorImage0.maxComponent();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNull(integer0);
      
      ColorImage colorImage1 = colorImage0.divide(0, 0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      assertNotNull(colorImage1);
      
      ColorConvertOp colorConvertOp0 = null;
      try {
        colorConvertOp0 = new ColorConvertOp((RenderingHints) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(2141, 2141);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2141, colorImage0.Y());
      assertEquals(2141, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      rOI0.setROI(2141, 8, 1693, 141);
      assertEquals(1693, rOI0.ux());
      assertEquals(134, rOI0.Y());
      assertEquals(8, rOI0.uy());
      assertEquals(141, rOI0.ly());
      assertEquals(449, rOI0.X());
      assertEquals(2141, rOI0.lx());
      
      rOI0.setROI(1493, 4258, 3687, 1693);
      assertEquals(4258, rOI0.ly());
      assertEquals(1693, rOI0.uy());
      assertEquals(2566, rOI0.Y());
      assertEquals(2195, rOI0.X());
      assertEquals(1493, rOI0.ux());
      assertEquals(3687, rOI0.lx());
      
      ColorImage colorImage1 = new ColorImage();
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertNotNull(colorImage1);
      
      // Undeclared exception!
      try { 
        colorImage1.get(4258, 1493);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.multiply((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ColorImage colorImage1 = new ColorImage(0, 0);
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertNotNull(colorImage1);
      
      int int0 = 1162;
      ROI rOI0 = new ROI(1162, 1162, 1162, 0);
      assertEquals(1, rOI0.X());
      assertEquals(1162, rOI0.lx());
      assertEquals(1162, rOI0.ly());
      assertEquals(1162, rOI0.ux());
      assertEquals(1163, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.add(colorImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      Integer integer0 = Integer.valueOf(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, 236, 0, 0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(237, rOI0.Y());
      assertEquals(236, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((ColorImage) interpolatedColorImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.byteSize(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(906, 906, 593, 906);
      assertEquals(1, rOI0.Y());
      assertEquals(906, rOI0.ly());
      assertEquals(906, rOI0.lx());
      assertEquals(593, rOI0.ux());
      assertEquals(314, rOI0.X());
      assertEquals(906, rOI0.uy());
      assertNotNull(rOI0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      assertNotNull(integer0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int0 = (-1772);
      rOI0.setROI(906, 0, 0, 150);
      assertEquals(906, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(907, rOI0.X());
      assertEquals(150, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(151, rOI0.Y());
      assertNotSame(rOI0, rOI1);
      assertFalse(rOI0.equals((Object)rOI1));
      
      int[] intArray0 = interpolatedColorImage0.addSum();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      
      InterpolatedColorImage interpolatedColorImage1 = null;
      try {
        interpolatedColorImage1 = new InterpolatedColorImage((-2364), 1963);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(8, 8);
      assertEquals(8, interpolatedColorImage0.Y());
      assertEquals(8, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(11, 2, 0, 11);
      assertEquals(12, rOI0.X());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(11, rOI0.ly());
      assertEquals(2, rOI0.uy());
      assertEquals(11, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(12, rOI0.X());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(11, rOI0.ly());
      assertEquals(2, rOI0.uy());
      assertEquals(11, rOI0.lx());
      assertEquals(12, int0);
      
      int int1 = rOI0.Y();
      assertEquals(12, rOI0.X());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(11, rOI0.ly());
      assertEquals(2, rOI0.uy());
      assertEquals(11, rOI0.lx());
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      int int2 = rOI0.uy();
      assertEquals(12, rOI0.X());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(11, rOI0.ly());
      assertEquals(2, rOI0.uy());
      assertEquals(11, rOI0.lx());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, int2);
      
      int int3 = rOI0.X();
      assertEquals(12, rOI0.X());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(11, rOI0.ly());
      assertEquals(2, rOI0.uy());
      assertEquals(11, rOI0.lx());
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(12, int3);
      
      int int4 = rOI0.Y();
      assertEquals(12, rOI0.X());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(11, rOI0.ly());
      assertEquals(2, rOI0.uy());
      assertEquals(11, rOI0.lx());
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(10, int4);
      
      int int5 = rOI0.Y();
      assertEquals(12, rOI0.X());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(11, rOI0.ly());
      assertEquals(2, rOI0.uy());
      assertEquals(11, rOI0.lx());
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertTrue(int5 == int1);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertEquals(10, int5);
      
      int int6 = rOI0.uy();
      assertEquals(12, rOI0.X());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(11, rOI0.ly());
      assertEquals(2, rOI0.uy());
      assertEquals(11, rOI0.lx());
      assertFalse(int6 == int5);
      assertTrue(int6 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertEquals(2, int6);
      
      int int7 = rOI0.X();
      assertEquals(12, rOI0.X());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(11, rOI0.ly());
      assertEquals(2, rOI0.uy());
      assertEquals(11, rOI0.lx());
      assertFalse(int7 == int2);
      assertTrue(int7 == int3);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      assertFalse(int7 == int5);
      assertTrue(int7 == int0);
      assertFalse(int7 == int1);
      assertEquals(12, int7);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(8, 8, 8, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      
      int int0 = interpolatedColorImage1.X();
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(0, int0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage1.multiply(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int int1 = 906;
      int int2 = 593;
      ROI rOI0 = new ROI(906, 906, 593, 906);
      assertEquals(906, rOI0.uy());
      assertEquals(314, rOI0.X());
      assertEquals(906, rOI0.ly());
      assertEquals(906, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(593, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((ColorImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int int0 = (-1073);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1073);
      intArray0[1] = (-1073);
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(8, (-1), intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 1130;
      ColorImage colorImage0 = new ColorImage(1130, 1130);
      assertEquals(1130, colorImage0.X());
      assertEquals(1130, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI(1130, 1130, 1130, 1130);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1130, rOI0.uy());
      assertEquals(1130, rOI0.ux());
      assertEquals(1130, rOI0.ly());
      assertEquals(1130, rOI0.lx());
      assertNotNull(rOI0);
      
      int int1 = 255;
      // Undeclared exception!
      try { 
        colorImage0.multiply(255, 255, 1130, 1130, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage((-16777216), (-16777216));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[5];
      intArray0[3] = 0;
      String string0 = colorImage0.toString();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertNotNull(string0);
      
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      ColorImage colorImage1 = colorImage0.copy();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertNotNull(colorImage1);
      
      ColorImage colorImage2 = colorImage1.copy();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage2.Y());
      assertEquals(0, colorImage2.X());
      assertEquals(ColorModel.RGB, colorImage2.getColorModel());
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage0, colorImage2);
      assertNotSame(colorImage1, colorImage0);
      assertNotSame(colorImage1, colorImage2);
      assertNotSame(colorImage2, colorImage1);
      assertNotSame(colorImage2, colorImage0);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertFalse(colorImage2.equals((Object)colorImage1));
      assertFalse(colorImage2.equals((Object)colorImage0));
      assertNotNull(colorImage2);
      
      Integer integer0 = colorImage0.maxComponent();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage0, colorImage2);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertFalse(colorImage0.equals((Object)colorImage2));
      assertNull(integer0);
      
      // Undeclared exception!
      try { 
        colorImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-1653);
      intArray0[1] = 2050;
      intArray0[2] = (-16777216);
      intArray0[3] = (-16777216);
      intArray0[4] = (-1653);
      intArray0[5] = 8;
      intArray0[6] = (-16777216);
      intArray0[7] = (-16777216);
      intArray0[8] = (-16777216);
      // Undeclared exception!
      try { 
        colorImage0.addbuffer((-1653), (-1653), (-16777216), (-1653), intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      rOI0.setROI(3687, 3687, 1493, 4258);
      assertEquals(1493, rOI0.ux());
      assertEquals(572, rOI0.Y());
      assertEquals(3687, rOI0.lx());
      assertEquals(4258, rOI0.ly());
      assertEquals(3687, rOI0.uy());
      assertEquals(2195, rOI0.X());
      
      rOI0.setROI(0, (-2224), 0, (-447));
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals((-2224), rOI0.uy());
      assertEquals((-447), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1778, rOI0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((-2224), 0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      ROI rOI1 = new ROI(11, 2, 0, 11);
      assertEquals(10, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(12, rOI1.X());
      assertEquals(2, rOI1.uy());
      assertEquals(11, rOI1.lx());
      assertEquals(11, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int0 = rOI1.X();
      assertEquals(10, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(12, rOI1.X());
      assertEquals(2, rOI1.uy());
      assertEquals(11, rOI1.lx());
      assertEquals(11, rOI1.ly());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(12, int0);
      
      int int1 = rOI1.Y();
      assertEquals(10, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(12, rOI1.X());
      assertEquals(2, rOI1.uy());
      assertEquals(11, rOI1.lx());
      assertEquals(11, rOI1.ly());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertEquals(10, int1);
      
      int int2 = rOI1.uy();
      assertEquals(10, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(12, rOI1.X());
      assertEquals(2, rOI1.uy());
      assertEquals(11, rOI1.lx());
      assertEquals(11, rOI1.ly());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, int2);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(3103, 0, 2, 5, 3103);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ColorImage colorImage0 = new ColorImage(7, 7);
      assertEquals(7, colorImage0.X());
      assertEquals(7, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI(1162, 1162, 1162, 0);
      assertEquals(1, rOI0.X());
      assertEquals(1162, rOI0.lx());
      assertEquals(1162, rOI0.ly());
      assertEquals(1163, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(1162, rOI0.ux());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(1162, 7);
      assertEquals(7, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(1162, interpolatedColorImage1.X());
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      
      int int0 = (-4675);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(1162, (-4675));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1162
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 0;
      int int1 = colorImage0.X();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(16, 0, (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(7, 7);
      assertEquals(7, colorImage0.X());
      assertEquals(7, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI(7, 7, 7, 7);
      assertEquals(7, rOI0.ly());
      assertEquals(7, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(7, rOI0.ux());
      assertEquals(7, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(7, 7);
      assertEquals(7, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(7, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 3985;
      // Undeclared exception!
      try { 
        colorImage0.subtract(3985, (-4675));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3985
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(2141, 2141);
      assertEquals(2141, colorImage0.X());
      assertEquals(2141, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = 4258;
      int int1 = (-1720);
      // Undeclared exception!
      try { 
        colorImage0.multiply((-1720), 1034, 10, 0, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1720
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      
      int int0 = interpolatedColorImage1.X();
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(0, int0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(Integer.MAX_VALUE, 0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 0;
      int int1 = (-1);
      int int2 = 3760;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(0, 0, 0, (-1), 3760);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI(3976, 1115, 1115, 1115);
      assertEquals(3976, rOI0.lx());
      assertEquals(2862, rOI0.X());
      assertEquals(1115, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1115, rOI0.ux());
      assertEquals(1115, rOI0.uy());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get(3976, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = colorImage0.X();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, int0);
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertFalse(integer0.equals((Object)int0));
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(400, (int)integer1);
      assertNotNull(integer1);
      
      ROI rOI0 = new ROI(1115, 1, 1115, (-2885));
      assertEquals(1115, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals((-2885), rOI0.uy());
      assertEquals(2887, rOI0.Y());
      assertEquals(1115, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(Integer.MAX_VALUE, 0, 0, 1, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = (-9);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int1 = (-6149);
      rOI0.setROI((-9), (-6149), 2077, (-9));
      assertEquals(2087, rOI0.X());
      assertEquals((-9), rOI0.ly());
      assertEquals(2077, rOI0.lx());
      assertEquals(6141, rOI0.Y());
      assertEquals((-9), rOI0.ux());
      assertEquals((-6149), rOI0.uy());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-6149), 2367);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -6149
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      ColorImage colorImage1 = new ColorImage(0, 0);
      ROI rOI0 = new ROI(1162, 1162, 1162, 0);
      ColorImage colorImage2 = new ColorImage(colorImage1);
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 4312;
      intArray0[1] = 110;
      intArray0[2] = 0;
      intArray0[3] = 3332;
      intArray0[4] = 3332;
      // Undeclared exception!
      colorImage2.addbuffer(1162, 1162, 110, 4312, intArray0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      interpolatedColorImage0.X();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      ROI rOI0 = new ROI(402, (-2885), (-2885), 3268);
      // Undeclared exception!
      try { 
        colorImage0.maxComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 8);
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage((ColorImage) interpolatedColorImage0);
      InterpolatedColorImage interpolatedColorImage2 = new InterpolatedColorImage(interpolatedColorImage1);
      int int0 = (-16777216);
      int int1 = 0;
      int int2 = (-674);
      ROI rOI0 = new ROI();
      rOI0.ux();
      rOI0.ly();
      // Undeclared exception!
      try { 
        interpolatedColorImage2.clear((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      ROI rOI0 = new ROI();
      rOI0.setROI(0, 0, 0, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        colorImage0.addbuffer(0, 0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int[] intArray0 = new int[3];
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int[] intArray1 = new int[6];
      intArray1[0] = (-4675);
      intArray1[1] = (-4675);
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 0;
      intArray1[5] = (-4675);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      int[] intArray0 = new int[7];
      intArray0[3] = 0;
      intArray0[1] = 0;
      intArray0[3] = 0;
      colorImage0.copy();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      // Undeclared exception!
      try { 
        colorImage0.clear((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      int int1 = 593;
      ROI rOI0 = new ROI(906, 906, 593, 906);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((ColorImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      // Undeclared exception!
      try { 
        colorImage0.min(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(255, 0);
      ROI rOI0 = new ROI();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      Integer.getInteger("ClT9xk}V@");
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(3, 0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      interpolatedColorImage1.X();
      ROI rOI0 = new ROI();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage1.multiply(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      int[] intArray0 = new int[5];
      intArray0[3] = 0;
      colorImage0.toString();
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      ColorImage colorImage1 = colorImage0.copy();
      colorImage1.copy();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        colorImage1.clear(integerArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }
}
