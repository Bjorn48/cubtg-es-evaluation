/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:16:16 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.card.MinWatchCard;
import org.sat4j.minisat.constraints.cnf.BinaryClauses;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.orders.RandomLiteralSelectionStrategy;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.Lbool;
import org.sat4j.tools.RupSearchListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RupSearchListener_ESTest extends RupSearchListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("EH$2;");
      Solver<ClausalDataStructureWL> solver0 = (Solver<ClausalDataStructureWL>) mock(Solver.class, new ViolatedAssumptionAnswer());
      rupSearchListener0.init(solver0);
      rupSearchListener0.learnUnit((-2096));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("");
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, (SearchParams) null, varOrderHeap0, fixedPeriodRestarts0, (ILogAble) null);
      rupSearchListener0.init(solver0);
      Lbool lbool0 = Lbool.FALSE;
      rupSearchListener0.end(lbool0);
      assertEquals("F", lbool0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("Vvl#G|]VZ");
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iLits0).nVars();
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      SearchParams searchParams0 = new SearchParams(1.0, 1.0, 1.0, 888);
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0);
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, noRestarts0);
      rupSearchListener0.init(solver0);
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(iVecInt0).size();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, (-1));
      rupSearchListener0.delete(minWatchCard0);
      assertFalse(minWatchCard0.simplify());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("");
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, (SearchParams) null, varOrderHeap0, fixedPeriodRestarts0, (ILogAble) null);
      rupSearchListener0.init(solver0);
      // Undeclared exception!
      try { 
        rupSearchListener0.delete((IConstr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.RupSearchListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("org.sat4j.tools.RupSearchListener");
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      BinaryClauses binaryClauses0 = new BinaryClauses(iLits0, 1608);
      binaryClauses0.addBinaryClause(575);
      // Undeclared exception!
      try { 
        rupSearchListener0.learn(binaryClauses0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = null;
      try {
        rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("OM_DNU");
      rupSearchListener0.init((Solver<ClausalDataStructureWL>) null);
      UnitClause unitClause0 = new UnitClause(0);
      rupSearchListener0.learn(unitClause0);
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("OM_DNU");
      rupSearchListener0.init((Solver<ClausalDataStructureWL>) null);
      rupSearchListener0.end((Lbool) null);
      rupSearchListener0.end((Lbool) null);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("");
      Lbool lbool0 = Lbool.FALSE;
      // Undeclared exception!
      try { 
        rupSearchListener0.end(lbool0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.RupSearchListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("K/#ncxUM5kC_");
      // Undeclared exception!
      try { 
        rupSearchListener0.learnUnit(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.RupSearchListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RupSearchListener<Solver<ClausalDataStructureWL>> rupSearchListener0 = new RupSearchListener<Solver<ClausalDataStructureWL>>("OM_DNU");
      UnitClause unitClause0 = new UnitClause(0);
      // Undeclared exception!
      try { 
        rupSearchListener0.learn(unitClause0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.RupSearchListener", e);
      }
  }
}
