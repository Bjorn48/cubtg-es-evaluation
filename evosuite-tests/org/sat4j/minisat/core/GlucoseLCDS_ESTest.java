/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 13:00:35 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.card.MinWatchCard;
import org.sat4j.minisat.constraints.cnf.LearntBinaryClause;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalHTClause;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.constraints.cnf.UnitClauses;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.Glucose2LCDS;
import org.sat4j.minisat.core.GlucoseLCDS;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsStringSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GlucoseLCDS_ESTest extends GlucoseLCDS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.push(0);
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      iVecInt0.push(0);
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      Lits lits0 = (Lits)solver0.voc;
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      Glucose2LCDS<MixedDataStructureDanielWL> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielWL>(solver1, miniSATRestarts0);
      glucose2LCDS0.init();
      int int0 = glucose2LCDS0.computeLBD(originalHTClause0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams((-2048.33515162012), 47, (-2048.33515162012), 47);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap((IPhaseSelectionStrategy) null);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, lubyRestarts0, mUSLauncher0);
      VecInt vecInt0 = (VecInt)solver0.trailLim;
      Constr constr0 = cardinalityDataStructureYanMax0.createUnregisteredClause(vecInt0);
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(47);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, lubyRestarts0);
      GlucoseLCDS<CardinalityDataStructureYanMax> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructureYanMax>(solver1, lubyRestarts0);
      int int0 = glucoseLCDS0.computeLBD(constr0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PureOrder pureOrder0 = new PureOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, pureOrder0, eMARestarts0);
      SearchParams searchParams0 = solver0.getSearchParams();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, miniSATRestarts0);
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning1 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      ILogAble iLogAble0 = solver1.getLogger();
      Solver<MixedDataStructureDanielWLConciseBinary> solver2 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning1, mixedDataStructureDanielWLConciseBinary0, searchParams0, pureOrder0, eMARestarts0, iLogAble0);
      Lits lits0 = (Lits)solver2.voc;
      VecInt vecInt0 = (VecInt)solver1.implied;
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      Vec<Constr> vec0 = new Vec<Constr>(933, learntBinaryClause0);
      learntBinaryClause0.setActivity(2.0);
      Glucose2LCDS<CardinalityDataStructureYanMax> glucose2LCDS0 = new Glucose2LCDS<CardinalityDataStructureYanMax>(solver0, miniSATRestarts0);
      // Undeclared exception!
      try { 
        glucose2LCDS0.reduce(vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 466
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, (RestartStrategy) null);
      GlucoseLCDS<CardinalityDataStructureYanMax> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructureYanMax>(solver0, (ConflictTimer) null);
      Vec<Constr> vec0 = new Vec<Constr>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      BasicLauncher<DimacsStringSolver> basicLauncher0 = new BasicLauncher<DimacsStringSolver>((ASolverFactory<DimacsStringSolver>) null);
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, (RestartStrategy) null, basicLauncher0);
      VecInt vecInt0 = (VecInt)solver1.trailLim;
      Constr constr0 = cardinalityDataStructure0.createUnregisteredClause(vecInt0);
      vec0.growTo((-1), constr0);
      glucoseLCDS0.reduce(vec0);
      assertFalse(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>(3258.7433849);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-1));
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, (RestartStrategy) null, iLogAble0);
      GlucoseLCDS<MixedDataStructureDanielHT> glucoseLCDS0 = new GlucoseLCDS<MixedDataStructureDanielHT>(solver0, (ConflictTimer) null);
      ConflictTimer conflictTimer0 = glucoseLCDS0.getTimer();
      assertNull(conflictTimer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(0.0);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap((IPhaseSelectionStrategy) null);
      LubyRestarts lubyRestarts0 = new LubyRestarts(2175);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, iLogAble0);
      GlucoseLCDS<CardinalityDataStructureYanMax> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructureYanMax>(solver0, lubyRestarts0);
      ConflictTimer conflictTimer0 = glucoseLCDS0.getTimer();
      assertSame(conflictTimer0, lubyRestarts0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, (RestartStrategy) null);
      GlucoseLCDS<CardinalityDataStructureYanMax> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructureYanMax>(solver0, (ConflictTimer) null);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver0);
      UnitClauses unitClauses0 = new UnitClauses(iVecInt0);
      Vec<Constr> vec0 = new Vec<Constr>(1569, unitClauses0);
      // Undeclared exception!
      try { 
        glucoseLCDS0.reduce(vec0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      PureOrder pureOrder0 = new PureOrder(382);
      LubyRestarts lubyRestarts0 = new LubyRestarts(382);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, pureOrder0, lubyRestarts0);
      Glucose2LCDS<ClausalDataStructureWL> glucose2LCDS0 = new Glucose2LCDS<ClausalDataStructureWL>(solver0, lubyRestarts0);
      // Undeclared exception!
      try { 
        glucose2LCDS0.onPropagation((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Glucose2LCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams();
      GlucoseLCDS<CardinalityDataStructureYanMax> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructureYanMax>((Solver<CardinalityDataStructureYanMax>) null, (ConflictTimer) null);
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, miniSATRestarts0);
      Lits lits0 = (Lits)solver0.voc;
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      // Undeclared exception!
      try { 
        glucoseLCDS0.onClauseLearning(originalHTClause0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, iLits0);
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder0, miniSATRestarts0);
      Glucose2LCDS<CardinalityDataStructureYanMax> glucose2LCDS0 = new Glucose2LCDS<CardinalityDataStructureYanMax>(solver0, miniSATRestarts0);
      // Undeclared exception!
      try { 
        glucose2LCDS0.onClauseLearning(originalHTClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>(2055);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, varOrderHeap0, (RestartStrategy) null);
      Glucose2LCDS<ClausalDataStructureWL> glucose2LCDS0 = new Glucose2LCDS<ClausalDataStructureWL>(solver0, (ConflictTimer) null);
      // Undeclared exception!
      try { 
        glucose2LCDS0.init();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, pureOrder0, (RestartStrategy) null);
      GlucoseLCDS<MixedDataStructureDanielWL> glucoseLCDS0 = new GlucoseLCDS<MixedDataStructureDanielWL>(solver0, (ConflictTimer) null);
      VecInt vecInt0 = new VecInt(1658);
      UnitClauses unitClauses0 = new UnitClauses(vecInt0);
      // Undeclared exception!
      try { 
        glucoseLCDS0.computeLBD(unitClauses0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PureOrder pureOrder0 = new PureOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, pureOrder0, eMARestarts0);
      Glucose2LCDS<CardinalityDataStructureYanMax> glucose2LCDS0 = new Glucose2LCDS<CardinalityDataStructureYanMax>(solver0, eMARestarts0);
      // Undeclared exception!
      try { 
        glucose2LCDS0.computeLBD((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      Lits lits0 = (Lits)solver0.voc;
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      Glucose2LCDS<MixedDataStructureDanielWL> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielWL>(solver1, miniSATRestarts0);
      // Undeclared exception!
      try { 
        glucose2LCDS0.computeLBD(originalHTClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.core.GlucoseLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      PureOrder pureOrder0 = new PureOrder();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, (-4498));
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, randomWalkDecorator0, glucose21Restarts0);
      Glucose2LCDS<MixedDataStructureDanielHT> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielHT>(solver0, glucose21Restarts0);
      glucose2LCDS0.init();
      glucose2LCDS0.init();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, miniSATRestarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Lits lits0 = new Lits();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      VecInt vecInt0 = (VecInt)solver0.implied;
      LearntBinaryClause learntBinaryClause0 = new LearntBinaryClause(vecInt0, lits0);
      Vec<Constr> vec0 = new Vec<Constr>(896, learntBinaryClause0);
      learntBinaryClause0.setActivity(933.0);
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, glucose21Restarts0, iLogAble0);
      Glucose2LCDS<CardinalityDataStructureYanMax> glucose2LCDS0 = new Glucose2LCDS<CardinalityDataStructureYanMax>(solver1, (ConflictTimer) null);
      // Undeclared exception!
      try { 
        glucose2LCDS0.reduce(vec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, (RestartStrategy) null);
      GlucoseLCDS<CardinalityDataStructureYanMax> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructureYanMax>(solver0, (ConflictTimer) null);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solver0);
      Constr constr0 = mixedDataStructureDanielWL0.createUnregisteredCardinalityConstraint(iVecInt0, 1923);
      Vec<Constr> vec0 = new Vec<Constr>(1923, constr0);
      // Undeclared exception!
      try { 
        glucoseLCDS0.reduce(vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 961
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      Lits lits0 = (Lits)solver0.voc;
      OriginalHTClause originalHTClause0 = new OriginalHTClause(vecInt0, lits0);
      Vec<Constr> vec0 = new Vec<Constr>(2, originalHTClause0);
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, fixedPeriodRestarts0);
      GlucoseLCDS<MixedDataStructureDanielHT> glucoseLCDS0 = new GlucoseLCDS<MixedDataStructureDanielHT>(solver1, fixedPeriodRestarts0);
      glucoseLCDS0.reduce(vec0);
      assertEquals(2, vec0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      Glucose2LCDS<MixedDataStructureDanielWL> glucose2LCDS0 = new Glucose2LCDS<MixedDataStructureDanielWL>((Solver<MixedDataStructureDanielWL>) null, glucose21Restarts0);
      UnitClause unitClause0 = new UnitClause((-2146418856));
      glucose2LCDS0.onClauseLearning(unitClause0);
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      GlucoseLCDS<MixedDataStructureDanielWL> glucoseLCDS0 = new GlucoseLCDS<MixedDataStructureDanielWL>((Solver<MixedDataStructureDanielWL>) null, lubyRestarts0);
      Lits lits0 = new Lits();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, 1871);
      glucoseLCDS0.onPropagation(minWatchCard0);
      assertFalse(MinWatchCard.ATMOST);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PureOrder pureOrder0 = new PureOrder(382);
      LubyRestarts lubyRestarts0 = new LubyRestarts(382);
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, pureOrder0, lubyRestarts0);
      GlucoseLCDS<CardinalityDataStructureYanMin> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructureYanMin>(solver0, lubyRestarts0);
      glucoseLCDS0.onConflictAnalysis((Constr) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      GlucoseLCDS<CardinalityDataStructureYanMax> glucoseLCDS0 = new GlucoseLCDS<CardinalityDataStructureYanMax>((Solver<CardinalityDataStructureYanMax>) null, miniSATRestarts0);
      String string0 = glucoseLCDS0.toString();
      assertEquals("Glucose learned constraints deletion strategy with timer MiniSAT restarts strategy", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      SearchParams searchParams0 = new SearchParams(0.0, 0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(0);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0);
      VecInt vecInt0 = new VecInt(477, 477);
      int[] intArray0 = solver0.findModel((IVecInt) vecInt0);
      assertArrayEquals(new int[] {477}, intArray0);
  }
}
