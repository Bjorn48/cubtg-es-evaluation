/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:27:56 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.xor.Xor;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GroupClauseSelectorSolver_ESTest extends GroupClauseSelectorSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      LexicoDecorator<DimacsOutputSolver> lexicoDecorator0 = (LexicoDecorator<DimacsOutputSolver>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(lexicoDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0).when(lexicoDecorator0).nVars();
      doReturn(0).when(lexicoDecorator0).nextFreeVarId(anyBoolean());
      doReturn(vecInt0).when(lexicoDecorator0).unsatExplanation();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(lexicoDecorator0);
      GroupClauseSelectorSolver<AbstractMinimalModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<AbstractMinimalModel>(minimal4InclusionModel0);
      groupClauseSelectorSolver0.addControlableClause(vecInt0, (-2206));
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0);
      IVecInt iVecInt0 = groupClauseSelectorSolver1.unsatExplanation();
      assertFalse(vecInt0.isEmpty());
      assertNotSame(vecInt0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[0];
      LexicoDecorator<DimacsOutputSolver> lexicoDecorator0 = (LexicoDecorator<DimacsOutputSolver>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(lexicoDecorator0).modelWithInternalVariables();
      GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>>(lexicoDecorator0);
      int[] intArray1 = groupClauseSelectorSolver0.model();
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iSolver0).nextFreeVarId(anyBoolean());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      Integer integer0 = groupClauseSelectorSolver0.getGroupVar(iVecInt0, (-1028));
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(0);
      NegationDecorator<DimacsStringSolver> negationDecorator0 = new NegationDecorator<DimacsStringSolver>(dimacsStringSolver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(negationDecorator0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      GroupClauseSelectorSolver<MinOneDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MinOneDecorator>(minOneDecorator0);
      Integer integer0 = groupClauseSelectorSolver0.getGroupVar(iVecInt0, (-1496));
      assertEquals(1, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((-192)).when(solutionCounter0).nextFreeVarId(anyBoolean());
      ClausalCardinalitiesDecorator<SolutionCounter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<SolutionCounter>(solutionCounter0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(clausalCardinalitiesDecorator0, solutionFoundListener0);
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      GroupClauseSelectorSolver<ModelIterator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIterator>(modelIteratorToSATAdapter0);
      Integer integer0 = groupClauseSelectorSolver0.getGroupVar(vecInt0, 102);
      assertEquals((-192), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1630);
      NegationDecorator<DimacsStringSolver> negationDecorator0 = new NegationDecorator<DimacsStringSolver>(dimacsStringSolver0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(negationDecorator0);
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt0 = VecInt.EMPTY;
      IVecInt iVecInt1 = solver0.dimacs2internal(iVecInt0);
      GroupClauseSelectorSolver<MinOneDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MinOneDecorator>(minOneDecorator0);
      IConstr iConstr0 = groupClauseSelectorSolver0.addNonControlableClause(iVecInt1);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      SolutionCounter solutionCounter0 = new SolutionCounter(dimacsStringSolver0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      groupClauseSelectorSolver0.addClause(iVecInt0, (-1));
      assertEquals(1, iVecInt0.size());
      assertEquals(1, dimacsStringSolver0.nVars());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>(0.0);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = mock(MixedDataStructureDanielWL.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(mixedDataStructureDanielWL0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, pureOrder0, miniSATRestarts0, basicLauncher0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      Xor xor0 = new Xor(iVecInt0, false, iLits0);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(xor0).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(48).when(iSolver0).nextFreeVarId(anyBoolean());
      SolutionCounter solutionCounter0 = new SolutionCounter(iSolver0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      groupClauseSelectorSolver0.addClause(iVecInt0, (-1));
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      GroupClauseSelectorSolver<StatisticsSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<StatisticsSolver>(statisticsSolver0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.unsatExplanation();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>((Minimal4CardinalityModel) null);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.unsatExplanation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      LexicoDecorator<DimacsOutputSolver> lexicoDecorator0 = (LexicoDecorator<DimacsOutputSolver>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(iVecInt0).when(lexicoDecorator0).unsatExplanation();
      iVecInt0.shrinkTo((-10));
      GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>>(lexicoDecorator0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.unsatExplanation();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      LexicoDecorator<DimacsOutputSolver> lexicoDecorator0 = (LexicoDecorator<DimacsOutputSolver>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(iVecInt0).when(lexicoDecorator0).unsatExplanation();
      iVecInt0.shrink((-1));
      GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>>(lexicoDecorator0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.unsatExplanation();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(4192);
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>>((LexicoDecorator<DimacsOutputSolver>) null);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GroupClauseSelectorSolver<Minimal4CardinalityModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<Minimal4CardinalityModel>((Minimal4CardinalityModel) null);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.getGroupVar(iVecInt0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      LexicoDecorator<DimacsOutputSolver> lexicoDecorator0 = (LexicoDecorator<DimacsOutputSolver>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(lexicoDecorator0).nextFreeVarId(anyBoolean());
      iVecInt0.insertFirst((-989));
      GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>>(lexicoDecorator0);
      SolutionCounter solutionCounter0 = new SolutionCounter(groupClauseSelectorSolver0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver1.getGroupVar(iVecInt0, (-989));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SingleSolutionDetector singleSolutionDetector0 = mock(SingleSolutionDetector.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(singleSolutionDetector0).nextFreeVarId(anyBoolean());
      LexicoDecorator<SingleSolutionDetector> lexicoDecorator0 = new LexicoDecorator<SingleSolutionDetector>(singleSolutionDetector0);
      GateTranslator gateTranslator0 = new GateTranslator(lexicoDecorator0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      GroupClauseSelectorSolver<GateTranslator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<GateTranslator>(gateTranslator0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addControlableClause(iVecInt0, 2779);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GroupClauseSelectorSolver<AbstractMinimalModel> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<AbstractMinimalModel>((AbstractMinimalModel) null);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addControlableClause((IVecInt) null, 40);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LexicoDecorator<AbstractMinimalModel> lexicoDecorator0 = (LexicoDecorator<AbstractMinimalModel>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(lexicoDecorator0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<LexicoDecorator<AbstractMinimalModel>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<LexicoDecorator<AbstractMinimalModel>>(lexicoDecorator0);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      iVecInt0.growTo(48, 48);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addControlableClause(iVecInt0, (-554));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(0);
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt0 = VecInt.EMPTY;
      IVecInt iVecInt1 = solver0.dimacs2internal(iVecInt0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt1);
      GroupClauseSelectorSolver<DimacsStringSolver> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addClause((IVecInt) readOnlyVecInt0, (-1496));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SolutionCounter solutionCounter0 = mock(SolutionCounter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(solutionCounter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((-1166), 0).when(solutionCounter0).nextFreeVarId(anyBoolean());
      ClausalCardinalitiesDecorator<SolutionCounter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<SolutionCounter>(solutionCounter0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(clausalCardinalitiesDecorator0, solutionFoundListener0);
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(modelIteratorToSATAdapter0, vecInt0, solutionFoundListener0);
      GroupClauseSelectorSolver<ModelIterator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIterator>(modelIteratorToSATAdapter0);
      groupClauseSelectorSolver0.addControlableClause(vecInt0, (-1471));
      GroupClauseSelectorSolver<Minimal4InclusionModel> groupClauseSelectorSolver1 = new GroupClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver1.addClause((IVecInt) vecInt0, 356);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      LexicoDecorator<DimacsOutputSolver> lexicoDecorator0 = (LexicoDecorator<DimacsOutputSolver>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(iVecInt0).when(lexicoDecorator0).unsatExplanation();
      iVecInt0.insertFirst((-989));
      GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>>(lexicoDecorator0);
      IVecInt iVecInt1 = groupClauseSelectorSolver0.unsatExplanation();
      assertTrue(iVecInt1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      LexicoDecorator<DimacsOutputSolver> lexicoDecorator0 = (LexicoDecorator<DimacsOutputSolver>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(iVecInt0).when(lexicoDecorator0).unsatExplanation();
      iVecInt0.insertFirst(266);
      GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>>(lexicoDecorator0);
      IVecInt iVecInt1 = groupClauseSelectorSolver0.unsatExplanation();
      assertEquals(0, iVecInt1.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      LexicoDecorator<DimacsOutputSolver> lexicoDecorator0 = new LexicoDecorator<DimacsOutputSolver>(dimacsOutputSolver0);
      GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>>(lexicoDecorator0);
      int[] intArray0 = groupClauseSelectorSolver0.model();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[18];
      LexicoDecorator<DimacsOutputSolver> lexicoDecorator0 = (LexicoDecorator<DimacsOutputSolver>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(intArray0).when(lexicoDecorator0).modelWithInternalVariables();
      GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<LexicoDecorator<DimacsOutputSolver>>(lexicoDecorator0);
      int[] intArray1 = groupClauseSelectorSolver0.model();
      assertNotNull(intArray1);
      assertNotSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LexicoDecorator<AbstractMinimalModel> lexicoDecorator0 = (LexicoDecorator<AbstractMinimalModel>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(lexicoDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      GroupClauseSelectorSolver<LexicoDecorator<AbstractMinimalModel>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<LexicoDecorator<AbstractMinimalModel>>(lexicoDecorator0);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      groupClauseSelectorSolver0.addControlableClause(iVecInt0, 0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LexicoDecorator<SingleSolutionDetector> lexicoDecorator0 = (LexicoDecorator<SingleSolutionDetector>) mock(LexicoDecorator.class, new ViolatedAssumptionAnswer());
      GroupClauseSelectorSolver<LexicoDecorator<SingleSolutionDetector>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<LexicoDecorator<SingleSolutionDetector>>(lexicoDecorator0);
      Collection<Integer> collection0 = groupClauseSelectorSolver0.getAddedVars();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GroupClauseSelectorSolver<GroupClauseSelectorSolver<ModelIteratorToSATAdapter>> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<GroupClauseSelectorSolver<ModelIteratorToSATAdapter>>((GroupClauseSelectorSolver<ModelIteratorToSATAdapter>) null);
      Map<Integer, Integer> map0 = groupClauseSelectorSolver0.getVarToHighLevel();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[7];
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      VecInt vecInt0 = new VecInt(intArray0);
      GroupClauseSelectorSolver<ModelIterator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIterator>(modelIterator0);
      IConstr iConstr0 = groupClauseSelectorSolver0.addNonControlableClause(vecInt0);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>(0.0);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = mock(MixedDataStructureDanielWL.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(mixedDataStructureDanielWL0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MaxSatDecorator> basicLauncher0 = new BasicLauncher<MaxSatDecorator>(aSolverFactory0);
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, pureOrder0, miniSATRestarts0, basicLauncher0);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      SolutionCounter solutionCounter0 = new SolutionCounter(solver0);
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<SolutionCounter>(solutionCounter0);
      // Undeclared exception!
      try { 
        groupClauseSelectorSolver0.addClause(iVecInt0, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }
}
