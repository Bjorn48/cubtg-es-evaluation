/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 21:54:06 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Light;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.PieceOfFurniture;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.math.MathContext;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Comparator;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomePieceOfFurniture_ESTest extends HomePieceOfFurniture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1011.5782F), 0.0F, 2671.644F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameYOffset(2675.905F);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.setNameXOffset((-505.7891F));
      homeLight0.isPointAt(0.0F, (-253.06F), (-566.2244F));
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.setAngle(0.0F);
      homeLight2.getValueAddedTaxPercentage();
      homeLight0.getNameXOffset();
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight1.isModelMirrored();
      homeLight2.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(3.4028235E38F, 0.5F, 1318.93F, 2);
      lightSourceArray0[0] = lightSource0;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.OperatingSystem$2", (String) null, "com.eteks.sweethome3d.tools.OperatingSystem$2", (Content) null, uRLContent0, uRLContent0, 1318.93F, 3.4028235E38F, (-2922.8584F), 0.3926991F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.OperatingSystem$2", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getValueAddedTaxPercentage();
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      homeLight2.getPriceValueAddedTaxIncluded();
      HomeLight homeLight3 = new HomeLight(homeLight2);
      homeLight3.clone();
      homeLight3.setAngle(721.2624F);
      homeLight0.isBottomRightPointAt(1088.43F, 3.4028235E38F, (-742.6F));
      homeLight0.getModelRotation();
      homeLight3.getModelRotation();
      homeLight2.isDoorOrWindow();
      homeLight2.setX(2);
      homeLight3.getDepth();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[2];
      Float.valueOf(2.0F);
      Float.valueOf(2.0F);
      Float float0 = Float.valueOf(2.0F);
      LightSource lightSource0 = new LightSource(218.01128F, 1094.282F, 218.01128F, 9, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-2986.4626F), 9, 218.01128F, 2651);
      lightSourceArray0[1] = lightSource1;
      CatalogLight catalogLight0 = new CatalogLight("p%Bbf%L?L>[Q", (String) null, "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 0.0F, 0.0F, (-1011.5782F), 218.01128F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$13", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isBottomLeftPointAt(0.0F, (-2986.4626F), 1094.282F);
      HomeLight homeLight2 = new HomeLight(homeLight0);
      homeLight2.getValueAddedTaxPercentage();
      homeLight1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-201.5676F), (-201.5676F), (-0.04565376F), (-201.5676F), false, lightSourceArray0, (float[][]) null, "com.etks.sweethome7d.tols.RContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setMovable(false);
      homeLight0.getGroundElevation();
      homeLight0.setName("com.etks.sweethome7d.tols.RContent");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0.6531434F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "com.etks.sweethome7d.tols.RContent", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopLeftPointAt(0.0F, 0.0F, 0.0F);
      homeLight0.setWidth(0.0F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5575F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setNameXOffset((-2922.8584F));
      homeLight1.getValueAddedTaxPercentage();
      homeLight1.clone();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("H#44", (String) null, (String) null, uRLContent0, uRLContent0, uRLContent0, 0.0F, (-1510.4794F), 0.5F, (-1510.4794F), true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setDescription((String) null);
      homeLight0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("om.eteks.sweethome3d.tools.URLContent", "=", "=", uRLContent0, uRLContent0, uRLContent0, (-0.6345943F), (-0.6345943F), (-0.6345943F), (-0.6345943F), true, lightSourceArray0, (float[][]) null, "=", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight1.setMovable(false);
      HomeLight homeLight2 = new HomeLight(homeLight0);
      homeLight1.getShininess();
      homeLight2.setModelMirrored(false);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, (-0.05F), (-0.05F), (-0.05F), (-0.05F), true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getLevel();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, 0.0F, (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(1486.3994F);
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, 0.0F, 0.0F, 0.0F, 1704.0F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getValueAddedTaxPercentage();
      homeLight1.getPriceValueAddedTaxIncluded();
      HomeLight homeLight2 = new HomeLight(homeLight0);
      HomeLight homeLight3 = homeLight0.clone();
      Integer integer0 = new Integer((-2145424521));
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      integer0.equals(homePieceOfFurniture0);
      HomeLight homeLight4 = new HomeLight(catalogLight0);
      homeLight3.setColor(integer0);
      homeLight3.isTopRightPointAt((-2145424521), (-2145424521), 2214.3892F);
      // Undeclared exception!
      try { 
        homeLight3.setWidth(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", uRLContent0, uRLContent0, uRLContent0, (-2494.11F), (-1011.5782F), 0.0F, 2671.644F, false, lightSourceArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.setNameXOffset((-505.7891F));
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.setAngle(0.0F);
      homeLight2.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[11];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.move(1.0F, (-1510.4794F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getValueAddedTaxPercentage();
      BigDecimal bigDecimal1 = homeLight1.getPriceValueAddedTaxIncluded();
      CatalogLight catalogLight1 = new CatalogLight("", "c^[}.L", "-.6a=(N~", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-822.8F), 0.5F, 1.0F, 56, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal1, bigDecimal0);
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      HomeLight homeLight3 = homeLight1.clone();
      homeLight1.setDescription("");
      homeLight3.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, (-0.05F), (-0.05F), (-0.05F), (-0.05F), true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("", homeLight1.getName());
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      boolean boolean0 = homeLight1.isBottomLeftPointAt(0.0F, 0.0F, 0.3926991F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("", homeLight1.getName());
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0, lightSourceArray0.length);
      
      BigDecimal bigDecimal1 = homeLight1.getValueAddedTaxPercentage();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("", homeLight1.getName());
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = homeLight1.getPriceValueAddedTaxIncluded();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("", homeLight1.getName());
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals((short)110, bigDecimal2.shortValue());
      assertEquals((byte)110, bigDecimal2.byteValue());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(bigDecimal2);
      
      boolean boolean1 = homeLight1.containsPoint((-4247.4F), 0.0F, (-2377.8F));
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean1 == boolean0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("", homeLight1.getName());
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0, lightSourceArray0.length);
      
      float float0 = homeLight1.getElevation();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals((-2494.11F), float0, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals("", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("", homeLight1.getName());
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      float[][] floatArray0 = new float[8][2];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1877.5317F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 1877.5317F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[0] = 1877.5317F;
      floatArray2[1] = 1083.6884F;
      floatArray2[2] = 1877.5317F;
      floatArray2[3] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 1877.5317F;
      floatArray3[1] = 1083.6884F;
      floatArray3[2] = 1.0F;
      floatArray3[3] = 1083.6884F;
      floatArray3[4] = 1083.6884F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      floatArray4[0] = 1.0F;
      floatArray4[1] = 1083.6884F;
      floatArray4[2] = 1.0F;
      floatArray4[3] = 0.0F;
      floatArray4[4] = 1083.6884F;
      floatArray4[5] = (-1575.0F);
      floatArray4[6] = 1877.5317F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[1];
      floatArray5[0] = 3739.637F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[1];
      floatArray6[0] = 3739.637F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[7];
      floatArray7[0] = (-1575.0F);
      floatArray7[1] = (-1575.0F);
      floatArray7[2] = 3739.637F;
      floatArray7[3] = 1083.6884F;
      floatArray7[4] = 1083.6884F;
      floatArray7[5] = 1.0F;
      floatArray7[6] = 1.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[5];
      floatArray8[0] = 1.0F;
      floatArray8[1] = 3739.637F;
      floatArray8[2] = 1083.6884F;
      floatArray8[3] = 1083.6884F;
      floatArray8[4] = 3739.637F;
      floatArray0[7] = floatArray8;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 1877.5317F, 1877.5317F, 1.0F, 1877.5317F, false, lightSourceArray0, floatArray0, "com.eteks.sweethome3d.tools.URLContent", true, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getAngle();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getValueAddedTaxPercentage();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.getLightSources();
      HomeLight homeLight2 = new HomeLight(homeLight0);
      HomeLight homeLight3 = new HomeLight(homeLight2);
      homeLight3.clone();
      homeLight2.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimal0.toString();
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 1.2630577F, 1.2630577F, 1.2630577F, 1.2630577F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameYOffset(1.2630577F);
      homeLight0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("om.eteks.sweethome3d.tools.URLContent", "om.eteks.sweethome3d.tools.URLContent", "om.eteks.sweethome3d.tools.URLContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-0.6345943F), (-0.6345943F), (-0.6345943F), (-0.6345943F), true, lightSourceArray0, (float[][]) null, "om.eteks.sweethome3d.tools.URLContent", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      homeLight0.isPointAt((-0.6345943F), (-0.6345943F), (-1874.303F));
      homeLight0.setName("om.eteks.sweethome3d.tools.URLContent");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.byteValueExact();
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1011.5782F), 0.0F, 2671.644F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameYOffset(2675.905F);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.setNameXOffset((-505.7891F));
      homeLight0.getPriceValueAddedTaxIncluded();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.setAngle((-1011.5782F));
      homeLight2.getValueAddedTaxPercentage();
      homeLight0.setNameAngle((-598.0F));
      homeLight2.getTexture();
      homeLight1.setMovable(true);
      Integer.valueOf((-2460));
      Integer.valueOf(0);
      Integer integer0 = Integer.valueOf((-2460));
      HomeLight homeLight3 = homeLight2.clone();
      homeLight3.getTexture();
      homeLight1.setMovable(true);
      homeLight2.setColor(integer0);
      homeLight1.getStaircaseCutOutShape();
      // Undeclared exception!
      try { 
        homeLight3.setDepth((-3013.6929F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "q", "q", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), true, lightSourceArray0, (float[][]) null, "q", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isPointAt(1.0F, (-3576.511F), (-1.0F));
      Level level0 = new Level("", 1781.9531F, 1781.9531F, 2236.462F);
      Level level1 = level0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      level0.addPropertyChangeListener(propertyChangeListenerProxy1);
      homeLight0.isAtLevel(level1);
      homeLight0.getGroundElevation();
      homeLight0.setLevel(level1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isBottomLeftPointAt((-1510.4794F), 3.5676816F, 1588.2471F);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.getValueAddedTaxPercentage();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.getLevel();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getValueAddedTaxPercentage();
      homeLight1.clone();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight(")C0.BUdO3H-w0.w", "", "", uRLContent0, uRLContent0, uRLContent0, (-2494.11F), 734.21F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      bigDecimal0.toString();
      homeLight0.setNameXOffset((-613.74F));
      homeLight0.clone();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.setAngle(0.3926991F);
      homeLight1.getValueAddedTaxPercentage();
      homeLight1.getX();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.tools.URLContent", "", uRLContent0, uRLContent0, uRLContent0, 644.08F, 1.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(1.0F);
      homeLight0.setVisible(false);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt(1.0F, (-213.8556F), (-1616.0614F));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, 2.0F, 0.0F, 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(2970.9001F);
      homeLight0.setDescription("");
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.tools.URLContent", "I5ZB4c{RX^IIlJ", uRLContent0, uRLContent0, uRLContent0, 2.0F, (-1510.4794F), (-1011.5782F), (-1510.4794F), true, lightSourceArray0, (float[][]) null, "_>GF%H)}q\"9\":7", true, bigDecimal0, bigDecimal1);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertEquals((-1510.4794F), catalogLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(16);
      assertEquals(16, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = Integer.valueOf(21);
      assertEquals(21, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      boolean boolean0 = integer3.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertEquals((-1510.4794F), catalogLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals((-1510.4794F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1510.4794F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertEquals((-1510.4794F), catalogLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals((-1510.4794F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1510.4794F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      homeLight0.setColor(integer2);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer3));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertEquals((-1510.4794F), catalogLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals((-1510.4794F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1510.4794F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(16, (int)homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      boolean boolean1 = homeLight0.isTopRightPointAt(0, 0, 3.4028235E38F);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertEquals((-1510.4794F), catalogLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals((-1510.4794F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1510.4794F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(16, (int)homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      homeLight0.setWidth(2.0F);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertEquals((-1510.4794F), catalogLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals((-1510.4794F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1510.4794F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(16, (int)homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      homeLight0.setHeight((-1510.4794F));
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertEquals((-1510.4794F), catalogLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-1510.4794F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals((-1510.4794F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1510.4794F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(16, (int)homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      homeLight0.setY(16);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertEquals((-1510.4794F), catalogLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-1510.4794F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals((-1510.4794F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1510.4794F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(16, (int)homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(16.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      homeLight0.setDepth(0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome7d.tools.URContent", "I5ZB4c{RX^IIlJ", uRLContent0, uRLContent0, uRLContent0, 2.0F, (-1510.4794F), (-1011.5782F), (-1510.4794F), true, lightSourceArray0, (float[][]) null, "_>GF%H)}q\"9\":7", true, bigDecimal0, bigDecimal1);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopLeftPointAt(0.0F, 0.0F, (-1510.4794F));
      homeLight0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("om.eteks.sweethome3d.tools.URLContent", "om.eteks.sweethome3d.tools.URLContent", "om.eteks.sweethome3d.tools.URLContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-0.6345943F), (-0.6345943F), (-0.6345943F), (-0.6345943F), true, lightSourceArray0, (float[][]) null, "om.eteks.sweethome3d.tools.URLContent", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      homeLight0.move(1.0F, (-0.6345943F));
      homeLight0.isPointAt((-0.6345943F), (-0.6345943F), (-1874.303F));
      homeLight0.setName("om.eteks.sweethome3d.tools.URLContent");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", uRLContent0, uRLContent0, uRLContent0, 2671.644F, 0.5F, 0.0F, 0.5F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0.0F);
      homeLight0.setNameYOffset(2671.644F);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      bigDecimal0.ulp();
      homeLight1.setDepth(2.0F);
      homeLight0.setHeight(0.0F);
      homeLight0.isPointAt(421.97F, 2671.644F, 2900.204F);
      // Undeclared exception!
      try { 
        uRLContent0.getJAREntryName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopLeftPointAt((-1510.4794F), 0.3926991F, (-1510.4794F));
      homeLight1.getGroundElevation();
      homeLight1.getDescription();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.getGroundElevation();
      homeLight1.getName();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-0.04565376F), (-0.04565376F), (-0.04565376F), (-0.04565376F), false, lightSourceArray0, (float[][]) null, "com.etks.sweethome7d.tols.RContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        homeLight0.setWidth((-0.04565376F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal0.intValueExact();
      homeLight0.isNameCenterPointAt(0.0F, 4.979265F, (-46.86F));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 0.33722955F, (-1510.4794F), (-1011.5782F), (-1011.5782F), true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setWidth(0.33722955F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", uRLContent0, uRLContent0, uRLContent0, 2671.644F, 0.5F, 0.0F, 0.5F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameYOffset(2671.644F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setNameXOffset(2671.644F);
      homeLight0.isPointAt((-225.49524F), 1247.055F, 1267.406F);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.isBottomRightPointAt(4742.2876F, 666.96735F, (-754.964F));
      homeLight2.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), (-0.6345943F), (-2494.11F), true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      homeLight0.setHeight((-1011.5782F));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      homeLight0.getCatalogId();
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      homePieceOfFurniture0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", uRLContent0, uRLContent0, uRLContent0, (-2494.11F), (-1011.5782F), 0.0F, 2671.644F, false, lightSourceArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.setAngle(0.0F);
      homeLight2.getValueAddedTaxPercentage();
      TextStyle textStyle0 = new TextStyle((-2102.6484F), false, true);
      homeLight0.setNameStyle(textStyle0);
      homeLight1.getName();
      homeLight2.getModel();
      homeLight2.isTopLeftPointAt((-1431.931F), 2671.644F, (-1011.5782F));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getValueAddedTaxPercentage();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight0.setX((-158.4449F));
      homeLight0.isTopRightPointAt((-2494.11F), 585.2353F, (-350.69562F));
      homeLight0.getWidth();
      homeLight0.getTexture();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      try {
        homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-216.53639F), (-216.53639F), (-0.04565376F), (-216.53639F), false, lightSourceArray0, (float[][]) null, "com.etks.sweethome7d.tols.RContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setMovable(true);
      homeLight0.setTexture((HomeTexture) null);
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VISIBLE;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 2.0F, 0.0F, 0.0F, 2.0F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setName("editorSubFolder");
      HomeLight homeLight1 = new HomeLight(catalogLight0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 0.0F, (-1510.4794F), (-2605.9F), (-2605.9F), true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setModelMirrored(true);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt((-1510.4794F), (-2605.9F), (-1510.4794F));
      homeLight1.setWidth(0.0F);
      homeLight1.isModelMirrored();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", uRLContent0, uRLContent0, uRLContent0, (-2494.11F), (-1011.5782F), 0.0F, 2671.644F, false, lightSourceArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.setAngle(0.0F);
      homeLight2.getValueAddedTaxPercentage();
      HomePieceOfFurniture.SortableProperty.values();
      Float.compare(0.0F, 102.2483F);
      homeLight1.setShininess((Float) 102.2483F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.tools.URLContent", "I5ZB4c{RX^IIlJ", uRLContent0, uRLContent0, uRLContent0, 2.0F, (-1510.4794F), (-1011.5782F), (-1510.4794F), true, lightSourceArray0, (float[][]) null, "_>GF%H)}q\"9\":7", true, bigDecimal0, bigDecimal1);
      Integer.valueOf(0);
      Integer.valueOf(0);
      Integer.valueOf(16);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setAngle((-2075.1692F));
      homeLight1.getTexture();
      homeLight1.setMovable(true);
      homeLight0.setAngle((-1510.4794F));
      Integer integer0 = new Integer((-270));
      Object object0 = new Object();
      integer0.equals(object0);
      homeLight0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight((String) null, "H#44", (String) null, (Content) null, (Content) null, uRLContent0, 1.0F, 0.5F, (-4013.38F), 0.0F, false, lightSourceArray0, (float[][]) null, "yKrZ2OfzT", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isNameCenterPointAt(1238.3544F, (-4013.38F), 4.979265F);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.isTopRightPointAt(1238.3544F, (-1406.8F), 2221.6802F);
      // Undeclared exception!
      try { 
        homeLight1.setWidth((-1406.8F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.move(1.0F, (-1510.4794F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getValueAddedTaxPercentage();
      homeLight1.getPriceValueAddedTaxIncluded();
      Integer integer0 = new Integer(56);
      Integer integer1 = Integer.getInteger("c/Ohobr3~vL", 56);
      Integer.getInteger("com.eteks.sweethome3d.model.HomePieceOfFurniture$8", integer1);
      integer0.equals(integer1);
      homeLight1.setColor(integer1);
      homeLight1.getNameXOffset();
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight1.setY((-2494.11F));
      homeLight0.isMovable();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight((String) null, "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, (-1.6689475F), (-2922.8584F), (-2922.8584F), 23.392342F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.move((-0.9910968F), (-0.9910968F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getValueAddedTaxPercentage();
      homeLight0.getPriceValueAddedTaxIncluded();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight1.setAngle(23.392342F);
      homeLight2.isVisible();
      homeLight1.getNameAngle();
      homeLight2.isModelMirrored();
      homeLight1.isResizable();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      BigDecimal bigDecimal2 = bigDecimal1.remainder(bigDecimal0);
      CatalogLight catalogLight0 = new CatalogLight("4M^SYuA5", "b^7Qe8Vv", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 3912.0F, 2106.0989F, 5.129436F, 3.8965359F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal2, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isTopLeftPointAt(5.129436F, 3.8965359F, 0.0F);
      homeLight1.isTopLeftPointAt((-89.9489F), 5.129436F, (-1066.6F));
      homeLight1.getModelRotation();
      homeLight1.containsPoint(0.0F, (-89.9489F), 5.129436F);
      homeLight1.isAtLevel((Level) null);
      homeLight0.setDepth(910.533F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[11];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.move(1.0F, (-1510.4794F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getValueAddedTaxPercentage();
      homeLight1.getPriceValueAddedTaxIncluded();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight0.clone();
      homeLight0.isTopLeftPointAt((-1916.0F), (-1.0F), (-1916.0F));
      homeLight1.getGroundElevation();
      homeLight2.getDescription();
      homeLight0.isNameVisible();
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 2.0F, 0.0F, 0.0F, 2.0F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameXOffset(0.0F);
      homeLight0.isTopRightPointAt(4.979265F, 4.979265F, (-1249.3739F));
      // Undeclared exception!
      try { 
        homeLight0.setWidth(320.50427F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight((String) null, "H#44", (String) null, uRLContent0, uRLContent0, uRLContent0, 0.0F, 0.5F, (-4013.38F), 0.0F, false, lightSourceArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isNameCenterPointAt(0.5F, (-4013.38F), (-4013.38F));
      homeLight0.isBottomLeftPointAt(0.0F, 888.12897F, 2416.316F);
      homeLight0.setName((String) null);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.tools.URLContent", "I5ZB4c{RX^IIlJ", uRLContent0, uRLContent0, uRLContent0, 2.0F, (-1510.4794F), (-1011.5782F), (-1510.4794F), true, lightSourceArray0, (float[][]) null, "_>GF%H)}q\"9\":7", true, bigDecimal0, bigDecimal1);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setElevation((-1510.4794F));
      homeLight0.getY();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Invalid URL base for JAR entry");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(false);
      // Undeclared exception!
      try { 
        homeLight0.setHeight((-1011.5782F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-201.5676F), (-201.5676F), (-0.04565376F), (-201.5676F), false, lightSourceArray0, (float[][]) null, "com.etks.sweethome7d.tols.RContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopLeftPointAt((-0.04565376F), 0.0F, (-201.5676F));
      Float float0 = new Float((-0.04565376F));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-0.04565376F), (-0.04565376F), (-0.04565376F), (-0.04565376F), false, lightSourceArray0, (float[][]) null, "com.etks.sweethome7d.tols.RContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setColor((Integer) null);
      homeLight0.isNameCenterPointAt((-0.04565376F), 1165.38F, 1165.38F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, (-0.05F), (-0.05F), (-0.05F), (-0.05F), true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Level level0 = new Level("|'V@E;A@#Iyl", 1.0F, 0.0F, (-2992.0F));
      Level level1 = level0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("|'V@E;A@#Iyl", propertyChangeListener0);
      level1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.setLevel(level1);
      homeLight0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), (-23.8313F), (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(false);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getValueAddedTaxPercentage();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.getNameXOffset();
      homeLight0.intersectsRectangle((-2377.8F), (-505.7891F), 0.0F, 2523.8254F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setDescription("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property");
      homeLight1.getValueAddedTaxPercentage();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight0.setX((-158.4449F));
      homeLight1.getY();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle(1486.3994F);
      homeLight1.getValueAddedTaxPercentage();
      homeLight1.setNameAngle(0.0F);
      homeLight1.getTexture();
      homeLight1.setMovable(false);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getPriceValueAddedTaxIncluded();
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.isTopLeftPointAt((-1510.4794F), 0.3926991F, (-1510.4794F));
      homeLight2.getGroundElevation();
      homeLight2.getDescription();
      homeLight1.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isBottomLeftPointAt(0.0F, 0.0F, 0.3926991F);
      homeLight1.getValueAddedTaxPercentage();
      homeLight1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-201.5676F), (-201.5676F), (-0.04565376F), (-201.5676F), false, lightSourceArray0, (float[][]) null, "com.etks.sweethome7d.tols.RContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.getShininess();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1011.5782F), 0.0F, 2671.644F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.setNameXOffset((-505.7891F));
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.setAngle(0.0F);
      homeLight2.getValueAddedTaxPercentage();
      homeLight0.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight((String) null, "jf8~v", "jf8~v", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 1234.08F, 0.33722955F, 1234.08F, 0.33722955F, true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setVisible(true);
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight((String) null, "H#44", (String) null, (Content) null, (Content) null, uRLContent0, 1.0F, 0.5F, (-4013.38F), 0.0F, false, lightSourceArray0, (float[][]) null, "yKrZ2OfzT", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isNameCenterPointAt(1238.3544F, (-4013.38F), 4.979265F);
      homeLight0.isBottomLeftPointAt((-1214.7709F), 888.12897F, 2416.316F);
      homeLight0.getNameStyle();
      homeLight0.isBottomRightPointAt(0.5F, 1238.3544F, (-4013.38F));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 2.0F, 0.0F, 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopRightPointAt(4.979265F, 4.979265F, (-1249.3739F));
      // Undeclared exception!
      try { 
        homeLight0.setWidth(320.50427F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.tools.URLContent", "I5ZB4c{RX^IIlJ", uRLContent0, uRLContent0, uRLContent0, 2.0F, (-1510.4794F), (-1011.5782F), (-1510.4794F), true, lightSourceArray0, (float[][]) null, "_>GF%H)}q\"9\":7", true, bigDecimal0, bigDecimal1);
      Integer.valueOf(0);
      Integer.valueOf(0);
      Integer integer0 = Integer.valueOf(16);
      Integer integer1 = Integer.valueOf(21);
      integer1.equals((Object) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      homeLight0.setColor(integer0);
      homeLight0.isTopRightPointAt(0, 0, 3.4028235E38F);
      homeLight0.setWidth(1298.02F);
      homeLight0.setHeight((-548.1F));
      homeLight0.setY(545.4687F);
      homeLight0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", uRLContent0, uRLContent0, uRLContent0, (-2494.11F), (-1011.5782F), 0.0F, 2671.644F, false, lightSourceArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.setX(2671.644F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homeLight1.removePropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.isNameCenterPointAt((-540.82074F), (-540.82074F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 0.0F, (-1510.4794F), (-1011.5782F), (-1011.5782F), true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setModelMirrored(true);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setDescription("v<P4uIo8 ");
      homeLight0.getValueAddedTaxPercentage();
      homeLight1.getIcon();
      homeLight0.getWidth();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[8];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      float float0 = (-1011.5782F);
      float float1 = 2670.6997F;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", uRLContent0, uRLContent0, uRLContent0, (-2494.11F), (-1011.5782F), 0.7118884F, 2670.6997F, false, lightSourceArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.move(2670.6997F, 0.7118884F);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.getValueAddedTaxPercentage();
      homeLight0.getPriceValueAddedTaxIncluded();
      HomeLight homeLight3 = homeLight2.clone();
      homeLight3.clone();
      homeLight1.isTopLeftPointAt((-999.883F), 4257.6416F, (-1462.4292F));
      homeLight3.getElevation();
      // Undeclared exception!
      try { 
        homeLight0.setDepth((-673.02045F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.containsPoint(0.0F, (-1011.5782F), 0.0F);
      homeLight1.getValueAddedTaxPercentage();
      homeLight1.clone();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("Wy1:4H`]:o", "", "", uRLContent0, uRLContent0, uRLContent0, (-1.0F), (-2749.0F), (-1510.7134F), (-1057.873F), false, lightSourceArray0, (float[][]) null, "Wy1:4H`]:o", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameYOffset(2846.12F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setNameXOffset(108.974205F);
      homeLight1.setAngle((-446.4725F));
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      homeLight1.getValueAddedTaxPercentage();
      homeLight2.setName("");
      homeLight2.getNameXOffset();
      homeLight1.isNameCenterPointAt((-1.0F), 3.4028235E38F, 1596.3705F);
      homeLight0.getElevation();
      Random.setNextRandom(2146679858);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getValueAddedTaxPercentage();
      homeLight0.isBottomLeftPointAt((-946.52826F), (-1011.5782F), (-505.7891F));
      homeLight1.getPriceValueAddedTaxIncluded();
      Integer integer0 = new Integer(56);
      Integer.getInteger("c/Ohobr3~vL", 56);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight1.containsPoint((-2494.11F), (-1510.4794F), (-1011.5782F));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(false);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getValueAddedTaxPercentage();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("om.eteks.sweethome3d.tools.URLContent", "om.eteks.sweethome3d.tools.URLContent", "om.eteks.sweethome3d.tools.URLContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-0.6345943F), (-0.6345943F), (-0.6345943F), (-0.6345943F), true, lightSourceArray0, (float[][]) null, "om.eteks.sweethome3d.tools.URLContent", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      Integer integer0 = new Integer((-1771));
      homeLight1.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "2Sxc;", "", uRLContent0, uRLContent0, uRLContent0, 0.0F, (-505.7891F), (-505.7891F), (-1011.5782F), false, lightSourceArray0, (float[][]) null, ">S?(gL,,T", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
      homeLight0.setAngle((-797.27576F));
      homeLight0.getValueAddedTaxPercentage();
      homeLight0.setNameAngle(343.616F);
      homeLight0.getTexture();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.tools.URLContent", "", uRLContent0, uRLContent0, uRLContent0, 644.08F, 1.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(1.0F);
      homeLight0.setVisible(false);
      homeLight0.clone();
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight2.getNameXOffset();
      homeLight2.isNameCenterPointAt(0.0F, 794.8777F, (-809.6F));
      homeLight2.isBottomLeftPointAt(1.0F, 141.61386F, 794.8777F);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homeLight0.removePropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.isNameCenterPointAt((-1.0F), (-1510.4794F), (-809.6F));
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      BigDecimal bigDecimal2 = bigDecimal1.remainder(bigDecimal0);
      CatalogLight catalogLight0 = new CatalogLight("4M^SYuA5", "b^7Qe8Vv", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 3912.0F, 2106.0989F, 5.129436F, 3.8965359F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal2, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isTopLeftPointAt(5.129436F, 3.8965359F, 0.0F);
      homeLight1.isTopLeftPointAt((-89.9489F), 5.129436F, (-1066.6F));
      homeLight1.getModelRotation();
      homeLight1.getValueAddedTaxPercentage();
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight2.getNameXOffset();
      homeLight2.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.tools.URLContent", "I5ZB4c{RX^IIlJ", uRLContent0, uRLContent0, uRLContent0, 2.0F, (-1510.4794F), (-1011.5782F), (-1510.4794F), true, lightSourceArray0, (float[][]) null, "_>GF%H)}q\"9\":7", true, bigDecimal0, bigDecimal1);
      Integer.valueOf(0);
      Integer.valueOf(0);
      Integer.valueOf(16);
      Integer.valueOf(21);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.intersectsRectangle(2694.899F, 0, (-1510.4794F), 2.0F);
      homeLight0.clone();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isTopLeftPointAt(0.5F, 1058.2266F, 299.67F);
      homeLight1.getGroundElevation();
      homeLight0.getDescription();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getValueAddedTaxPercentage();
      homeLight1.getPriceValueAddedTaxIncluded();
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight2.setX((-1011.5782F));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", "", uRLContent0, uRLContent0, uRLContent0, 2671.644F, 0.5F, 0.0F, 0.5F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameYOffset(2671.644F);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.setNameXOffset(2671.644F);
      homeLight0.isPointAt((-225.0F), 1247.055F, 1267.406F);
      homeLight1.clone();
      float float0 = 1237.0F;
      // Undeclared exception!
      try { 
        uRLContent0.getJAREntryName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vk.|8");
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("k", "com.eteks.sweethome7d.tools.URContent", "I5ZB4c{RX^IIlJ", uRLContent0, uRLContent0, uRLContent0, 2.0F, (-1510.4794F), (-1011.5782F), (-1510.4794F), true, lightSourceArray0, (float[][]) null, "_>GF%H)}q\"9\":7", true, bigDecimal0, bigDecimal1);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopLeftPointAt(0.0F, 0.0F, (-1510.4794F));
      homeLight0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), 3.4028235E38F, (-1.0F), 1132.24F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal1, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(false);
      homeLight0.setHeight(1132.24F);
      homeLight0.getValueAddedTaxPercentage();
      homeLight0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-965.72394F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameYOffset((-809.6F));
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight0.setNameXOffset(893.0F);
      bigDecimal0.scaleByPowerOfTen(29);
      homeLight1.isPointAt((-1.0F), (-1800.28F), (-809.6F));
      HomeLight homeLight2 = homeLight0.clone();
      homeLight1.setAngle((-809.6F));
      homeLight0.getValueAddedTaxPercentage();
      homeLight2.getNameXOffset();
      homeLight2.isNameCenterPointAt(893.0F, 893.0F, 893.0F);
      // Undeclared exception!
      try { 
        homeLight1.setModelMirrored(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", uRLContent0, uRLContent0, uRLContent0, 2671.644F, 0.5F, 0.0F, 0.5F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameYOffset(2671.644F);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.setNameXOffset(2671.644F);
      catalogLight0.getLightSources();
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight0.isTopLeftPointAt(1247.3768F, 0.0F, 2671.644F);
      homeLight2.setY((-2810.94F));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      float[][] floatArray0 = new float[8][2];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1877.5317F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 1877.5317F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[0] = 1877.5317F;
      floatArray2[1] = 1083.6884F;
      floatArray2[2] = 1877.5317F;
      floatArray2[3] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 1877.5317F;
      floatArray3[1] = 1083.6884F;
      floatArray3[2] = 1.0F;
      floatArray3[3] = 1083.6884F;
      floatArray3[4] = 1083.6884F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      floatArray4[0] = 1.0F;
      floatArray4[1] = 1083.6884F;
      floatArray4[2] = 1.0F;
      floatArray4[3] = 0.0F;
      floatArray4[4] = 1083.6884F;
      floatArray4[5] = (-1575.0F);
      floatArray4[6] = 1877.5317F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[1];
      floatArray5[0] = 3739.637F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[1];
      floatArray6[0] = 3739.637F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[7];
      floatArray7[0] = (-1575.0F);
      floatArray7[1] = (-1575.0F);
      floatArray7[2] = 3739.637F;
      floatArray7[3] = 1083.6884F;
      floatArray7[4] = 1083.6884F;
      floatArray7[5] = 1.0F;
      floatArray7[6] = 1.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[5];
      floatArray8[0] = 1.0F;
      floatArray8[1] = 3739.637F;
      floatArray8[2] = 1083.6884F;
      floatArray8[3] = 1083.6884F;
      floatArray8[4] = 3739.637F;
      floatArray0[7] = floatArray8;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 1877.5317F, 1877.5317F, 1.0F, 1877.5317F, false, lightSourceArray0, floatArray0, "com.eteks.sweethome3d.tools.URLContent", true, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homeLight0.addPropertyChangeListener(propertyChangeListenerProxy0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.tools.URLContent", "", uRLContent0, uRLContent0, uRLContent0, 644.08F, 1.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal1);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getGroundElevation();
      homeLight0.isBottomLeftPointAt(0.0F, 0.0F, 644.08F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("d_1/oo#70.*l6", "d_1/oo#70.*l6", "d_1/oo#70.*l6", uRLContent0, uRLContent0, uRLContent0, 1933.66F, 0.5F, 0.5F, 0.5F, true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isBottomLeftPointAt(1.0F, 1.0F, 1123.0F);
      homeLight0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-965.72394F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameYOffset((-809.6F));
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight0.setVisible(true);
      homeLight0.setNameXOffset(893.0F);
      bigDecimal0.scaleByPowerOfTen(29);
      homeLight1.isPointAt((-1.0F), (-1800.28F), (-809.6F));
      HomeLight homeLight2 = homeLight0.clone();
      homeLight1.setAngle((-809.6F));
      homeLight0.getValueAddedTaxPercentage();
      homeLight2.setName("RJ2");
      homeLight2.getNameXOffset();
      homeLight2.isNameCenterPointAt(893.0F, 893.0F, 893.0F);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimal0.stripTrailingZeros();
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome7d.tools.URContent", "com.eteks.sweethome7d.tools.URContent", "com.eteks.sweethome7d.tools.URContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 2.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome7d.tools.URContent", false, bigDecimal0, bigDecimal0);
      bigDecimal0.toPlainString();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      homeLight1.getNameXOffset();
      homeLight0.isNameCenterPointAt(0.0F, 0.0F, 2.0F);
      homeLight1.isNameCenterPointAt(2.0F, 2.0F, 1.0F);
      homeLight1.intersectsRectangle(1.0F, 1.0F, 0.0F, (-2290.56F));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("k", "com.eteks.sweethome7d.tools.URContent", "I5ZB4c{RX^IIlJ", uRLContent0, uRLContent0, uRLContent0, 2.0F, (-1510.4794F), (-1011.5782F), (-1510.4794F), true, lightSourceArray0, (float[][]) null, "_>GF%H)}q\"9\":7", true, bigDecimal0, bigDecimal1);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopLeftPointAt(0.0F, 0.0F, (-1510.4794F));
      homeLight0.getElevation();
      homeLight0.setDepth((-1011.5782F));
      Level level0 = new Level("|'V@E;A@#Iyl", 1.0F, 0.0F, (-2992.0F));
      Level level1 = level0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("|'V@E;A@#Iyl", propertyChangeListener0);
      level1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.isAtLevel(level1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", uRLContent0, uRLContent0, uRLContent0, 0.0F, 0.5F, 0.0F, 0.5F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0.0F);
      homeLight0.setNameYOffset(0.0F);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.setDepth(0.5F);
      homeLight2.setColor((Integer) null);
      homeLight1.setNameVisible(true);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight((String) null, "H#44", (String) null, (Content) null, (Content) null, uRLContent0, 1.0F, 0.5F, (-4013.38F), 0.0F, false, lightSourceArray0, (float[][]) null, "yKrZ2OfzT", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isNameCenterPointAt(1238.3544F, (-4013.38F), 4.979265F);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.setDescription((String) null);
      homeLight1.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, (-0.05F), (-0.05F), (-0.05F), (-0.05F), true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, 0.0F, (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Float float0 = new Float((-1510.4794F));
      homeLight0.setName("");
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.clone();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight((String) null, "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", (Content) null, (Content) null, uRLContent0, 0.5F, (-2922.8584F), (-2922.8584F), 0.0F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameXOffset(0.5F);
      homeLight0.isPointAt(3.4028235E38F, (-1620.392F), 0.5F);
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight1.getNameXOffset();
      homeLight2.isNameCenterPointAt(1.0F, 641.72815F, 0.5F);
      homeLight1.clone();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("k", "com.eteks.sweethome7d.tools.URContent", "I5ZB4c{RX^IIlJ", uRLContent0, uRLContent0, uRLContent0, 2.0F, 0.0F, (-1011.5782F), 0.0F, true, lightSourceArray0, (float[][]) null, "_>GF%H)}q\"9\":7", true, bigDecimal0, bigDecimal1);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopLeftPointAt(0.0F, 0.0F, 0.0F);
      homeLight0.getElevation();
      homeLight0.setDepth((-1011.5782F));
      homeLight0.setHeight((-1247.055F));
      Level level0 = new Level("|'V@E;A@#Iyl", 1.0F, 0.0F, (-2992.0F));
      level0.clone();
      Level level1 = level0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("|'V@E;A@#Iyl", propertyChangeListener0);
      level1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.isAtLevel(level1);
      homeLight0.getHeight();
      homeLight0.getModel();
      System.setCurrentTimeMillis(1L);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("om.eteks.sweethome3d.tools.URLContent", "om.eteks.sweethome3d.tools.URLContent", "om.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, (-0.6345943F), (-0.6345943F), (-0.6345943F), (-0.6345943F), false, lightSourceArray0, (float[][]) null, "om.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(false);
      homeLight0.getCatalogId();
      homeLight0.getPlanIcon();
      homeLight0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 2.0F, 0.0F, 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isBottomLeftPointAt(0.0F, 0.0F, 0.3926991F);
      homeLight0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-0.04565376F), (-0.04565376F), (-0.04565376F), (-0.04565376F), true, lightSourceArray0, (float[][]) null, "com.etks.sweethome7d.tols.RContent", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setVisible(true);
      TextStyle textStyle0 = new TextStyle(2.0F);
      TextStyle textStyle1 = textStyle0.deriveItalicStyle(true);
      homeLight0.setNameStyle(textStyle1);
      homeLight0.setDescription("com.etks.sweethome7d.tols.RContent");
      homeLight0.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 2.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "com.etks.sweethome7d.tols.RContent", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopLeftPointAt(0.0F, 0.0F, 0.0F);
      Float float0 = new Float(2.0F);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.getPoints();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", uRLContent0, uRLContent0, uRLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0.0F);
      homeLight0.setNameYOffset(0.0F);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.setDescription("com.eteks.sweethome3d.model.HomePieceOfFurniture$5");
      Float float0 = new Float(2.0F);
      homeLight1.getNameStyle();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight1.getDepth();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, 2.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameAngle(2.0F);
      homeLight0.setX(0.0F);
      homeLight0.setDescription("");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[8];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isBottomRightPointAt(0.0F, 0.0F, 1330.85F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", uRLContent0, uRLContent0, uRLContent0, (-2494.11F), (-1011.5782F), 0.0F, 2671.644F, false, lightSourceArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal0);
      BigDecimal.valueOf(4494L);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.setNameStyle((TextStyle) null);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.setAngle(0.0F);
      homeLight2.getValueAddedTaxPercentage();
      HomeLight homeLight3 = new HomeLight(homeLight0);
      homeLight3.isTopLeftPointAt((-1011.5782F), (-825.7673F), 0.3926991F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getValueAddedTaxPercentage();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight0.setX((-158.4449F));
      homeLight0.setVisible(false);
      homeLight0.isTopRightPointAt((-2494.11F), 585.2353F, (-350.69562F));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-0.04565376F), (-0.04565376F), (-0.04565376F), (-0.04565376F), true, lightSourceArray0, (float[][]) null, "com.etks.sweethome7d.tols.RContent", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight1.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "q", "q", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), true, lightSourceArray0, (float[][]) null, "q", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setMovable(false);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setNameStyle((TextStyle) null);
      homeLight1.getPriceValueAddedTaxIncluded();
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setModelMirrored(true);
      homeLight0.isPointAt(1005.0F, 1005.0F, 1005.0F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals("", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      BigDecimal bigDecimal1 = homeLight1.getValueAddedTaxPercentage();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals("", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = homeLight1.getPriceValueAddedTaxIncluded();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals("", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals((byte)110, bigDecimal2.byteValue());
      assertEquals((short)110, bigDecimal2.shortValue());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(bigDecimal2);
      
      Integer integer0 = new Integer(56);
      assertEquals(56, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("c/Ohobr3~vL", 56);
      assertEquals(56, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = Integer.getInteger("com.eteks.sweethome3d.model.HomePieceOfFurniture$8", integer1);
      assertEquals(56, (int)integer2);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      boolean boolean0 = integer0.equals(integer1);
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer2));
      assertTrue(integer1.equals((Object)integer0));
      
      homeLight1.setColor(integer1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getCreator());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(56, (int)homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals("", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0, lightSourceArray0.length);
      
      // Undeclared exception!
      try { 
        homeLight1.setWidth(2.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.tools.URLContent", "I5ZB4c{RX^IIlJ", uRLContent0, uRLContent0, uRLContent0, 2.0F, (-1510.4794F), (-1011.5782F), (-1510.4794F), true, lightSourceArray0, (float[][]) null, "_>GF%H)}q\"9\":7", true, bigDecimal0, bigDecimal1);
      Integer.valueOf(0);
      Integer.valueOf(0);
      Integer integer0 = Integer.valueOf(16);
      Integer integer1 = Integer.valueOf(21);
      integer1.equals((Object) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setColor(integer0);
      homeLight0.isBottomLeftPointAt(21, (-1011.5782F), (-1751.1F));
      homeLight0.isTopRightPointAt(0, 0, 3.4028235E38F);
      homeLight0.setWidth((-2290.56F));
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.scale();
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 2.0F, 0.0F, 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isBottomLeftPointAt(0.0F, 0.0F, 0.3926991F);
      homeLight0.getValueAddedTaxPercentage();
      homeLight0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", uRLContent0, uRLContent0, uRLContent0, 2671.644F, 0.5F, 0.0F, 0.5F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameYOffset(2671.644F);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.setNameXOffset(2671.644F);
      homeLight0.getPriceValueAddedTaxIncluded();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.setAngle(2671.644F);
      homeLight0.isBottomRightPointAt((-225.49524F), 1247.3768F, 3781.2542F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.tools.URLContent", "I5ZB4c{RX^IIlJ", uRLContent0, uRLContent0, uRLContent0, 2.0F, (-1510.4794F), 0.0F, (-1510.4794F), true, lightSourceArray0, (float[][]) null, "_>GF%H)}q\"9\":7", true, bigDecimal0, bigDecimal1);
      bigDecimal1.intValueExact();
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopLeftPointAt(0.0F, 0.0F, (-1510.4794F));
      homeLight0.setWidth(0.0F);
      homeLight0.isPointAt(1.0F, (-1510.4794F), 10);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setAngle((-1765.1356F));
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.getValueAddedTaxPercentage();
      homeLight2.getNameXOffset();
      HomeLight homeLight3 = homeLight0.clone();
      homeLight3.isNameCenterPointAt(2.0F, (-1765.1356F), 1759.8298F);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.tools.URLContent", "I5ZB4c{RX^IIlJ", uRLContent0, uRLContent0, uRLContent0, 2.0F, (-1510.4794F), (-1011.5782F), (-1510.4794F), true, lightSourceArray0, (float[][]) null, "_>GF%H)}q\"9\":7", true, bigDecimal0, bigDecimal1);
      Integer.valueOf(0);
      Integer.valueOf(0);
      Integer integer0 = Integer.valueOf(16);
      Integer integer1 = Integer.valueOf(21);
      integer1.equals((Object) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setColor(integer0);
      homeLight0.isTopRightPointAt(0, 0, 3.4028235E38F);
      homeLight0.setWidth((-2290.56F));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 2.0F, 0.0F, 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(0.0F);
      homeLight0.setDescription("");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, (-0.04565376F), (-1011.5782F), (-1011.5782F), (-1011.5782F), true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setVisible(false);
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1011.5782F), 0.0F, 2671.644F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameYOffset(2675.905F);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.setNameXOffset((-505.7891F));
      homeLight0.isPointAt(0.0F, (-253.06F), (-566.2244F));
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.setAngle(0.0F);
      homeLight2.getValueAddedTaxPercentage();
      homeLight0.getNameXOffset();
      homeLight1.isNameCenterPointAt(2.5109017F, 2.5109017F, 1567.4225F);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "", (String) null, uRLContent0, uRLContent0, uRLContent0, (-2863.0F), (-2863.0F), 0.0F, (-2946.68F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getValueAddedTaxPercentage();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.setX(1767.25F);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.setVisible(true);
      homeLight1.isTopRightPointAt(0.68877715F, (-2946.68F), (-350.69562F));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("vt80", "com.eteks.sweethome3d.model.HomePieceOfFurniture$8", "", uRLContent0, uRLContent0, uRLContent0, (-0.6345943F), (-1510.7134F), (-1510.7134F), 2592.3596F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$8", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.move((-0.9910968F), 0.0F);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = new HomeLight(homeLight0);
      homeLight1.getValueAddedTaxPercentage();
      homeLight2.getPriceValueAddedTaxIncluded();
      TextStyle textStyle0 = new TextStyle((-1510.7134F));
      Float.compare((-1.0F), (-1.0F));
      HomeLight homeLight3 = new HomeLight(homeLight2);
      HomeLight homeLight4 = homeLight3.clone();
      Float float0 = new Float(0.0F);
      float0.equals("/@sYO=C");
      homeLight4.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-965.72394F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameYOffset((-809.6F));
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight0.setNameXOffset(893.0F);
      bigDecimal0.scaleByPowerOfTen(29);
      homeLight1.isPointAt((-1.0F), (-1800.28F), (-809.6F));
      HomeLight homeLight2 = homeLight0.clone();
      homeLight1.setAngle((-809.6F));
      homeLight0.getValueAddedTaxPercentage();
      homeLight2.getNameXOffset();
      homeLight2.isNameCenterPointAt(893.0F, 893.0F, 893.0F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[2];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.tools.URLContent", "", uRLContent0, uRLContent0, uRLContent0, 644.08F, 1.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal1);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation(1.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 2.0F, 0.0F, 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Level level0 = new Level("com.eteks.sweethome3d.tools.URLContent", 0.0F, 0.0F, (-3230.0F));
      homeLight0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("om.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-0.6345943F), (-0.6345943F), (-0.6345943F), (-0.6345943F), true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      homeLight0.getCatalogId();
      homeLight0.getPlanIcon();
      homeLight0.setX((-0.6345943F));
      homeLight0.setX((-0.6345943F));
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight((String) null, "H#44", (String) null, uRLContent0, uRLContent0, uRLContent0, 0.0F, 0.5F, (-4013.38F), 0.0F, false, lightSourceArray0, (float[][]) null, "yKrZ2OfzT", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isNameCenterPointAt(1238.3544F, (-4013.38F), (-4013.38F));
      MathContext mathContext0 = MathContext.UNLIMITED;
      bigDecimal0.round(mathContext0);
      homeLight0.isBottomLeftPointAt(1238.3544F, 888.12897F, 2416.316F);
      homeLight0.getNameStyle();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getDepth();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome7d.tools.URContent", "com.eteks.sweethome7d.tools.URContent", "com.eteks.sweethome7d.tools.URContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome7d.tools.URContent", true, bigDecimal0, bigDecimal0);
      bigDecimal0.toPlainString();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopRightPointAt(0.0F, (-867.0F), (-867.0F));
      homeLight0.setWidth((-1249.3739F));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("HEIGHT", (String) null, "com.eteks.sweethome3d.model.HomeLight$Property", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), 0.0F, (-2494.11F), (-2494.11F), false, lightSourceArray0, (float[][]) null, "g)l0$.+(a'!=9FO+fmL", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setAngle((-1742.829F));
      homeLight0.getValueAddedTaxPercentage();
      homeLight0.setNameAngle((-764.50726F));
      homeLight1.getTexture();
      homeLight0.isBottomLeftPointAt((-2494.11F), 0.0F, 979.5F);
      homeLight1.setElevation(893.0F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", uRLContent0, uRLContent0, uRLContent0, 2671.644F, 0.5F, 0.0F, 0.5F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", true, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopLeftPointAt((-1853.2F), 1929.4F, 0.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setMovable(false);
      homeLight1.getElevation();
      homeLight0.setDepth(0.5F);
      homeLight0.setHeight((-604.5F));
      Level level0 = new Level("T*S", 1011.5782F, 3.4028235E38F, 1248.58F);
      Level level1 = level0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("applicationSubFolder", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", propertyChangeListenerProxy0);
      level1.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.isAtLevel(level1);
      homeLight1.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 2.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "com.etks.sweethome7d.tols.RContent", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy(" doesn't contain piece ", (PropertyChangeListener) null);
      homeLight0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.isTopLeftPointAt(0.0F, 0.0F, 0.0F);
      Float float0 = new Float(2.0F);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("&pIk;Ag2\"+Knh|#", "k", "", uRLContent0, uRLContent0, uRLContent0, 16.0F, 16.0F, 0.0F, 16.0F, true, lightSourceArray0, (float[][]) null, "k", false, bigDecimal1, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isBottomLeftPointAt((-765.5F), 16.0F, (-765.5F));
      homeLight0.getValueAddedTaxPercentage();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      Level level0 = new Level("", (-1011.5782F), (-1996.0F), (-1996.0F));
      Level level1 = level0.clone();
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      level0.addPropertyChangeListener(propertyChangeListenerProxy0);
      level0.addPropertyChangeListener((PropertyChangeListener) null);
      homeLight0.isAtLevel(level1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "com.eteks.sweethome7d.tools.URContent");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$11", "com.eteks.sweethome3d.model.HomeLight", "com.eteks.sweethome3d.model.HomeLight", (Content) null, (Content) null, (Content) null, (-2910.675F), 0.3926991F, (-1510.7134F), 0.3926991F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomeLight", false, bigDecimal0, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameYOffset((-57.6F));
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.setNameXOffset((-528.9365F));
      homeLight1.isBottomRightPointAt((-2260.4094F), 2.0F, 0.3926991F);
      HomeLight homeLight3 = new HomeLight(homeLight1);
      homeLight0.getModelRotation();
      HomeLight homeLight4 = homeLight2.clone();
      homeLight4.isDoorOrWindow();
      homeLight4.setX(2.0F);
      homeLight2.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-0.04565376F), (-0.04565376F), (-0.04565376F), (-0.04565376F), true, lightSourceArray0, (float[][]) null, "com.etks.sweethome7d.tols.RContent", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", uRLContent0, uRLContent0, uRLContent0, (-2494.11F), (-1011.5782F), (-2494.11F), 2671.644F, false, lightSourceArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.clone();
      homeLight0.containsPoint(3667.647F, 1.0F, 3.5676816F);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("om.eteks.sweethome3d.tools.URLContent", "=", "=", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-0.6345943F), (-0.6345943F), (-0.6345943F), (-0.6345943F), true, lightSourceArray0, (float[][]) null, "=", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      homeLight0.isPointAt((-0.6345943F), (-0.6345943F), (-1874.1149F));
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight1.setY((-1874.1149F));
      homeLight1.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      URLContent uRLContent1 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      float[][] floatArray0 = new float[8][2];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1877.5317F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 1877.5317F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[0] = 1877.5317F;
      floatArray2[1] = 1083.6884F;
      floatArray2[2] = 1877.5317F;
      floatArray2[3] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 1877.5317F;
      floatArray3[1] = 1083.6884F;
      floatArray3[2] = 1.0F;
      floatArray3[3] = 1083.6884F;
      floatArray3[4] = 1083.6884F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      floatArray4[0] = 1.0F;
      floatArray4[1] = 1083.6884F;
      floatArray4[2] = 1.0F;
      floatArray4[3] = 0.0F;
      floatArray4[4] = 1083.6884F;
      floatArray4[5] = (-1575.0F);
      floatArray4[6] = 1877.5317F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[1];
      floatArray5[0] = 3739.637F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[1];
      floatArray6[0] = 3739.637F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[7];
      floatArray7[0] = (-1575.0F);
      floatArray7[1] = (-1575.0F);
      floatArray7[2] = 3739.637F;
      floatArray7[3] = 1083.6884F;
      floatArray7[4] = 1083.6884F;
      floatArray7[5] = 1.0F;
      floatArray7[6] = 1.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[5];
      floatArray8[0] = 1.0F;
      floatArray8[1] = 3739.637F;
      floatArray8[2] = 1083.6884F;
      floatArray8[3] = 1083.6884F;
      floatArray8[4] = 3739.637F;
      floatArray0[7] = floatArray8;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent1, uRLContent1, uRLContent1, 1877.5317F, 1877.5317F, 1.0F, 1877.5317F, false, lightSourceArray0, floatArray0, "com.eteks.sweethome3d.tools.URLContent", true, bigDecimal1, bigDecimal1);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getHeight();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      float[] floatArray0 = new float[4];
      floatArray0[0] = 1877.5317F;
      floatArray0[1] = 1.0F;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(4.323991F, 4.323991F, (-119.10676F), 39, (Float) 1877.5317F);
      lightSourceArray0[0] = lightSource0;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$4", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.model.HomePieceOfFurniture$4", uRLContent0, uRLContent0, uRLContent0, 4.323991F, 1877.5317F, 1940.3789F, 1877.5317F, false, lightSourceArray0, (float[][]) null, "yIFo", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle(4.323991F);
      homeLight1.getValueAddedTaxPercentage();
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      homeLight2.setNameAngle(3212.4648F);
      homeLight1.getTexture();
      homeLight0.isDeformable();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-201.5676F), (-201.5676F), (-0.04565376F), (-201.5676F), false, lightSourceArray0, (float[][]) null, "com.etks.sweethome7d.tols.RContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopRightPointAt((-0.04565376F), (-0.04565376F), (-852.692F));
      // Undeclared exception!
      try { 
        homeLight0.setWidth((-852.692F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 1.2630577F, 1.2630577F, 1.2630577F, 1.2630577F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setVisible(false);
      homeLight0.isBottomLeftPointAt(1.2630577F, 3.4028235E38F, 1.2630577F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.tools.URLContent", "I5ZB4c{RX^IIlJ", uRLContent0, uRLContent0, uRLContent0, 2.0F, (-1510.4794F), (-1011.5782F), (-1510.4794F), true, lightSourceArray0, (float[][]) null, "_>GF%H)}q\"9\":7", true, bigDecimal0, bigDecimal1);
      Integer.valueOf(0);
      Integer.valueOf(0);
      Integer integer0 = Integer.valueOf(16);
      Integer integer1 = Integer.valueOf(21);
      integer1.equals((Object) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      homeLight0.setColor(integer0);
      homeLight0.isTopRightPointAt(0, 0, 3.4028235E38F);
      homeLight0.setWidth((-2290.56F));
      homeLight0.setPower((-1510.4794F));
      homeLight0.setHeight((-1510.4794F));
      homeLight0.setY(16);
      homeLight0.getColor();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.tools.URLContent", "I5ZB4c{RX^IIlJ", uRLContent0, uRLContent0, uRLContent0, 2.0F, (-1510.4794F), (-1011.5782F), (-1510.4794F), true, lightSourceArray0, (float[][]) null, "_>GF%H)}q\"9\":7", true, bigDecimal0, bigDecimal1);
      Integer.valueOf(0);
      Integer.valueOf(0);
      Integer integer0 = Integer.valueOf(16);
      Integer integer1 = Integer.valueOf(21);
      integer1.equals((Object) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      homeLight0.setColor(integer0);
      homeLight0.isTopRightPointAt(0, 0, 3.4028235E38F);
      homeLight0.setWidth((-2290.56F));
      homeLight0.setHeight((-1510.4794F));
      homeLight0.setY(16);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getValueAddedTaxPercentage();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.getShininess();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "com.eteks.sweethome7d.tools.URContent";
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome7d.tools.URContent", "com.eteks.sweethome7d.tools.URContent", "I5ZB4c{RX^IIlJ", uRLContent0, uRLContent0, uRLContent0, 2.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome7d.tools.URContent", true, bigDecimal0, bigDecimal1);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      HomeLight homeLight2 = new HomeLight(homeLight0);
      homeLight2.setNameXOffset(2.0F);
      homeLight2.getValueAddedTax();
      homeLight1.isPointAt(197.213F, 2.0F, 2.0F);
      // Undeclared exception!
      try { 
        uRLContent0.getJAREntryName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getPoints();
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.isTopLeftPointAt((-1510.4794F), 0.3926991F, (-1510.4794F));
      homeLight2.getGroundElevation();
      homeLight2.getDescription();
      homeLight1.getPrice();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      float[][] floatArray0 = new float[8][2];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1877.5317F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 1877.5317F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[0] = 1877.5317F;
      floatArray2[1] = 1083.6884F;
      floatArray2[2] = 1877.5317F;
      floatArray2[3] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 1877.5317F;
      floatArray3[1] = 1083.6884F;
      floatArray3[2] = 1.0F;
      floatArray3[3] = 1083.6884F;
      floatArray3[4] = 1083.6884F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      floatArray4[0] = 1.0F;
      floatArray4[1] = 1083.6884F;
      floatArray4[2] = 1.0F;
      floatArray4[3] = 0.0F;
      floatArray4[4] = 1083.6884F;
      floatArray4[5] = (-1575.0F);
      floatArray4[6] = 1877.5317F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[1];
      floatArray5[0] = 3739.637F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[1];
      floatArray6[0] = 3739.637F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[7];
      floatArray7[0] = (-1575.0F);
      floatArray7[1] = (-1575.0F);
      floatArray7[2] = 3739.637F;
      floatArray7[3] = 1083.6884F;
      floatArray7[4] = 1083.6884F;
      floatArray7[5] = 1.0F;
      floatArray7[6] = 1.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[5];
      floatArray8[0] = 1.0F;
      floatArray8[1] = 3739.637F;
      floatArray8[2] = 1083.6884F;
      floatArray8[3] = 1083.6884F;
      floatArray8[4] = 3739.637F;
      floatArray0[7] = floatArray8;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 1877.5317F, 1877.5317F, 1.0F, 1877.5317F, false, lightSourceArray0, floatArray0, "com.eteks.sweethome3d.tools.URLContent", true, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopLeftPointAt(0.0F, 3739.637F, 1083.6884F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.tools.URLContent", "I5ZB4c{RX^IIlJ", uRLContent0, uRLContent0, uRLContent0, 2.0F, 454.1299F, (-1011.5782F), 454.1299F, true, lightSourceArray0, (float[][]) null, "_>GF%H)}q\"9\":7", true, bigDecimal0, bigDecimal1);
      Integer.valueOf(0);
      Integer.valueOf(0);
      Integer integer0 = Integer.valueOf(16);
      Integer integer1 = Integer.valueOf(21);
      integer1.equals((Object) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      homeLight0.setColor(integer0);
      homeLight0.isTopRightPointAt(0, 0, 3.4028235E38F);
      homeLight0.setWidth((-2290.56F));
      homeLight0.setHeight(454.1299F);
      homeLight0.setY(16);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setModelMirrored(true);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.tools.URLContent", "I5ZB4c{RX^IIlJ", uRLContent0, uRLContent0, uRLContent0, 2.0F, (-1510.4794F), (-1011.5782F), (-1510.4794F), true, lightSourceArray0, (float[][]) null, "_>GF%H)}q\"9\":7", true, bigDecimal0, bigDecimal1);
      catalogLight0.getLightSources();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "Y9t]}";
      stringArray0[2] = "com.eteks.sweethome3d.model.HomePieceOfFurniture$8";
      stringArray0[3] = "";
      stringArray0[4] = "Y9t]}";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      Long long0 = new Long(1L);
      Float float0 = new Float((float) 1L);
      Content content0 = mock(Content.class, new ViolatedAssumptionAnswer());
      LightSource[] lightSourceArray1 = new LightSource[4];
      LightSource lightSource0 = mock(LightSource.class, new ViolatedAssumptionAnswer());
      lightSourceArray1[0] = lightSource0;
      lightSourceArray1[1] = lightSource0;
      lightSourceArray1[2] = lightSource0;
      lightSourceArray1[3] = lightSource0;
      BigDecimal bigDecimal2 = BigDecimal.ZERO;
      CatalogLight catalogLight1 = new CatalogLight("Y9t]}", "Y9t]}", "", "Y9t]}", stringArray0, long0, float0, content0, content0, content0, 1L, 1333.9F, 1671.6017F, 1L, false, lightSourceArray1, "Wd]", (float[][]) null, "Y$x.2,_Iabkfbm'#PB", true, true, true, bigDecimal2, bigDecimal2, "");
      FurnitureCategory furnitureCategory0 = mock(FurnitureCategory.class, new ViolatedAssumptionAnswer());
      catalogLight1.setCategory(furnitureCategory0);
      catalogLight0.compareTo((CatalogPieceOfFurniture) catalogLight1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopLeftPointAt(0.0F, 0.0F, (-1510.4794F));
      homeLight0.isMovable();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      float[][] floatArray0 = new float[8][2];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1877.5317F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 1877.5317F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[0] = 1877.5317F;
      floatArray2[1] = 1083.6884F;
      floatArray2[2] = 1877.5317F;
      floatArray2[3] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 1877.5317F;
      floatArray3[1] = 1083.6884F;
      floatArray3[2] = 1.0F;
      floatArray3[3] = 1083.6884F;
      floatArray3[4] = 1083.6884F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      floatArray4[0] = 1.0F;
      floatArray4[1] = 1083.6884F;
      floatArray4[2] = 1.0F;
      floatArray4[3] = 0.0F;
      floatArray4[4] = 1083.6884F;
      floatArray4[5] = (-1575.0F);
      floatArray4[6] = 1877.5317F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[1];
      floatArray5[0] = 3739.637F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[1];
      floatArray6[0] = 3739.637F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[7];
      floatArray7[0] = (-1575.0F);
      floatArray7[1] = (-1575.0F);
      floatArray7[2] = 3739.637F;
      floatArray7[3] = 1083.6884F;
      floatArray7[4] = 1083.6884F;
      floatArray7[5] = 1.0F;
      floatArray7[6] = 1.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[5];
      floatArray8[0] = 1.0F;
      floatArray8[1] = 3739.637F;
      floatArray8[2] = 1083.6884F;
      floatArray8[3] = 1083.6884F;
      floatArray8[4] = 3739.637F;
      floatArray0[7] = floatArray8;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 1877.5317F, 1877.5317F, 1.0F, 1877.5317F, false, lightSourceArray0, floatArray0, "com.eteks.sweethome3d.tools.URLContent", true, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", uRLContent0, uRLContent0, uRLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0.0F);
      homeLight0.setNameYOffset(0.0F);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      homeLight1.setDescription("com.eteks.sweethome3d.model.HomePieceOfFurniture$5");
      Float float0 = new Float(2.0F);
      homeLight1.setName("com.eteks.sweethome3d.model.HomePieceOfFurniture$5");
      HomeLight homeLight2 = new HomeLight(homeLight0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.tools.URLContent", "I5ZB4c{RX^IIlJ", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), (-1011.5782F), (-1510.4794F), true, lightSourceArray0, (float[][]) null, "_>GF%H)}q\"9\":7", true, bigDecimal0, bigDecimal1);
      Integer.valueOf(0);
      Integer.valueOf(0);
      Integer.valueOf(16);
      Integer integer0 = Integer.valueOf(21);
      integer0.equals((Object) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setModelMirrored(false);
      homeLight0.clone();
      homeLight0.isBottomRightPointAt((-1510.4794F), (-3682.7F), 3.5676816F);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setDescription("?GX VJw21A^.U#Fg[");
      homeLight1.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-201.5676F), (-201.5676F), (-0.04565376F), (-201.5676F), false, lightSourceArray0, (float[][]) null, "com.etks.sweethome7d.tols.RContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setElevation((-201.5676F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.tools.URLContent", "I5ZB4c{RX^IIlJ", uRLContent0, uRLContent0, uRLContent0, 2.0F, (-1510.4794F), (-1011.5782F), (-1510.4794F), true, lightSourceArray0, (float[][]) null, "_>GF%H)}q\"9\":7", true, bigDecimal0, bigDecimal1);
      Integer.valueOf(0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopLeftPointAt(0, (-1011.5782F), 322.04F);
      homeLight0.setWidth(62.435F);
      Long long0 = new Long(0);
      Float float0 = new Float(62.435F);
      try { 
        MockURL.URL("");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: 
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight((String) null, "H#44", (String) null, uRLContent0, uRLContent0, uRLContent0, 0.0F, 0.2063587F, 2740.688F, 0.0F, false, lightSourceArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isNameCenterPointAt(0.2063587F, 2740.688F, 2740.688F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isPointAt(0.0F, 0.0F, 2740.688F);
      Float float0 = new Float(1680.7648F);
      float0.equals((Object) null);
      homeLight1.setShininess(float0);
      homeLight1.getShininess();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-201.5676F), (-201.5676F), (-0.04565376F), (-201.5676F), false, lightSourceArray0, (float[][]) null, "com.etks.sweethome7d.tols.RContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopLeftPointAt((-201.5676F), 181.0F, 181.0F);
      homeLight0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight((String) null, "I?B;srj2Kk>6>&bV/", "I39Y$[T3pZOD+gV", uRLContent0, uRLContent0, uRLContent0, (-1510.4794F), 0.5F, 0.5F, 0.0F, true, lightSourceArray0, (float[][]) null, "I39Y$[T3pZOD+gV", true, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setElevation((-1.0F));
      homeLight1.getY();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[8];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 0.0F, (-1510.4794F), (-1011.5782F), (-1011.5782F), true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX(0.0F);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.byteValueExact();
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$18", uRLContent0, uRLContent0, uRLContent0, 934.22284F, (-1510.4794F), (byte)10, (byte)10, true, lightSourceArray0, (float[][]) null, "{U* i", true, bigDecimal0, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight1.move(0.0F, (byte)10);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.getValueAddedTaxPercentage();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight2.clone();
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight((String) null, "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", (Content) null, (Content) null, uRLContent0, 0.5F, (-2922.8584F), (-2922.8584F), 0.0F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setNameYOffset(0.0F);
      HomeLight homeLight2 = new HomeLight(homeLight1);
      HomeLight homeLight3 = homeLight2.clone();
      HomeLight homeLight4 = homeLight0.clone();
      homeLight4.setAngle((-2922.8584F));
      homeLight3.getTexture();
      homeLight2.setMovable(false);
      HomeLight homeLight5 = homeLight4.clone();
      Integer integer0 = new Integer(3628);
      Object object0 = new Object();
      integer0.equals(object0);
      homeLight4.setColor(integer0);
      homeLight5.isAtLevel((Level) null);
      homeLight5.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 2.0F, 0.09574701F, 0.09574701F, 2.0F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopRightPointAt(7.5937376F, 7.5937376F, (-1249.3739F));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      float[][] floatArray0 = new float[8][2];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1877.5317F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 1877.5317F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[0] = 1877.5317F;
      floatArray2[1] = 1083.6884F;
      floatArray2[2] = 1877.5317F;
      floatArray2[3] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 1877.5317F;
      floatArray3[1] = 1083.6884F;
      floatArray3[2] = 1.0F;
      floatArray3[3] = 1083.6884F;
      floatArray3[4] = 1083.6884F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      floatArray4[0] = 1.0F;
      floatArray4[1] = 1083.6884F;
      floatArray4[2] = 1.0F;
      floatArray4[3] = 0.0F;
      floatArray4[4] = 1083.6884F;
      floatArray4[5] = (-1575.0F);
      floatArray4[6] = 1877.5317F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[1];
      floatArray5[0] = 3739.637F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[1];
      floatArray6[0] = 3739.637F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[7];
      floatArray7[0] = (-1575.0F);
      floatArray7[1] = (-1575.0F);
      floatArray7[2] = 3739.637F;
      floatArray7[3] = 1083.6884F;
      floatArray7[4] = 1083.6884F;
      floatArray7[5] = 1.0F;
      floatArray7[6] = 1.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[5];
      floatArray8[0] = 1.0F;
      floatArray8[1] = 3739.637F;
      floatArray8[2] = 1083.6884F;
      floatArray8[3] = 1083.6884F;
      floatArray8[4] = 3739.637F;
      floatArray0[7] = floatArray8;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 1877.5317F, 1877.5317F, 1.0F, 1877.5317F, false, lightSourceArray0, floatArray0, "com.eteks.sweethome3d.tools.URLContent", true, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isBottomRightPointAt(0.0F, 1.0F, 1009.89594F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomeLight", "com.eteks.sweethome3d.model.HomeLight", "", uRLContent0, uRLContent0, (Content) null, 0.3926991F, (-1057.873F), (-57.6F), (-1510.7134F), false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomeLight", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      homeLight0.clone();
      homeLight0.setAngle(0.3926991F);
      HomePieceOfFurniture.SortableProperty.values();
      Float.compare(667.23F, (-108.42865F));
      homeLight2.setShininess((Float) null);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome7d.tools.URContent", "com.eteks.sweethome7d.tools.URContent", "com.eteks.sweethome7d.tools.URContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 2502.102F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome7d.tools.URContent", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setShininess((Float) null);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("NAME_X_OFFSET", "NAME_X_OFFSET", "NAME_X_OFFSET", uRLContent0, uRLContent0, uRLContent0, 2671.644F, 0.5F, 0.0F, 0.5F, true, lightSourceArray0, (float[][]) null, "NAME_X_OFFSET", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY(0.0F);
      homeLight0.setNameYOffset(2671.644F);
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      homeLight1.setDepth(2.0F);
      homeLight0.setHeight(0.0F);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      homeLight0.isTopLeftPointAt(421.97F, (-1425.8F), 421.97F);
      homeLight0.isPointAt(421.97F, 2671.644F, 2900.204F);
      // Undeclared exception!
      try { 
        uRLContent0.getJAREntryName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      float float0 = 0.0F;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      float float1 = (-1011.5782F);
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(false);
      float float2 = (-1868.0F);
      homeLight0.getColor();
      // Undeclared exception!
      try { 
        homeLight0.setHeight(2.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.byteValueExact();
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1011.5782F), 0.0F, 2671.644F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameYOffset(2675.905F);
      HomeLight homeLight1 = new HomeLight(homeLight0);
      homeLight0.setNameXOffset((-505.7891F));
      homeLight0.getPriceValueAddedTaxIncluded();
      HomeLight homeLight2 = homeLight0.clone();
      HomeLight homeLight3 = homeLight0.clone();
      homeLight3.setAngle((-1011.5782F));
      homeLight3.getValueAddedTaxPercentage();
      homeLight2.setNameAngle((-598.0F));
      homeLight3.getTexture();
      homeLight1.setMovable(true);
      Integer.valueOf((-2460));
      Integer.valueOf(0);
      Integer.valueOf((-2460));
      Integer.valueOf(1);
      Integer integer0 = Integer.valueOf(125);
      homeLight1.setColor(integer0);
      homeLight0.setX(125);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("com.etks.sweethXme7f.tols.RContent", "com.etks.sweethXme7f.tols.RContent", "com.etks.sweethXme7f.tols.RContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "com.etks.sweethXme7f.tols.RContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.etks.sweethXme7f.tols.RContent", propertyChangeListener0);
      homeLight0.removePropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, (-0.05F), (-1011.5782F), (-1011.5782F), (-1011.5782F), true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.containsPoint(1285.12F, (-1.0F), (-0.05F));
      homeLight0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight((String) null, "H#44", (String) null, (Content) null, (Content) null, uRLContent0, 1.0F, 0.5F, (-4013.38F), 0.0F, false, lightSourceArray0, (float[][]) null, "yKrZ2OfzT", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isNameCenterPointAt(1238.3544F, (-3321.0F), 4.979265F);
      homeLight0.isBottomLeftPointAt((-1214.7709F), 888.12897F, 2416.316F);
      homeLight0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0.6531434F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "com.etks.sweethome7d.tols.RContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopLeftPointAt(0.0F, 0.0F, 0.0F);
      // Undeclared exception!
      try { 
        homeLight0.setWidth(0.6531434F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      float[][] floatArray0 = new float[8][2];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1877.5317F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 1877.5317F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[0] = 1877.5317F;
      floatArray2[1] = 1083.6884F;
      floatArray2[2] = 1877.5317F;
      floatArray2[3] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 1877.5317F;
      floatArray3[1] = 1083.6884F;
      floatArray3[2] = 1.0F;
      floatArray3[3] = 1083.6884F;
      floatArray3[4] = 1083.6884F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      floatArray4[0] = 1.0F;
      floatArray4[1] = 1083.6884F;
      floatArray4[2] = 1.0F;
      floatArray4[3] = 0.0F;
      floatArray4[4] = 1083.6884F;
      floatArray4[5] = (-1575.0F);
      floatArray4[6] = 1877.5317F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[1];
      floatArray5[0] = 3739.637F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[1];
      floatArray6[0] = 3739.637F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[7];
      floatArray7[0] = (-1575.0F);
      floatArray7[1] = (-1575.0F);
      floatArray7[2] = 3739.637F;
      floatArray7[3] = 1083.6884F;
      floatArray7[4] = 1083.6884F;
      floatArray7[5] = 1.0F;
      floatArray7[6] = 1.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[5];
      floatArray8[0] = 1.0F;
      floatArray8[1] = 3739.637F;
      floatArray8[2] = 1083.6884F;
      floatArray8[3] = 1083.6884F;
      floatArray8[4] = 3739.637F;
      floatArray0[7] = floatArray8;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 1877.5317F, 1877.5317F, 1.0F, 1877.5317F, false, lightSourceArray0, floatArray0, "com.eteks.sweethome3d.tools.URLContent", true, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tols.URLContent", "com.eteks.sweethome3d.tols.URLContent", "com.eteks.sweethome3d.tols.URLContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0.33722955F, (-1463.2506F), (-1011.5782F), (-1011.5782F), true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tols.URLContent", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      Float.compare(2552.67F, 2552.67F);
      homeLight0.setShininess((Float) 2552.67F);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 0.0F, 0.0F, (-1011.58F), (-1011.58F), true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      catalogLight0.setCategory((FurnitureCategory) null);
      homeLight0.setModelMirrored(true);
      homeLight0.setColor((Integer) null);
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight((String) null, "H#44", (String) null, (Content) null, (Content) null, uRLContent0, 1.0F, 0.5F, 1.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "yKrZ2OfzT", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isNameCenterPointAt(1238.3544F, 0.5F, 4.979265F);
      homeLight0.setNameVisible(false);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      homeLight0.getPlanIcon();
      homeLight0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), (-0.6345943F), (-1011.5782F), true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setHeight((-1011.5782F));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      homeLight0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomeLight", "com.eteks.sweethome3d.model.HomeLight", "", uRLContent0, uRLContent0, (Content) null, 0.3926991F, (-1057.873F), (-57.6F), (-1510.7134F), false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomeLight", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameYOffset((-57.6F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setNameXOffset((-1057.873F));
      homeLight0.setAngle((-1510.7134F));
      HomeLight homeLight2 = new HomeLight(homeLight0);
      homeLight2.getPoints();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      homeLight2.setName("");
      homeLight1.getNameXOffset();
      homeLight1.isAtLevel((Level) null);
      homeLight0.getGroundElevation();
      homeLight1.setLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-201.5676F), (-201.5676F), (-0.04565376F), (-201.5676F), false, lightSourceArray0, (float[][]) null, "com.etks.sweethome7d.tols.RContent", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getGroundElevation();
      homeLight0.setName("com.etks.sweethome7d.tols.RContent");
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight((String) null, "iC=X:Y-V\"Keh", "iC=X:Y-V\"Keh", uRLContent0, (Content) null, (Content) null, 0.5F, 0.5F, 0.0F, 0.5F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomeFurnitureGroup", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameXOffset(0.0F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      catalogLight0.setCategory((FurnitureCategory) null);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = new HomeLight(homeLight1);
      homeLight2.getNameXOffset();
      homeLight0.isNameCenterPointAt(3.4028235E38F, (-1620.392F), (-1620.392F));
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      ResourceURLContent resourceURLContent1 = new ResourceURLContent((URL) null, false);
      CatalogLight catalogLight0 = new CatalogLight("", "jar", "Bep?=>M\"r*=~=1>", resourceURLContent1, resourceURLContent1, uRLContent0, (-555.72437F), (-1575.0F), 3.5676816F, 0.3926991F, false, lightSourceArray0, (float[][]) null, "bgg", false, bigDecimal1, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isTopLeftPointAt((-1842.0F), (-825.50885F), (-555.72437F));
      homeLight0.isDeformable();
      homeLight0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 0.0F, (-1510.4794F), (-1011.5782F), (-1011.5782F), true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      bigDecimal0.plus();
      homeLight0.setModelMirrored(true);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setDescription("v<P4uIo8 ");
      homeLight0.getValueAddedTaxPercentage();
      homeLight0.isTopLeftPointAt(859.1836F, (-1510.4794F), 2.0F);
      homeLight1.isResizable();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, 0.0F, (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setX((-2494.11F));
      Float float0 = new Float((-1510.4794F));
      homeLight0.setName("");
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      Float float1 = new Float(910.0F);
      Object object0 = new Object();
      float1.equals(object0);
      homeLight1.setShininess(float1);
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameVisible(true);
      homeLight0.setHeight((-1011.5782F));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      homeLight0.getCatalogId();
      homeLight0.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-965.72394F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setX((-3682.7F));
      homeLight1.getValueAddedTaxPercentage();
      homeLight1.getPriceValueAddedTaxIncluded();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.setAngle((-598.0F));
      homeLight1.getValueAddedTaxPercentage();
      homeLight2.setNameAngle(0.0F);
      homeLight1.getTexture();
      homeLight0.setMovable(false);
      homeLight0.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.58F), (-1510.4794F), 0.0F, (-2494.11F), true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getPriceValueAddedTaxIncluded();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setAngle((-1510.4794F));
      homeLight1.getValueAddedTaxPercentage();
      homeLight1.setNameAngle((-1.0F));
      homeLight1.getValueAddedTaxPercentage();
      homeLight1.setNameAngle((-1011.58F));
      homeLight0.getTexture();
      homeLight0.setMovable(true);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight((String) null, "H#44", (String) null, (Content) null, (Content) null, uRLContent0, 1.0F, 0.5F, 0.5F, 0.0F, false, lightSourceArray0, (float[][]) null, "yKrZ2OfzT", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isNameCenterPointAt(1238.3544F, 0.0F, 4.979265F);
      homeLight0.isBottomLeftPointAt((-1214.7709F), 888.12897F, 2416.316F);
      homeLight0.getNameStyle();
      homeLight0.isBottomRightPointAt(0.5F, 1238.3544F, 1.0F);
      homeLight0.containsPoint(4597.1963F, 0.0F, 4597.1963F);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[0];
      float[][] floatArray0 = new float[8][2];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1877.5317F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 1877.5317F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[0] = 1877.5317F;
      floatArray2[1] = 1083.6884F;
      floatArray2[2] = 1877.5317F;
      floatArray2[3] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 1877.5317F;
      floatArray3[1] = 1083.6884F;
      floatArray3[2] = 1.0F;
      floatArray3[3] = 1083.6884F;
      floatArray3[4] = 1083.6884F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      floatArray4[0] = 1.0F;
      floatArray4[1] = 1083.6884F;
      floatArray4[2] = 1.0F;
      floatArray4[3] = 0.0F;
      floatArray4[4] = 1083.6884F;
      floatArray4[5] = (-1575.0F);
      floatArray4[6] = 1877.5317F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[1];
      floatArray5[0] = 3739.637F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[1];
      floatArray6[0] = 3739.637F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[7];
      floatArray7[0] = (-1575.0F);
      floatArray7[1] = (-1575.0F);
      floatArray7[2] = 3739.637F;
      floatArray7[3] = 1083.6884F;
      floatArray7[4] = 1083.6884F;
      floatArray7[5] = 1.0F;
      floatArray7[6] = 1.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[5];
      floatArray8[0] = 1.0F;
      floatArray8[1] = 3739.637F;
      floatArray8[2] = 1083.6884F;
      floatArray8[3] = 1083.6884F;
      floatArray8[4] = 3739.637F;
      floatArray0[7] = floatArray8;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 1877.5317F, 1877.5317F, 1.0F, 1877.5317F, false, lightSourceArray0, floatArray0, "com.eteks.sweethome3d.tools.URLContent", true, bigDecimal0, bigDecimal0);
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isVisible();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      byte byte0 = bigDecimal0.byteValueExact();
      assertEquals((byte)10, byte0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1011.5782F), 0.0F, 2671.644F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$9", false, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2671.644F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2671.644F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getName());
      assertEquals(2671.644F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(2671.644F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getDescription());
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameYOffset(2675.905F);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2671.644F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getName());
      assertEquals(2671.644F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(2671.644F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getDescription());
      assertEquals(2675.905F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0, lightSourceArray0.length);
      
      HomeLight homeLight1 = new HomeLight(homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2671.644F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getName());
      assertEquals(2671.644F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(2671.644F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getDescription());
      assertEquals(2675.905F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2671.644F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(2675.905F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight1.getDescription());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight1.getName());
      assertEquals("", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(2671.644F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      homeLight0.setNameXOffset((-505.7891F));
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2671.644F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getName());
      assertEquals(2671.644F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(2671.644F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-505.7891F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getDescription());
      assertEquals(2675.905F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0, lightSourceArray0.length);
      
      BigDecimal bigDecimal1 = homeLight0.getPriceValueAddedTaxIncluded();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2671.644F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getName());
      assertEquals(2671.644F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(2671.644F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-505.7891F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getDescription());
      assertEquals(2675.905F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((short)110, bigDecimal1.shortValue());
      assertEquals((byte)110, bigDecimal1.byteValue());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(bigDecimal1);
      
      HomeLight homeLight2 = homeLight0.clone();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2671.644F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getName());
      assertEquals(2671.644F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(2671.644F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-505.7891F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getDescription());
      assertEquals(2675.905F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2671.644F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals((-505.7891F), homeLight2.getNameXOffset(), 0.01F);
      assertEquals(2671.644F, homeLight2.getElevation(), 0.01F);
      assertEquals((-1011.5782F), homeLight2.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight2.getDescription());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getShininess());
      assertEquals((-505.7891F), homeLight2.getY(), 0.01F);
      assertEquals((-505.7891F), homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(2675.905F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("", homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight2.getName());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight2);
      
      homeLight2.setAngle((-1011.5782F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2671.644F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getName());
      assertEquals(2671.644F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(2671.644F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-505.7891F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getDescription());
      assertEquals(2675.905F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2671.644F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals((-505.7891F), homeLight2.getNameXOffset(), 0.01F);
      assertEquals(2671.644F, homeLight2.getElevation(), 0.01F);
      assertEquals((-1011.5782F), homeLight2.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight2.getDescription());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getShininess());
      assertEquals((-505.7891F), homeLight2.getY(), 0.01F);
      assertEquals((-505.7891F), homeLight2.getX(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(2675.905F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("", homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertEquals(0.014648421F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight2.getName());
      assertEquals(0, lightSourceArray0.length);
      
      BigDecimal bigDecimal2 = homeLight2.getValueAddedTaxPercentage();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2671.644F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getName());
      assertEquals(2671.644F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(2671.644F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-505.7891F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getDescription());
      assertEquals(2675.905F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2671.644F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals((-505.7891F), homeLight2.getNameXOffset(), 0.01F);
      assertEquals(2671.644F, homeLight2.getElevation(), 0.01F);
      assertEquals((-1011.5782F), homeLight2.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight2.getDescription());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getShininess());
      assertEquals((-505.7891F), homeLight2.getY(), 0.01F);
      assertEquals((-505.7891F), homeLight2.getX(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(2675.905F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("", homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertEquals(0.014648421F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight2.getName());
      assertEquals((short)10, bigDecimal2.shortValue());
      assertEquals((byte)10, bigDecimal2.byteValue());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(bigDecimal2);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", propertyChangeListener0);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      homeLight0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2671.644F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getName());
      assertEquals(2671.644F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(2671.644F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-505.7891F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getDescription());
      assertEquals(2675.905F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(0, lightSourceArray0.length);
      
      homeLight0.setNameAngle((-598.0F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2671.644F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getName());
      assertEquals(2671.644F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(2671.644F, homeLight0.getElevation(), 0.01F);
      assertEquals(5.1857896F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-505.7891F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getDescription());
      assertEquals(2675.905F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0, lightSourceArray0.length);
      
      HomeTexture homeTexture0 = homeLight2.getTexture();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2671.644F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getName());
      assertEquals(2671.644F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(2671.644F, homeLight0.getElevation(), 0.01F);
      assertEquals(5.1857896F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-505.7891F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getDescription());
      assertEquals(2675.905F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2671.644F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals((-505.7891F), homeLight2.getNameXOffset(), 0.01F);
      assertEquals(2671.644F, homeLight2.getElevation(), 0.01F);
      assertEquals((-1011.5782F), homeLight2.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight2.getDescription());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getShininess());
      assertEquals((-505.7891F), homeLight2.getY(), 0.01F);
      assertEquals((-505.7891F), homeLight2.getX(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(2675.905F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("", homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertEquals(0.014648421F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight2.getName());
      assertEquals(0, lightSourceArray0.length);
      assertNull(homeTexture0);
      
      homeLight1.setMovable(true);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2671.644F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getName());
      assertEquals(2671.644F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(2671.644F, homeLight0.getElevation(), 0.01F);
      assertEquals(5.1857896F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-505.7891F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getDescription());
      assertEquals(2675.905F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2671.644F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(2675.905F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight1.getDescription());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight1.getName());
      assertEquals("", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(2671.644F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0, lightSourceArray0.length);
      
      Integer integer0 = Integer.valueOf((-2460));
      assertEquals((-2460), (int)integer0);
      assertNotNull(integer0);
      
      homeLight1.setNameStyle((TextStyle) null);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2671.644F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getName());
      assertEquals(2671.644F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(2671.644F, homeLight0.getElevation(), 0.01F);
      assertEquals(5.1857896F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-505.7891F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getDescription());
      assertEquals(2675.905F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2671.644F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(2675.905F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight1.getDescription());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight1.getName());
      assertEquals("", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(2671.644F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0, lightSourceArray0.length);
      
      boolean boolean0 = homeLight1.isTopLeftPointAt((-505.7891F), 4103.4F, 2671.644F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertFalse(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2671.644F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getName());
      assertEquals(2671.644F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(2671.644F, homeLight0.getElevation(), 0.01F);
      assertEquals(5.1857896F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-505.7891F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getDescription());
      assertEquals(2675.905F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2671.644F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(2675.905F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight1.getDescription());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight1.getName());
      assertEquals("", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(2671.644F, homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0, lightSourceArray0.length);
      
      float float0 = homeLight0.getGroundElevation();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals(2671.644F, float0, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2671.644F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getName());
      assertEquals(2671.644F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(2671.644F, homeLight0.getElevation(), 0.01F);
      assertEquals(5.1857896F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-505.7891F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getDescription());
      assertEquals(2675.905F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0, lightSourceArray0.length);
      
      String string0 = homeLight0.getDescription();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", string0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2671.644F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getName());
      assertEquals(2671.644F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(2671.644F, homeLight0.getElevation(), 0.01F);
      assertEquals(5.1857896F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-505.7891F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getDescription());
      assertEquals(2675.905F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(string0);
      
      homeLight2.setNameXOffset(4012.6248F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2671.644F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getName());
      assertEquals(2671.644F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(2671.644F, homeLight0.getElevation(), 0.01F);
      assertEquals(5.1857896F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-505.7891F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getDescription());
      assertEquals(2675.905F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2671.644F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(4012.6248F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(2671.644F, homeLight2.getElevation(), 0.01F);
      assertEquals((-1011.5782F), homeLight2.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight2.getDescription());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getShininess());
      assertEquals((-505.7891F), homeLight2.getY(), 0.01F);
      assertEquals((-505.7891F), homeLight2.getX(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(2675.905F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("", homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertEquals(0.014648421F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight2.getName());
      assertEquals(0, lightSourceArray0.length);
      
      boolean boolean1 = homeLight2.isTexturable();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertTrue(boolean1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(boolean1 == boolean0);
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals(2671.644F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getId());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", catalogLight0.getName());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getName());
      assertEquals(2671.644F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(2671.644F, homeLight0.getElevation(), 0.01F);
      assertEquals(5.1857896F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals((-505.7891F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight0.getDescription());
      assertEquals(2675.905F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2671.644F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(4012.6248F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(2671.644F, homeLight2.getElevation(), 0.01F);
      assertEquals((-1011.5782F), homeLight2.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight2.getDescription());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getShininess());
      assertEquals((-505.7891F), homeLight2.getY(), 0.01F);
      assertEquals((-505.7891F), homeLight2.getX(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(2675.905F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("", homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertEquals(0.014648421F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$9", homeLight2.getName());
      assertEquals(0, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      float[][] floatArray0 = new float[8][2];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1877.5317F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 1.0F;
      floatArray1[3] = 1877.5317F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 1877.5317F;
      floatArray2[1] = 1083.6884F;
      floatArray2[3] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 1877.5317F;
      floatArray3[1] = 1083.6884F;
      floatArray3[2] = 1.0F;
      floatArray3[4] = 1083.6884F;
      floatArray0[2] = floatArray1;
      float[] floatArray4 = new float[7];
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      
      floatArray4[0] = 1.0F;
      floatArray4[1] = 1083.6884F;
      floatArray4[2] = 1.0F;
      floatArray4[3] = 0.0F;
      floatArray4[4] = 1083.6884F;
      floatArray4[5] = (-1575.0F);
      floatArray4[6] = 1877.5317F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[1];
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray2));
      
      floatArray5[0] = 3739.637F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[1];
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray2));
      
      floatArray6[0] = 3739.637F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[7];
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray6));
      
      floatArray7[0] = (-1575.0F);
      floatArray7[1] = (-1575.0F);
      floatArray7[2] = 3739.637F;
      floatArray7[3] = 1083.6884F;
      floatArray7[4] = 1083.6884F;
      floatArray7[5] = 1.0F;
      floatArray7[6] = 1.0F;
      floatArray0[6] = floatArray7;
      floatArray0[7] = floatArray6;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 1877.5317F, 1877.5317F, 1.0F, 1877.5317F, false, lightSourceArray0, floatArray0, "com.eteks.sweethome3d.tools.URLContent", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1877.5317F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertEquals(1877.5317F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals(1877.5317F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0, lightSourceArray0.length);
      assertEquals(8, floatArray0.length);
      assertNotNull(catalogLight0);
      
      LightSource[] lightSourceArray1 = catalogLight0.getLightSources();
      assertSame(lightSourceArray0, lightSourceArray1);
      assertSame(lightSourceArray1, lightSourceArray0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1877.5317F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertEquals(1877.5317F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals(1877.5317F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0, lightSourceArray0.length);
      assertEquals(8, floatArray0.length);
      assertEquals(0, lightSourceArray1.length);
      assertNotNull(lightSourceArray1);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(938.76587F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(938.76587F, homeLight0.getX(), 0.01F);
      assertEquals(1877.5317F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals(1877.5317F, homeLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals(1877.5317F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1877.5317F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1877.5317F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertEquals(1877.5317F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals(1877.5317F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0, lightSourceArray0.length);
      assertEquals(8, floatArray0.length);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isTopLeftPointAt(0.0F, 1.0F, 1083.6884F);
      assertSame(lightSourceArray0, lightSourceArray1);
      assertTrue(boolean0);
      assertEquals(938.76587F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(938.76587F, homeLight0.getX(), 0.01F);
      assertEquals(1877.5317F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertEquals(1877.5317F, homeLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals(1877.5317F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1877.5317F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCurrency());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(1877.5317F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertEquals(1877.5317F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals(1877.5317F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0, lightSourceArray0.length);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", uRLContent0, uRLContent0, uRLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", true, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getName());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setY(0.0F);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals(0, lightSourceArray0.length);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      homeLight0.setNameYOffset(0.0F);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals(0, lightSourceArray0.length);
      
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight1.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isMovable());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      homeLight1.setDescription("com.eteks.sweethome3d.model.HomePieceOfFurniture$5");
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight1.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isMovable());
      assertEquals(0, lightSourceArray0.length);
      
      homeLight0.setAngle(0.0F);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertEquals(0, lightSourceArray0.length);
      
      HomeLight homeLight2 = homeLight0.clone();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getDescription());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isMovable());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight2.getDescription());
      assertNull(homeLight2.getColor());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight2);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("om.eteks.sweethome3d.tools.URLContent", "om.eteks.sweethome3d.tools.URLContent", "om.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, (-0.6345943F), (-0.6345943F), (-0.6345943F), (-0.6345943F), true, lightSourceArray0, (float[][]) null, "om.eteks.sweethome3d.tools.URLContent", true, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-0.6345943F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertEquals((-0.6345943F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-0.6345943F), catalogLight0.getDepth(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-0.6345943F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-0.6345943F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertEquals((-0.6345943F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-0.6345943F), catalogLight0.getDepth(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-0.6345943F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-0.6345943F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals((-0.6345943F), homeLight0.getHeight(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals((-0.31729716F), homeLight0.getY(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-0.31729716F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-0.6345943F), homeLight0.getDepth(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-0.6345943F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertEquals((-0.6345943F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-0.6345943F), catalogLight0.getDepth(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-0.6345943F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-0.6345943F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals((-0.6345943F), homeLight0.getHeight(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals((-0.31729716F), homeLight0.getY(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-0.31729716F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-0.6345943F), homeLight0.getDepth(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      String string0 = homeLight0.getCatalogId();
      assertEquals("om.eteks.sweethome3d.tools.URLContent", string0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-0.6345943F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertEquals((-0.6345943F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-0.6345943F), catalogLight0.getDepth(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-0.6345943F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-0.6345943F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals((-0.6345943F), homeLight0.getHeight(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals((-0.31729716F), homeLight0.getY(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-0.31729716F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-0.6345943F), homeLight0.getDepth(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(string0);
      
      Content content0 = homeLight0.getPlanIcon();
      assertSame(uRLContent0, content0);
      assertSame(content0, uRLContent0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-0.6345943F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertEquals((-0.6345943F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-0.6345943F), catalogLight0.getDepth(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-0.6345943F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-0.6345943F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals((-0.6345943F), homeLight0.getHeight(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals((-0.31729716F), homeLight0.getY(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-0.31729716F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-0.6345943F), homeLight0.getDepth(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(content0);
      
      float float0 = homeLight0.getGroundElevation();
      assertSame(uRLContent0, content0);
      assertEquals((-0.6345943F), float0, 0.01F);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-0.6345943F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertEquals((-0.6345943F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getCurrency());
      assertEquals((-0.6345943F), catalogLight0.getDepth(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-0.6345943F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-0.6345943F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals((-0.6345943F), homeLight0.getHeight(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals((-0.31729716F), homeLight0.getY(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-0.31729716F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-0.6345943F), homeLight0.getDepth(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight((String) null, "H#44", (String) null, uRLContent0, uRLContent0, uRLContent0, 0.0F, 0.5F, (-4013.38F), 0.0F, false, lightSourceArray0, (float[][]) null, "yKrZ2OfzT", false, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-4013.38F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("yKrZ2OfzT", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("H#44", catalogLight0.getName());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-4013.38F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("yKrZ2OfzT", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("H#44", catalogLight0.getName());
      assertEquals(0.5F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("H#44", homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.25F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-4013.38F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      CatalogLight catalogLight1 = new CatalogLight("", "n", "Ll+\"", uRLContent0, uRLContent0, uRLContent0, (-1819.7834F), 0.0F, (-841.3531F), (-2243.7075F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertFalse(catalogLight1.equals((Object)catalogLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight1.isResizable());
      assertEquals(0.0F, catalogLight1.getDepth(), 0.01F);
      assertFalse(catalogLight1.isMovable());
      assertEquals("n", catalogLight1.getName());
      assertFalse(catalogLight1.isBackFaceShown());
      assertNull(catalogLight1.getStaircaseCutOutShape());
      assertEquals((-1819.7834F), catalogLight1.getWidth(), 0.01F);
      assertFalse(catalogLight1.isModifiable());
      assertNull(catalogLight1.getCreationDate());
      assertEquals((-841.3531F), catalogLight1.getHeight(), 0.01F);
      assertEquals("", catalogLight1.getCreator());
      assertFalse(catalogLight1.isDoorOrWindow());
      assertTrue(catalogLight1.isProportional());
      assertNull(catalogLight1.getCurrency());
      assertTrue(catalogLight1.isTexturable());
      assertEquals(0.3926991F, catalogLight1.getIconYaw(), 0.01F);
      assertNull(catalogLight1.getGrade());
      assertNull(catalogLight1.getColor());
      assertEquals("", catalogLight1.getId());
      assertEquals((-2243.7075F), catalogLight1.getElevation(), 0.01F);
      assertNull(catalogLight1.getInformation());
      assertTrue(catalogLight1.isDeformable());
      assertEquals("Ll+\"", catalogLight1.getDescription());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight1);
      
      HomeLight homeLight1 = new HomeLight(homeLight0);
      assertFalse(catalogLight0.equals((Object)catalogLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-4013.38F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("yKrZ2OfzT", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("H#44", catalogLight0.getName());
      assertEquals(0.5F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("H#44", homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.25F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-4013.38F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getDescription());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-4013.38F), homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.25F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("H#44", homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      homeLight0.setNameVisible(false);
      assertNotSame(catalogLight0, catalogLight1);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(catalogLight0.equals((Object)catalogLight1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-4013.38F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("yKrZ2OfzT", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("H#44", catalogLight0.getName());
      assertEquals(0.5F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("H#44", homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.25F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-4013.38F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0, lightSourceArray0.length);
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      String string0 = homeLight1.getCatalogId();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(catalogLight0, catalogLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(catalogLight0.equals((Object)catalogLight1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-4013.38F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("yKrZ2OfzT", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("H#44", catalogLight0.getName());
      assertEquals(0.5F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("H#44", homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.25F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-4013.38F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getDescription());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-4013.38F), homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.25F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("H#44", homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0, lightSourceArray0.length);
      assertNull(string0);
      
      Content content0 = homeLight0.getPlanIcon();
      assertSame(uRLContent0, content0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(catalogLight0, catalogLight1);
      assertNotSame(homeLight0, homeLight1);
      assertSame(content0, uRLContent0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(catalogLight0.equals((Object)catalogLight1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-4013.38F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("yKrZ2OfzT", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("H#44", catalogLight0.getName());
      assertEquals(0.5F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("H#44", homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.25F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-4013.38F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(content0);
      
      float float0 = homeLight0.getGroundElevation();
      assertSame(uRLContent0, content0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(catalogLight0, catalogLight1);
      assertNotSame(homeLight0, homeLight1);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(catalogLight0.equals((Object)catalogLight1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-4013.38F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("yKrZ2OfzT", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("H#44", catalogLight0.getName());
      assertEquals(0.5F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("H#44", homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.25F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-4013.38F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0, lightSourceArray0.length);
      
      float float1 = homeLight1.getX();
      assertSame(uRLContent0, content0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(catalogLight0, catalogLight1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(catalogLight0.equals((Object)catalogLight1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(float1, float0, 0.01F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-4013.38F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("yKrZ2OfzT", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("H#44", catalogLight0.getName());
      assertEquals(0.5F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("H#44", homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.25F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-4013.38F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getDescription());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-4013.38F), homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.25F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("H#44", homeLight1.getName());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      BigDecimal bigDecimal1 = homeLight1.getValueAddedTaxPercentage();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = homeLight1.getPriceValueAddedTaxIncluded();
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getColor());
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertEquals((short)110, bigDecimal2.shortValue());
      assertEquals((byte)110, bigDecimal2.byteValue());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(bigDecimal2);
      
      Integer integer0 = new Integer(56);
      assertEquals(56, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("c/Ohobr3~vL", 56);
      assertEquals(56, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int0 = Integer.max(1, 56);
      assertEquals(56, int0);
      
      Integer integer2 = Integer.getInteger("com.eteks.sweethome3d.model.HomePieceOfFurniture$8", integer1);
      assertEquals(56, (int)integer2);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      boolean boolean0 = integer0.equals(integer1);
      assertTrue(boolean0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      homeLight1.setColor(integer1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals(56, (int)homeLight1.getColor());
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertEquals(0, lightSourceArray0.length);
      
      boolean boolean1 = homeLight1.isDoorOrWindow();
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean1 == boolean0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals(56, (int)homeLight1.getColor());
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertEquals(0, lightSourceArray0.length);
      
      boolean boolean2 = homeLight0.isDoorOrWindow();
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(boolean2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-201.5676F), (-201.5676F), (-0.04565376F), (-201.5676F), true, lightSourceArray0, (float[][]) null, "com.etks.sweethome7d.tols.RContent", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-201.5676F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-201.5676F), catalogLight0.getWidth(), 0.01F);
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertEquals((-0.04565376F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-201.5676F), catalogLight0.getElevation(), 0.01F);
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getCreator());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-201.5676F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-201.5676F), catalogLight0.getWidth(), 0.01F);
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertEquals((-0.04565376F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-201.5676F), catalogLight0.getElevation(), 0.01F);
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getCreator());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-201.5676F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals((-0.04565376F), homeLight0.getHeight(), 0.01F);
      assertEquals((-201.5676F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("com.etks.sweethome7d.tols.RContent", homeLight0.getCatalogId());
      assertEquals((-100.7838F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-100.7838F), homeLight0.getX(), 0.01F);
      assertEquals((-201.5676F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-201.5676F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals("com.etks.sweethome7d.tols.RContent", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("com.etks.sweethome7d.tols.RContent", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      float float0 = homeLight0.getGroundElevation();
      assertEquals((-201.5676F), float0, 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-201.5676F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-201.5676F), catalogLight0.getWidth(), 0.01F);
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertEquals((-0.04565376F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-201.5676F), catalogLight0.getElevation(), 0.01F);
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getCreator());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-201.5676F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals((-0.04565376F), homeLight0.getHeight(), 0.01F);
      assertEquals((-201.5676F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("com.etks.sweethome7d.tols.RContent", homeLight0.getCatalogId());
      assertEquals((-100.7838F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-100.7838F), homeLight0.getX(), 0.01F);
      assertEquals((-201.5676F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-201.5676F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals("com.etks.sweethome7d.tols.RContent", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("com.etks.sweethome7d.tols.RContent", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      float float1 = homeLight0.getNameAngle();
      assertEquals(0.0F, float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-201.5676F), catalogLight0.getDepth(), 0.01F);
      assertEquals((-201.5676F), catalogLight0.getWidth(), 0.01F);
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getName());
      assertNull(catalogLight0.getColor());
      assertEquals((-0.04565376F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-201.5676F), catalogLight0.getElevation(), 0.01F);
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getCreator());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getId());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-201.5676F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals((-0.04565376F), homeLight0.getHeight(), 0.01F);
      assertEquals((-201.5676F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("com.etks.sweethome7d.tols.RContent", homeLight0.getCatalogId());
      assertEquals((-100.7838F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-100.7838F), homeLight0.getX(), 0.01F);
      assertEquals((-201.5676F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-201.5676F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals("com.etks.sweethome7d.tols.RContent", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("com.etks.sweethome7d.tols.RContent", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      CatalogLight catalogLight0 = new CatalogLight("k", "com.eteks.sweethome7d.tools.URContent", "I5ZB4c{RX^IIlJ", uRLContent0, uRLContent0, uRLContent0, 2.0F, 0.0F, (-1011.5782F), 0.0F, true, lightSourceArray0, (float[][]) null, "_>GF%H)}q\"9\":7", true, bigDecimal0, bigDecimal1);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("k", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      LightSource[] lightSourceArray1 = catalogLight0.getLightSources();
      assertSame(lightSourceArray0, lightSourceArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(lightSourceArray1, lightSourceArray0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("k", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0, lightSourceArray0.length);
      assertEquals(0, lightSourceArray1.length);
      assertNotNull(lightSourceArray1);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("k", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("k", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isTopLeftPointAt(0.0F, 0.0F, 0.0F);
      assertSame(lightSourceArray0, lightSourceArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(boolean0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("k", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("k", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0, lightSourceArray0.length);
      
      float float0 = homeLight0.getElevation();
      assertSame(lightSourceArray0, lightSourceArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("k", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("k", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0, lightSourceArray0.length);
      
      homeLight0.setDepth((-1011.5782F));
      assertSame(lightSourceArray0, lightSourceArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("k", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("k", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0, lightSourceArray0.length);
      
      homeLight0.setHeight((-1228.4304F));
      assertSame(lightSourceArray0, lightSourceArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("k", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1228.4304F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("k", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0, lightSourceArray0.length);
      
      Level level0 = new Level("|'V@E;A@#Iyl", 1.0F, 0.0F, (-2992.0F));
      assertEquals((-2992.0F), level0.getHeight(), 0.01F);
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("|'V@E;A@#Iyl", level0.getName());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      assertEquals((-2992.0F), level0.getHeight(), 0.01F);
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("|'V@E;A@#Iyl", level0.getName());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals((-2992.0F), level1.getHeight(), 0.01F);
      assertEquals(1.0F, level1.getElevation(), 0.01F);
      assertEquals("|'V@E;A@#Iyl", level1.getName());
      assertTrue(level1.isVisible());
      assertNotNull(level1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      homeLight0.setModelMirrored(true);
      assertSame(lightSourceArray0, lightSourceArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("k", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1228.4304F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("k", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isModelMirrored());
      assertEquals(0, lightSourceArray0.length);
      
      float float1 = homeLight0.getGroundElevation();
      assertSame(lightSourceArray0, lightSourceArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("k", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1228.4304F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("k", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isModelMirrored());
      assertEquals(0, lightSourceArray0.length);
      
      Content content0 = homeLight0.getIcon();
      assertSame(content0, uRLContent0);
      assertSame(uRLContent0, content0);
      assertSame(lightSourceArray0, lightSourceArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("k", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1228.4304F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("k", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isModelMirrored());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(content0);
      
      float float2 = homeLight0.getX();
      assertSame(uRLContent0, content0);
      assertSame(lightSourceArray0, lightSourceArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(1.0F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("k", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1228.4304F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("k", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isModelMirrored());
      assertEquals(0, lightSourceArray0.length);
      
      float float3 = homeLight0.getNameAngle();
      assertSame(uRLContent0, content0);
      assertSame(lightSourceArray0, lightSourceArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(0.0F, float3, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("k", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-1011.5782F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1228.4304F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("k", homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isModelMirrored());
      assertEquals(0, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, 0.0F, (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals("", homeLight0.getDescription());
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals("", homeLight0.getDescription());
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("", homeLight1.getDescription());
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      homeLight0.setNameVisible(false);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals("", homeLight0.getDescription());
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0, lightSourceArray0.length);
      
      HomeLight homeLight2 = homeLight0.clone();
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals("", homeLight0.getDescription());
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getShininess());
      assertEquals((-1510.4794F), homeLight2.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals((-755.2397F), homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isTexturable());
      assertEquals((-2494.11F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals((-2494.11F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("", homeLight2.getName());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight2);
      
      BigDecimal bigDecimal1 = homeLight2.getValueAddedTaxPercentage();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals("", homeLight0.getDescription());
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getShininess());
      assertEquals((-1510.4794F), homeLight2.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals((-755.2397F), homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isTexturable());
      assertEquals((-2494.11F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals((-2494.11F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("", homeLight2.getName());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = homeLight2.getPriceValueAddedTaxIncluded();
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals("", homeLight0.getDescription());
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getShininess());
      assertEquals((-1510.4794F), homeLight2.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals((-755.2397F), homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isTexturable());
      assertEquals((-2494.11F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals((-2494.11F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("", homeLight2.getName());
      assertEquals((short)110, bigDecimal2.shortValue());
      assertEquals((byte)110, bigDecimal2.byteValue());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(bigDecimal2);
      
      BigDecimal bigDecimal3 = homeLight2.getPrice();
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertSame(bigDecimal3, bigDecimal0);
      assertSame(bigDecimal3, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertEquals("", homeLight0.getDescription());
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getShininess());
      assertEquals((-1510.4794F), homeLight2.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals((-755.2397F), homeLight2.getY(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isTexturable());
      assertEquals((-2494.11F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals((-2494.11F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("", homeLight2.getName());
      assertEquals((byte)10, bigDecimal3.byteValue());
      assertEquals((short)10, bigDecimal3.shortValue());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(bigDecimal3);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 0.0F, (-1510.4794F), (-1011.5782F), (-1011.5782F), true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-1011.5782F), catalogLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreator());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-1011.5782F), catalogLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreator());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-1011.5782F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1011.5782F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-1011.5782F), catalogLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreator());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-1011.5782F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1011.5782F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isDeformable());
      assertEquals((-1011.5782F), homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getDescription());
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-1011.5782F), homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals((-1011.5782F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isMovable());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      homeLight0.setDepth(1.0F);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-1011.5782F), catalogLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreator());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-1011.5782F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1011.5782F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      homeLight0.setColor((Integer) null);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-1011.5782F), catalogLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCreator());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-1011.5782F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1011.5782F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", true, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(7, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(homeLight0.isResizable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(7, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setModelMirrored(false);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(homeLight0.isResizable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(7, lightSourceArray0.length);
      
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getDescription());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getName());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(7, lightSourceArray0.length);
      assertNotNull(homeLight1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-965.72394F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals((-965.72394F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals((-965.72394F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-482.86197F), homeLight0.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals((-965.72394F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameYOffset((-809.6F));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals((-965.72394F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getName());
      assertEquals((-809.6F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-482.86197F), homeLight0.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals((-965.72394F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(1, lightSourceArray0.length);
      
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals((-965.72394F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("", homeLight1.getName());
      assertEquals((-965.72394F), homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-482.86197F), homeLight1.getX(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      homeLight0.setNameXOffset(893.0F);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals((-965.72394F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getName());
      assertEquals((-809.6F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(893.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-482.86197F), homeLight0.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals((-965.72394F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(1, lightSourceArray0.length);
      
      BigDecimal bigDecimal1 = bigDecimal0.scaleByPowerOfTen(29);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      boolean boolean0 = homeLight1.isPointAt((-1.0F), (-1800.28F), (-809.6F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals((-965.72394F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("", homeLight1.getName());
      assertEquals((-965.72394F), homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-482.86197F), homeLight1.getX(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertEquals(1, lightSourceArray0.length);
      
      HomeLight homeLight2 = homeLight0.clone();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals((-965.72394F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getName());
      assertEquals((-809.6F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(893.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-482.86197F), homeLight0.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals((-965.72394F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals((-965.72394F), homeLight2.getWidth(), 0.01F);
      assertEquals(893.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals((-809.6F), homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-1510.4794F), homeLight2.getDepth(), 0.01F);
      assertEquals((-482.86197F), homeLight2.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight2.getElevation(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("", homeLight2.getName());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getColor());
      assertEquals((-2494.11F), homeLight2.getGroundElevation(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight2.getCatalogId());
      assertEquals((-755.2397F), homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight2);
      
      homeLight1.setAngle((-809.6F));
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals((-965.72394F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("", homeLight1.getName());
      assertEquals((-965.72394F), homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.93092906F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-482.86197F), homeLight1.getX(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertEquals(1, lightSourceArray0.length);
      
      BigDecimal bigDecimal2 = homeLight0.getValueAddedTaxPercentage();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals((-965.72394F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getName());
      assertEquals((-809.6F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(893.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-482.86197F), homeLight0.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals((-965.72394F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals((short)10, bigDecimal2.shortValue());
      assertEquals((byte)10, bigDecimal2.byteValue());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(bigDecimal2);
      
      float float0 = homeLight2.getNameXOffset();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertEquals(893.0F, float0, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals((-965.72394F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getName());
      assertEquals((-809.6F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(893.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-482.86197F), homeLight0.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals((-965.72394F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals((-965.72394F), homeLight2.getWidth(), 0.01F);
      assertEquals(893.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals((-809.6F), homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-1510.4794F), homeLight2.getDepth(), 0.01F);
      assertEquals((-482.86197F), homeLight2.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight2.getElevation(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("", homeLight2.getName());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getColor());
      assertEquals((-2494.11F), homeLight2.getGroundElevation(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight2.getCatalogId());
      assertEquals((-755.2397F), homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertEquals(1, lightSourceArray0.length);
      
      BigDecimal bigDecimal3 = homeLight2.getPriceValueAddedTaxIncluded();
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals((-965.72394F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getName());
      assertEquals((-809.6F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(893.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-482.86197F), homeLight0.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals((-965.72394F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals((-965.72394F), homeLight2.getWidth(), 0.01F);
      assertEquals(893.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals((-809.6F), homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-1510.4794F), homeLight2.getDepth(), 0.01F);
      assertEquals((-482.86197F), homeLight2.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight2.getElevation(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals("", homeLight2.getName());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getColor());
      assertEquals((-2494.11F), homeLight2.getGroundElevation(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight2.getCatalogId());
      assertEquals((-755.2397F), homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertEquals((byte)110, bigDecimal3.byteValue());
      assertEquals((short)110, bigDecimal3.shortValue());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(bigDecimal3);
      
      Integer integer0 = homeLight1.getColor();
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals((-965.72394F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals("", homeLight1.getName());
      assertEquals((-965.72394F), homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.93092906F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-482.86197F), homeLight1.getX(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertEquals(1, lightSourceArray0.length);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), false, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(false);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertTrue(homeLight2.isDeformable());
      assertNull(homeLight2.getCurrency());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals((-505.7891F), homeLight2.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isMovable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals((-755.2397F), homeLight2.getY(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals((-2494.11F), homeLight2.getElevation(), 0.01F);
      assertEquals((-1510.4794F), homeLight2.getDepth(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight2);
      
      boolean boolean0 = homeLight2.containsPoint((-1510.4794F), (-1263.3F), 0.0F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertTrue(homeLight2.isDeformable());
      assertNull(homeLight2.getCurrency());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals((-505.7891F), homeLight2.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isMovable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals((-755.2397F), homeLight2.getY(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals((-2494.11F), homeLight2.getElevation(), 0.01F);
      assertEquals((-1510.4794F), homeLight2.getDepth(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0, lightSourceArray0.length);
      
      Content content0 = homeLight1.getPlanIcon();
      assertSame(uRLContent0, content0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertSame(content0, uRLContent0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(content0);
      
      boolean boolean1 = homeLight2.isTopLeftPointAt(0.0F, (-1.0F), (-4339.68F));
      assertSame(uRLContent0, content0);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertTrue(boolean1 == boolean0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals((-2494.11F), homeLight1.getGroundElevation(), 0.01F);
      assertEquals((-505.7891F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-755.2397F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals((-1510.4794F), homeLight1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isNameVisible());
      assertEquals((-2494.11F), homeLight1.getElevation(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1011.5782F), homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertTrue(homeLight2.isDeformable());
      assertNull(homeLight2.getCurrency());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals((-505.7891F), homeLight2.getX(), 0.01F);
      assertEquals((-2494.11F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isMovable());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals((-755.2397F), homeLight2.getY(), 0.01F);
      assertEquals("", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals((-2494.11F), homeLight2.getElevation(), 0.01F);
      assertEquals((-1510.4794F), homeLight2.getDepth(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome7d.tools.URContent", "com.eteks.sweethome7d.tools.URContent", "com.eteks.sweethome7d.tools.URContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 2.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome7d.tools.URContent", true, bigDecimal0, bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isTopLeftPointAt(0.0F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      Float float0 = new Float(2.0F);
      assertEquals(2.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      HomeLight homeLight1 = new HomeLight(homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(2.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight1.getName());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      BigDecimal bigDecimal1 = homeLight1.getPrice();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome7d.tools.URContent", catalogLight0.getDescription());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(2.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight1.getName());
      assertTrue(homeLight1.isMovable());
      assertTrue(homeLight1.isResizable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isTexturable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome7d.tools.URContent", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight((String) null, "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", (Content) null, (Content) null, uRLContent0, 0.5F, (-2922.8584F), (-2922.8584F), 0.0F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.5F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.5F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.25F, homeLight0.getX(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1461.4292F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameXOffset(0.5F);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.5F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.25F, homeLight0.getX(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1461.4292F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.isPointAt(3.4028235E38F, (-1620.392F), 0.5F);
      assertFalse(boolean0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.5F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.25F, homeLight0.getX(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1461.4292F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0, lightSourceArray0.length);
      
      catalogLight0.setCategory((FurnitureCategory) null);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.5F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0, lightSourceArray0.length);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.5F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.25F, homeLight0.getX(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1461.4292F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.5F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.25F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1461.4292F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.5F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals((-2922.8584F), homeLight1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-2922.8584F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = new HomeLight(homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.5F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.25F, homeLight0.getX(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1461.4292F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.5F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.25F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1461.4292F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.5F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals((-2922.8584F), homeLight1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-2922.8584F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-2922.8584F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight2.getDescription());
      assertEquals(0.5F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.25F, homeLight2.getX(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getCatalogId());
      assertEquals((-1461.4292F), homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getShininess());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-2922.8584F), homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight2);
      
      float float0 = homeLight1.getNameXOffset();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(0.5F, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.5F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.25F, homeLight0.getX(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1461.4292F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.5F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.25F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1461.4292F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.5F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals((-2922.8584F), homeLight1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-2922.8584F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0, lightSourceArray0.length);
      
      float float1 = homeLight2.getGroundElevation();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.5F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.25F, homeLight0.getX(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1461.4292F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.5F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.25F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1461.4292F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.5F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals((-2922.8584F), homeLight1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-2922.8584F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-2922.8584F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight2.getDescription());
      assertEquals(0.5F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.25F, homeLight2.getX(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getCatalogId());
      assertEquals((-1461.4292F), homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getShininess());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals((-2922.8584F), homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      String string0 = homeLight1.getDescription();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", string0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.5F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.25F, homeLight0.getX(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1461.4292F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.5F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.25F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1461.4292F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.5F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals((-2922.8584F), homeLight1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-2922.8584F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(string0);
      
      float float2 = homeLight1.getElevation();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.5F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.25F, homeLight0.getX(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1461.4292F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.5F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.25F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1461.4292F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.5F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals((-2922.8584F), homeLight1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-2922.8584F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, (-1011.5782F), (-1510.4794F), 0.0F, (-2494.11F), true, lightSourceArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      homeLight0.setHeight((-1011.5782F));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTaxPercentage();
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(bigDecimal1);
      
      String string0 = homeLight0.getCatalogId();
      assertSame(bigDecimal0, bigDecimal1);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", string0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals((-2494.11F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals("", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getGrade());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertEquals((-1011.5782F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals((-2494.11F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-505.7891F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isResizable());
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertEquals((-2494.11F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1011.5782F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = new BigDecimal(737L);
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((byte) (-31), bigDecimal2.byteValue());
      assertEquals((short)737, bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      
      CatalogLight catalogLight0 = new CatalogLight("D>r/@O?Dw", "D>r/@O?Dw", "D>r/@O?Dw", uRLContent0, uRLContent0, uRLContent0, (-0.04565376F), (-0.04565376F), (-0.04565376F), (-201.5676F), false, lightSourceArray0, (float[][]) null, "D>r/@O?Dw", true, bigDecimal1, bigDecimal2);
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((byte) (-31), bigDecimal2.byteValue());
      assertEquals((short)737, bigDecimal2.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-201.5676F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-0.04565376F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-0.04565376F), catalogLight0.getWidth(), 0.01F);
      assertEquals("D>r/@O?Dw", catalogLight0.getId());
      assertEquals("D>r/@O?Dw", catalogLight0.getCreator());
      assertEquals("D>r/@O?Dw", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-0.04565376F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("D>r/@O?Dw", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((byte) (-31), bigDecimal2.byteValue());
      assertEquals((short)737, bigDecimal2.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-201.5676F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-0.04565376F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-0.04565376F), catalogLight0.getWidth(), 0.01F);
      assertEquals("D>r/@O?Dw", catalogLight0.getId());
      assertEquals("D>r/@O?Dw", catalogLight0.getCreator());
      assertEquals("D>r/@O?Dw", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-0.04565376F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("D>r/@O?Dw", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("D>r/@O?Dw", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-0.02282688F), homeLight0.getX(), 0.01F);
      assertEquals((-0.02282688F), homeLight0.getY(), 0.01F);
      assertEquals("D>r/@O?Dw", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-201.5676F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-0.04565376F), homeLight0.getHeight(), 0.01F);
      assertEquals((-201.5676F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals((-0.04565376F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals((-0.04565376F), homeLight0.getWidth(), 0.01F);
      assertEquals("D>r/@O?Dw", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      BigDecimal bigDecimal3 = homeLight0.getPriceValueAddedTaxIncluded();
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal3);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((byte) (-31), bigDecimal2.byteValue());
      assertEquals((short)737, bigDecimal2.shortValue());
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-201.5676F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals((-0.04565376F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isMovable());
      assertEquals((-0.04565376F), catalogLight0.getWidth(), 0.01F);
      assertEquals("D>r/@O?Dw", catalogLight0.getId());
      assertEquals("D>r/@O?Dw", catalogLight0.getCreator());
      assertEquals("D>r/@O?Dw", catalogLight0.getDescription());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-0.04565376F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("D>r/@O?Dw", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("D>r/@O?Dw", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-0.02282688F), homeLight0.getX(), 0.01F);
      assertEquals((-0.02282688F), homeLight0.getY(), 0.01F);
      assertEquals("D>r/@O?Dw", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-201.5676F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals((-0.04565376F), homeLight0.getHeight(), 0.01F);
      assertEquals((-201.5676F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals((-0.04565376F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals((-0.04565376F), homeLight0.getWidth(), 0.01F);
      assertEquals("D>r/@O?Dw", homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((byte) (-30), bigDecimal3.byteValue());
      assertEquals((short)738, bigDecimal3.shortValue());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(bigDecimal3);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = bigDecimal0.stripTrailingZeros();
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome7dtools.URContent", "com.eteks.sweethome7dtools.URContent", "I5ZB4c{RX^IIlJ", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 2.0F, 0.0F, 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome7dtools.URContent", false, bigDecimal0, bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertEquals("com.eteks.sweethome7dtools.URContent", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome7dtools.URContent", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("com.eteks.sweethome7dtools.URContent", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      LightSource[] lightSourceArray1 = catalogLight0.getLightSources();
      assertSame(lightSourceArray0, lightSourceArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(lightSourceArray1, lightSourceArray0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertEquals("com.eteks.sweethome7dtools.URContent", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome7dtools.URContent", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("com.eteks.sweethome7dtools.URContent", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertEquals(0, lightSourceArray1.length);
      assertNotNull(lightSourceArray1);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertEquals("com.eteks.sweethome7dtools.URContent", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome7dtools.URContent", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("com.eteks.sweethome7dtools.URContent", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isVisible());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("com.eteks.sweethome7dtools.URContent", homeLight0.getName());
      assertEquals("com.eteks.sweethome7dtools.URContent", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isTopLeftPointAt(0.0F, 0.0F, 0.0F);
      assertSame(lightSourceArray0, lightSourceArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertFalse(boolean0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertEquals("com.eteks.sweethome7dtools.URContent", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome7dtools.URContent", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("com.eteks.sweethome7dtools.URContent", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isVisible());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("com.eteks.sweethome7dtools.URContent", homeLight0.getName());
      assertEquals("com.eteks.sweethome7dtools.URContent", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      float float0 = homeLight0.getHeight();
      assertSame(lightSourceArray0, lightSourceArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertEquals("com.eteks.sweethome7dtools.URContent", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome7dtools.URContent", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("com.eteks.sweethome7dtools.URContent", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isVisible());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("com.eteks.sweethome7dtools.URContent", homeLight0.getName());
      assertEquals("com.eteks.sweethome7dtools.URContent", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      homeLight0.setElevation(3215.6697F);
      assertSame(lightSourceArray0, lightSourceArray1);
      assertSame(bigDecimal0, bigDecimal1);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getGrade());
      assertEquals("com.eteks.sweethome7dtools.URContent", catalogLight0.getCreator());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome7dtools.URContent", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals("com.eteks.sweethome7dtools.URContent", catalogLight0.getName());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(3215.6697F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertTrue(homeLight0.isVisible());
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(3215.6697F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals("com.eteks.sweethome7dtools.URContent", homeLight0.getName());
      assertEquals("com.eteks.sweethome7dtools.URContent", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      Float float1 = new Float(2.0F);
      assertEquals(2.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      // Undeclared exception!
      try { 
        temporaryURLContent0.getJAREntryName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      BigDecimal bigDecimal2 = bigDecimal0.remainder(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertNotNull(bigDecimal2);
      
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomeTexture", "com.eteks.sweethome3d.model.FurnitureCategory", "com.eteks.sweethome3d.model.HomeTexture", resourceURLContent0, uRLContent0, resourceURLContent0, (-1575.0F), (-1575.0F), (-1575.0F), (-1575.0F), true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal2, bigDecimal2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogLight0.getId());
      assertEquals((-1575.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1575.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-1575.0F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", catalogLight0.getName());
      assertEquals((-1575.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogLight0.getId());
      assertEquals((-1575.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1575.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-1575.0F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", catalogLight0.getName());
      assertEquals((-1575.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homeLight0.getDescription());
      assertEquals((-1575.0F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1575.0F), homeLight0.getHeight(), 0.01F);
      assertEquals((-1575.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-787.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-787.5F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-1575.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1575.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setHeight((-2403.471F));
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogLight0.getId());
      assertEquals((-1575.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1575.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-1575.0F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", catalogLight0.getName());
      assertEquals((-1575.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homeLight0.getDescription());
      assertEquals((-2403.471F), homeLight0.getHeight(), 0.01F);
      assertEquals((-1575.0F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1575.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-787.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-787.5F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-1575.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1575.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      BigDecimal bigDecimal3 = homeLight0.getValueAddedTaxPercentage();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal3);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertSame(bigDecimal3, bigDecimal2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogLight0.getId());
      assertEquals((-1575.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1575.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-1575.0F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", catalogLight0.getName());
      assertEquals((-1575.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homeLight0.getDescription());
      assertEquals((-2403.471F), homeLight0.getHeight(), 0.01F);
      assertEquals((-1575.0F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1575.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-787.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-787.5F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-1575.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1575.0F), homeLight0.getWidth(), 0.01F);
      assertEquals((short)0, bigDecimal3.shortValue());
      assertEquals((byte)0, bigDecimal3.byteValue());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(bigDecimal3);
      
      String string0 = homeLight0.getCatalogId();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal3);
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", string0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal3));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogLight0.getId());
      assertEquals((-1575.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1575.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-1575.0F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", catalogLight0.getName());
      assertEquals((-1575.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homeLight0.getDescription());
      assertEquals((-2403.471F), homeLight0.getHeight(), 0.01F);
      assertEquals((-1575.0F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1575.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-787.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-787.5F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-1575.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1575.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(string0);
      
      homeLight0.setVisible(true);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal3);
      assertSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal3);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal2));
      assertFalse(bigDecimal1.equals((Object)bigDecimal3));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", catalogLight0.getId());
      assertEquals((-1575.0F), catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1575.0F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-1575.0F), catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", catalogLight0.getName());
      assertEquals((-1575.0F), catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.model.HomeTexture", homeLight0.getDescription());
      assertEquals((-2403.471F), homeLight0.getHeight(), 0.01F);
      assertEquals((-1575.0F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1575.0F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals((-787.5F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-787.5F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals((-1575.0F), homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-1575.0F), homeLight0.getWidth(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomeLight", "com.eteks.sweethome3d.model.HomeLight", "", uRLContent0, uRLContent0, (Content) null, 0.3926991F, (-1057.873F), (-57.6F), 1800.5114F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomeLight", false, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertEquals(1800.5114F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-57.6F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getName());
      assertEquals((-1057.873F), catalogLight0.getDepth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertEquals(1800.5114F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-57.6F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getName());
      assertEquals((-1057.873F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1800.5114F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-528.9365F), homeLight0.getY(), 0.01F);
      assertEquals((-1057.873F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1800.5114F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals((-57.6F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameYOffset((-57.6F));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertEquals(1800.5114F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-57.6F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getName());
      assertEquals((-1057.873F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1800.5114F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-528.9365F), homeLight0.getY(), 0.01F);
      assertEquals((-1057.873F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-57.6F), homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1800.5114F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals((-57.6F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertEquals(1800.5114F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-57.6F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getName());
      assertEquals((-1057.873F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(1800.5114F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-528.9365F), homeLight0.getY(), 0.01F);
      assertEquals((-1057.873F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-57.6F), homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1800.5114F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals((-57.6F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(1800.5114F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-528.9365F), homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1057.873F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(1800.5114F, homeLight1.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight1.getName());
      assertFalse(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-57.6F), homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals((-57.6F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      homeLight0.setAngle(1800.5114F);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertEquals(1800.5114F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-57.6F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getName());
      assertEquals((-1057.873F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(3.5203547F, homeLight0.getAngle(), 0.01F);
      assertEquals(1800.5114F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals((-528.9365F), homeLight0.getY(), 0.01F);
      assertEquals((-1057.873F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-57.6F), homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1800.5114F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals((-57.6F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(1, lightSourceArray0.length);
      
      HomeLight homeLight2 = new HomeLight(homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertEquals(1800.5114F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-57.6F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getName());
      assertEquals((-1057.873F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(3.5203547F, homeLight0.getAngle(), 0.01F);
      assertEquals(1800.5114F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals((-528.9365F), homeLight0.getY(), 0.01F);
      assertEquals((-1057.873F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-57.6F), homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1800.5114F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals((-57.6F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(3.5203547F, homeLight2.getAngle(), 0.01F);
      assertEquals(1800.5114F, homeLight2.getElevation(), 0.01F);
      assertEquals((-1057.873F), homeLight2.getDepth(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals(1800.5114F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getX(), 0.01F);
      assertEquals((-57.6F), homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isTexturable());
      assertEquals((-528.9365F), homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isResizable());
      assertEquals((-57.6F), homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight2.getCatalogId());
      assertFalse(homeLight2.isMovable());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight2);
      
      BigDecimal bigDecimal1 = homeLight2.getValueAddedTaxPercentage();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertEquals(1800.5114F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-57.6F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getName());
      assertEquals((-1057.873F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(3.5203547F, homeLight0.getAngle(), 0.01F);
      assertEquals(1800.5114F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals((-528.9365F), homeLight0.getY(), 0.01F);
      assertEquals((-1057.873F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-57.6F), homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1800.5114F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals((-57.6F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(3.5203547F, homeLight2.getAngle(), 0.01F);
      assertEquals(1800.5114F, homeLight2.getElevation(), 0.01F);
      assertEquals((-1057.873F), homeLight2.getDepth(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertEquals(1800.5114F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight2.getX(), 0.01F);
      assertEquals((-57.6F), homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isTexturable());
      assertEquals((-528.9365F), homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertTrue(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isResizable());
      assertEquals((-57.6F), homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight2.getCatalogId());
      assertFalse(homeLight2.isMovable());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(bigDecimal1);
      
      float float0 = homeLight1.getNameXOffset();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertEquals(1800.5114F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-57.6F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getName());
      assertEquals((-1057.873F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(3.5203547F, homeLight0.getAngle(), 0.01F);
      assertEquals(1800.5114F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals((-528.9365F), homeLight0.getY(), 0.01F);
      assertEquals((-1057.873F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-57.6F), homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1800.5114F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals((-57.6F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(1800.5114F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-528.9365F), homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1057.873F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(1800.5114F, homeLight1.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight1.getName());
      assertFalse(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-57.6F), homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals((-57.6F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean0 = homeLight1.isNameCenterPointAt(0.3926991F, (-41.06785F), 641.00854F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertTrue(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertEquals(1800.5114F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-57.6F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getName());
      assertEquals((-1057.873F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(3.5203547F, homeLight0.getAngle(), 0.01F);
      assertEquals(1800.5114F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals((-528.9365F), homeLight0.getY(), 0.01F);
      assertEquals((-1057.873F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-57.6F), homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1800.5114F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals((-57.6F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(1800.5114F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((-528.9365F), homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-1057.873F), homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(1800.5114F, homeLight1.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight1.getName());
      assertFalse(homeLight1.isResizable());
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals((-57.6F), homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals((-57.6F), homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(1, lightSourceArray0.length);
      
      HomeLight homeLight3 = (HomeLight)homeLight0.clone();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isMovable());
      assertEquals(1800.5114F, catalogLight0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getCreator());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getId());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-57.6F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", catalogLight0.getName());
      assertEquals((-1057.873F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.19634955F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(3.5203547F, homeLight0.getAngle(), 0.01F);
      assertEquals(1800.5114F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals((-528.9365F), homeLight0.getY(), 0.01F);
      assertEquals((-1057.873F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-57.6F), homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.3926991F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1800.5114F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals((-57.6F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight3.getShininess());
      assertFalse(homeLight3.isResizable());
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertFalse(homeLight3.isMovable());
      assertEquals(3.5203547F, homeLight3.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight3.getName());
      assertEquals((-528.9365F), homeLight3.getY(), 0.01F);
      assertEquals(0.19634955F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals((-57.6F), homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertNull(homeLight3.getColor());
      assertEquals(1800.5114F, homeLight3.getGroundElevation(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals("com.eteks.sweethome3d.model.HomeLight", homeLight3.getCatalogId());
      assertEquals(0.3926991F, homeLight3.getWidth(), 0.01F);
      assertEquals((-57.6F), homeLight3.getHeight(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertNull(homeLight3.getCurrency());
      assertEquals((-1057.873F), homeLight3.getDepth(), 0.01F);
      assertEquals(1800.5114F, homeLight3.getElevation(), 0.01F);
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertEquals("", homeLight3.getDescription());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight3);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.WIDTH;
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("rsu_`{", "com.eteks.sweethome3d.tools.URLContent", "1.5.0_16", uRLContent0, uRLContent0, uRLContent0, 3.5676816F, 0.0F, (-1011.5782F), 334.8F, false, lightSourceArray0, (float[][]) null, "`NwB7Zht+\"ce<H$p", false, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("`NwB7Zht+\"ce<H$p", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertEquals(334.8F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("rsu_`{", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertEquals(3.5676816F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("`NwB7Zht+\"ce<H$p", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertEquals(334.8F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("rsu_`{", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertEquals(3.5676816F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals("1.5.0_16", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals(3.5676816F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(334.8F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.7838408F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(334.8F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("rsu_`{", homeLight0.getCatalogId());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("`NwB7Zht+\"ce<H$p", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertEquals(334.8F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("rsu_`{", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertEquals(3.5676816F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals("1.5.0_16", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals(3.5676816F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(334.8F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.7838408F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(334.8F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("rsu_`{", homeLight0.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertEquals("rsu_`{", homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertEquals(3.5676816F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1011.5782F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(1.7838408F, homeLight1.getX(), 0.01F);
      assertEquals("1.5.0_16", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(334.8F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(334.8F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      homeLight1.setDescription("");
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("`NwB7Zht+\"ce<H$p", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertEquals(334.8F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("rsu_`{", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertEquals(3.5676816F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals("1.5.0_16", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals(3.5676816F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(334.8F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.7838408F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(334.8F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("rsu_`{", homeLight0.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertEquals("rsu_`{", homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertEquals(3.5676816F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1011.5782F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(1.7838408F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(334.8F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(334.8F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0, lightSourceArray0.length);
      
      BigDecimal bigDecimal1 = homeLight1.getValueAddedTaxPercentage();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("`NwB7Zht+\"ce<H$p", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertEquals(334.8F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("rsu_`{", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertEquals(3.5676816F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals("1.5.0_16", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals(3.5676816F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(334.8F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.7838408F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(334.8F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("rsu_`{", homeLight0.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertEquals("rsu_`{", homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertEquals(3.5676816F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1011.5782F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(1.7838408F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(334.8F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(334.8F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(bigDecimal1);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("`NwB7Zht+\"ce<H$p", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertEquals(334.8F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("rsu_`{", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertEquals(3.5676816F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals("1.5.0_16", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals(3.5676816F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(334.8F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.7838408F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(334.8F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("rsu_`{", homeLight0.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertEquals("rsu_`{", homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertEquals(3.5676816F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1011.5782F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(1.7838408F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(334.8F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(334.8F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(3.5676816F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals((-1011.5782F), homeLight2.getHeight(), 0.01F);
      assertEquals("rsu_`{", homeLight2.getCatalogId());
      assertFalse(homeLight2.isMovable());
      assertEquals(1.7838408F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(334.8F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals(334.8F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isDeformable());
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight2.getName());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight2);
      
      BigDecimal bigDecimal2 = homeLight2.getPriceValueAddedTaxIncluded();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("`NwB7Zht+\"ce<H$p", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertEquals(334.8F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("rsu_`{", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertEquals(3.5676816F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals("1.5.0_16", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals(3.5676816F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(334.8F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.7838408F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(334.8F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("rsu_`{", homeLight0.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertEquals("rsu_`{", homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertEquals(3.5676816F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1011.5782F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(1.7838408F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(334.8F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(334.8F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(3.5676816F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertEquals((-1011.5782F), homeLight2.getHeight(), 0.01F);
      assertEquals("rsu_`{", homeLight2.getCatalogId());
      assertFalse(homeLight2.isMovable());
      assertEquals(1.7838408F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(334.8F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertEquals(334.8F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertTrue(homeLight2.isDeformable());
      assertFalse(homeLight2.isModelMirrored());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight2.getName());
      assertTrue(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals("", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((byte)110, bigDecimal2.byteValue());
      assertEquals((short)110, bigDecimal2.shortValue());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(bigDecimal2);
      
      homeLight1.setX((-1011.5782F));
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("`NwB7Zht+\"ce<H$p", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertEquals(334.8F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("rsu_`{", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertEquals(3.5676816F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals("1.5.0_16", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals(3.5676816F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(334.8F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.7838408F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(334.8F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("rsu_`{", homeLight0.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertEquals("rsu_`{", homeLight1.getCatalogId());
      assertFalse(homeLight1.isMovable());
      assertEquals(3.5676816F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1011.5782F), homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertTrue(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals((-1011.5782F), homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(334.8F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(334.8F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals("", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0, lightSourceArray0.length);
      
      float float0 = homeLight0.getY();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals("`NwB7Zht+\"ce<H$p", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals("1.5.0_16", catalogLight0.getDescription());
      assertEquals(334.8F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals("rsu_`{", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertEquals(3.5676816F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals("1.5.0_16", homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals(3.5676816F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(334.8F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1.7838408F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(334.8F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("rsu_`{", homeLight0.getCatalogId());
      assertEquals(0, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", uRLContent0, uRLContent0, uRLContent0, 2671.644F, 0.5F, 0.0F, 0.5F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$5", false, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.5F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(2671.644F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.5F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(2671.644F, catalogLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.25F, homeLight0.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1335.822F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(2671.644F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", (PropertyChangeListener) null);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Level level0 = new Level("|'V@E;A@#Iyl", 2671.644F, 1558.8F, (-2992.0F));
      assertEquals(1558.8F, level0.getFloorThickness(), 0.01F);
      assertEquals("|'V@E;A@#Iyl", level0.getName());
      assertEquals(2671.644F, level0.getElevation(), 0.01F);
      assertEquals((-2992.0F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      assertEquals(1558.8F, level0.getFloorThickness(), 0.01F);
      assertEquals("|'V@E;A@#Iyl", level0.getName());
      assertEquals(2671.644F, level0.getElevation(), 0.01F);
      assertEquals((-2992.0F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertTrue(level1.isVisible());
      assertEquals(1558.8F, level1.getFloorThickness(), 0.01F);
      assertEquals((-2992.0F), level1.getHeight(), 0.01F);
      assertEquals(2671.644F, level1.getElevation(), 0.01F);
      assertEquals("|'V@E;A@#Iyl", level1.getName());
      assertNotNull(level1);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("e5,Yz_", propertyChangeListenerProxy0);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("e5,Yz_", propertyChangeListenerProxy1.getPropertyName());
      assertNotNull(propertyChangeListenerProxy1);
      
      boolean boolean0 = homeLight0.isBottomRightPointAt(2671.644F, 0.0F, (-481.7236F));
      assertFalse(boolean0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getId());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getName());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.5F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.5F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", catalogLight0.getDescription());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals(2671.644F, catalogLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.25F, homeLight0.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(1335.822F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$5", homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(2671.644F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "", "", uRLContent0, uRLContent0, uRLContent0, 0.0F, 0.0F, 0.0F, 1704.0F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1704.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1704.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1704.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1704.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1704.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1704.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1704.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(1704.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getDescription());
      assertEquals(1704.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = homeLight1.getPriceValueAddedTaxIncluded();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1704.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1704.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1704.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(1704.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getDescription());
      assertEquals(1704.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((byte)110, bigDecimal2.byteValue());
      assertEquals((short)110, bigDecimal2.shortValue());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(bigDecimal2);
      
      HomeLight homeLight2 = new HomeLight(homeLight0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1704.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1704.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1704.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals("", homeLight2.getDescription());
      assertEquals(1704.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertNull(homeLight2.getColor());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight2.getCatalogId());
      assertTrue(homeLight2.isTexturable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(1704.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertEquals("", homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight2);
      
      HomeLight homeLight3 = homeLight0.clone();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1704.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1704.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1704.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isResizable());
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertFalse(homeLight3.isMovable());
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(1704.0F, homeLight3.getElevation(), 0.01F);
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals("", homeLight3.getName());
      assertFalse(homeLight3.isNameVisible());
      assertEquals("", homeLight3.getDescription());
      assertEquals(1704.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight3);
      
      homeLight0.setAngle(0.0F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1704.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1704.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1704.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.isBottomRightPointAt(0.0F, 0.0F, 0.0F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1704.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1704.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1704.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0, lightSourceArray0.length);
      
      float[][] floatArray0 = homeLight3.getModelRotation();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1704.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1704.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1704.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight3.getCatalogId());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isResizable());
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isDeformable());
      assertTrue(homeLight3.isVisible());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertEquals(0.0F, homeLight3.getHeight(), 0.01F);
      assertNull(homeLight3.getCurrency());
      assertFalse(homeLight3.isMovable());
      assertEquals(0.0F, homeLight3.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isModelMirrored());
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertFalse(homeLight3.isDoorOrWindow());
      assertEquals(1704.0F, homeLight3.getElevation(), 0.01F);
      assertFalse(homeLight3.isBackFaceShown());
      assertEquals("", homeLight3.getName());
      assertFalse(homeLight3.isNameVisible());
      assertEquals("", homeLight3.getDescription());
      assertEquals(1704.0F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight3.getWidth(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertEquals(3, floatArray0.length);
      assertNotNull(floatArray0);
      
      homeLight0.setTexture((HomeTexture) null);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1704.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1704.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1704.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0, lightSourceArray0.length);
      
      float[][] floatArray1 = homeLight1.getModelRotation();
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1704.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1704.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1704.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(1704.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertTrue(homeLight1.isTexturable());
      assertEquals("", homeLight1.getDescription());
      assertEquals(1704.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean boolean1 = homeLight0.isBottomRightPointAt(1704.0F, 0.0F, 0.0F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(boolean1);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertTrue(boolean1 == boolean0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(1704.0F, catalogLight0.getElevation(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(1704.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1704.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertEquals(0, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("om.eteks.sweethome3d.tools.URLContent", "om.eteks.sweethome3d.tools.URLContent", "om.eteks.sweethome3d.tools.URLContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-0.6345943F), (-0.6345943F), (-0.6345943F), (-0.6345943F), true, lightSourceArray0, (float[][]) null, "om.eteks.sweethome3d.tools.URLContent", true, bigDecimal0, bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-0.6345943F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals((-0.6345943F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals((-0.6345943F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-0.6345943F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-0.6345943F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals((-0.6345943F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals((-0.6345943F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-0.6345943F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-0.31729716F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-0.31729716F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-0.6345943F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-0.6345943F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getWidth(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-0.6345943F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals((-0.6345943F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals((-0.6345943F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-0.6345943F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-0.31729716F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-0.31729716F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-0.6345943F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-0.6345943F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getWidth(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.intersectsRectangle((-1610.12F), (-0.6345943F), (-0.6345943F), (-1610.12F));
      assertFalse(boolean0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-0.6345943F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals((-0.6345943F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals((-0.6345943F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-0.6345943F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-0.31729716F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-0.31729716F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-0.6345943F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-0.6345943F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getWidth(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0, lightSourceArray0.length);
      
      boolean boolean1 = homeLight0.isPointAt((-0.6345943F), (-0.6345943F), (-1874.303F));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-0.6345943F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals((-0.6345943F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals((-0.6345943F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-0.6345943F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-0.31729716F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-0.31729716F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-0.6345943F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-0.6345943F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getWidth(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0, lightSourceArray0.length);
      
      homeLight0.setName("om.eteks.sweethome3d.tools.URLContent");
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-0.6345943F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals((-0.6345943F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isMovable());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertEquals((-0.6345943F), catalogLight0.getWidth(), 0.01F);
      assertEquals((-0.6345943F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertEquals((-0.31729716F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals((-0.31729716F), homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-0.6345943F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("om.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-0.6345943F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getWidth(), 0.01F);
      assertEquals((-0.6345943F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[8];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      CatalogLight catalogLight0 = new CatalogLight("KiHGW66,9M^'L#jT", "0R@((h@KL>", "KiHGW66,9M^'L#jT", uRLContent0, uRLContent0, uRLContent0, 3823.0F, (-1510.4794F), 0.0F, 3823.0F, true, lightSourceArray0, (float[][]) null, "dkMt", false, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("0R@((h@KL>", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(3823.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(3823.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertEquals("dkMt", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals("KiHGW66,9M^'L#jT", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isMovable());
      assertEquals("KiHGW66,9M^'L#jT", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(8, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("0R@((h@KL>", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(3823.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(3823.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertEquals("dkMt", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals("KiHGW66,9M^'L#jT", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isMovable());
      assertEquals("KiHGW66,9M^'L#jT", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(3823.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(3823.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("0R@((h@KL>", homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(1911.5F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("KiHGW66,9M^'L#jT", homeLight0.getCatalogId());
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(3823.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("KiHGW66,9M^'L#jT", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertEquals(8, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isBottomRightPointAt(34.07875F, (-1.0F), (-281.0F));
      assertSame(bigDecimal0, bigDecimal1);
      assertFalse(boolean0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("0R@((h@KL>", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(3823.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(3823.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertEquals("dkMt", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals("KiHGW66,9M^'L#jT", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isMovable());
      assertEquals("KiHGW66,9M^'L#jT", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(3823.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(3823.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("0R@((h@KL>", homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(1911.5F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("KiHGW66,9M^'L#jT", homeLight0.getCatalogId());
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(3823.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("KiHGW66,9M^'L#jT", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertEquals(8, lightSourceArray0.length);
      
      boolean boolean1 = homeLight0.isPointAt((-680.0F), 3823.0F, 3823.0F);
      assertSame(bigDecimal0, bigDecimal1);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("0R@((h@KL>", catalogLight0.getName());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(3823.0F, catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertEquals(3823.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertEquals("dkMt", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals("KiHGW66,9M^'L#jT", catalogLight0.getId());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isMovable());
      assertEquals("KiHGW66,9M^'L#jT", catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(3823.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(3823.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("0R@((h@KL>", homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals(1911.5F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("KiHGW66,9M^'L#jT", homeLight0.getCatalogId());
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(3823.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("KiHGW66,9M^'L#jT", homeLight0.getDescription());
      assertTrue(homeLight0.isTexturable());
      assertEquals(8, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = bigDecimal0.ulp();
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      CatalogLight catalogLight0 = new CatalogLight((String) null, "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", (Content) null, (Content) null, uRLContent0, (-1.6689475F), (-2922.8584F), (-2922.8584F), 0.0F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", false, bigDecimal0, bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getId());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1.6689475F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getId());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1.6689475F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1461.4292F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-1.6689475F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-0.8344737F), homeLight0.getX(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.move((-1.0F), (-1.0F));
      assertSame(bigDecimal0, bigDecimal1);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getId());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1.6689475F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1462.4292F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.8344737F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-1.6689475F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getId());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1.6689475F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1462.4292F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.8344737F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-1.6689475F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getColor());
      assertEquals((-1462.4292F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-1.6689475F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals((-2922.8584F), homeLight1.getDepth(), 0.01F);
      assertEquals((-1.8344737F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-2922.8584F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      BigDecimal bigDecimal2 = homeLight0.getValueAddedTaxPercentage();
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getId());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1.6689475F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1462.4292F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.8344737F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-1.6689475F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertEquals((byte)1, bigDecimal2.byteValue());
      assertEquals((short)1, bigDecimal2.shortValue());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(bigDecimal2);
      
      BigDecimal bigDecimal3 = homeLight0.getPriceValueAddedTaxIncluded();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(bigDecimal3, bigDecimal0);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(bigDecimal3.equals((Object)bigDecimal0));
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertFalse(bigDecimal3.equals((Object)bigDecimal1));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getId());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1.6689475F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1462.4292F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.8344737F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-1.6689475F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertEquals((byte)2, bigDecimal3.byteValue());
      assertEquals((short)2, bigDecimal3.shortValue());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(bigDecimal3);
      
      HomeLight homeLight2 = homeLight0.clone();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getId());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1.6689475F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1462.4292F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.8344737F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-1.6689475F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isTexturable());
      assertEquals((-2922.8584F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals((-2922.8584F), homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertEquals((-1.6689475F), homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals((-1462.4292F), homeLight2.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight2.getDescription());
      assertFalse(homeLight2.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isResizable());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals((-1.8344737F), homeLight2.getX(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight2);
      
      homeLight1.setAngle(0.0F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getId());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1.6689475F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1462.4292F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.8344737F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-1.6689475F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getColor());
      assertEquals((-1462.4292F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-1.6689475F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals((-2922.8584F), homeLight1.getDepth(), 0.01F);
      assertEquals((-1.8344737F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-2922.8584F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      boolean boolean0 = homeLight1.isBottomRightPointAt(1.0F, 0.3926991F, 1.0F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertFalse(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getId());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1.6689475F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1462.4292F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.8344737F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-1.6689475F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getColor());
      assertEquals((-1462.4292F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-1.6689475F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals((-2922.8584F), homeLight1.getDepth(), 0.01F);
      assertEquals((-1.8344737F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-2922.8584F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      float[][] floatArray0 = homeLight0.getModelRotation();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getId());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1.6689475F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1462.4292F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.8344737F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-1.6689475F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertEquals(3, floatArray0.length);
      assertNotNull(floatArray0);
      
      homeLight2.setTexture((HomeTexture) null);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getId());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1.6689475F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1462.4292F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.8344737F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-1.6689475F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertTrue(homeLight2.isTexturable());
      assertEquals((-2922.8584F), homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals((-2922.8584F), homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertEquals((-1.6689475F), homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals((-1462.4292F), homeLight2.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight2.getDescription());
      assertFalse(homeLight2.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isResizable());
      assertTrue(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals((-1.8344737F), homeLight2.getX(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      float[][] floatArray1 = homeLight1.getModelRotation();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal3);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(floatArray1, floatArray0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getId());
      assertEquals((-2922.8584F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals((-1.6689475F), catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals((-1462.4292F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1.8344737F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals((-1.6689475F), homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getColor());
      assertEquals((-1462.4292F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals((-1.6689475F), homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals((-2922.8584F), homeLight1.getDepth(), 0.01F);
      assertEquals((-1.8344737F), homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals((-2922.8584F), homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertEquals(3, floatArray1.length);
      assertNotNull(floatArray1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      CatalogLight catalogLight0 = new CatalogLight("", "com.eteks.sweethome3d.tools.URLContent", "I5ZB4c{RX^IIlJ", uRLContent0, uRLContent0, uRLContent0, 2.0F, 454.1299F, (-1011.5782F), 454.1299F, true, lightSourceArray0, (float[][]) null, "_>GF%H)}q\"9\":7", true, bigDecimal0, bigDecimal1);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(454.1299F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals(454.1299F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(16);
      assertEquals(16, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      Integer integer3 = Integer.valueOf(16);
      assertEquals(16, (int)integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      boolean boolean0 = integer3.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(454.1299F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals(454.1299F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(454.1299F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(454.1299F, homeLight0.getElevation(), 0.01F);
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(454.1299F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(227.06496F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(454.1299F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals(454.1299F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(454.1299F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(454.1299F, homeLight0.getElevation(), 0.01F);
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(454.1299F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(227.06496F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isNameVisible());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0, lightSourceArray0.length);
      
      homeLight0.setColor(integer2);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(454.1299F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals(454.1299F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(454.1299F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(454.1299F, homeLight0.getElevation(), 0.01F);
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(454.1299F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(227.06496F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(16, (int)homeLight0.getColor());
      assertTrue(homeLight0.isNameVisible());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      boolean boolean1 = homeLight0.isTopRightPointAt(0, 0, 3.4028235E38F);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(454.1299F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals(454.1299F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(454.1299F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(454.1299F, homeLight0.getElevation(), 0.01F);
      assertEquals(2.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(454.1299F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(227.06496F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(16, (int)homeLight0.getColor());
      assertTrue(homeLight0.isNameVisible());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      homeLight0.setWidth((-2290.56F));
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(454.1299F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals(454.1299F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(454.1299F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(454.1299F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(454.1299F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(227.06496F, homeLight0.getY(), 0.01F);
      assertEquals((-2290.56F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(16, (int)homeLight0.getColor());
      assertTrue(homeLight0.isNameVisible());
      assertEquals((-1011.5782F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      homeLight0.setHeight(454.1299F);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(454.1299F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals(454.1299F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(454.1299F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(454.1299F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(454.1299F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals(227.06496F, homeLight0.getY(), 0.01F);
      assertEquals((-2290.56F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(16, (int)homeLight0.getColor());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(454.1299F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      homeLight0.setY(16);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(454.1299F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals(454.1299F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(454.1299F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(454.1299F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(16.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(454.1299F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals((-2290.56F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(16, (int)homeLight0.getColor());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(454.1299F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      boolean boolean2 = homeLight0.isBottomRightPointAt((-764.1931F), 0, 1330.85F);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(454.1299F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertEquals("_>GF%H)}q\"9\":7", catalogLight0.getCreator());
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1011.5782F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("I5ZB4c{RX^IIlJ", catalogLight0.getDescription());
      assertTrue(catalogLight0.isMovable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCurrency());
      assertEquals(454.1299F, catalogLight0.getDepth(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertEquals(2.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(454.1299F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals("I5ZB4c{RX^IIlJ", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(454.1299F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(16.0F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(454.1299F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getX(), 0.01F);
      assertEquals((-2290.56F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(16, (int)homeLight0.getColor());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(454.1299F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(3.4028235E38F, 0.5F, 1318.93F, 2);
      assertEquals(1318.93F, lightSource0.getZ(), 0.01F);
      assertEquals(2, lightSource0.getColor());
      assertEquals(3.4028235E38F, lightSource0.getX(), 0.01F);
      assertEquals(0.5F, lightSource0.getY(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.OperatingSystem$2", (String) null, "com.eteks.sweethome3d.tools.OperatingSystem$2", (Content) null, uRLContent0, uRLContent0, 1318.93F, 3.4028235E38F, (-2922.8584F), 0.3926991F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.OperatingSystem$2", false, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getCreator());
      assertNull(catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getDescription());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1318.93F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getCreator());
      assertNull(catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getDescription());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1318.93F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertEquals(1318.93F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(3.4028235E38F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(659.465F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight0.getDescription());
      assertEquals(1.7014117E38F, homeLight0.getY(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getCreator());
      assertNull(catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getDescription());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1318.93F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertEquals(1318.93F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(3.4028235E38F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(659.465F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight0.getDescription());
      assertEquals(1.7014117E38F, homeLight0.getY(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight1.getCatalogId());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(3.4028235E38F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight1.getDescription());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(659.465F, homeLight1.getX(), 0.01F);
      assertEquals(1.7014117E38F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.3926991F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(1318.93F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-2922.8584F), homeLight1.getHeight(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      BigDecimal bigDecimal1 = homeLight1.getValueAddedTaxPercentage();
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertSame(bigDecimal1, bigDecimal0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getCreator());
      assertNull(catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getDescription());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1318.93F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertEquals(1318.93F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(3.4028235E38F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(659.465F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight0.getDescription());
      assertEquals(1.7014117E38F, homeLight0.getY(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight1.getCatalogId());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(3.4028235E38F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight1.getDescription());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(659.465F, homeLight1.getX(), 0.01F);
      assertEquals(1.7014117E38F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.3926991F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(1318.93F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-2922.8584F), homeLight1.getHeight(), 0.01F);
      assertEquals((short)10, bigDecimal1.shortValue());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(bigDecimal1);
      
      HomeLight homeLight2 = new HomeLight(catalogLight0);
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getCreator());
      assertNull(catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getDescription());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1318.93F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(659.465F, homeLight2.getX(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(1.7014117E38F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getColor());
      assertEquals(1318.93F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(3.4028235E38F, homeLight2.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight2.getDescription());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-2922.8584F), homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight2.getCatalogId());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight2);
      
      BigDecimal bigDecimal2 = homeLight2.getPriceValueAddedTaxIncluded();
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getCreator());
      assertNull(catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getDescription());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1318.93F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(659.465F, homeLight2.getX(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(1.7014117E38F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getColor());
      assertEquals(1318.93F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(3.4028235E38F, homeLight2.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight2.getDescription());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-2922.8584F), homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight2.getCatalogId());
      assertEquals((byte)110, bigDecimal2.byteValue());
      assertEquals((short)110, bigDecimal2.shortValue());
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(bigDecimal2);
      
      HomeLight homeLight3 = new HomeLight(homeLight2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getCreator());
      assertNull(catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getDescription());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1318.93F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(659.465F, homeLight2.getX(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(1.7014117E38F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getColor());
      assertEquals(1318.93F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(3.4028235E38F, homeLight2.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight2.getDescription());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-2922.8584F), homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight2.getCatalogId());
      assertTrue(homeLight3.isVisible());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight3.getDescription());
      assertTrue(homeLight3.isDeformable());
      assertNull(homeLight3.getCurrency());
      assertEquals(3.4028235E38F, homeLight3.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeLight3.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight3.getCatalogId());
      assertEquals(1.7014117E38F, homeLight3.getY(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertFalse(homeLight3.isResizable());
      assertFalse(homeLight3.isMovable());
      assertEquals(0.3926991F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(1318.93F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(659.465F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isBackFaceShown());
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getName());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals((-2922.8584F), homeLight3.getHeight(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight3);
      
      HomeLight homeLight4 = homeLight3.clone();
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight4);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight4);
      assertNotSame(homeLight4, homeLight0);
      assertNotSame(homeLight4, homeLight1);
      assertNotSame(homeLight4, homeLight3);
      assertNotSame(homeLight4, homeLight2);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight4.equals((Object)homeLight0));
      assertFalse(homeLight4.equals((Object)homeLight1));
      assertFalse(homeLight4.equals((Object)homeLight3));
      assertFalse(homeLight4.equals((Object)homeLight2));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getCreator());
      assertNull(catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getDescription());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1318.93F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(659.465F, homeLight2.getX(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(1.7014117E38F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getColor());
      assertEquals(1318.93F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(3.4028235E38F, homeLight2.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight2.getDescription());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-2922.8584F), homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight2.getCatalogId());
      assertTrue(homeLight3.isVisible());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight3.getDescription());
      assertTrue(homeLight3.isDeformable());
      assertNull(homeLight3.getCurrency());
      assertEquals(3.4028235E38F, homeLight3.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeLight3.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight3.getCatalogId());
      assertEquals(1.7014117E38F, homeLight3.getY(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertFalse(homeLight3.isResizable());
      assertFalse(homeLight3.isMovable());
      assertEquals(0.3926991F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(1318.93F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(659.465F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isBackFaceShown());
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getName());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals((-2922.8584F), homeLight3.getHeight(), 0.01F);
      assertFalse(homeLight4.isMovable());
      assertEquals(0.3926991F, homeLight4.getElevation(), 0.01F);
      assertFalse(homeLight4.isResizable());
      assertEquals(1.7014117E38F, homeLight4.getY(), 0.01F);
      assertTrue(homeLight4.isVisible());
      assertNull(homeLight4.getShininess());
      assertEquals(0.0F, homeLight4.getNameYOffset(), 0.01F);
      assertTrue(homeLight4.isDeformable());
      assertEquals(0.3926991F, homeLight4.getGroundElevation(), 0.01F);
      assertNull(homeLight4.getCurrency());
      assertEquals(0.5F, homeLight4.getPower(), 0.01F);
      assertEquals(0.0F, homeLight4.getNameAngle(), 0.01F);
      assertNull(homeLight4.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight4.getDescription());
      assertEquals(0.0F, homeLight4.getAngle(), 0.01F);
      assertTrue(homeLight4.isTexturable());
      assertFalse(homeLight4.isDoorOrWindow());
      assertFalse(homeLight4.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight4.getCatalogId());
      assertEquals(1318.93F, homeLight4.getWidth(), 0.01F);
      assertNull(homeLight4.getColor());
      assertFalse(homeLight4.isNameVisible());
      assertEquals(0.0F, homeLight4.getNameXOffset(), 0.01F);
      assertNull(homeLight4.getName());
      assertEquals(3.4028235E38F, homeLight4.getDepth(), 0.01F);
      assertEquals(659.465F, homeLight4.getX(), 0.01F);
      assertFalse(homeLight4.isBackFaceShown());
      assertEquals((-2922.8584F), homeLight4.getHeight(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight4);
      
      homeLight3.setAngle(721.2624F);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight4);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight4);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight4));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight4));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getCreator());
      assertNull(catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getDescription());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1318.93F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(659.465F, homeLight2.getX(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(1.7014117E38F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getColor());
      assertEquals(1318.93F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(3.4028235E38F, homeLight2.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight2.getDescription());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-2922.8584F), homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight2.getCatalogId());
      assertTrue(homeLight3.isVisible());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight3.getDescription());
      assertTrue(homeLight3.isDeformable());
      assertNull(homeLight3.getCurrency());
      assertEquals(3.4028235E38F, homeLight3.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeLight3.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight3.getCatalogId());
      assertEquals(1.7014117E38F, homeLight3.getY(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(4.979265F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isResizable());
      assertFalse(homeLight3.isMovable());
      assertEquals(0.3926991F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(1318.93F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(659.465F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isBackFaceShown());
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getName());
      assertEquals((-2922.8584F), homeLight3.getHeight(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.isBottomRightPointAt(1088.43F, 3.4028235E38F, (-742.6F));
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight4);
      assertTrue(boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getCreator());
      assertNull(catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getDescription());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1318.93F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertEquals(1318.93F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(3.4028235E38F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(659.465F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight0.getDescription());
      assertEquals(1.7014117E38F, homeLight0.getY(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      float[][] floatArray0 = homeLight0.getModelRotation();
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight4);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getCreator());
      assertNull(catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getDescription());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1318.93F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertEquals(1318.93F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(3.4028235E38F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(659.465F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight0.getDescription());
      assertEquals(1.7014117E38F, homeLight0.getY(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertEquals(3, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean boolean1 = homeLight1.isVisible();
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight4);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight4);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight4));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight4));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getCreator());
      assertNull(catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getDescription());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1318.93F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-2922.8584F), homeLight0.getHeight(), 0.01F);
      assertEquals(1318.93F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(3.4028235E38F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(659.465F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight0.getDescription());
      assertEquals(1.7014117E38F, homeLight0.getY(), 0.01F);
      assertEquals(0.3926991F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight0.getCatalogId());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight1.getCatalogId());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(3.4028235E38F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight1.getDescription());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(659.465F, homeLight1.getX(), 0.01F);
      assertEquals(1.7014117E38F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.3926991F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(1318.93F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertTrue(homeLight1.isTexturable());
      assertEquals((-2922.8584F), homeLight1.getHeight(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      float float0 = homeLight3.getNameAngle();
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight4);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight4);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight4));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight4));
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getCurrency());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getCreator());
      assertNull(catalogLight0.getName());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getDescription());
      assertEquals((-2922.8584F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", catalogLight0.getId());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, catalogLight0.getDepth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isMovable());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(1318.93F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(659.465F, homeLight2.getX(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(1.7014117E38F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getColor());
      assertEquals(1318.93F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(3.4028235E38F, homeLight2.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight2.getDescription());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-2922.8584F), homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertTrue(homeLight2.isVisible());
      assertTrue(homeLight2.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight2.getCatalogId());
      assertTrue(homeLight3.isVisible());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight3.getDescription());
      assertTrue(homeLight3.isDeformable());
      assertNull(homeLight3.getCurrency());
      assertEquals(3.4028235E38F, homeLight3.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeLight3.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$2", homeLight3.getCatalogId());
      assertEquals(1.7014117E38F, homeLight3.getY(), 0.01F);
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertEquals(4.979265F, homeLight3.getAngle(), 0.01F);
      assertFalse(homeLight3.isResizable());
      assertFalse(homeLight3.isMovable());
      assertEquals(0.3926991F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(1318.93F, homeLight3.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(659.465F, homeLight3.getX(), 0.01F);
      assertFalse(homeLight3.isBackFaceShown());
      assertTrue(homeLight3.isTexturable());
      assertFalse(homeLight3.isDoorOrWindow());
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isNameVisible());
      assertNull(homeLight3.getName());
      assertEquals((-2922.8584F), homeLight3.getHeight(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[8];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", uRLContent0, uRLContent0, uRLContent0, 0.0F, (-1510.4794F), 0.0F, 0.0F, true, lightSourceArray0, (float[][]) null, (String) null, true, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals(8, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertEquals(8, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameXOffset(2671.644F);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(2671.644F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertEquals(8, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.isBottomRightPointAt(0.0F, 0.0F, 1330.85F);
      assertFalse(boolean0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isProportional());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isMovable());
      assertEquals((-1510.4794F), catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertEquals((-1510.4794F), homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-755.2397F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(2671.644F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertEquals(8, lightSourceArray0.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[7];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", "com.eteks.sweethome3d.tools.URLContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.tools.URLContent", true, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(7, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(7, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isBottomRightPointAt((-1011.5782F), 2168.1924F, 0.0F);
      assertFalse(boolean0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(7, lightSourceArray0.length);
      
      homeLight0.setModelMirrored(true);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(7, lightSourceArray0.length);
      
      HomeLight homeLight1 = new HomeLight(catalogLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getDescription());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getHeight(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isDeformable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getId());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isResizable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isMovable());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getDescription());
      assertFalse(homeLight1.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.URLContent", homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(7, lightSourceArray0.length);
      assertNotNull(homeLight1);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      URLContent uRLContent0 = new URLContent((URL) null);
      assertNotNull(uRLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.tools.OperatingSystem$3", (String) null, ",;", (Content) null, (Content) null, (Content) null, 862.28F, 0.3926991F, (-1057.873F), 862.28F, true, lightSourceArray0, (float[][]) null, "com.eteks.sweethome3d.model.CatalogLight", true, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(862.28F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1057.873F), catalogLight0.getHeight(), 0.01F);
      assertEquals(862.28F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertEquals(",;", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogLight", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(862.28F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1057.873F), catalogLight0.getHeight(), 0.01F);
      assertEquals(862.28F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertEquals(",;", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogLight", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1057.873F), homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(862.28F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(862.28F, homeLight0.getWidth(), 0.01F);
      assertEquals(",;", homeLight0.getDescription());
      assertEquals(431.14F, homeLight0.getX(), 0.01F);
      assertEquals(862.28F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setNameYOffset(161.22668F);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(862.28F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1057.873F), catalogLight0.getHeight(), 0.01F);
      assertEquals(862.28F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertEquals(",;", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogLight", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1057.873F), homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(862.28F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(161.22668F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(862.28F, homeLight0.getWidth(), 0.01F);
      assertEquals(",;", homeLight0.getDescription());
      assertEquals(431.14F, homeLight0.getX(), 0.01F);
      assertEquals(862.28F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(862.28F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1057.873F), catalogLight0.getHeight(), 0.01F);
      assertEquals(862.28F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertEquals(",;", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogLight", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1057.873F), homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(862.28F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(161.22668F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(862.28F, homeLight0.getWidth(), 0.01F);
      assertEquals(",;", homeLight0.getDescription());
      assertEquals(431.14F, homeLight0.getX(), 0.01F);
      assertEquals(862.28F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(862.28F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(161.22668F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(",;", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(862.28F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1057.873F), homeLight1.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isMovable());
      assertEquals(862.28F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(431.14F, homeLight1.getX(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(862.28F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1057.873F), catalogLight0.getHeight(), 0.01F);
      assertEquals(862.28F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertEquals(",;", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogLight", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1057.873F), homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(862.28F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(161.22668F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(862.28F, homeLight0.getWidth(), 0.01F);
      assertEquals(",;", homeLight0.getDescription());
      assertEquals(431.14F, homeLight0.getX(), 0.01F);
      assertEquals(862.28F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(862.28F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(161.22668F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(",;", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(862.28F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1057.873F), homeLight1.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isMovable());
      assertEquals(862.28F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(431.14F, homeLight1.getX(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(",;", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertEquals(161.22668F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isDeformable());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertEquals((-1057.873F), homeLight2.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeLight2.getCatalogId());
      assertEquals(862.28F, homeLight2.getElevation(), 0.01F);
      assertEquals(862.28F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(862.28F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(431.14F, homeLight2.getX(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight2);
      
      homeLight2.setNameXOffset((-98.6F));
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(862.28F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1057.873F), catalogLight0.getHeight(), 0.01F);
      assertEquals(862.28F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertEquals(",;", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogLight", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1057.873F), homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(862.28F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(161.22668F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(862.28F, homeLight0.getWidth(), 0.01F);
      assertEquals(",;", homeLight0.getDescription());
      assertEquals(431.14F, homeLight0.getX(), 0.01F);
      assertEquals(862.28F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(862.28F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(161.22668F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(",;", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(862.28F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1057.873F), homeLight1.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isMovable());
      assertEquals(862.28F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(431.14F, homeLight1.getX(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(",;", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertEquals(161.22668F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals((-98.6F), homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isDeformable());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertEquals((-1057.873F), homeLight2.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeLight2.getCatalogId());
      assertEquals(862.28F, homeLight2.getElevation(), 0.01F);
      assertEquals(862.28F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(862.28F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(431.14F, homeLight2.getX(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      homeLight1.setAngle(1643.632F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(862.28F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1057.873F), catalogLight0.getHeight(), 0.01F);
      assertEquals(862.28F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertEquals(",;", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogLight", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1057.873F), homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(862.28F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(161.22668F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(862.28F, homeLight0.getWidth(), 0.01F);
      assertEquals(",;", homeLight0.getDescription());
      assertEquals(431.14F, homeLight0.getX(), 0.01F);
      assertEquals(862.28F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(862.28F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(161.22668F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(",;", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(3.7205927F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(862.28F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1057.873F), homeLight1.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isMovable());
      assertEquals(862.28F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(431.14F, homeLight1.getX(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      HomeLight homeLight3 = new HomeLight(catalogLight0);
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(862.28F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1057.873F), catalogLight0.getHeight(), 0.01F);
      assertEquals(862.28F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertEquals(",;", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogLight", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeLight3.getDepth(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isVisible());
      assertTrue(homeLight3.isResizable());
      assertTrue(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals(0.19634955F, homeLight3.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeLight3.getCatalogId());
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertNull(homeLight3.getName());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals(431.14F, homeLight3.getX(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals(",;", homeLight3.getDescription());
      assertFalse(homeLight3.isDoorOrWindow());
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(862.28F, homeLight3.getElevation(), 0.01F);
      assertEquals(862.28F, homeLight3.getWidth(), 0.01F);
      assertEquals((-1057.873F), homeLight3.getHeight(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertNull(homeLight3.getCurrency());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertEquals(862.28F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNotNull(homeLight3);
      
      homeLight2.setName((String) null);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(862.28F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1057.873F), catalogLight0.getHeight(), 0.01F);
      assertEquals(862.28F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertEquals(",;", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogLight", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1057.873F), homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(862.28F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(161.22668F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(862.28F, homeLight0.getWidth(), 0.01F);
      assertEquals(",;", homeLight0.getDescription());
      assertEquals(431.14F, homeLight0.getX(), 0.01F);
      assertEquals(862.28F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(862.28F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(161.22668F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(",;", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(3.7205927F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(862.28F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1057.873F), homeLight1.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isMovable());
      assertEquals(862.28F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(431.14F, homeLight1.getX(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(",;", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertEquals(161.22668F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals((-98.6F), homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isDeformable());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertEquals((-1057.873F), homeLight2.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeLight2.getCatalogId());
      assertEquals(862.28F, homeLight2.getElevation(), 0.01F);
      assertEquals(862.28F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(862.28F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(431.14F, homeLight2.getX(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      float float0 = homeLight3.getNameXOffset();
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(862.28F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1057.873F), catalogLight0.getHeight(), 0.01F);
      assertEquals(862.28F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertEquals(",;", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogLight", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeLight3.getDepth(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isVisible());
      assertTrue(homeLight3.isResizable());
      assertTrue(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals(0.19634955F, homeLight3.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeLight3.getCatalogId());
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertNull(homeLight3.getName());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals(431.14F, homeLight3.getX(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals(",;", homeLight3.getDescription());
      assertFalse(homeLight3.isDoorOrWindow());
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(862.28F, homeLight3.getElevation(), 0.01F);
      assertEquals(862.28F, homeLight3.getWidth(), 0.01F);
      assertEquals((-1057.873F), homeLight3.getHeight(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertNull(homeLight3.getCurrency());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertEquals(862.28F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      boolean boolean0 = homeLight2.isNameCenterPointAt((-2712.69F), 0.3926991F, 1643.632F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight3);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight3);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight3);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(boolean0);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight3));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight3));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(862.28F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1057.873F), catalogLight0.getHeight(), 0.01F);
      assertEquals(862.28F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertEquals(",;", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogLight", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals((-1057.873F), homeLight0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.19634955F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(862.28F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.3926991F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(161.22668F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(862.28F, homeLight0.getWidth(), 0.01F);
      assertEquals(",;", homeLight0.getDescription());
      assertEquals(431.14F, homeLight0.getX(), 0.01F);
      assertEquals(862.28F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(862.28F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.3926991F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertTrue(homeLight1.isDeformable());
      assertTrue(homeLight1.isVisible());
      assertEquals(161.22668F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isTexturable());
      assertEquals(",;", homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(3.7205927F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.19634955F, homeLight1.getY(), 0.01F);
      assertEquals(862.28F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals((-1057.873F), homeLight1.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isResizable());
      assertTrue(homeLight1.isMovable());
      assertEquals(862.28F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(431.14F, homeLight1.getX(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertTrue(homeLight2.isTexturable());
      assertEquals(",;", homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertEquals(0.19634955F, homeLight2.getY(), 0.01F);
      assertEquals(161.22668F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals((-98.6F), homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.3926991F, homeLight2.getDepth(), 0.01F);
      assertTrue(homeLight2.isResizable());
      assertTrue(homeLight2.isDeformable());
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertEquals((-1057.873F), homeLight2.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeLight2.getCatalogId());
      assertEquals(862.28F, homeLight2.getElevation(), 0.01F);
      assertEquals(862.28F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertTrue(homeLight2.isMovable());
      assertEquals(862.28F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(431.14F, homeLight2.getX(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      
      String string0 = homeLight3.getName();
      assertNotSame(homeLight3, homeLight0);
      assertNotSame(homeLight3, homeLight2);
      assertNotSame(homeLight3, homeLight1);
      assertFalse(homeLight3.equals((Object)homeLight0));
      assertFalse(homeLight3.equals((Object)homeLight2));
      assertFalse(homeLight3.equals((Object)homeLight1));
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(862.28F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals((-1057.873F), catalogLight0.getHeight(), 0.01F);
      assertEquals(862.28F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getColor());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getName());
      assertEquals(",;", catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogLight", catalogLight0.getCreator());
      assertTrue(catalogLight0.isResizable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", catalogLight0.getId());
      assertNull(catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, homeLight3.getDepth(), 0.01F);
      assertNull(homeLight3.getShininess());
      assertTrue(homeLight3.isVisible());
      assertTrue(homeLight3.isResizable());
      assertTrue(homeLight3.isDeformable());
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertFalse(homeLight3.isNameVisible());
      assertEquals(0.19634955F, homeLight3.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeLight3.getCatalogId());
      assertFalse(homeLight3.isModelMirrored());
      assertFalse(homeLight3.isBackFaceShown());
      assertNull(homeLight3.getName());
      assertEquals(0.0F, homeLight3.getAngle(), 0.01F);
      assertEquals(431.14F, homeLight3.getX(), 0.01F);
      assertTrue(homeLight3.isTexturable());
      assertEquals(",;", homeLight3.getDescription());
      assertFalse(homeLight3.isDoorOrWindow());
      assertNull(homeLight3.getColor());
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(862.28F, homeLight3.getElevation(), 0.01F);
      assertEquals(862.28F, homeLight3.getWidth(), 0.01F);
      assertEquals((-1057.873F), homeLight3.getHeight(), 0.01F);
      assertNull(homeLight3.getStaircaseCutOutShape());
      assertNull(homeLight3.getCurrency());
      assertEquals(0.0F, homeLight3.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight3.getPower(), 0.01F);
      assertTrue(homeLight3.isMovable());
      assertEquals(862.28F, homeLight3.getGroundElevation(), 0.01F);
      assertEquals(1, lightSourceArray0.length);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", "com.etks.sweethome7d.tols.RContent", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-0.04565376F), (-0.04565376F), (-0.04565376F), (-0.04565376F), false, lightSourceArray0, (float[][]) null, "com.etks.sweethome7d.tols.RContent", false, bigDecimal0, bigDecimal0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-0.04565376F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertEquals((-0.04565376F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getName());
      assertEquals((-0.04565376F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-0.04565376F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-0.04565376F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertEquals((-0.04565376F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getName());
      assertEquals((-0.04565376F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-0.04565376F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-0.04565376F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals((-0.04565376F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("com.etks.sweethome7d.tols.RContent", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("com.etks.sweethome7d.tols.RContent", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertEquals((-0.04565376F), homeLight0.getDepth(), 0.01F);
      assertEquals((-0.04565376F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("com.etks.sweethome7d.tols.RContent", homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-0.02282688F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-0.02282688F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-0.04565376F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setColor((Integer) null);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-0.04565376F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertEquals((-0.04565376F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getName());
      assertEquals((-0.04565376F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-0.04565376F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-0.04565376F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals((-0.04565376F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("com.etks.sweethome7d.tols.RContent", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("com.etks.sweethome7d.tols.RContent", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertEquals((-0.04565376F), homeLight0.getDepth(), 0.01F);
      assertEquals((-0.04565376F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("com.etks.sweethome7d.tols.RContent", homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-0.02282688F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-0.02282688F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-0.04565376F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      
      boolean boolean0 = homeLight0.isNameCenterPointAt(3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      assertTrue(boolean0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isResizable());
      assertEquals((-0.04565376F), catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertEquals((-0.04565376F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getCreator());
      assertFalse(catalogLight0.isMovable());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getDescription());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("com.etks.sweethome7d.tols.RContent", catalogLight0.getName());
      assertEquals((-0.04565376F), catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals((-0.04565376F), catalogLight0.getElevation(), 0.01F);
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-0.04565376F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals((-0.04565376F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals("com.etks.sweethome7d.tols.RContent", homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("com.etks.sweethome7d.tols.RContent", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertEquals((-0.04565376F), homeLight0.getDepth(), 0.01F);
      assertEquals((-0.04565376F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals("com.etks.sweethome7d.tols.RContent", homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-0.02282688F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-0.02282688F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-0.04565376F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
  }
}
