/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 26 02:40:00 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Wall_ESTest extends Wall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Wall wall0 = new Wall(0.8313745F, (-414.0623F), 0.8313745F, 0.8313745F, (-414.0623F));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setHeightAtEnd((Float) null);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-2054.172F), (-2054.172F), (-2054.172F), (-2054.172F), 18.520525F);
      Float float0 = new Float((double) (-2054.172F));
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt(18.520525F, 18.520525F, 0.0F);
      wall0.setArcExtent(float0);
      // Undeclared exception!
      wall0.intersectsRectangle(18.520525F, (-1360.5706F), (-2054.172F), (-1360.5706F));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Wall wall0 = new Wall((-2421.488F), (-2421.488F), (-2421.488F), (-2421.488F), (-2421.488F), (-2421.488F));
      Level level0 = new Level("", (-2421.488F), (-2421.488F), (-2421.488F));
      Level level1 = level0.clone();
      Level level2 = level0.clone();
      level2.setFloorThickness((-2421.488F));
      level0.setVisible(false);
      level1.addPropertyChangeListener((PropertyChangeListener) null);
      wall0.setLevel(level0);
      Float float0 = new Float((-194.0F));
      float0.floatValue();
      Float float1 = new Float(0.0F);
      float1.floatValue();
      wall0.setHeight(float1);
      wall0.getXEnd();
      wall0.getRightSideColor();
      wall0.setHeight((Float) 1.0F);
      wall0.isAtLevel(level2);
      Level level3 = new Level("", 0.0F, 0.0F, 0.0F);
      Level level4 = level3.clone();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      level4.addPropertyChangeListener((PropertyChangeListener) null);
      wall0.isAtLevel(level4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-2063.883F), (-2063.883F), (-2063.883F), (-2063.883F), 0.1F);
      wall0.setXEnd(1.0F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.1F);
      Float float0 = new Float(3507.935852133641);
      wall0.setArcExtent(float0);
      wall0.intersectsRectangle(0.0F, 2175.68F, 0.1F, 2175.68F);
      wall0.getXArcCircleCenter();
      wall0.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Wall wall0 = new Wall(739.1973F, 739.1973F, 739.1973F, 739.1973F, 739.1973F);
      wall0.setRightSideColor((Integer) null);
      wall0.setLeftSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Wall.Property.values();
      Wall wall0 = new Wall(1.0F, 1.0F, (-431.667F), 1.0F, (-431.667F), 1.0F);
      wall0.setXEnd((-982.244F));
      Level level0 = new Level("", 0.0F, 0.0F, 0.0F);
      Level level1 = level0.clone();
      level1.addPropertyChangeListener((PropertyChangeListener) null);
      wall0.setLevel(level1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Wall wall0 = new Wall((-2461.64F), (-2461.64F), (-2461.64F), 0.0F, 0.0F, (-2461.64F));
      Level level0 = new Level("", 0.0F, 0.0F, 0.0F);
      Level level1 = level0.clone();
      Level level2 = level0.clone();
      level2.getBackgroundImage();
      level2.setFloorThickness(0.0F);
      level0.setBackgroundImage((BackgroundImage) null);
      level2.setVisible(true);
      level2.addPropertyChangeListener((PropertyChangeListener) null);
      wall0.setLevel(level2);
      wall0.setRightSideShininess(0.0F);
      Float float0 = new Float(0.0);
      float0.floatValue();
      Float float1 = new Float(0.0);
      float0.floatValue();
      wall0.setArcExtent((Float) 0.0F);
      float1.floatValue();
      level1.setElevation((-2461.64F));
      wall0.setHeight((Float) 0.0F);
      wall0.getXEnd();
      wall0.getRightSideColor();
      wall0.setHeight(float0);
      wall0.isAtLevel(level1);
      wall0.setHeightAtEnd(float1);
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Wall wall0 = new Wall(2008.525F, 2008.525F, (-2475.0364F), 0.0F, 0.0F, 0.0F);
      Wall wall1 = wall0.clone();
      wall1.setLeftSideTexture((HomeTexture) null);
      wall0.setYEnd((-2475.0364F));
      wall0.getYArcCircleCenter();
      Float.floatToIntBits((-2475.0364F));
      Float float0 = new Float(0.0);
      float0.floatValue();
      Float float1 = new Float(0.0);
      float1.floatValue();
      float0.floatValue();
      wall0.setArcExtent((Float) 0.0F);
      Wall wall2 = new Wall((-233.25568F), 0.1F, 683.7F, 0.01F, 1.0F, (-2024.353F));
      wall0.getLength();
      Random.setNextRandom((-988106603));
      Random.setNextRandom((-864));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Wall wall0 = new Wall((-2461.64F), (-2461.64F), (-2461.64F), 0.0F, 0.0F, (-2461.64F));
      Level level0 = new Level("", 0.0F, 0.0F, 0.0F);
      Level level1 = level0.clone();
      Level level2 = level0.clone();
      level2.getBackgroundImage();
      level2.setFloorThickness(0.0F);
      level0.setBackgroundImage((BackgroundImage) null);
      level2.setVisible(true);
      level2.addPropertyChangeListener((PropertyChangeListener) null);
      wall0.setLevel(level2);
      wall0.setRightSideShininess(0.0F);
      wall0.getXEnd();
      Float float0 = new Float(0.0);
      float0.floatValue();
      Float float1 = new Float(0.0);
      float1.floatValue();
      float0.floatValue();
      wall0.setArcExtent((Float) 0.0F);
      Float float2 = new Float((-2377.606F));
      float2.floatValue();
      wall0.setHeight((Float) (-2377.606F));
      wall0.getXEnd();
      wall0.getRightSideColor();
      wall0.setHeight(float2);
      wall0.isAtLevel(level1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1958.65F), 0.0F, (-1958.65F), 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("K!KSEn\"}|lINk 48", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("K!KSEn\"}|lINk 48", propertyChangeListenerProxy0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy1);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-431.667F), 0.0F, 0.0F);
      Wall wall2 = wall0.clone();
      Float float0 = wall0.getHeight();
      wall2.setRightSideShininess((-431.667F));
      Float.compare(1003.8267F, (-1746.4F));
      Float.compare(1.0F, 1.0F);
      wall1.setHeight((Float) 1.0F);
      wall1.setWallAtStart((Wall) null);
      wall1.getLeftSideTexture();
      wall0.getXStart();
      wall0.getRightSideColor();
      wall2.getPoints();
      wall1.setHeightAtEnd(float0);
      Wall.Property.values();
      wall1.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 0.0F, 1.0F, 1.0F, 0.0F, 1.0F);
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Wall wall0 = new Wall(1519.456F, 520.67554F, (-1.0F), (-2925.12F), 520.67554F, (-1.0F));
      Wall wall1 = new Wall(2709.103F, (-431.667F), 2626.3F, 0.0F, (-1.0F), 2626.3F);
      Wall wall2 = wall1.clone();
      wall2.getHeight();
      wall1.setHeight((Float) null);
      wall0.setWallAtStart(wall2);
      wall0.setRightSideShininess((-1.0F));
      Float float0 = new Float(0.0);
      float0.floatValue();
      Float float1 = new Float(0.0);
      float1.floatValue();
      float0.floatValue();
      wall2.setHeight((Float) 0.0F);
      wall1.setWallAtStart(wall2);
      wall1.getLeftSideTexture();
      wall1.getXStart();
      wall2.getPoints();
      wall0.getRightSideShininess();
      wall2.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Wall wall0 = new Wall(0.8313745F, (-414.0623F), 0.8313745F, 0.8313745F, (-414.0623F));
      wall0.setLeftSideColor((Integer) null);
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Wall wall0 = new Wall(2510.8596F, 2510.8596F, 5581.7705F, 5581.7705F, 2510.8596F, (-1138.75F));
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Wall wall0 = new Wall(0.8313745F, 0.8313745F, 0.8313745F, 0.8313745F, 0.8313745F);
      wall0.setHeightAtEnd((Float) null);
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      CatalogTexture catalogTexture0 = new CatalogTexture("Invalid URL base for JAR entry", resourceURLContent0, 0.0F, 680.47F, true);
      CatalogTexture catalogTexture1 = new CatalogTexture("eFLli", "VISIBLE", (Content) null, (-1.0F), (-1.0F), "eFLli", true);
      catalogTexture1.getName();
      catalogTexture0.compareTo(catalogTexture1);
      catalogTexture0.getName();
      wall0.setPattern(catalogTexture0);
      wall0.getArcExtent();
      wall0.getLeftSideShininess();
      wall0.getHeightAtEnd();
      wall0.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      Object object0 = new Object();
      wall0.getPoints();
      Integer integer0 = Integer.valueOf(226);
      wall0.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Wall wall0 = new Wall(2008.525F, 2008.525F, 2008.525F, 0.0F, 0.0F, 0.0F);
      wall0.setYEnd(2008.525F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Wall wall1 = new Wall(2709.103F, (-431.667F), 2626.3F, 0.0F, (-431.667F), 2626.3F);
      Float float0 = wall1.getHeight();
      wall0.setRightSideShininess(0.0F);
      wall1.setHeight((Float) null);
      wall0.setWallAtStart(wall0);
      wall0.getLeftSideTexture();
      wall0.getXStart();
      wall0.getPoints();
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.0F, 0.1F, 0.1F, 0.0F);
      Float float0 = new Float(0.1F);
      wall0.setArcExtent(float0);
      wall0.intersectsRectangle(0.0F, 0.0F, 2562.9F, (-3325.446F));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 2172.361F, 191.2471F, 1.0F, 1.0F);
      wall0.setThickness(0.0F);
      Float.compare(0.0F, 0.0F);
      wall0.setHeight((Float) 0.0F);
      wall0.getLeftSideShininess();
      wall0.getYArcCircleCenter();
      String string0 = "z)=Wqgq%Yut.vq=";
      String string1 = "PU";
      String string2 = "com.eteks.sweethome3d.model.TexturesCategory";
      int int0 = 0;
      try { 
        MockURL.URL("com.eteks.sweethome3d.model.TexturesCategory", "z)=Wqgq%Yut.vq=", 0, "z)=Wqgq%Yut.vq=");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: com.eteks.sweethome3d.model.texturescategory
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Wall wall0 = new Wall(739.1973F, 739.1973F, 739.1973F, 739.1973F, 739.1973F, 739.1973F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Wall wall0 = new Wall((-2063.883F), 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setYStart((-2063.883F));
      Integer integer0 = new Integer(1187);
      Float.compare(1003.02F, (-2063.883F));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Float float0 = wall0.getHeight();
      wall0.setArcExtent(float0);
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Wall wall0 = new Wall(1254.92F, 1254.92F, 1254.92F, 1254.92F, 1254.92F, 1254.92F);
      Float.floatToIntBits((-1758.841F));
      wall0.setHeight((Float) (-1758.841F));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      Float float0 = new Float(1.0F);
      wall0.setArcExtent(float0);
      wall0.getLeftSideColor();
      wall0.setRightSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "RIGHT_SIDE_TEXTURE");
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-2925.12F), (-2908.5F), (-1.0F), (-495.58887F));
      wall0.setYStart(68.0F);
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 2172.361F, 191.2471F, 1.0F, 1.0F);
      wall0.containsPoint(1.0F, 2200.334F, 0.0F);
      wall0.setThickness(0.0F);
      Float.compare(0.0F, 0.0F);
      wall0.setHeight((Float) 0.0F);
      wall0.getLeftSideShininess();
      wall0.getYArcCircleCenter();
      wall0.getRightSideColor();
      try { 
        MockURL.URL("com.eteks.sweethome3d.model.TexturesCategory", "z)=Wqgq%Yut.vq=", 0, "z)=Wqgq%Yut.vq=");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: com.eteks.sweethome3d.model.texturescategory
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      Float float0 = new Float(2821.39F);
      Object object0 = new Object();
      wall0.setArcExtent(float0);
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1958.65F), 0.0F, (-1958.65F), 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.spliterator();
      linkedList0.add(wall0);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      wall0.setThickness(0.0F);
      wall0.setWallAtEnd(wall0);
      Wall.clone(list0);
      wall0.setWallAtEnd(wall0);
      Integer integer0 = new Integer(0);
      Integer.valueOf(1);
      wall0.setYEnd((-495.58887F));
      wall0.getRightSideShininess();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Wall wall0 = new Wall((-2421.488F), (-2421.488F), (-2421.488F), (-2421.488F), (-2421.488F), (-2421.488F));
      Level level0 = new Level("", (-2421.488F), (-2421.488F), (-2421.488F));
      Level level1 = level0.clone();
      level0.setFloorThickness((-2421.488F));
      wall0.setLevel(level0);
      wall0.setRightSideShininess((-2421.488F));
      Float float0 = new Float((-194.0F));
      Float float1 = new Float((-2421.488F));
      Float float2 = new Float(0.0F);
      Object object0 = new Object();
      float2.equals(object0);
      float2.floatValue();
      wall0.setHeight(float2);
      Float float3 = new Float((-2421.488F));
      wall0.getXEnd();
      wall0.getRightSideColor();
      wall0.setHeight(float2);
      wall0.isAtLevel(level1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Wall wall0 = new Wall(739.197F, 739.197F, 739.197F, 739.197F, 739.197F, 739.197F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Wall wall0 = new Wall(739.1973F, 739.1973F, 739.1973F, 739.1973F, 739.1973F, 739.1973F);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      CatalogTexture catalogTexture0 = new CatalogTexture("Invalid URL base for JAR entry", resourceURLContent0, 0.0F, 680.47F, true);
      catalogTexture0.getName();
      wall0.setPattern(catalogTexture0);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 0.01F, 1.0F);
      wall0.setRightSideShininess(0.01F);
      Wall wall1 = wall0.clone();
      wall1.setYEnd(0.0F);
      wall1.setLeftSideColor((Integer) null);
      Float.valueOf(0.0F);
      Float.valueOf(0.0F);
      Float float0 = Float.valueOf(0.0F);
      wall1.setPattern((TextureImage) null);
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      CatalogTexture catalogTexture0 = new CatalogTexture("Y_END", "", resourceURLContent0, 0.0F, 0.0F, "Y_END");
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      Object object0 = new Object();
      homeTexture0.equals(object0);
      wall0.setLeftSideTexture(homeTexture0);
      Float.isFinite(1.0F);
      Float.max(0.0F, 5836.8F);
      wall0.setHeightAtEnd(float0);
      wall0.setXStart(0.01F);
      wall0.getXStart();
      wall0.intersectsRectangle(0.01F, 0.01F, 0.0F, 1.0F);
      wall0.setRightSideShininess(1.0F);
      Wall.Property.values();
      Integer integer0 = new Integer((-990));
      integer0.equals((Object) null);
      wall1.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Wall wall0 = new Wall(2709.103F, (-431.667F), 2626.3F, 0.0F, (-1.0F), 2626.3F);
      Wall wall1 = wall0.clone();
      wall1.getHeight();
      wall0.setHeight((Float) null);
      wall1.getWallAtEnd();
      try { 
        Integer.decode(">Bj6*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \">Bj6*\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      List<Wall> list1 = Wall.clone(list0);
      Integer.getInteger("QBmo~<l7l0}v2a");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      linkedList0.removeIf(predicate3);
      List<Wall> list2 = Wall.clone(list1);
      Wall.clone(list2);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Wall wall0 = new Wall(1.4321833F, 0.0F, (-1958.65F), 1.4321833F, (-1958.65F), 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.spliterator();
      linkedList0.add(wall0);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      wall0.setThickness(1.4321833F);
      wall0.setWallAtEnd(wall0);
      Wall.clone(list0);
      wall0.setWallAtEnd(wall0);
      Integer.valueOf(0);
      Integer.valueOf(1);
      wall0.setYEnd((-495.58887F));
      wall0.getRightSideShininess();
      wall0.containsWallStartAt(0, (-2461.094F), 0.0F);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.spliterator();
      linkedList0.add(wall0);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      wall0.setThickness(0.0F);
      wall0.setWallAtEnd(wall0);
      Wall.clone(list0);
      wall0.setWallAtEnd(wall0);
      Integer integer0 = new Integer(0);
      Integer.valueOf(1);
      wall0.setYEnd((-495.58887F));
      wall0.getRightSideShininess();
      wall0.getLength();
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      float float0 = (-2166.3398F);
      float float1 = 0.0F;
      Wall wall0 = new Wall(0.0F, (-2166.3398F), (-2166.3398F), 0.0F, 333.4F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      float float2 = 0.0F;
      Wall wall1 = new Wall(1.0F, 0.0F, 1.0F, 1.0F, 4254.54F, 0.0F);
      Wall wall2 = wall1.clone();
      PropertyChangeEvent propertyChangeEvent0 = null;
      try {
        propertyChangeEvent0 = new PropertyChangeEvent((Object) null, "sX(\"vS=/wR~-$z=4_Oz", (Object) null, wall2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      float float0 = 2709.103F;
      Wall wall0 = new Wall(2709.103F, (-431.667F), 2626.3F, 0.0F, (-1.0F), 2626.3F);
      Wall wall1 = wall0.clone();
      wall1.getHeight();
      Float float1 = null;
      wall0.setHeight((Float) null);
      wall1.setArcExtent((Float) null);
      wall1.getWallAtStart();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("J\"{S41el2W'M:", propertyChangeListener0);
      Wall wall2 = new Wall(1.0F, 0.0F, 1.0F, 1.0F, 4254.54F, 0.0F);
      Wall wall3 = wall2.clone();
      PropertyChangeEvent propertyChangeEvent0 = null;
      try {
        propertyChangeEvent0 = new PropertyChangeEvent((Object) null, "sX(\"vS=/wR~-$z=4_Oz", (Object) null, wall3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Wall wall0 = new Wall(0.8313745F, (-414.0623F), 0.8313745F, 0.8313745F, (-414.0623F));
      wall0.setLeftSideColor((Integer) null);
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      CatalogTexture catalogTexture0 = new CatalogTexture("Y_END", "", resourceURLContent0, 0.0F, 0.0F, "Y_END");
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      Object object0 = new Object();
      homeTexture0.equals(object0);
      wall0.setRightSideTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-2063.883F), (-2063.883F), (-2063.883F), (-2063.883F), 0.1F);
      Float float0 = new Float(3507.79760732);
      float0.equals("4CD&p;$u");
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt(0.1F, 2562.9F, 0.0F);
      wall0.setArcExtent(float0);
      Wall wall1 = wall0.clone();
      wall1.setArcExtent(float0);
      Wall.Property.values();
      Float float1 = new Float((-431.667F));
      wall0.containsWallEndAt((-3325.446F), (-93.2F), 5879.8784F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Wall wall0 = new Wall((-849.66736F), 1204.0F, 0.0F, 0.0F, 0.0F, 1123.3752F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.spliterator();
      linkedList0.add(wall0);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      wall0.setThickness((-849.66736F));
      wall0.setWallAtEnd((Wall) null);
      Wall.clone(list0);
      wall0.setWallAtEnd((Wall) null);
      Integer.valueOf(0);
      Integer.valueOf(0);
      Integer.valueOf(1);
      wall0.setYEnd(3381.1243F);
      wall0.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 1123.3752F, 1123.3752F, 1123.3752F, 1123.3752F, 0.1F);
      wall0.setXEnd(1.0F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      float float0 = (-1958.65F);
      float float1 = 0.0F;
      Wall wall0 = new Wall(0.0F, 0.0F, (-1958.65F), 0.0F, (-1958.65F), 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.spliterator();
      linkedList0.add(wall0);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      wall0.setThickness(0.0F);
      wall0.setWallAtEnd((Wall) null);
      Wall.clone(list0);
      wall0.setWallAtEnd((Wall) null);
      Integer.valueOf(0);
      Integer.valueOf(0);
      int int0 = 1;
      Integer.valueOf(1);
      Integer.valueOf(1170);
      try { 
        Integer.parseUnsignedInt("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, (-431.667F), 1.15730458E9F, (-431.667F), 1.15730458E9F);
      wall0.setLeftSideShininess((-431.667F));
      wall0.setLeftSideShininess(1.15730458E9F);
      wall0.containsWallEndAt(1.15730458E9F, (-431.667F), (-431.667F));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-2063.883F), (-2063.883F), (-2063.883F), (-2063.883F), 0.1F);
      Float.floatToIntBits(1297.77F);
      Float.floatToIntBits(0.1F);
      Float.floatToIntBits((-2063.883F));
      Float.valueOf(0.0F);
      Float.valueOf((-178.454F));
      Float.valueOf(829.8155F);
      Float.valueOf(3407.0F);
      Float float0 = Float.valueOf(0.0F);
      wall0.setArcExtent(float0);
      Wall wall1 = wall0.clone();
      Wall.Property.values();
      Float float1 = new Float(147.1F);
      wall1.containsWallEndAt(829.8155F, (-1927.371F), (-1054.7119F));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Wall wall0 = new Wall((-2421.488F), (-2421.488F), (-2421.488F), (-2421.488F), (-2421.488F), (-2421.488F));
      Level level0 = new Level("", 0.0F, 0.0F, 0.0F);
      Level level1 = level0.clone();
      Level level2 = level0.clone();
      level2.setFloorThickness(0.0F);
      level0.setVisible(false);
      level1.addPropertyChangeListener((PropertyChangeListener) null);
      wall0.setLevel(level0);
      wall0.setRightSideShininess(0.0F);
      Float float0 = new Float((-194.0F));
      float0.floatValue();
      Float float1 = new Float(0.0F);
      Object object0 = new Object();
      float1.equals(object0);
      float1.floatValue();
      wall0.setHeight(float1);
      wall0.getXEnd();
      wall0.getRightSideColor();
      Float.floatToIntBits(1.0F);
      wall0.setHeight((Float) 1.0F);
      wall0.isAtLevel(level2);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Wall wall0 = new Wall(2709.103F, (-431.667F), 2626.3F, 0.0F, (-1.0F), 2626.3F);
      Wall wall1 = wall0.clone();
      Float float0 = wall1.getHeight();
      wall0.setHeight((Float) null);
      Float.min((-1.0F), 0.0F);
      Float.isFinite(0.0F);
      float0.floatValue();
      Float.isFinite((-6574.056F));
      wall0.setRightSideColor((Integer) null);
      Float.floatToIntBits(589.3665F);
      ((Float)589.3665F).floatValue();
      float0.floatValue();
      wall0.setHeightAtEnd((Float) null);
      wall0.getYArcCircleCenter();
      wall1.setXStart(612.9109F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      Integer integer0 = new Integer(1142118261);
      wall1.getYEnd();
      wall0.setXEnd(0.0F);
      wall1.setLeftSideShininess(589.3665F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Wall wall0 = new Wall(2008.525F, 2008.525F, (-2476.058F), 0.0F, 0.0F, 0.0F);
      wall0.setYEnd((-2476.058F));
      wall0.getYArcCircleCenter();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("K!KSEn\"}|lINk 48", propertyChangeListener0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      Wall wall1 = new Wall(2709.103F, (-431.667F), 2626.3F, 0.0F, (-1.0F), 2626.3F);
      Wall wall2 = wall1.clone();
      Float float0 = wall2.getHeight();
      wall2.setRightSideShininess((-982.244F));
      wall1.setHeight((Float) null);
      wall0.setWallAtStart(wall2);
      wall0.getLeftSideTexture();
      wall0.getXStart();
      wall0.getRightSideColor();
      wall0.getPoints();
      wall0.setHeightAtEnd(float0);
      Wall.Property.values();
      wall1.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-2054.172F), (-2054.172F), (-2054.172F), (-2054.172F), (-0.66608995F));
      Float float0 = new Float((double) (-2054.172F));
      wall0.setArcExtent(float0);
      wall0.setArcExtent(float0);
      wall0.setWallAtEnd(wall0);
      Float float1 = new Float((-2054.172F));
      wall0.getPoints();
      wall0.getLevel();
      wall0.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Wall wall0 = new Wall((-2024.2F), (-505.0F), (-2024.2F), (-505.0F), (-505.0F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("dM&G+CvD", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getRightSideColor();
      wall0.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Wall wall0 = new Wall((-2063.883F), 1762.0F, 1762.0F, 1762.0F, 1762.0F);
      wall0.move(1762.0F, (-2063.883F));
      wall0.setYStart((-2063.883F));
      Integer integer0 = new Integer(1187);
      int int0 = new Integer(1187);
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Wall wall0 = new Wall(1121.0988F, 1121.0988F, 1121.0988F, 1121.0988F, 1121.0988F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      Float float0 = new Float(2821.39F);
      Object object0 = new Object();
      wall0.setArcExtent(float0);
      wall0.getPoints();
      wall0.setHeightAtEnd(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Float.floatToIntBits((-2475.0364F));
      Wall wall0 = new Wall(2709.103F, (-431.667F), 2626.3F, (-2475.0364F), (-2475.0364F), 2626.3F);
      Float float0 = wall0.getHeight();
      wall0.setHeight(float0);
      Float float1 = new Float((-431.667F));
      Float float2 = new Float((-770.0F));
      Object object0 = new Object();
      wall0.setArcExtent(float2);
      wall0.intersectsRectangle((-431.667F), (-770.0F), 2709.103F, 2626.3F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 0.01F, 0.01F, 1.0F);
      wall0.setRightSideShininess(0.01F);
      Wall wall1 = wall0.clone();
      wall1.setYEnd(0.0F);
      wall1.setLeftSideColor((Integer) null);
      Float.valueOf(0.0F);
      Float.valueOf(0.0F);
      Float.valueOf(0.0F);
      wall1.setThickness((-509.49F));
      wall0.setWallAtEnd(wall1);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>(list0);
      Wall.clone((List<Wall>) linkedList1);
      wall0.setWallAtEnd(wall1);
      Integer.valueOf(0);
      Integer.valueOf(1);
      wall1.setYEnd(0);
      wall0.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Wall wall0 = new Wall(2008.525F, 2008.525F, (-2475.0364F), 0.0F, 0.0F, 0.0F);
      wall0.setYEnd((-2475.0364F));
      wall0.getYArcCircleCenter();
      Float.floatToIntBits(589.3665F);
      wall0.setArcExtent((Float) 589.3665F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("K!KSEn\"}|lINk 48", propertyChangeListener0);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      Wall wall1 = new Wall(2709.103F, (-431.667F), 2626.3F, 0.0F, (-1.0F), 2626.3F);
      Float float0 = wall1.getHeight();
      wall0.setRightSideShininess((-982.244F));
      wall1.setHeight(float0);
      wall0.setWallAtStart(wall0);
      wall0.getLeftSideTexture();
      wall0.getXStart();
      wall0.getRightSideColor();
      wall0.getPoints();
      wall1.setXEnd((-431.667F));
      wall0.setLeftSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Wall wall0 = new Wall(0.0F, (-2054.172F), (-2054.172F), (-2054.172F), (-2054.172F), 0.1F);
      Float float0 = new Float((double) (-2054.172F));
      wall0.containsWallEndAt(0.0F, (-2054.172F), (-2054.172F));
      wall0.setArcExtent(float0);
      wall0.setWallAtEnd(wall0);
      Float float1 = new Float((-2054.172F));
      wall0.setHeightAtEnd(float1);
      Wall wall1 = wall0.getWallAtEnd();
      wall1.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Wall wall0 = new Wall(1204.0F, 1204.0F, 1204.0F, 1204.0F, 1204.0F, 1204.0F);
      wall0.getLeftSideTexture();
      Integer integer0 = Integer.valueOf(640);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Integer.sum(1357, 174);
      Integer.sum(1357, 640);
      wall0.setRightSideColor(integer0);
      Wall wall1 = new Wall(2709.103F, (-431.667F), 2634.3584F, 0.0F, (-1.0F), 2634.3584F);
      Wall wall2 = wall1.clone();
      Float float0 = wall2.getHeight();
      wall2.setHeight(float0);
      Wall wall3 = new Wall((-1684.5F), 2958.9F, 2634.3584F, 0.32999244F, 1531, 1396.1171F);
      wall2.getLength();
      Random.setNextRandom((-805));
      wall1.getPoints();
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-2063.883F), (-2063.883F), (-2063.883F), (-2063.883F), 0.1F);
      wall0.isTrapezoidal();
      wall0.setLevel((Level) null);
      float float0 = new Float((-3325.446F));
      wall0.setYEnd(0.0F);
      wall0.getYStart();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-2063.883F), (-2063.883F), (-2063.883F), (-2063.883F), (-2063.883F));
      wall0.setXStart(589.3665F);
      wall0.getRightSideShininess();
      wall0.getYEnd();
      wall0.setXEnd(0.0F);
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Wall wall0 = new Wall(1204.0F, 1204.0F, 1204.0F, 1204.0F, 1204.0F, 1204.0F);
      wall0.getRightSideTexture();
      Integer integer0 = Integer.valueOf(640);
      Integer.sum(1357, 174);
      Integer.sum(1357, 640);
      wall0.setRightSideColor(integer0);
      Wall wall1 = new Wall(2709.103F, (-431.667F), 2634.3584F, 0.0F, (-1.0F), 2634.3584F);
      Wall wall2 = wall1.clone();
      wall2.getHeight();
      wall1.setHeight((Float) null);
      wall0.setWallAtEnd(wall2);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      wall0.setWallAtEnd(wall1);
      Wall.Property.values();
      Float float0 = new Float(1210.9333F);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-2054.172F), (-2054.172F), (-2054.172F), (-2054.172F), (-0.66608995F));
      Float float0 = new Float((double) (-2054.172F));
      wall0.setArcExtent(float0);
      wall0.containsWallStartAt((-0.66608995F), (-0.66608995F), 0.0F);
      wall0.setArcExtent(float0);
      wall0.setWallAtEnd(wall0);
      Float float1 = new Float((-2054.172F));
      // Undeclared exception!
      wall0.getPoints();
  }
}
