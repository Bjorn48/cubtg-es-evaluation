/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:07:53 GMT 2019
 */

package org.sat4j.minisat.constraints.card;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.card.MinWatchCard;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.LearningStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomLiteralSelectionStrategy;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.MandatoryLiteralListener;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DotSearchTracing;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MinWatchCard_ESTest extends MinWatchCard_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      SearchParams searchParams0 = new SearchParams(0.0, (-12.6153400079), 0.0, (-880));
      PureOrder pureOrder0 = new PureOrder((-880));
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, (-880));
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      iVecInt0.contains(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 2338);
      minWatchCard0.getAssertionLevel(iVecInt0, 2);
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      minWatchCard0.toString();
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI((MandatoryLiteralListener) null, 910);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1867);
      minWatchCard0.normalize();
      minWatchCard0.toString();
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>(",f(I:ct9gn]af[");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMin0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-2521));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2521));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      solver0.fixedSize((-1));
      solver0.enqueue(32);
      minWatchCard0.calcReason(1867, vecInt0);
      vecInt0.unsafePush(1633);
      minWatchCard0.incActivity(296.71077);
      minWatchCard0.getAssertionLevel(vecInt0, 3036);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 1833);
      // Undeclared exception!
      try { 
        minWatchCard0.isSatisfied();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Lits lits0 = new Lits();
      lits0.nVars();
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt1, true, 0);
      minWatchCard0.getAssertionLevel(vecInt0, 0);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("?%>4f");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-516));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      minWatchCard0.computePropagation(solver0);
      solver0.enqueue(0);
      minWatchCard0.remove(solver0);
      minWatchCard0.incActivity((-1));
      minWatchCard0.getAssertionLevel(vecInt1, 99);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.simplify();
      tabuListDecorator0.init();
      minWatchCard0.normalize();
      VecInt vecInt0 = new VecInt();
      vecInt0.ensure(1923);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      readOnlyVecInt0.iterator();
      vecInt0.clear();
      vecInt0.ensure(1923);
      minWatchCard0.simplify();
      minWatchCard0.assertConstraintIfNeeded(solver1);
      minWatchCard0.normalize();
      MinWatchCard.minWatchCardNew(solver1, iLits0, readOnlyVecInt0, true, 0);
      minWatchCard0.learnt();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool(1867);
      VecInt vecInt0 = new VecInt(3734, 3734);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 3734);
      minWatchCard0.toString();
      minWatchCard0.normalize();
      minWatchCard0.getVocabulary();
      minWatchCard0.calcReasonOnTheFly(0, vecInt0, vecInt0);
      minWatchCard0.computeWatches();
      minWatchCard0.undo((-353));
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        minWatchCard0.calcReasonOnTheFly(0, vecInt0, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.simplify();
      minWatchCard0.normalize();
      VecInt vecInt0 = new VecInt();
      vecInt0.ensure(1923);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      readOnlyVecInt0.iterator();
      vecInt0.clear();
      vecInt0.ensure(1923);
      minWatchCard0.simplify();
      minWatchCard0.assertConstraintIfNeeded(solver1);
      minWatchCard0.toConstraint();
      minWatchCard0.hashCode();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool(1867);
      VecInt vecInt0 = new VecInt(0);
      IVecInt iVecInt0 = vecInt0.push(3734);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 3734);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      minWatchCard0.toString();
      minWatchCard0.normalize();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("NMY/8dkO/");
      dotSearchTracing0.map(47);
      minWatchCard0.toString((VarMapper) dotSearchTracing0);
      minWatchCard0.register();
      minWatchCard0.calcReason(47, vecInt0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool(1867);
      VecInt vecInt0 = new VecInt(0);
      IVecInt iVecInt0 = vecInt0.push(3734);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 3734);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      minWatchCard0.toString();
      minWatchCard0.normalize();
      minWatchCard0.getVocabulary();
      iVecInt0.unsafePush(1867);
      minWatchCard0.getAssertionLevel(iVecInt0, 1867);
      // Undeclared exception!
      try { 
        minWatchCard0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1867);
      minWatchCard0.normalize();
      minWatchCard0.toString();
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>(",f(I:ct9gn]af[");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMin0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-2521));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2521));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      solver0.fixedSize((-1));
      solver0.enqueue(32);
      minWatchCard0.calcReason(1867, vecInt0);
      vecInt0.unsafePush(1633);
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew(solver0, iLits0, vecInt0, false, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1867);
      minWatchCard0.normalize();
      minWatchCard0.toString();
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>(",f(I:ct9gn]af[");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMin0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-2521));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2521));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      solver0.enqueue(0);
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.getFromPool(1867);
      VecInt vecInt0 = new VecInt(3734, 3734);
      IVecInt iVecInt0 = vecInt0.push(3734);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 3734);
      minWatchCard0.toString();
      minWatchCard0.normalize();
      ILits iLits1 = minWatchCard0.getVocabulary();
      minWatchCard0.calcReasonOnTheFly(0, iVecInt0, vecInt0);
      minWatchCard0.computeWatches();
      minWatchCard0.locked();
      minWatchCard0.equals(iLits1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      vecInt0.ensure(1923);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      readOnlyVecInt0.iterator();
      vecInt0.iterator();
      vecInt0.clear();
      vecInt0.ensure(1923);
      vecInt0.unsafePush(1923);
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(iLits0, readOnlyVecInt0, 1867);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1867);
      vecInt0.subset(1877);
      minWatchCard0.normalize();
      minWatchCard0.toString();
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>(",f(I:ct9gn]af[");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMin0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-2521));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2521));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      minWatchCard0.calcReason((-2521), vecInt0);
      try { 
        minWatchCard0.computePropagation(solver0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1867);
      minWatchCard0.normalize();
      minWatchCard0.toString();
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>(",f(I:ct9gn]af[");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMin0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-2521));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2521));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      solver0.enqueue(0);
      try { 
        minWatchCard0.computePropagation(solver0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = solver0.createBlockingClauseForCurrentModel();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.getLits();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1867);
      minWatchCard0.normalize();
      minWatchCard0.toString();
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMin0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-2521));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2521));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew(solver0, iLits0, vecInt0, false, (-1234));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      SearchParams searchParams0 = new SearchParams(0.0, (-12.6153400079), 0.0, (-880));
      PureOrder pureOrder0 = new PureOrder((-880));
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, (-880));
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      iVecInt0.contains(0);
      int int0 = 2338;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 2338);
      minWatchCard0.getAssertionLevel(iVecInt0, 2);
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      SearchParams searchParams1 = new SearchParams(1.0E20, (-3676));
      PureOrder pureOrder1 = new PureOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = null;
      try {
        solver0 = new Solver<CardinalityDataStructureYanMin>((LearningStrategy<CardinalityDataStructureYanMin>) null, cardinalityDataStructureYanMin1, searchParams1, pureOrder1, fixedPeriodRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Random.setNextRandom(3718);
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew((UnitPropagationListener) null, (ILits) null, (IVecInt) null, true, 3718);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool(1867);
      VecInt vecInt0 = new VecInt(0);
      IVecInt iVecInt0 = vecInt0.push(3734);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 3734);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      minWatchCard0.toString();
      minWatchCard0.normalize();
      minWatchCard0.getVocabulary();
      minWatchCard0.computeWatches();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      IVecInt iVecInt0 = VecInt.EMPTY;
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, (-34));
      minWatchCard0.hashCode();
      minWatchCard0.calcReason((-34), iVecInt0);
      minWatchCard0.getActivity();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Lits lits0 = new Lits();
      lits0.nVars();
      lits0.ensurePool(1867);
      lits0.getFromPool(1867);
      VecInt vecInt0 = new VecInt(1867, 3734);
      IVecInt iVecInt0 = vecInt0.push(3734);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, false, 3734);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      minWatchCard0.normalize();
      lits0.ensurePool(47);
      minWatchCard0.register();
      minWatchCard0.calcReason(47, vecInt0);
      minWatchCard0.learnt();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, (-782));
      MinWatchCard minWatchCard1 = new MinWatchCard(iLits0, iVecInt0, true, (-34));
      MinWatchCard minWatchCard2 = minWatchCard1.computePropagation(solver0);
      minWatchCard0.getAssertionLevel(iVecInt0, 3735);
      minWatchCard2.assertConstraint(solver0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      solver0.getLogger();
      IVecInt iVecInt0 = VecInt.EMPTY;
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(cardinalityDataStructureYanMin1).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder1 = new PureOrder((-2521));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2521));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin1, searchParams0, pureOrder1, lubyRestarts0, basicLauncher0);
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, 99);
      minWatchCard0.forwardActivity(99);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      // Undeclared exception!
      try { 
        AbstractMinimalModel.positiveLiterals((ISolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.simplify();
      minWatchCard0.normalize();
      VecInt vecInt0 = new VecInt();
      vecInt0.ensure(1923);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      readOnlyVecInt0.iterator();
      vecInt0.clear();
      vecInt0.ensure(1923);
      minWatchCard0.simplify();
      minWatchCard0.assertConstraintIfNeeded(solver1);
      minWatchCard0.normalize();
      minWatchCard0.assertConstraint(solver0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      activeLearning0.setActivityPercent((-1.0));
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin1, pureOrder0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      MinWatchCard minWatchCard1 = new MinWatchCard(iLits0, iVecInt0, false, (-304));
      minWatchCard0.computePropagation(solver1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      VecInt vecInt0 = new VecInt(0);
      VecInt vecInt1 = new VecInt(0, 0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, true, 0);
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Lits lits0 = new Lits();
      lits0.nVars();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, 0);
      minWatchCard0.getAssertionLevel(vecInt0, 0);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("?%>4f");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-516));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      minWatchCard0.calcReason(99, vecInt0);
      minWatchCard0.computePropagation(solver0);
      solver0.enqueue(0);
      // Undeclared exception!
      try { 
        minWatchCard0.remove(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 0);
      minWatchCard0.getAssertionLevel(vecInt0, 0);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("?%>4f");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-516));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      minWatchCard0.calcReason(99, vecInt0);
      minWatchCard0.computePropagation(solver0);
      solver0.enqueue(0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      VecInt vecInt0 = new VecInt(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, true, 0);
      minWatchCard0.toString();
      minWatchCard0.normalize();
      minWatchCard0.getVocabulary();
      minWatchCard0.calcReasonOnTheFly(0, vecInt0, vecInt0);
      // Undeclared exception!
      try { 
        minWatchCard0.computeWatches();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1033);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 1033);
      minWatchCard0.undo(1867);
      minWatchCard0.setActivity((-1578.4069383995795));
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      minWatchCard0.equals(cardinalityDataStructureYanMin1);
      minWatchCard0.getActivity();
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI((MandatoryLiteralListener) null, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Lits lits0 = new Lits();
      lits0.nVars();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, 0);
      minWatchCard0.getAssertionLevel(vecInt0, 0);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("?%>4f");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-516));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      minWatchCard0.calcReason(99, vecInt0);
      minWatchCard0.size();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1867);
      minWatchCard0.normalize();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams();
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      basicLauncher0.usage();
      minWatchCard0.incActivity(1033);
      minWatchCard0.getAssertionLevel(vecInt0, 92);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1867);
      minWatchCard0.normalize();
      minWatchCard0.toString();
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>(",f(I:ct9gn]af[");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMin0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-2521));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2521));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      solver0.fixedSize((-1));
      solver0.enqueue(32);
      minWatchCard0.calcReason(1867, vecInt0);
      minWatchCard0.simplify();
      minWatchCard0.assertConstraintIfNeeded(solver0);
      minWatchCard0.toConstraint();
      minWatchCard0.hashCode();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      VecInt vecInt0 = new VecInt(1867, 0);
      VecInt vecInt1 = new VecInt(1867);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt1, true, 0);
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      minWatchCard0.assertConstraintIfNeeded((UnitPropagationListener) null);
      MinWatchCard.minWatchCardNew((UnitPropagationListener) null, iLits0, vecInt1, false, 0);
      minWatchCard0.simplify();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      VecInt vecInt0 = new VecInt(1867, 0);
      VecInt vecInt1 = new VecInt(1867);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt1, true, 0);
      minWatchCard0.equals(vecInt1);
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      minWatchCard0.assertConstraintIfNeeded((UnitPropagationListener) null);
      vecInt1.unsafePush(0);
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew((UnitPropagationListener) null, iLits0, vecInt1, false, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.simplify();
      minWatchCard0.normalize();
      VecInt vecInt0 = new VecInt();
      vecInt0.ensure(1923);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      readOnlyVecInt0.iterator();
      vecInt0.iterator();
      vecInt0.clear();
      vecInt0.ensure(1923);
      vecInt0.unsafePush(1923);
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew(solver1, iLits0, readOnlyVecInt0, true, 466);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1923
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      minWatchCard0.toString();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      iVecInt0.clear();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 0);
      minWatchCard0.normalize();
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>(",f(I:ct9gn]af[");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-1234));
      LubyRestarts lubyRestarts0 = new LubyRestarts(37);
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      solver0.fixedSize(32);
      minWatchCard0.calcReason(37, iVecInt0);
      MinWatchCard.minWatchCardNew(solver0, iLits0, iVecInt0, true, (-178));
      minWatchCard0.simplify();
      minWatchCard0.normalize();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      int int0 = 1867;
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1867);
      minWatchCard0.normalize();
      minWatchCard0.toString();
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>(",f(I:ct9gn]af[");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMin0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-2521));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2521));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      basicLauncher0.usage();
      MinWatchCard minWatchCard1 = new MinWatchCard(iLits0, vecInt0, true, 0);
      MinWatchCard minWatchCard2 = new MinWatchCard(iLits0, vecInt0, true, (-1));
      minWatchCard2.computePropagation(solver0);
      // Undeclared exception!
      try { 
        minWatchCard1.propagate(solver0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1867);
      minWatchCard0.normalize();
      minWatchCard0.toString();
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>(",f(I:ct9gn]af[");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMin0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-2521));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2521));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      solver0.fixedSize((-1));
      solver0.enqueue(32);
      minWatchCard0.calcReason(1867, vecInt0);
      minWatchCard0.requiredNumberOfSatisfiedLiterals();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool(1867);
      VecInt vecInt0 = new VecInt(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, true, 3734);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      minWatchCard0.toString();
      minWatchCard0.normalize();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("");
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin2 = new CardinalityDataStructureYanMin();
      cardinalityDataStructureYanMin2.createCardinalityConstraint(vecInt0, (-1));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.nVars();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, 0);
      minWatchCard0.getAssertionLevel(vecInt0, 0);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("?%>4f");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>((-516));
      SearchParams searchParams0 = new SearchParams((-1));
      PureOrder pureOrder0 = new PureOrder((-516));
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      minWatchCard0.assertConstraintIfNeeded(solver0);
      minWatchCard0.simplify();
      minWatchCard0.assertConstraint(solver0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.simplify();
      // Undeclared exception!
      try { 
        minWatchCard0.isSatisfied();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, (-34));
      minWatchCard0.assertConstraintIfNeeded(solver0);
      // Undeclared exception!
      try { 
        minWatchCard0.propagate(solver0, (-3806));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      int int0 = 1923;
      vecInt0.ensure(1923);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      readOnlyVecInt0.iterator();
      vecInt0.iterator();
      vecInt0.clear();
      vecInt0.ensure(1923);
      vecInt0.unsafePush(1923);
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, readOnlyVecInt0, true, 1923);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      int int0 = 0;
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      varOrderHeap0.setPhaseSelectionStrategy(randomLiteralSelectionStrategy0);
      intArray0[1] = 0;
      intArray0[2] = 0;
      // Undeclared exception!
      try { 
        solver0.addAtMostOnTheFly(intArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      Integer integer0 = new Integer(0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((int) integer0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, (int) integer0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      minWatchCard0.toString();
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI(watcherBasedPrimeImplicantStrategy0, (int) integer0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, (-34));
      minWatchCard0.hashCode();
      minWatchCard0.assertConstraint(solver0);
      minWatchCard0.toString();
      minWatchCard0.remove(solver0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1867);
      minWatchCard0.normalize();
      minWatchCard0.toString();
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>(",f(I:ct9gn]af[");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(cardinalityDataStructureYanMin0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      int int0 = (-2521);
      PureOrder pureOrder0 = new PureOrder((-2521));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2521));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        solver0.enqueue(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder();
      PureOrder pureOrder1 = new PureOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, pureOrder0, glucose21Restarts0);
      solver0.getLogger();
      Lits lits0 = new Lits();
      lits0.resetPool();
      // Undeclared exception!
      try { 
        MinWatchCard.linearisation(lits0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 3323);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.nVars();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, 0);
      minWatchCard0.getAssertionLevel(vecInt0, 0);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("?%>4f");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>((-516));
      SearchParams searchParams0 = new SearchParams((-1));
      PureOrder pureOrder0 = new PureOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      minWatchCard0.computePropagation(solver0);
      solver0.enqueue(0);
      // Undeclared exception!
      try { 
        minWatchCard0.remove(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.simplify();
      minWatchCard0.normalize();
      VecInt vecInt0 = new VecInt();
      SearchParams searchParams1 = new SearchParams();
      int int0 = (-2521);
      PureOrder pureOrder1 = new PureOrder((-2521));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2521));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams1, pureOrder1, glucose21Restarts0, basicLauncher0);
      solver0.enqueue(0);
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool(1867);
      VecInt vecInt0 = new VecInt(0);
      IVecInt iVecInt0 = vecInt0.push(3734);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 3734);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      minWatchCard0.toString();
      ILits iLits1 = minWatchCard0.getVocabulary();
      minWatchCard0.computeWatches();
      minWatchCard0.locked();
      minWatchCard0.equals(iLits1);
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      minWatchCard0.assertConstraintIfNeeded((UnitPropagationListener) null);
      minWatchCard0.simplify();
      // Undeclared exception!
      try { 
        minWatchCard0.propagate((UnitPropagationListener) null, 3734);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.nVars();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, 3725);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams();
      minWatchCard0.canBePropagatedMultipleTimes();
      minWatchCard0.getLits();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.simplify();
      minWatchCard0.normalize();
      VecInt vecInt0 = new VecInt();
      solver0.stop();
      vecInt0.ensure(1923);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      readOnlyVecInt0.iterator();
      vecInt0.clear();
      vecInt0.ensure(1923);
      minWatchCard0.simplify();
      minWatchCard0.assertConstraintIfNeeded(solver1);
      minWatchCard0.normalize();
      minWatchCard0.assertConstraint(solver0);
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew(solver0, iLits0, readOnlyVecInt0, false, (-77));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      PureOrder pureOrder0 = new PureOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      IVecInt iVecInt0 = VecInt.EMPTY;
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, (-34));
      minWatchCard0.calcReason((-34), iVecInt0);
      minWatchCard0.simplify();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool(1867);
      VecInt vecInt0 = new VecInt(0);
      IVecInt iVecInt0 = vecInt0.push(3734);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 3734);
      minWatchCard0.toString();
      minWatchCard0.getVocabulary();
      minWatchCard0.computeWatches();
      minWatchCard0.locked();
      FileSystemHandling.shouldAllThrowIOExceptions();
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      minWatchCard0.assertConstraintIfNeeded((UnitPropagationListener) null);
      minWatchCard0.simplify();
      // Undeclared exception!
      try { 
        minWatchCard0.propagate((UnitPropagationListener) null, 3734);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3732
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.nVars();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, 0);
      minWatchCard0.getAssertionLevel(vecInt0, 0);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("?%>4f");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-516));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      SearchParams searchParams1 = solver0.getSearchParams();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, pureOrder0, lubyRestarts0, basicLauncher0);
      MinWatchCard minWatchCard1 = new MinWatchCard(lits0, vecInt0, (-516));
      MinWatchCard minWatchCard2 = minWatchCard1.computePropagation(solver1);
      solver1.enqueue(133);
      minWatchCard1.remove(solver1);
      minWatchCard0.size();
      minWatchCard2.simplify();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1033);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 1033);
      minWatchCard0.getAssertionLevel(vecInt0, 1033);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("?%>4f");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-516));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      minWatchCard0.calcReason(99, vecInt0);
      try { 
        minWatchCard0.computePropagation(solver0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      VecInt vecInt0 = new VecInt(0);
      IVecInt iVecInt0 = vecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      minWatchCard0.assertConstraintIfNeeded((UnitPropagationListener) null);
      minWatchCard0.simplify();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      IVecInt iVecInt0 = vecInt1.push(1033);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 1033);
      minWatchCard0.undo(1867);
      minWatchCard0.setActivity((-1578.4069383995795));
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      minWatchCard0.equals(cardinalityDataStructureYanMin0);
      minWatchCard0.getActivity();
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI((MandatoryLiteralListener) null, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.nVars();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      PureOrder pureOrder0 = new PureOrder((-516));
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, 3725);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0);
      solver0.enqueue(10);
      minWatchCard0.toString();
      // Undeclared exception!
      try { 
        minWatchCard0.propagate(solver0, 20);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.getFromPool(0);
      VecInt vecInt0 = new VecInt(2640);
      IVecInt iVecInt0 = vecInt0.push((-902));
      iLits0.resetPool();
      IVecInt iVecInt1 = VecInt.EMPTY;
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      ILits iLits1 = cardinalityDataStructure1.getVocabulary();
      iLits1.nVars();
      iLits1.ensurePool((-2130836485));
      iLits1.getFromPool(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 1867);
      // Undeclared exception!
      try { 
        minWatchCard0.simplify();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.simplify();
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(cardinalityDataStructureYanMin1).getVocabulary();
      SearchParams searchParams1 = new SearchParams();
      PureOrder pureOrder1 = new PureOrder((-2521));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2521));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin1, searchParams1, pureOrder1, lubyRestarts0, basicLauncher0);
      minWatchCard0.learnt();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.nVars();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>((-516));
      PureOrder pureOrder0 = new PureOrder((-516));
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, (-1));
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      pureOrder0.setPeriod((-1));
      SearchParams searchParams0 = new SearchParams();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0);
      minWatchCard0.assertConstraint(solver0);
      minWatchCard0.canBePropagatedMultipleTimes();
      minWatchCard0.get(0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(0);
      Integer integer0 = new Integer(0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((int) integer0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, (int) integer0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      minWatchCard0.toString();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("y;#");
      minWatchCard0.toString((VarMapper) dotSearchTracing0);
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool(1867);
      VecInt vecInt0 = new VecInt(0);
      IVecInt iVecInt0 = vecInt0.push(3734);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 3734);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      minWatchCard0.toString();
      ILits iLits1 = minWatchCard0.getVocabulary();
      minWatchCard0.computeWatches();
      minWatchCard0.locked();
      minWatchCard0.equals(iLits1);
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      minWatchCard0.assertConstraintIfNeeded((UnitPropagationListener) null);
      minWatchCard0.simplify();
      // Undeclared exception!
      try { 
        minWatchCard0.assertConstraint((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.simplify();
      minWatchCard0.calcReason(0, iVecInt0);
      minWatchCard0.calcReasonOnTheFly(0, iVecInt0, iVecInt0);
      minWatchCard0.computePropagation(solver1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder();
      PureOrder pureOrder1 = new PureOrder(1103);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, pureOrder0, glucose21Restarts0);
      solver0.getLogger();
      ILits iLits0 = solver0.getVocabulary();
      iLits0.resetPool();
      // Undeclared exception!
      try { 
        MinWatchCard.linearisation(iLits0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 0);
      minWatchCard0.getAssertionLevel(vecInt0, 0);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("?%>4f");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-516));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "?%>4f";
      stringArray0[1] = "?%>4f";
      stringArray0[2] = "?%>4f";
      stringArray0[3] = "?%>4f";
      stringArray0[4] = "c ";
      stringArray0[5] = "c ";
      stringArray0[6] = "c ";
      stringArray0[7] = "c ";
      BasicLauncher.main(stringArray0);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      minWatchCard0.calcReason(99, vecInt0);
      clauseOnlyLearning0.setVarActivityListener(solver0);
      minWatchCard0.computePropagation(solver0);
      solver0.enqueue(0);
      minWatchCard0.getLits();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      VecInt vecInt0 = new VecInt();
      vecInt0.ensure(1923);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      readOnlyVecInt0.iterator();
      vecInt0.iterator();
      vecInt0.clear();
      vecInt0.ensure(1923);
      vecInt0.unsafePush(1923);
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(iLits0, readOnlyVecInt0, 20);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.simplify();
      minWatchCard0.rescaleBy(684.075398380789);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      glucose21Restarts0.shouldRestart();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, 972);
      minWatchCard0.learnt();
      MinWatchCard.linearisation((ILits) null, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool(1867);
      VecInt vecInt0 = new VecInt(3734, 3734);
      IVecInt iVecInt0 = vecInt0.push(3734);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 3734);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      minWatchCard0.toString();
      minWatchCard0.normalize();
      ILits iLits1 = minWatchCard0.getVocabulary();
      minWatchCard0.computeWatches();
      boolean boolean0 = minWatchCard0.locked();
      minWatchCard0.equals(iLits1);
      minWatchCard0.get(0);
      boolean boolean1 = minWatchCard0.canBeSatisfiedByCountingLiterals();
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      MinWatchCard minWatchCard1 = new MinWatchCard(iLits0, iVecInt0, true, 99);
      try { 
        minWatchCard1.computePropagation(solver0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt(0);
      IVecInt iVecInt0 = vecInt0.push(1033);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 1033);
      minWatchCard0.setActivity((-1578.4069383995795));
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      minWatchCard0.equals(cardinalityDataStructureYanMin0);
      minWatchCard0.computeWatches();
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI((MandatoryLiteralListener) null, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      searchParams0.setInitConflictBound(0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.requiredNumberOfSatisfiedLiterals();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1867);
      minWatchCard0.normalize();
      minWatchCard0.toString();
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>(",f(I:ct9gn]af[");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMin0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-2521));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2521));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      solver0.fixedSize((-1));
      minWatchCard0.calcReason((-1), vecInt0);
      vecInt0.unsafePush(1633);
      minWatchCard0.incActivity(296.71077);
      minWatchCard0.getAssertionLevel(vecInt0, 3036);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(cardinalityDataStructureYanMin0).getVocabulary();
      SearchParams searchParams0 = new SearchParams(0.0, (-12.6153400079), 0.0, (-880));
      PureOrder pureOrder0 = new PureOrder((-880));
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, (-880));
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      SearchParams searchParams1 = new SearchParams();
      PureOrder pureOrder1 = new PureOrder(0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(2999);
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, lubyRestarts0, basicLauncher0);
      basicLauncher0.usage();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 0);
      MinWatchCard minWatchCard1 = new MinWatchCard(iLits0, vecInt0, true, 0);
      // Undeclared exception!
      try { 
        minWatchCard0.computePropagation(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool(1867);
      VecInt vecInt0 = new VecInt(0);
      IVecInt iVecInt0 = vecInt0.push(3734);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 3734);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      basicLauncher0.displayLicense();
      minWatchCard0.calcReason(3733, iVecInt0);
      vecInt0.unsafePush((-203));
      minWatchCard0.getAssertionLevel(vecInt0, 1474);
      // Undeclared exception!
      try { 
        MinWatchCard.linearisation(iLits0, iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -203
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.simplify();
      boolean boolean0 = MinWatchCard.ATMOST;
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew(solver1, iLits0, iVecInt0, false, (-7094));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1033);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 1033);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      minWatchCard0.hashCode();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.nVars();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      PureOrder pureOrder0 = new PureOrder((-516));
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, 3725);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0);
      minWatchCard0.assertConstraint(solver0);
      minWatchCard0.canBePropagatedMultipleTimes();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard((ILits) null, (IVecInt) null, (-374));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.simplify();
      minWatchCard0.normalize();
      VecInt vecInt0 = new VecInt();
      SearchParams searchParams1 = new SearchParams();
      PureOrder pureOrder1 = new PureOrder((-2521));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2521));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams1, pureOrder1, glucose21Restarts0, basicLauncher0);
      solver0.enqueue(0);
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      int int0 = 0;
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.getVocabulary();
      // Undeclared exception!
      try { 
        minWatchCard0.computeWatches();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      VecInt vecInt0 = new VecInt(0);
      VecInt vecInt1 = new VecInt(0, 0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, true, 0);
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("c ");
      minWatchCard0.toString((VarMapper) dotSearchTracing0);
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 16;
      VecInt vecInt0 = new VecInt(intArray0);
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, 3360);
      int int0 = 3654;
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      minWatchCard0.normalize();
      // Undeclared exception!
      try { 
        vecInt0.moveTo2(readOnlyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      SearchParams searchParams0 = new SearchParams(0.0, (-11.693702620328473), 0.0, (-880));
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, (-880));
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      boolean boolean0 = MinWatchCard.ATLEAST;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 2338);
      LubyRestarts lubyRestarts0 = new LubyRestarts(2338);
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      basicLauncher0.displayLicense();
      basicLauncher0.log("");
      minWatchCard0.calcReason(0, vecInt0);
      iVecInt0.unsafePush(128);
      minWatchCard0.simplify();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      VecInt vecInt0 = new VecInt(0);
      VecInt vecInt1 = new VecInt(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, true, 0);
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("M!C=Vwei)#7kX[=");
      minWatchCard0.getAssertionLevel(vecInt1, 1);
      // Undeclared exception!
      try { 
        minWatchCard0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      // Undeclared exception!
      try { 
        MinWatchCard.linearisation(iLits0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Lits lits0 = new Lits();
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, (IVecInt) null, false, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.nVars();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      PureOrder pureOrder0 = new PureOrder((-516));
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, (-516));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("c ");
      minWatchCard0.register();
      minWatchCard0.toString();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.simplify();
      minWatchCard0.calcReason(0, iVecInt0);
      minWatchCard0.undo(0);
      minWatchCard0.calcReasonOnTheFly(0, iVecInt0, iVecInt0);
      minWatchCard0.computePropagation(solver1);
      minWatchCard0.getVocabulary();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool(0);
      VecInt vecInt0 = new VecInt(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 0);
      minWatchCard0.calcReason((-2730), vecInt0);
      minWatchCard0.canBePropagatedMultipleTimes();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, true, 1033);
      minWatchCard0.setActivity((-1578.4069383995795));
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      minWatchCard0.equals(cardinalityDataStructureYanMin0);
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI((MandatoryLiteralListener) null, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      ILits iLits1 = solver1.getVocabulary();
      iLits1.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, (-2923));
      minWatchCard0.simplify();
      minWatchCard0.calcReason((-2923), iVecInt0);
      solver1.getTimeoutMs();
      minWatchCard0.calcReasonOnTheFly((-2923), iVecInt0, iVecInt0);
      minWatchCard0.computePropagation(solver1);
      minWatchCard0.assertConstraintIfNeeded(solver1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(iSolver0).isSatisfiable();
      doReturn((int[]) null).when(iSolver0).model();
      doReturn(0, 0).when(iSolver0).nVars();
      doReturn((int[]) null).when(iSolver0).primeImplicant();
      doReturn((String) null).when(iSolver0).getLogPrefix();
      IVecInt iVecInt0 = VecInt.EMPTY;
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(iSolver0, iVecInt0, solutionFoundListener0);
      abstractMinimalModel0.setTimeoutOnConflicts((-2458));
      abstractMinimalModel0.isSatisfiable();
      abstractMinimalModel0.primeImplicant();
      abstractMinimalModel0.getLogPrefix();
      abstractMinimalModel0.isSatisfiable();
      abstractMinimalModel0.model();
      IVecInt iVecInt1 = AbstractMinimalModel.positiveLiterals(abstractMinimalModel0);
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt1, 0);
      minWatchCard0.toConstraint();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(iLits0, (IVecInt) null, false, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, pureOrder0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.simplify();
      minWatchCard0.calcReason(0, iVecInt0);
      try { 
        MinWatchCard.minWatchCardNew(solver1, iLits0, iVecInt0, false, 6);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      solver0.getLogger();
      IVecInt iVecInt0 = VecInt.EMPTY;
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, (-34));
      minWatchCard0.hashCode();
      minWatchCard0.assertConstraint(solver0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 1867);
      minWatchCard0.getAssertionLevel(vecInt0, (-516));
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-2521));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      solver0.fixedSize(1867);
      boolean boolean0 = MinWatchCard.ATMOST;
      minWatchCard0.calcReason((-2521), vecInt0);
      vecInt0.unsafePush(0);
      MinWatchCard.minWatchCardNew(solver0, iLits0, vecInt0, true, 0);
      minWatchCard0.simplify();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.simplify();
      minWatchCard0.normalize();
      VecInt vecInt0 = new VecInt();
      SearchParams searchParams1 = new SearchParams();
      PureOrder pureOrder1 = new PureOrder((-2521));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2521));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams1, pureOrder1, glucose21Restarts0, basicLauncher0);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("NMY/8dkO/");
      dotSearchTracing0.map(47);
      minWatchCard0.toString((VarMapper) dotSearchTracing0);
      solver0.enqueue(0);
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Lits lits0 = new Lits();
      lits0.nVars();
      lits0.ensurePool(1867);
      lits0.getFromPool(0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, true, 0);
      minWatchCard0.toString();
      minWatchCard0.normalize();
      minWatchCard0.calcReason(1867, iVecInt0);
      minWatchCard0.getAssertionLevel(iVecInt0, 0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      SearchParams searchParams0 = new SearchParams(0.0, (-12.6153400079), 0.0, (-880));
      PureOrder pureOrder0 = new PureOrder((-880));
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, (-880));
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      iVecInt0.contains(0);
      int int0 = 2338;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 2338);
      minWatchCard0.getAssertionLevel(iVecInt0, 2);
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      minWatchCard0.toString();
      SearchParams searchParams1 = new SearchParams(1.0E20, (-3667));
      PureOrder pureOrder1 = new PureOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = null;
      try {
        solver0 = new Solver<CardinalityDataStructureYanMin>((LearningStrategy<CardinalityDataStructureYanMin>) null, cardinalityDataStructureYanMin1, searchParams1, pureOrder1, fixedPeriodRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool(1867);
      VecInt vecInt0 = new VecInt(3734, 3734);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, (-551));
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>((ASolverFactory<SubModelIterator>) null);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("c ");
      minWatchCard0.register();
      minWatchCard0.toString();
      minWatchCard0.size();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      SearchParams searchParams0 = new SearchParams(0.0, (-12.6153400079), 0.0, (-880));
      PureOrder pureOrder0 = new PureOrder((-880));
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, (-880));
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      iVecInt0.contains(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 2338);
      minWatchCard0.getAssertionLevel(iVecInt0, 2);
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      minWatchCard0.toString();
      SearchParams searchParams1 = new SearchParams(0.0, 2338);
      PureOrder pureOrder1 = new PureOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      minWatchCard0.hashCode();
      minWatchCard0.register();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      solver0.getLogger();
      IVecInt iVecInt0 = VecInt.EMPTY;
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.getVocabulary();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(cardinalityDataStructureYanMin1).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder1 = new PureOrder((-2521));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2521));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin1, searchParams0, pureOrder1, lubyRestarts0, basicLauncher0);
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, 99);
      minWatchCard0.forwardActivity(99);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      iLits0.getFromPool((-516));
      // Undeclared exception!
      try { 
        AbstractMinimalModel.positiveLiterals((ISolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1033);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 1033);
      minWatchCard0.getAssertionLevel(vecInt0, 1033);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("?%>4f");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      // Undeclared exception!
      try { 
        AbstractMinimalModel.positiveLiterals((ISolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.simplify();
      minWatchCard0.calcReason(0, iVecInt0);
      minWatchCard0.calcReasonOnTheFly(1068, iVecInt0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(0);
      VecInt vecInt0 = new VecInt(0);
      IVecInt iVecInt0 = vecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      minWatchCard0.toString();
      minWatchCard0.normalize();
      minWatchCard0.simplify();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1867);
      minWatchCard0.normalize();
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>(",f(I:ct9gn]af[");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMin0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-2521));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2521));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      solver0.fixedSize((-1));
      minWatchCard0.calcReason((-1), vecInt0);
      vecInt0.unsafePush(1633);
      minWatchCard0.incActivity(296.71077);
      minWatchCard0.getAssertionLevel(vecInt0, 3036);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1867);
      minWatchCard0.normalize();
      minWatchCard0.toString();
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>(",f(I:ct9gn]af[");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMin0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-2521));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2521));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      basicLauncher0.usage();
      // Undeclared exception!
      try { 
        minWatchCard0.propagate(solver0, 1867);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 0);
      minWatchCard0.canBePropagatedMultipleTimes();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Lits lits0 = new Lits();
      lits0.nVars();
      lits0.ensurePool(1867);
      lits0.getFromPool(1867);
      VecInt vecInt0 = new VecInt(1867);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, (-1643));
      minWatchCard0.setActivity(1867);
      minWatchCard0.equals((Object) null);
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI((MandatoryLiteralListener) null, 50);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool(1867);
      VecInt vecInt0 = new VecInt(0);
      IVecInt iVecInt0 = vecInt0.push(3734);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 3734);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      minWatchCard0.toString();
      minWatchCard0.getVocabulary();
      minWatchCard0.computeWatches();
      minWatchCard0.locked();
      FileSystemHandling.shouldAllThrowIOExceptions();
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      minWatchCard0.assertConstraintIfNeeded((UnitPropagationListener) null);
      minWatchCard0.simplify();
      // Undeclared exception!
      try { 
        minWatchCard0.propagate((UnitPropagationListener) null, 3734);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3732
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.nVars();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      VecInt vecInt1 = new VecInt(684);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt1, false, 0);
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>((ASolverFactory<SubModelIterator>) null);
      boolean boolean0 = MinWatchCard.ATLEAST;
      minWatchCard0.equals(basicLauncher0);
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      minWatchCard0.assertConstraintIfNeeded((UnitPropagationListener) null);
      vecInt0.unsafePush(110);
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew((UnitPropagationListener) null, lits0, iVecInt0, false, (-695));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, tabuListDecorator0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 100);
      // Undeclared exception!
      try { 
        minWatchCard0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.getFromPool(0);
      VecInt vecInt0 = new VecInt(2640);
      IVecInt iVecInt0 = vecInt0.push((-902));
      iLits0.resetPool();
      IVecInt iVecInt1 = VecInt.EMPTY;
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      ILits iLits1 = cardinalityDataStructure1.getVocabulary();
      iLits1.nVars();
      iLits1.ensurePool(0);
      iLits1.ensurePool((-2130836439));
      iLits1.getFromPool(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 1867);
      // Undeclared exception!
      try { 
        minWatchCard0.computeWatches();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      int int0 = 1867;
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1867);
      minWatchCard0.normalize();
      minWatchCard0.toString();
      boolean boolean0 = MinWatchCard.ATMOST;
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>(",f(I:ct9gn]af[");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMin0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-2521));
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2521));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      lubyRestarts0.onRestart();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      // Undeclared exception!
      try { 
        minWatchCard0.get(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Lits lits0 = new Lits();
      lits0.nVars();
      lits0.ensurePool(1867);
      VecInt vecInt0 = new VecInt(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 0);
      minWatchCard0.locked();
      minWatchCard0.equals("Ku[Mmi1}W:edTb_h");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.simplify();
      minWatchCard0.calcReason(0, iVecInt0);
      minWatchCard0.equals(iLogAble0);
      try { 
        MinWatchCard.minWatchCardNew(solver0, iLits0, iVecInt0, false, 1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.simplify();
      minWatchCard0.locked();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      PureOrder pureOrder0 = new PureOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      IVecInt iVecInt0 = VecInt.EMPTY;
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, (-34));
      minWatchCard0.hashCode();
      minWatchCard0.calcReason((-34), iVecInt0);
      minWatchCard0.calcReason((-34), iVecInt0);
      // Undeclared exception!
      try { 
        minWatchCard0.get(3709);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3709
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>((-243));
      PureOrder pureOrder0 = new PureOrder(0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder1 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder1);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits1 = solver1.getVocabulary();
      iLits1.resetPool();
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(iLits1, iVecInt0, 6);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      VecInt vecInt0 = new VecInt(0);
      VecInt vecInt1 = new VecInt(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, true, 0);
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("c ");
      minWatchCard0.simplify();
      boolean boolean0 = MinWatchCard.ATMOST;
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      try { 
        cardinalityDataStructureYanMin0.createCardinalityConstraint(vecInt1, 7);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      SearchParams searchParams0 = new SearchParams(0.0, (-11.693702620328473), 0.0, (-880));
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, (-880));
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 2338);
      LubyRestarts lubyRestarts0 = new LubyRestarts(2338);
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      basicLauncher0.displayLicense();
      minWatchCard0.calcReason(0, vecInt0);
      vecInt0.unsafePush(128);
      minWatchCard0.incActivity(128);
      // Undeclared exception!
      try { 
        minWatchCard0.getAssertionLevel((IVecInt) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      SearchParams searchParams0 = new SearchParams(0.0, (-12.6153400079), 0.0, (-880));
      PureOrder pureOrder0 = new PureOrder((-880));
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, (-880));
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      iVecInt0.contains(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 2338);
      minWatchCard0.getAssertionLevel(iVecInt0, 2);
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      minWatchCard0.toString();
      SearchParams searchParams1 = new SearchParams(1.0E20, (-3667));
      PureOrder pureOrder1 = new PureOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      minWatchCard0.hashCode();
      minWatchCard0.requiredNumberOfSatisfiedLiterals();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      int int0 = new Integer(0);
      VecInt vecInt0 = new VecInt(0);
      IVecInt iVecInt0 = vecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      minWatchCard0.toString();
      minWatchCard0.normalize();
      minWatchCard0.getVocabulary();
      // Undeclared exception!
      try { 
        minWatchCard0.computeWatches();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, true, 0);
      minWatchCard0.getAssertionLevel(vecInt0, 0);
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("?%>4f");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-516));
      minWatchCard0.degree = (-3188);
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      minWatchCard0.calcReason(99, vecInt0);
      minWatchCard0.computePropagation(solver0);
      solver0.enqueue(0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      VecInt vecInt0 = new VecInt(0);
      VecInt vecInt1 = new VecInt();
      vecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, true, 0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      minWatchCard0.toString();
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      vecInt0.sortUnique();
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI(watcherBasedPrimeImplicantStrategy0, 512);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      activeLearning0.init();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      glucose21Restarts0.shouldRestart();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      solver0.getLogger();
      ILits iLits0 = solver0.getVocabulary();
      iLits0.ensurePool(0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.simplify();
      boolean boolean0 = MinWatchCard.ATMOST;
      cardinalityDataStructureYanMin0.createCardinalityConstraint(iVecInt0, 0);
      minWatchCard0.toString((VarMapper) null);
      minWatchCard0.remove(solver0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(0);
      Integer integer0 = new Integer(0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((int) integer0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, (int) integer0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("y;#");
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      VecInt vecInt0 = new VecInt(1867, 0);
      VecInt vecInt1 = new VecInt(1867);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt1, true, 0);
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      minWatchCard0.equals(vecInt1);
      boolean boolean0 = MinWatchCard.ATLEAST;
      minWatchCard0.assertConstraintIfNeeded((UnitPropagationListener) null);
      minWatchCard0.assertConstraintIfNeeded((UnitPropagationListener) null);
      minWatchCard0.simplify();
      // Undeclared exception!
      try { 
        minWatchCard0.propagate((UnitPropagationListener) null, 1867);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      VecInt vecInt0 = new VecInt();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      vecInt0.sortUnique();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 0);
      minWatchCard0.size();
      Random.setNextRandom(448);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(3724);
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      PureOrder pureOrder0 = new PureOrder(3724);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>((ASolverFactory<SubModelIterator>) null);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 3724);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0);
      // Undeclared exception!
      try { 
        minWatchCard0.assertConstraint(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3724
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      boolean boolean0 = MinWatchCard.ATMOST;
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, 1393);
      boolean boolean1 = minWatchCard0.canBeSatisfiedByCountingLiterals();
      assertEquals(1393, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      activeLearning0.setActivityPercent((-1.0));
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin1, pureOrder0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      MinWatchCard minWatchCard1 = new MinWatchCard(iLits0, iVecInt0, false, (-304));
      assertEquals(304, minWatchCard1.requiredNumberOfSatisfiedLiterals());
      
      minWatchCard0.incActivity(0.0);
      int int0 = minWatchCard0.getAssertionLevel(iVecInt0, (-304));
      assertEquals((-1), int0);
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      int int0 = new Integer(0);
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 0);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      minWatchCard0.toString();
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI(watcherBasedPrimeImplicantStrategy0, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0);
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      iVecInt0.copyTo((IVecInt) null);
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(iLits0, (IVecInt) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      vecInt0.ensure(1923);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      readOnlyVecInt0.iterator();
      vecInt0.iterator();
      vecInt0.clear();
      vecInt0.ensure(1923);
      vecInt0.unsafePush(1923);
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(iLits0, readOnlyVecInt0, false, 1867);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 0);
      minWatchCard0.calcReason((-2730), vecInt0);
      // Undeclared exception!
      try { 
        minWatchCard0.computeWatches();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      activeLearning0.setActivityPercent(0);
      glucose21Restarts0.shouldRestart();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, glucose21Restarts0);
      ILogAble iLogAble0 = solver0.getLogger();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, iLogAble0);
      ILits iLits0 = solver1.getVocabulary();
      iLits0.resetPool();
      IVecInt iVecInt0 = VecInt.EMPTY;
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 0);
      minWatchCard0.simplify();
      minWatchCard0.calcReason(0, iVecInt0);
      boolean boolean0 = MinWatchCard.ATMOST;
      Constr constr0 = cardinalityDataStructureYanMin0.createCardinalityConstraint(iVecInt0, 0);
      assertTrue(constr0.isSatisfied());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Lits lits0 = new Lits();
      lits0.nVars();
      lits0.nVars();
      lits0.getFromPool(0);
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt();
      vecInt1.size();
      IVecInt iVecInt0 = vecInt1.push(466);
      vecInt1.clear();
      vecInt1.clear();
      vecInt1.clear();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt1, (-516));
      minWatchCard0.normalize();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MinWatchCard minWatchCard1 = new MinWatchCard(lits0, iVecInt0, (-516));
      minWatchCard1.canBeSatisfiedByCountingLiterals();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>("");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder(0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(1235);
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      basicLauncher0.usage();
      // Undeclared exception!
      try { 
        minWatchCard0.propagate(solver0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      iLits0.nVars();
      iLits0.ensurePool(1867);
      iLits0.getFromPool((-516));
      VecInt vecInt0 = new VecInt();
      vecInt0.clear();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1867);
      minWatchCard0.normalize();
      minWatchCard0.toString();
      minWatchCard0.canBeSatisfiedByCountingLiterals();
      DotSearchTracing<String> dotSearchTracing0 = new DotSearchTracing<String>(",f(I:ct9gn]af[");
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = mock(CardinalityDataStructureYanMin.class, new ViolatedAssumptionAnswer());
      doReturn(iLits0).when(cardinalityDataStructureYanMin0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder((-2521));
      searchParams0.setConflictBoundIncFactor(0.0);
      LubyRestarts lubyRestarts0 = new LubyRestarts((-2521));
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, pureOrder0, lubyRestarts0, basicLauncher0);
      solver0.registerLiteral(0);
      minWatchCard0.size();
      solver0.enqueue(0);
      try { 
        minWatchCard0.computePropagation(solver0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }
}
