/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:28:10 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;
import org.sat4j.tools.encoding.Ladder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Ladder_ESTest extends Ladder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(iSolver0);
      int[] intArray0 = new int[1];
      intArray0[0] = 66;
      VecInt vecInt0 = new VecInt(intArray0);
      IConstr iConstr0 = ladder0.addExactlyOne(abstractMinimalModel0, vecInt0);
      assertEquals(1, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(iSolver0);
      VecInt vecInt0 = new VecInt(3039, 3039);
      // Undeclared exception!
      ladder0.addExactlyOne(abstractMinimalModel0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(statisticsSolver0);
      VecInt vecInt0 = new VecInt(185, 185);
      // Undeclared exception!
      try { 
        ladder0.addExactlyOne(minOneDecorator0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(2);
      // Undeclared exception!
      try { 
        ladder0.addExactlyOne((ISolver) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Ladder", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      int[] intArray0 = new int[9];
      intArray0[1] = 7;
      intArray0[2] = (-1242);
      intArray0[3] = 219;
      intArray0[4] = 2;
      intArray0[5] = 257;
      intArray0[6] = 217;
      intArray0[7] = Integer.MIN_VALUE;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        ladder0.addExactlyOne(iSolver0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(2, 2);
      try { 
        ladder0.addAtMostOne(iSolver0, vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(1641, 115);
      // Undeclared exception!
      ladder0.addAtMostOne(iSolver0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      VecInt vecInt0 = new VecInt(2848);
      // Undeclared exception!
      try { 
        ladder0.addAtMostOne(statisticsSolver0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      // Undeclared exception!
      try { 
        ladder0.addAtMostOne((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      VecInt vecInt0 = new VecInt(27);
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        ladder0.addAtMostOne(iSolver0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Ladder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(504);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, varOrderHeap0, miniSATRestarts0);
      int[] intArray0 = new int[3];
      intArray0[1] = 2;
      intArray0[2] = 504;
      VecInt vecInt0 = new VecInt(intArray0);
      SubModelIterator subModelIterator0 = new SubModelIterator(solver0, vecInt0);
      NegationDecorator<ModelIterator> negationDecorator0 = new NegationDecorator<ModelIterator>(subModelIterator0);
      // Undeclared exception!
      try { 
        ladder0.addAtMostOne(negationDecorator0, vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(iSolver0);
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        ladder0.addAtMostOne(abstractMinimalModel0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        ladder0.addAtMostOne(dimacsOutputSolver0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(iSolver0);
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        ladder0.addExactlyOne(abstractMinimalModel0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      LightFactory lightFactory0 = new LightFactory();
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0);
      VecInt vecInt0 = new VecInt(226, 50);
      ladder0.addExactlyOne(abstractMinimalModel0, vecInt0);
      assertEquals(721, solver0.nConstraints());
      assertEquals(3, solver0.getPropagationLevel());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(iSolver0);
      VecInt vecInt0 = new VecInt(226, 50);
      ladder0.addAtMostOne(abstractMinimalModel0, vecInt0);
      int[] intArray0 = new int[1];
      intArray0[0] = 50;
      VecInt vecInt1 = new VecInt(intArray0);
      try { 
        ladder0.addExactlyOne(abstractMinimalModel0, vecInt1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }
}
