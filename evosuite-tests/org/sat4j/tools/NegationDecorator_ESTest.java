/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:33:08 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NegationDecorator_ESTest extends NegationDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      SearchParams searchParams0 = new SearchParams((-1149));
      NoRestarts noRestarts0 = new NoRestarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, noRestarts0, iLogAble0);
      VecInt vecInt0 = new VecInt(0, 0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0);
      NegationDecorator<MaxSatDecorator> negationDecorator0 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      boolean boolean0 = negationDecorator0.isSatisfiable((IVecInt) vecInt0, false);
      assertTrue(boolean0);
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams((-624));
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, varOrderHeap0, noRestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(iSolver0, 541L, solutionFoundListener0);
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      FullClauseSelectorSolver<StatisticsSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<StatisticsSolver>(statisticsSolver0, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      boolean boolean0 = negationDecorator0.isSatisfiable(iVecInt0, true);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      NegationDecorator<ManyCore<MaxSatDecorator>> negationDecorator0 = new NegationDecorator<ManyCore<MaxSatDecorator>>(manyCore0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      try { 
        negationDecorator0.isSatisfiable(iVecInt0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(dimacsStringSolver0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(solutionCounter0);
      minimal4CardinalityModel0.setDecorated(minimal4CardinalityModel0);
      NegationDecorator<AbstractMinimalModel> negationDecorator0 = new NegationDecorator<AbstractMinimalModel>(minimal4CardinalityModel0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0, true);
      NegationDecorator<MaxSatDecorator> negationDecorator1 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      // Undeclared exception!
      try { 
        negationDecorator1.isSatisfiable((IVecInt) null, false);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      ClausalCardinalitiesDecorator<MinOneDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MinOneDecorator>(minOneDecorator0);
      NegationDecorator<ClausalCardinalitiesDecorator<MinOneDecorator>> negationDecorator0 = new NegationDecorator<ClausalCardinalitiesDecorator<MinOneDecorator>>(clausalCardinalitiesDecorator0);
      // Undeclared exception!
      try { 
        negationDecorator0.isSatisfiable((IVecInt) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielWLConciseBinary> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(fixedLengthLearning0, mixedDataStructureDanielWLConciseBinary0, naturalStaticOrder0, fixedPeriodRestarts0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(abstractMinimalModel0, false);
      NegationDecorator<MaxSatDecorator> negationDecorator0 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      // Undeclared exception!
      try { 
        negationDecorator0.isSatisfiable((IVecInt) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(dimacsStringSolver0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(solutionCounter0);
      NegationDecorator<AbstractMinimalModel> negationDecorator0 = new NegationDecorator<AbstractMinimalModel>(minimal4CardinalityModel0);
      negationDecorator0.newVar((-884));
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0, false);
      NegationDecorator<MaxSatDecorator> negationDecorator1 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      // Undeclared exception!
      try { 
        negationDecorator1.isSatisfiable((IVecInt) null, false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0, true);
      NegationDecorator<MaxSatDecorator> negationDecorator0 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      // Undeclared exception!
      try { 
        negationDecorator0.isSatisfiable((IVecInt) null, false);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ConstrGroup cannot be cast to org.sat4j.specs.Constr
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      NegationDecorator<StatisticsSolver> negationDecorator0 = new NegationDecorator<StatisticsSolver>(statisticsSolver0);
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        negationDecorator0.addClause(vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NegationDecorator<Minimal4InclusionModel> negationDecorator0 = new NegationDecorator<Minimal4InclusionModel>((Minimal4InclusionModel) null);
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        negationDecorator0.addClause(iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsStringSolver0);
      NegationDecorator<MinOneDecorator> negationDecorator0 = new NegationDecorator<MinOneDecorator>(minOneDecorator0);
      VecInt vecInt0 = new VecInt(1154, 1154);
      // Undeclared exception!
      try { 
        negationDecorator0.addClause(vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      GateTranslator gateTranslator0 = new GateTranslator(dimacsStringSolver0);
      VecInt vecInt0 = new VecInt(1, 1);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(gateTranslator0, vecInt0);
      vecInt0.shrinkTo(1649);
      ClausalCardinalitiesDecorator<Minimal4CardinalityModel> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<Minimal4CardinalityModel>(minimal4CardinalityModel0);
      NegationDecorator<ClausalCardinalitiesDecorator<Minimal4CardinalityModel>> negationDecorator0 = new NegationDecorator<ClausalCardinalitiesDecorator<Minimal4CardinalityModel>>(clausalCardinalitiesDecorator0);
      // Undeclared exception!
      try { 
        negationDecorator0.addClause(vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.core.VecInt$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      GateTranslator gateTranslator0 = new GateTranslator(dimacsStringSolver0);
      VecInt vecInt0 = new VecInt(1, 1);
      NegationDecorator<GateTranslator> negationDecorator0 = new NegationDecorator<GateTranslator>(gateTranslator0);
      // Undeclared exception!
      try { 
        negationDecorator0.addClause(vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NegationDecorator<DimacsOutputSolver> negationDecorator0 = new NegationDecorator<DimacsOutputSolver>((DimacsOutputSolver) null);
      Collection<Integer> collection0 = negationDecorator0.getAddedVars();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      NegationDecorator<DimacsStringSolver> negationDecorator0 = new NegationDecorator<DimacsStringSolver>(dimacsStringSolver0);
      VecInt vecInt0 = new VecInt();
      negationDecorator0.addClause(vecInt0);
      // Undeclared exception!
      try { 
        negationDecorator0.isSatisfiable((IVecInt) vecInt0, true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      NegationDecorator<StatisticsSolver> negationDecorator0 = new NegationDecorator<StatisticsSolver>(statisticsSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(negationDecorator0);
      // Undeclared exception!
      try { 
        negationDecorator0.addAtLeast(iVecInt0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      NegationDecorator<DimacsStringSolver> negationDecorator0 = new NegationDecorator<DimacsStringSolver>(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        negationDecorator0.addAtMost((IVecInt) null, (-561));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      NegationDecorator<StatisticsSolver> negationDecorator0 = new NegationDecorator<StatisticsSolver>(statisticsSolver0);
      VecInt vecInt0 = new VecInt(3168);
      // Undeclared exception!
      try { 
        negationDecorator0.addExactly(vecInt0, 3168);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      NegationDecorator<DimacsStringSolver> negationDecorator0 = new NegationDecorator<DimacsStringSolver>(dimacsStringSolver0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(negationDecorator0, true);
      NegationDecorator<MaxSatDecorator> negationDecorator1 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      // Undeclared exception!
      try { 
        negationDecorator1.isSatisfiable((IVecInt) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }
}
