/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 15:46:21 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.AxisLimitData;
import jahuwaldt.plot.LinearAxisScale;
import jahuwaldt.plot.PlotDatum;
import jahuwaldt.plot.TickMarkData;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinearAxisScale_ESTest extends LinearAxisScale_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits((-1.0), (-1.0));
      PlotDatum plotDatum0 = new PlotDatum(4907.6874228, 4907.6874228, true);
      linearAxisScale0.adjustForErrorBars(plotDatum0, 469.839281131346, 0.0, axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      linearAxisScale0.calcTickMarks(0.0, 0.0, 0.0, 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      linearAxisScale0.findGoodLimits(0.0, 1.0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      linearAxisScale0.func(0.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      linearAxisScale0.func(500.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      // Undeclared exception!
      try { 
        linearAxisScale0.calcTickMarks(906.5226, 1.0, (-892.6), 1532.053166292195, (-892.6));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.LinearAxisScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      AxisLimitData axisLimitData0 = new AxisLimitData();
      // Undeclared exception!
      try { 
        linearAxisScale0.adjustForErrorBars((PlotDatum) null, 0.0, 0.0, axisLimitData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.LinearAxisScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      linearAxisScale0.lowerBounds();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      linearAxisScale0.func((-2.611122817865322E283));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      linearAxisScale0.upperBounds();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      // Undeclared exception!
      linearAxisScale0.calcTickMarks((-714.5), (-2.048733922974827E264), (-2.048733922974827E264), (-2.0487339229748273E270), 0.0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      linearAxisScale0.findGoodLimits((-2681.0), (-1116.91));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      linearAxisScale0.findGoodLimits(1604.0, 4907.6874228);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      linearAxisScale0.findGoodLimits(5.0, 14.266790238);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      linearAxisScale0.findGoodLimits((-1006.89), (-205.939));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      linearAxisScale0.findGoodLimits(0.0, 1.0E-6);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      // Undeclared exception!
      linearAxisScale0.findGoodLimits(898.3, 0.2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(0.0, 0.0);
      PlotDatum plotDatum0 = new PlotDatum(4907.6874228, 4907.6874228, true);
      linearAxisScale0.adjustForErrorBars(plotDatum0, 1586.509, 1633.78711, axisLimitData0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      TickMarkData tickMarkData0 = linearAxisScale0.calcTickMarks(1355.85962516, 1355.85962516, 2441.7402679105753, (-1561.661158087), 1355.85962516);
      assertNotNull(tickMarkData0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits((-1056.2406), (-1056.2406));
      assertNotNull(axisLimitData0);
  }
}
