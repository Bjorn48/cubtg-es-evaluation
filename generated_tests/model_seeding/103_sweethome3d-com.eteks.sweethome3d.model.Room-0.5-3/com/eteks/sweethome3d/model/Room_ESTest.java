/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 11:29:18 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import java.net.URL;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Room_ESTest extends Room_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      float[][] floatArray0 = new float[6][7];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(6, floatArray0.length);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      
      room0.move(0.0F, 1.0F);
      assertEquals(6, floatArray0.length);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(1.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      float[][] floatArray0 = new float[5][7];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(5, floatArray0.length);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      
      boolean boolean0 = room0.containsPoint(1.0F, (-680.0301F), 0.0F);
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float[][] floatArray0 = new float[3][4];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(3, floatArray0.length);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      
      boolean boolean0 = room0.containsPoint((-2688.355F), 859.9244F, (-680.0301F));
      assertEquals(3, floatArray0.length);
      assertFalse(boolean0);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      
      room0.setAreaYOffset(1049.3839F);
      assertEquals(2, floatArray0.length);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(1049.3839F, room0.getAreaYOffset(), 0.01F);
      
      boolean boolean0 = room0.isAreaCenterPointAt(5209.194F, 5209.194F, 5209.194F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(1049.3839F, room0.getAreaYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float[][] floatArray0 = new float[7][8];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(7, floatArray0.length);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(7, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      
      room0.move(320.0F, 0.3270646F);
      assertEquals(7, floatArray0.length);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(320.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.3270646F, room0.getYCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(7, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      
      boolean boolean0 = room0.isAreaCenterPointAt((-2608.39F), 483.4F, 5518.43F);
      assertEquals(7, floatArray0.length);
      assertTrue(boolean0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(320.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.3270646F, room0.getYCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(7, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      float[][] floatArray0 = new float[7][8];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(7, floatArray0.length);
      assertNull(room0.getCeilingColor());
      assertEquals(7, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      
      room0.setAreaXOffset(360.0F);
      assertEquals(7, floatArray0.length);
      assertNull(room0.getCeilingColor());
      assertEquals(7, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(360.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      
      boolean boolean0 = room0.isAreaCenterPointAt(1972.6698F, (-4.98F), (-985.6F));
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      assertNull(room0.getCeilingColor());
      assertEquals(7, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(360.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float[][] floatArray0 = new float[6][8];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(6, floatArray0.length);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      
      room0.addPoint(66.0739F, 1.0F);
      assertEquals(6, floatArray0.length);
      assertEquals(0.5F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(33.03695F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(7, room0.getPointCount());
      
      boolean boolean0 = room0.isNameCenterPointAt(66.0739F, 1353.2244F, 2456.9722F);
      assertEquals(6, floatArray0.length);
      assertTrue(boolean0);
      assertEquals(0.5F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(33.03695F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(7, room0.getPointCount());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      float[][] floatArray0 = new float[8][5];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 2616.2908F;
      floatArray1[1] = 1484.9F;
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(8, floatArray0.length);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(1308.1454F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(742.45F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      
      int int0 = room0.getPointIndexAt(2131.0698F, (-595.815F), 595.0F);
      assertEquals(8, floatArray0.length);
      assertEquals((-1), int0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(1308.1454F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(742.45F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      float[][] floatArray0 = new float[6][4];
      float[] floatArray1 = new float[7];
      floatArray1[1] = (-3540.81F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-3540.81F);
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(6, floatArray0.length);
      assertNull(room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals((-1770.405F), room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-1770.405F), room0.getXCenter(), 0.01F);
      
      boolean boolean0 = room0.isClockwise();
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
      assertNull(room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals((-1770.405F), room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-1770.405F), room0.getXCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(8, floatArray0.length);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(8, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      
      room0.setPoint(6, (-2688.355F), 4);
      assertEquals(8, floatArray0.length);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getName());
      assertEquals(3.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-1344.1775F), room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(8, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      
      boolean boolean0 = room0.isAreaCenterPointAt(4, 0.0F, (-1909.8F));
      assertEquals(8, floatArray0.length);
      assertFalse(boolean0);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getName());
      assertEquals(3.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-1344.1775F), room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(8, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      float[][] floatArray0 = new float[10][8];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(10, floatArray0.length);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(10, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      
      room0.removePoint(1);
      assertEquals(10, floatArray0.length);
      assertNull(room0.getCeilingColor());
      assertEquals(9, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      
      // Undeclared exception!
      try { 
        room0.removePoint(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 2
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      float[][] floatArray0 = new float[7][8];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(7, floatArray0.length);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(7, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      
      room0.setPoint(0.0F, 1.0F, 6);
      assertEquals(7, floatArray0.length);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.5F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(7, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      
      room0.setPoint((-233.88887F), (-1.0F), 0);
      assertEquals(2, floatArray0.length);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals((-116.944435F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-0.5F), room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      
      // Undeclared exception!
      try { 
        room0.setPoint((-1540.8723F), (-1540.8723F), 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 2
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      
      room0.setPoint(0.0F, 0.0F, 0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(4, floatArray0.length);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      
      room0.setNameAngle((-2890.663F));
      assertEquals(4, floatArray0.length);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(5.8853407F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      
      room0.setNameAngle(1.0F);
      assertEquals(4, floatArray0.length);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(1.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      float[][] floatArray0 = new float[6][8];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(6, floatArray0.length);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      
      room0.setNameYOffset((-65.342F));
      assertEquals(6, floatArray0.length);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals((-65.342F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      float[][] floatArray0 = new float[5][7];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(5, floatArray0.length);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      
      room0.setName("J/GWp:Hzx24vVp}");
      assertEquals(5, floatArray0.length);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals("J/GWp:Hzx24vVp}", room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      
      room0.setName("J/GWp:Hzx24vVp}");
      assertEquals(5, floatArray0.length);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals("J/GWp:Hzx24vVp}", room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      float[][] floatArray0 = new float[5][5];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 992.28F;
      floatArray1[1] = 992.28F;
      floatArray0[2] = floatArray1;
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[1] = 992.28F;
      floatArray0[3] = floatArray2;
      float[] floatArray3 = new float[9];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 992.28F;
      floatArray0[4] = floatArray3;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(5, floatArray0.length);
      assertFalse(room0.isClockwise());
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(496.14F, room0.getYCenter(), 0.01F);
      assertEquals(496.14F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      
      boolean boolean0 = room0.isSingular();
      assertEquals(5, floatArray0.length);
      assertFalse(boolean0);
      assertFalse(room0.isClockwise());
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(496.14F, room0.getYCenter(), 0.01F);
      assertEquals(496.14F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      float[][] floatArray0 = new float[7][8];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(7, floatArray0.length);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(7, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      
      room0.setCeilingVisible(false);
      assertEquals(7, floatArray0.length);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isCeilingVisible());
      assertEquals(7, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      
      boolean boolean0 = room0.isCeilingVisible();
      assertEquals(7, floatArray0.length);
      assertFalse(boolean0);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isCeilingVisible());
      assertEquals(7, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(8, floatArray0.length);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      
      room0.setPoint(6, (-2688.355F), 4);
      assertEquals(8, floatArray0.length);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(3.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-1344.1775F), room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      
      boolean boolean0 = room0.intersectsRectangle((-410.88626F), (-2688.355F), 3469.928F, (-410.88626F));
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(3.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals((-1344.1775F), room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      
      boolean boolean0 = room0.intersectsRectangle(33.0F, 33.0F, (-412.52353F), 33.0F);
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      float[][] floatArray0 = new float[3][2];
      float[] floatArray1 = new float[7];
      floatArray1[1] = 1529.8696F;
      floatArray0[2] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(3, floatArray0.length);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(764.9348F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      
      float float0 = room0.getYCenter();
      assertEquals(3, floatArray0.length);
      assertEquals(764.9348F, float0, 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(764.9348F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      float[] floatArray1 = new float[1];
      floatArray1[0] = 3679.0F;
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(3679.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      
      float float0 = room0.getXCenter();
      assertEquals(2, floatArray0.length);
      assertEquals(3679.0F, float0, 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(3679.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      float[][] floatArray0 = new float[10][8];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(10, floatArray0.length);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(10, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      
      room0.move((-1.0F), (-1.0F));
      assertEquals(10, floatArray0.length);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(10, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-1.0F), room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-1.0F), room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      
      float float0 = room0.getXCenter();
      assertEquals(10, floatArray0.length);
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(10, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-1.0F), room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-1.0F), room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      
      int int0 = room0.getPointIndexAt((-595.815F), (-883.3214F), 1484.9F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, int0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      
      room0.setNameYOffset(0.0F);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      
      float float0 = room0.getNameYOffset();
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      
      room0.setNameXOffset(1.0F);
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(1.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      
      float float0 = room0.getNameXOffset();
      assertEquals(4, floatArray0.length);
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(1.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      
      room0.setNameXOffset((-1.0F));
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-1.0F), room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      
      float float0 = room0.getNameXOffset();
      assertEquals(2, floatArray0.length);
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-1.0F), room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      
      TextStyle textStyle0 = new TextStyle((-2688.355F));
      assertNotNull(textStyle0);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertEquals((-2688.355F), textStyle0.getFontSize(), 0.01F);
      
      room0.setNameStyle(textStyle0);
      assertEquals(2, floatArray0.length);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertEquals((-2688.355F), textStyle0.getFontSize(), 0.01F);
      
      TextStyle textStyle1 = room0.getNameStyle();
      assertNotNull(textStyle1);
      assertSame(textStyle1, textStyle0);
      assertEquals(2, floatArray0.length);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals((-2688.355F), textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle1.isBold());
      assertFalse(textStyle1.isItalic());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      
      room0.setNameAngle((-36.36F));
      assertEquals(2, floatArray0.length);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(1.3391112F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      
      float float0 = room0.getNameAngle();
      assertEquals(2, floatArray0.length);
      assertEquals(1.3391112F, float0, 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(1.3391112F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      float[][] floatArray0 = new float[5][7];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(5, floatArray0.length);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      
      room0.setName("J/GWp:Hzx24vVp}");
      assertEquals(5, floatArray0.length);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals("J/GWp:Hzx24vVp}", room0.getName());
      
      String string0 = room0.getName();
      assertNotNull(string0);
      assertEquals(5, floatArray0.length);
      assertEquals("J/GWp:Hzx24vVp}", string0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals("J/GWp:Hzx24vVp}", room0.getName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      float[][] floatArray0 = new float[7][8];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(7, floatArray0.length);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(7, room0.getPointCount());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      
      room0.setName("");
      assertEquals(7, floatArray0.length);
      assertEquals("", room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(7, room0.getPointCount());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      
      String string0 = room0.getName();
      assertNotNull(string0);
      assertEquals(7, floatArray0.length);
      assertEquals("", string0);
      assertEquals("", room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(7, room0.getPointCount());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      
      Level level0 = new Level(">j(W[", 4618.0F, 4618.0F, 4618.0F);
      assertNotNull(level0);
      assertEquals(4618.0F, level0.getElevation(), 0.01F);
      assertEquals(4618.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(">j(W[", level0.getName());
      assertEquals(4618.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      
      room0.setLevel(level0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(4618.0F, level0.getElevation(), 0.01F);
      assertEquals(4618.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(">j(W[", level0.getName());
      assertEquals(4618.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      
      Level level1 = room0.getLevel();
      assertNotNull(level1);
      assertSame(level1, level0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(4618.0F, level1.getFloorThickness(), 0.01F);
      assertEquals(">j(W[", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(4618.0F, level1.getHeight(), 0.01F);
      assertEquals(4618.0F, level1.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      
      Level level0 = new Level("aGK}&'t", 373.01172F, (-6138.97F), (-26.86434F));
      assertNotNull(level0);
      assertEquals("aGK}&'t", level0.getName());
      assertEquals((-6138.97F), level0.getFloorThickness(), 0.01F);
      assertEquals((-26.86434F), level0.getHeight(), 0.01F);
      assertEquals(373.01172F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      
      room0.setLevel(level0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals("aGK}&'t", level0.getName());
      assertEquals((-6138.97F), level0.getFloorThickness(), 0.01F);
      assertEquals((-26.86434F), level0.getHeight(), 0.01F);
      assertEquals(373.01172F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      
      Level level1 = room0.getLevel();
      assertNotNull(level1);
      assertSame(level1, level0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals("aGK}&'t", level1.getName());
      assertEquals((-26.86434F), level1.getHeight(), 0.01F);
      assertEquals((-6138.97F), level1.getFloorThickness(), 0.01F);
      assertEquals(373.01172F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      float[][] floatArray0 = new float[6][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(6, floatArray0.length);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      
      Level level0 = new Level("b`!YA", (-849.7242F), (-1811.62F), (-338.56F));
      assertNotNull(level0);
      assertEquals("b`!YA", level0.getName());
      assertEquals((-338.56F), level0.getHeight(), 0.01F);
      assertEquals((-849.7242F), level0.getElevation(), 0.01F);
      assertEquals((-1811.62F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      
      room0.setLevel(level0);
      assertEquals(6, floatArray0.length);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals("b`!YA", level0.getName());
      assertEquals((-338.56F), level0.getHeight(), 0.01F);
      assertEquals((-849.7242F), level0.getElevation(), 0.01F);
      assertEquals((-1811.62F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      
      Level level1 = room0.getLevel();
      assertNotNull(level1);
      assertSame(level1, level0);
      assertEquals(6, floatArray0.length);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals("b`!YA", level1.getName());
      assertEquals((-338.56F), level1.getHeight(), 0.01F);
      assertEquals((-1811.62F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-849.7242F), level1.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("com.eteks.sweethome3d.model.Room$Property", temporaryURLContent0, (-40.0F), 0.0F);
      assertNotNull(catalogTexture0);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.Room$Property", catalogTexture0.getName());
      assertNull(catalogTexture0.getCreator());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals((-40.0F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNotNull(homeTexture0);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.Room$Property", catalogTexture0.getName());
      assertNull(catalogTexture0.getCreator());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals((-40.0F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals("com.eteks.sweethome3d.model.Room$Property", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture0.getHeight(), 0.01F);
      assertEquals((-40.0F), homeTexture0.getWidth(), 0.01F);
      
      room0.setFloorTexture(homeTexture0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.Room$Property", catalogTexture0.getName());
      assertNull(catalogTexture0.getCreator());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals((-40.0F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertEquals("com.eteks.sweethome3d.model.Room$Property", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture0.getHeight(), 0.01F);
      assertEquals((-40.0F), homeTexture0.getWidth(), 0.01F);
      
      HomeTexture homeTexture1 = room0.getFloorTexture();
      assertNotNull(homeTexture1);
      assertSame(homeTexture1, homeTexture0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), homeTexture1.getWidth(), 0.01F);
      assertTrue(homeTexture1.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture1.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Room$Property", homeTexture1.getName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      float[][] floatArray0 = new float[3][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(3, floatArray0.length);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("", (Content) null, 662.33F, (-1.0F));
      assertNotNull(catalogTexture0);
      assertEquals(662.33F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNotNull(homeTexture0);
      assertEquals(662.33F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("", homeTexture0.getName());
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(662.33F, homeTexture0.getWidth(), 0.01F);
      
      room0.setFloorTexture(homeTexture0);
      assertEquals(3, floatArray0.length);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(662.33F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals("", homeTexture0.getName());
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(662.33F, homeTexture0.getWidth(), 0.01F);
      
      HomeTexture homeTexture1 = room0.getFloorTexture();
      assertNotNull(homeTexture1);
      assertSame(homeTexture1, homeTexture0);
      assertEquals(3, floatArray0.length);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals("", homeTexture1.getName());
      assertTrue(homeTexture1.isLeftToRightOriented());
      assertEquals((-1.0F), homeTexture1.getHeight(), 0.01F);
      assertEquals(662.33F, homeTexture1.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      float[][] floatArray0 = new float[7][8];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(7, floatArray0.length);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(7, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      
      room0.setFloorShininess(5518.43F);
      assertEquals(7, floatArray0.length);
      assertEquals(5518.43F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(7, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      
      float float0 = room0.getFloorShininess();
      assertEquals(7, floatArray0.length);
      assertEquals(5518.43F, float0, 0.01F);
      assertEquals(5518.43F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(7, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      
      Integer integer0 = new Integer(3602);
      assertNotNull(integer0);
      assertEquals(3602, (int)integer0);
      
      room0.setFloorColor(integer0);
      assertEquals(2, floatArray0.length);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(3602, (int)room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      
      Integer integer1 = room0.getFloorColor();
      assertNotNull(integer1);
      assertEquals(2, floatArray0.length);
      assertEquals(3602, (int)integer1);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(3602, (int)room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("G7G-US", "G7G-US", (Content) null, 1200.604F, 1200.604F, "FLOOR_TEXTURE");
      assertNotNull(catalogTexture0);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("G7G-US", catalogTexture0.getId());
      assertEquals(1200.604F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("G7G-US", catalogTexture0.getName());
      assertEquals(1200.604F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("FLOOR_TEXTURE", catalogTexture0.getCreator());
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNotNull(homeTexture0);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("G7G-US", catalogTexture0.getId());
      assertEquals(1200.604F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("G7G-US", catalogTexture0.getName());
      assertEquals(1200.604F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("FLOOR_TEXTURE", catalogTexture0.getCreator());
      assertEquals(1200.604F, homeTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("G7G-US", homeTexture0.getName());
      assertEquals(1200.604F, homeTexture0.getHeight(), 0.01F);
      
      room0.setCeilingTexture(homeTexture0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("G7G-US", catalogTexture0.getId());
      assertEquals(1200.604F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("G7G-US", catalogTexture0.getName());
      assertEquals(1200.604F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("FLOOR_TEXTURE", catalogTexture0.getCreator());
      assertEquals(1200.604F, homeTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("G7G-US", homeTexture0.getName());
      assertEquals(1200.604F, homeTexture0.getHeight(), 0.01F);
      
      HomeTexture homeTexture1 = room0.getCeilingTexture();
      assertNotNull(homeTexture1);
      assertSame(homeTexture1, homeTexture0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(1200.604F, homeTexture1.getWidth(), 0.01F);
      assertTrue(homeTexture1.isLeftToRightOriented());
      assertEquals("G7G-US", homeTexture1.getName());
      assertEquals(1200.604F, homeTexture1.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      float[][] floatArray0 = new float[7][8];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(7, floatArray0.length);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(7, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      
      room0.setCeilingShininess(2662.0105F);
      assertEquals(7, floatArray0.length);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(2662.0105F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(7, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      
      float float0 = room0.getCeilingShininess();
      assertEquals(7, floatArray0.length);
      assertEquals(2662.0105F, float0, 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(2662.0105F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(7, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      
      room0.setCeilingShininess((-1.0F));
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals((-1.0F), room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      
      float float0 = room0.getCeilingShininess();
      assertEquals(2, floatArray0.length);
      assertEquals((-1.0F), float0, 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals((-1.0F), room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      
      Integer integer0 = Integer.valueOf(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      room0.setCeilingColor(integer0);
      assertEquals(2, floatArray0.length);
      assertEquals(0, (int)room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      
      Integer integer1 = room0.getCeilingColor();
      assertNotNull(integer1);
      assertEquals(2, floatArray0.length);
      assertEquals(0, (int)integer1);
      assertEquals(0, (int)room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      float[][] floatArray0 = new float[9][8];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(9, floatArray0.length);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(9, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getName());
      
      Integer integer0 = Integer.getInteger("i$6PuU-", 9);
      assertNotNull(integer0);
      assertEquals(9, (int)integer0);
      
      room0.setCeilingColor(integer0);
      assertEquals(9, floatArray0.length);
      assertEquals(9, (int)room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(9, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getName());
      
      Integer integer1 = room0.getCeilingColor();
      assertNotNull(integer1);
      assertEquals(9, floatArray0.length);
      assertEquals(9, (int)integer1);
      assertEquals(9, (int)room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(9, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      
      Integer integer0 = new Integer((-1128));
      assertNotNull(integer0);
      assertEquals((-1128), (int)integer0);
      
      room0.setCeilingColor(integer0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-1128), (int)room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      
      Integer integer1 = room0.getCeilingColor();
      assertNotNull(integer1);
      assertEquals(2, floatArray0.length);
      assertEquals((-1128), (int)integer1);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-1128), (int)room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      float[][] floatArray0 = new float[6][7];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(6, floatArray0.length);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      
      room0.setAreaYOffset((-2298.9F));
      assertEquals(6, floatArray0.length);
      assertFalse(room0.isClockwise());
      assertEquals((-2298.9F), room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      
      float float0 = room0.getAreaYOffset();
      assertEquals(6, floatArray0.length);
      assertEquals((-2298.9F), float0, 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-2298.9F), room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      
      room0.setAreaAngle((-1312.0F));
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(1.1857291F, room0.getAreaAngle(), 0.01F);
      
      float float0 = room0.getAreaAngle();
      assertEquals(2, floatArray0.length);
      assertEquals(1.1857291F, float0, 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(1.1857291F, room0.getAreaAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(8, floatArray0.length);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      
      boolean boolean0 = room0.containsPoint((-1.0F), (-1055.8F), 3496.2795F);
      assertEquals(8, floatArray0.length);
      assertTrue(boolean0);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      float[][] floatArray0 = new float[8][7];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(8, floatArray0.length);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      
      room0.setFloorVisible(false);
      assertEquals(8, floatArray0.length);
      assertNull(room0.getCeilingColor());
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      
      Room room1 = room0.clone();
      assertNotNull(room1);
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(8, floatArray0.length);
      assertNull(room0.getCeilingColor());
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(8, room1.getPointCount());
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertFalse(room1.isFloorVisible());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertNull(room1.getName());
      assertNull(room1.getFloorColor());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      float[][] floatArray0 = new float[5][1];
      float[] floatArray1 = new float[5];
      floatArray1[1] = 1204.2F;
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-1638.2031F);
      floatArray0[2] = floatArray2;
      float[] floatArray3 = new float[4];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray0[3] = floatArray3;
      floatArray0[4] = floatArray3;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(5, floatArray0.length);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-819.10156F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(602.1F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      
      Room room1 = room0.clone();
      assertNotNull(room1);
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(5, floatArray0.length);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-819.10156F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(602.1F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertTrue(room1.isClockwise());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals((-819.10156F), room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(602.1F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(5, room1.getPointCount());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      float[][] floatArray0 = new float[10][8];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(10, floatArray0.length);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(10, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      
      room0.setAreaVisible(false);
      assertEquals(10, floatArray0.length);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(10, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      
      Room room1 = room0.clone();
      assertNotNull(room1);
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(10, floatArray0.length);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(10, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(10, room1.getPointCount());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertFalse(room1.isAreaVisible());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertFalse(room1.isClockwise());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      float[][] floatArray0 = new float[7][8];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(7, floatArray0.length);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(7, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      
      room0.move(320.0F, 0.3270646F);
      assertEquals(7, floatArray0.length);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(320.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.3270646F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(7, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      
      Room room1 = room0.clone();
      assertNotNull(room1);
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(7, floatArray0.length);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(320.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.3270646F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(7, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.3270646F, room1.getYCenter(), 0.01F);
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(7, room1.getPointCount());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(320.0F, room1.getXCenter(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      float[][] floatArray0 = new float[6][7];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(6, floatArray0.length);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(6, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      
      room0.setNameYOffset(0.0F);
      assertEquals(6, floatArray0.length);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(6, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameYOffset(), 0.01F);
      
      Room room1 = room0.clone();
      assertNotNull(room1);
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(6, floatArray0.length);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(6, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(6, room1.getPointCount());
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertTrue(room1.isAreaVisible());
      assertTrue(room1.isFloorVisible());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      float[][] floatArray0 = new float[8][7];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(8, floatArray0.length);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      
      room0.setNameYOffset(1.0F);
      assertEquals(8, floatArray0.length);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(1.0F, room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      
      Room room1 = room0.clone();
      assertNotNull(room1);
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(8, floatArray0.length);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(1.0F, room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertFalse(room1.isClockwise());
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertNull(room1.getFloorColor());
      assertTrue(room1.isCeilingVisible());
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertEquals(1.0F, room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(8, room1.getPointCount());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      
      room0.setNameXOffset(33.71518F);
      assertEquals(2, floatArray0.length);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(33.71518F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      
      Room room1 = room0.clone();
      assertNotNull(room1);
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(2, floatArray0.length);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(33.71518F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(2, room1.getPointCount());
      assertEquals(33.71518F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      float[][] floatArray0 = new float[2][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, floatArray0.length);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      
      room0.setNameAngle((-36.36F));
      assertEquals(2, floatArray0.length);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(1.3391112F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      
      Room room1 = room0.clone();
      assertNotNull(room1);
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(2, floatArray0.length);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(1.3391112F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertFalse(room1.isClockwise());
      assertTrue(room1.isCeilingVisible());
      assertEquals(1.3391112F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(2, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      float[][] floatArray0 = new float[6][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(6, floatArray0.length);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      
      room0.setFloorShininess(2.0F);
      assertEquals(6, floatArray0.length);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(2.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      
      Room room1 = room0.clone();
      assertNotNull(room1);
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(6, floatArray0.length);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(2.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(6, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(2.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
  }
}
