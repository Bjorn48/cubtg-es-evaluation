/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:51:48 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.reader.EfficientScanner;
import org.sat4j.reader.GroupedCNFReader;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.IGroupSolver;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.NegationDecorator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GroupedCNFReader_ESTest extends GroupedCNFReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
      groupedCNFReader0.expectedNbOfConstr = 43;
      // Undeclared exception!
      try { 
        groupedCNFReader0.flushConstraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.GroupedCNFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
      // Undeclared exception!
      try { 
        groupedCNFReader0.readProblemLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.GroupedCNFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsOutputSolver0);
      File file0 = MockFile.createTempFile("f/111 \"n{A", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      EfficientScanner efficientScanner0 = new EfficientScanner(dataInputStream0, '1');
      groupedCNFReader0.scanner = efficientScanner0;
      // Undeclared exception!
      groupedCNFReader0.handleLine();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader((IGroupSolver) null);
      // Undeclared exception!
      try { 
        groupedCNFReader0.handleLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.GroupedCNFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = mock(MaxSatDecorator.class, new ViolatedAssumptionAnswer());
      doReturn(3257, (-47)).when(maxSatDecorator0).nVars();
      doReturn(1230, (-2626)).when(maxSatDecorator0).nextFreeVarId(anyBoolean());
      NegationDecorator<MaxSatDecorator> negationDecorator0 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(negationDecorator0);
      MaxSatDecorator maxSatDecorator1 = new MaxSatDecorator(minimal4CardinalityModel0, false);
      GroupClauseSelectorSolver<MaxSatDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator1);
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(groupClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        groupedCNFReader0.flushConstraint();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = mock(MaxSatDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(maxSatDecorator0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0).when(maxSatDecorator0).nVars();
      doReturn(0, 0, 0).when(maxSatDecorator0).nextFreeVarId(anyBoolean());
      NegationDecorator<MaxSatDecorator> negationDecorator0 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(negationDecorator0);
      MaxSatDecorator maxSatDecorator1 = new MaxSatDecorator(minimal4CardinalityModel0, false);
      GroupClauseSelectorSolver<MaxSatDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator1);
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(groupClauseSelectorSolver0);
      groupedCNFReader0.flushConstraint();
      assertFalse(groupedCNFReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsOutputSolver0);
      groupedCNFReader0.flushConstraint();
      assertFalse(groupedCNFReader0.isUsingMapping());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsOutputSolver0);
      byte[] byteArray0 = new byte[27];
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)11;
      byteArray0[5] = (byte)11;
      byteArray0[21] = (byte)11;
      byteArray0[8] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        groupedCNFReader0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Errorproblem line expected (p gcnf ...)
         //
         verifyException("org.sat4j.reader.GroupedCNFReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsOutputSolver0);
      byte[] byteArray0 = new byte[27];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        groupedCNFReader0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Errorproblem line expected (p gcnf ...)
         //
         verifyException("org.sat4j.reader.GroupedCNFReader", e);
      }
  }
}
