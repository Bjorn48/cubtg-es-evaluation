/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:44:22 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.encoding.Binary;
import org.sat4j.tools.encoding.Binomial;
import org.sat4j.tools.encoding.Commander;
import org.sat4j.tools.encoding.EncodingStrategy;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;
import org.sat4j.tools.encoding.Ladder;
import org.sat4j.tools.encoding.Policy;
import org.sat4j.tools.encoding.Product;
import org.sat4j.tools.encoding.Sequential;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Policy_ESTest extends Policy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      policy0.setExactlyOneEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyOneEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.PRODUCT;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      policy0.setExactlyKEncoding(encodingStrategyAdapter0);
      EncodingStrategyAdapter encodingStrategyAdapter1 = policy0.getExactlyKEncoding();
      assertSame(encodingStrategyAdapter1, encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtMostOneEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostOneEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtLeastKEncoding(encodingStrategy0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastKEncoding();
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Policy policy0 = new Policy();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setExactlyKEncoding(encodingStrategy0);
      IConstr iConstr0 = policy0.addExactly(iSolver0, vecInt0, 164);
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Policy policy0 = new Policy();
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(optToSatAdapter0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      FullClauseSelectorSolver<OptToSatAdapter> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<OptToSatAdapter>(optToSatAdapter0, false);
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      IConstr iConstr0 = policy0.addAtMost(fullClauseSelectorSolver0, vecInt0, 1384);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setExactlyOneEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setExactlyKEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.setAtLeastOneEncoding((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        policy0.setAtLeastOneEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Policy.getAdapterFromEncodingName((EncodingStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Policy policy0 = new Policy();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      // Undeclared exception!
      try { 
        policy0.addExactly(dimacsOutputSolver0, (IVecInt) null, 1089);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 1089
         //
         verifyException("org.sat4j.tools.DimacsOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Policy policy0 = new Policy();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        policy0.addExactly(iSolver0, vecInt0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Policy policy0 = new Policy();
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      Binary binary0 = new Binary();
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0, binary0);
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        policy0.addAtMost(clausalCardinalitiesDecorator0, vecInt0, (-47));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.addAtLeast((ISolver) null, (IVecInt) null, 821);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Policy policy0 = new Policy();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(20, 573, (-6)).when(iSolver0).nVars();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, solutionFoundListener0);
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setAtLeastKEncoding(encodingStrategy0);
      // Undeclared exception!
      try { 
        policy0.addAtLeast(minimal4CardinalityModel0, vecInt0, (-6));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Sequential", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Policy policy0 = new Policy();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(20, 573, (-6)).when(iSolver0).nVars();
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, solutionFoundListener0);
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(302);
      // Undeclared exception!
      try { 
        policy0.addAtLeast(minimal4CardinalityModel0, vecInt0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Policy policy0 = new Policy();
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        policy0.addAtMost((ISolver) null, vecInt0, 68);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Sequential sequential0 = new Sequential();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(sequential0);
      assertEquals(EncodingStrategy.SEQUENTIAL, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Product product0 = new Product();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(product0);
      assertEquals(EncodingStrategy.PRODUCT, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Binomial binomial0 = new Binomial();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(binomial0);
      assertEquals(EncodingStrategy.BINOMIAL, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.NATIVE;
      // Undeclared exception!
      try { 
        Policy.getAdapterFromEncodingName(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.LADDER;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostOneEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostKEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyOneEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getExactlyKEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Policy policy0 = new Policy();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(20, 573, (-6)).when(iSolver0).nVars();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, solutionFoundListener0);
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtLeastKEncoding(encodingStrategy0);
      IConstr iConstr0 = policy0.addAtLeast(minimal4CardinalityModel0, vecInt0, (-6));
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Policy policy0 = new Policy();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(20, 573, (-6)).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addClause(any(org.sat4j.specs.IVecInt.class));
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, solutionFoundListener0);
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtLeastOneEncoding(encodingStrategy0);
      IConstr iConstr0 = policy0.addAtLeast(minimal4CardinalityModel0, vecInt0, 1);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Policy policy0 = new Policy();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(20, 573, (-6)).when(iSolver0).nVars();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, solutionFoundListener0);
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        policy0.addAtLeast(minimal4CardinalityModel0, vecInt0, (-6));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // requires at least 2 literals
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Policy policy0 = new Policy();
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(20, 573, (-6)).when(iSolver0).nVars();
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, solutionFoundListener0);
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setExactlyKEncoding(encodingStrategy0);
      // Undeclared exception!
      try { 
        policy0.addExactly(minimal4CardinalityModel0, vecInt0, 20);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Sequential", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.PRODUCT;
      Policy policy0 = new Policy();
      policy0.setExactlyOneEncoding(encodingStrategy0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      // Undeclared exception!
      try { 
        policy0.addExactly(dimacsOutputSolver0, (IVecInt) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Policy policy0 = new Policy();
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        policy0.addExactlyOne((ISolver) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Policy policy0 = new Policy();
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(20, 573, (-6)).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addExactly(any(org.sat4j.specs.IVecInt.class) , anyInt());
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, solutionFoundListener0);
      IConstr iConstr0 = policy0.addExactly(minimal4CardinalityModel0, vecInt0, 20);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.PRODUCT;
      Policy policy0 = new Policy();
      policy0.setAtMostKEncoding(encodingStrategy0);
      int[] intArray0 = new int[7];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        policy0.addAtMostOne((ISolver) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Product", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtMostKEncoding(encodingStrategy0);
      IConstr iConstr0 = policy0.addAtMost((ISolver) null, vecInt0, 68);
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      policy0.setAtMostOneEncoding(encodingStrategy0);
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(optToSatAdapter0).addClause(any(org.sat4j.specs.IVecInt.class));
      LexicoDecorator<OptToSatAdapter> lexicoDecorator0 = new LexicoDecorator<OptToSatAdapter>(optToSatAdapter0);
      OptToSatAdapter optToSatAdapter1 = new OptToSatAdapter(lexicoDecorator0);
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter1);
      IConstr iConstr0 = policy0.addAtMostOne(clausalCardinalitiesDecorator0, vecInt0);
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int[] intArray0 = new int[8];
      VecInt vecInt0 = new VecInt(intArray0);
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.addAtMost((ISolver) null, vecInt0, 68);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Policy policy0 = new Policy();
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        policy0.addAtMost((ISolver) null, vecInt0, 68);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      Policy policy0 = new Policy();
      // Undeclared exception!
      try { 
        policy0.addAtMost((ISolver) null, vecInt0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.SEQUENTIAL;
      policy0.setAtMostKEncoding(encodingStrategy0);
      String string0 = policy0.toString();
      assertEquals("Policy = [At most K: Sequential, at most 1: Native, exactly K: Native, exactly 1: Native]", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Ladder ladder0 = new Ladder();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(ladder0);
      assertEquals(EncodingStrategy.LADDER, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Commander commander0 = new Commander();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(commander0);
      assertEquals(EncodingStrategy.COMMANDER, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Binary binary0 = new Binary();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(binary0);
      assertEquals(EncodingStrategy.BINARY, encodingStrategy0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.COMMANDER;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      assertNotNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(policy0);
      // Undeclared exception!
      try { 
        policy0.setAtLeastKEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(policy0);
      // Undeclared exception!
      try { 
        policy0.setExactlyOneEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(policy0);
      // Undeclared exception!
      try { 
        policy0.setExactlyKEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(policy0);
      // Undeclared exception!
      try { 
        policy0.setAtMostOneEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Policy policy0 = new Policy();
      Commander commander0 = new Commander();
      policy0.setExactlyOneEncoding((EncodingStrategyAdapter) commander0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = EncodingStrategy.PRODUCT;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      policy0.setAtLeastOneEncoding(encodingStrategyAdapter0);
      EncodingStrategyAdapter encodingStrategyAdapter1 = policy0.getAtLeastOneEncoding();
      assertSame(encodingStrategyAdapter1, encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastKEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Policy policy0 = new Policy();
      Commander commander0 = new Commander();
      policy0.setExactlyKEncoding((EncodingStrategyAdapter) commander0);
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        policy0.addExactlyOne((ISolver) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Policy policy0 = new Policy();
      Commander commander0 = new Commander();
      policy0.setAtLeastKEncoding((EncodingStrategyAdapter) commander0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Policy policy0 = new Policy();
      Commander commander0 = new Commander();
      policy0.setAtMostKEncoding((EncodingStrategyAdapter) commander0);
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtMostKEncoding();
      assertSame(encodingStrategyAdapter0, commander0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategy encodingStrategy0 = Policy.getEncodingTypeFromAdapter(policy0);
      // Undeclared exception!
      try { 
        policy0.setAtMostKEncoding(encodingStrategy0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The switch does not cover all encodings
         //
         verifyException("org.sat4j.tools.encoding.Policy", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Policy policy0 = new Policy();
      EncodingStrategyAdapter encodingStrategyAdapter0 = policy0.getAtLeastOneEncoding();
      assertNull(encodingStrategyAdapter0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINARY;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      Policy policy0 = new Policy();
      policy0.setAtMostOneEncoding(encodingStrategyAdapter0);
  }
}
