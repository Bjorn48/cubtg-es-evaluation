[MASTER] 03:25:31.639 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.minisat.core.Solver<D> : Type points to itself
[MASTER] 03:25:31.640 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleEntry<K, V> : Type points to itself
[MASTER] 03:25:31.640 [logback-2] ERROR TestCluster - Failed to check cache for java.util.AbstractMap<K, V>.SimpleImmutableEntry<K, V> : Type points to itself
[MASTER] 03:25:47.129 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMin>[] solverArray0 = (Solver<CardinalityDataStructureYanMin>[]) Array.newInstance(Solver.class, 4), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMin>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:25:49.031 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMin>[] solverArray0 = (Solver<CardinalityDataStructureYanMin>[]) Array.newInstance(Solver.class, 4), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMin>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:26:13.421 [logback-2] ERROR TestCluster - Failed to check cache for org.sat4j.specs.SearchListener<org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary>> : Invalid generic instance
[MASTER] 03:26:15.920 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMin>[] solverArray0 = (Solver<CardinalityDataStructureYanMin>[]) Array.newInstance(Solver.class, 4), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMin>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:26:50.974 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:02.869 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMin>[] solverArray0 = (Solver<CardinalityDataStructureYanMin>[]) Array.newInstance(Solver.class, 4), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMin>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:13.472 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:16.845 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<CardinalityDataStructureYanMin>[] solverArray0 = (Solver<CardinalityDataStructureYanMin>[]) Array.newInstance(Solver.class, 4), assignment statement: solverArray0[0] = (Solver<CardinalityDataStructureYanMin>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:27.414 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:30.490 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.575 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.584 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.588 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.593 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.596 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.599 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.603 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.608 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.613 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.616 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.620 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.626 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.630 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.635 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.638 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.641 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.644 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.647 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.650 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.652 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.655 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.658 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.660 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.663 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:27:46.666 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:29:28.062 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:29:28.820 [logback-2] ERROR ClientNodeImpl - Cannot inform master of change of state
java.rmi.MarshalException: error marshalling arguments; nested exception is: 
	java.net.SocketException: Broken pipe (Write failed)
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:157) ~[na:1.8.0_191]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_191]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_191]
	at com.sun.proxy.$Proxy7.evosuite_collectStatistics(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl.updateStatistics(ClientNodeImpl.java:279) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.statistics.StatisticsSender.sendIndividualToMaster(StatisticsSender.java:68) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.postProcessTests(TestSuiteGenerator.java:543) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.TestSuiteGenerator.generateTestSuite(TestSuiteGenerator.java:254) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at org.evosuite.rmi.service.ClientNodeImpl$1.run(ClientNodeImpl.java:160) [evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_191]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_191]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_191]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_191]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_191]
Caused by: java.net.SocketException: Broken pipe (Write failed)
	at java.net.SocketOutputStream.socketWrite0(Native Method) ~[na:1.8.0_191]
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:111) ~[na:1.8.0_191]
	at java.net.SocketOutputStream.write(SocketOutputStream.java:155) ~[na:1.8.0_191]
	at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82) ~[na:1.8.0_191]
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:126) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream$BlockDataOutputStream.setBlockDataMode(ObjectOutputStream.java:1786) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeNonProxyDesc(ObjectOutputStream.java:1286) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeClassDesc(ObjectOutputStream.java:1231) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1427) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1577) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351) ~[na:1.8.0_191]
	at sun.rmi.server.UnicastRef.marshalValue(UnicastRef.java:290) ~[na:1.8.0_191]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:152) ~[na:1.8.0_191]
	... 13 common frames omitted
[MASTER] 03:29:48.521 [logback-2] ERROR AbstractStatement - Error assigning value of type Solver[] defined at statement Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8), assignment statement: solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0; SUT=org.sat4j.minisat.core.Solver
[MASTER] 03:29:48.583 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_232_1550370588518/org/sat4j/minisat/core/Solver_232_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_232_1550370588518/org/sat4j/minisat/core/Solver_232_tmp__ESTest_scaffolding.java]]
[MASTER] 03:29:48.583 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 03:29:48.583 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 03:29:48.588 [logback-2] ERROR JUnitAnalyzer - Diagnostic: incompatible types: org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.MixedDataStructureSingleWL>[] cannot be converted to org.sat4j.minisat.core.Solver<org.sat4j.minisat.constraints.MixedDataStructureSingleWL>: 256
[MASTER] 03:29:48.588 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_232_1550370588518/org/sat4j/minisat/core/Solver_232_tmp__ESTest.java uses or overrides a deprecated API.: -1
[MASTER] 03:29:48.588 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:deprecation for details.: -1
[MASTER] 03:29:48.588 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_232_1550370588518/org/sat4j/minisat/core/Solver_232_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 03:29:48.588 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 03:29:48.591 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_232_1550370588518/org/sat4j/minisat/core/Solver_232_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Sun Feb 17 02:29:48 GMT 2019
4:  */
5: 
6: package org.sat4j.minisat.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import java.lang.reflect.Array;
12: import org.evosuite.runtime.EvoRunner;
13: import org.evosuite.runtime.EvoRunnerParameters;
14: import org.junit.runner.RunWith;
15: import org.sat4j.ExitCode;
16: import org.sat4j.MUSLauncher;
17: import org.sat4j.minisat.constraints.CardinalityDataStructure;
18: import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
19: import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
20: import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
21: import org.sat4j.minisat.core.SearchParams;
22: import org.sat4j.minisat.core.Solver;
23: import org.sat4j.minisat.learning.PercentLengthLearning;
24: import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
25: import org.sat4j.minisat.restarts.ArminRestarts;
26: import org.sat4j.specs.Constr;
27: import org.sat4j.specs.IVecInt;
28: import org.sat4j.tools.ManyCore;
29: 
30: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
31: public class Solver_232_tmp__ESTest extends Solver_232_tmp__ESTest_scaffolding {
32: 
33:   @Test(timeout = 4000)
34:   public void test0()  throws Throwable  {
35:       CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
36:       assertNotNull(cardinalityDataStructure0);
37:       
38:       SearchParams searchParams0 = new SearchParams(720);
39:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
40:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
41:       assertEquals(720, searchParams0.getInitConflictBound());
42:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
43:       assertNotNull(searchParams0);
44:       
45:       int int0 = searchParams0.getInitConflictBound();
46:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
47:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
48:       assertEquals(720, searchParams0.getInitConflictBound());
49:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
50:       assertEquals(720, int0);
51:       
52:       LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
53:       assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
54:       assertNotNull(levelBasedVarOrderHeap0);
55:       
56:       PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(720);
57:       assertEquals(720, percentLengthLearning0.getLimit());
58:       assertNotNull(percentLengthLearning0);
59:       
60:       CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
61:       assertNotNull(cardinalityDataStructureYanMin0);
62:       
63:       MUSLauncher mUSLauncher0 = new MUSLauncher();
64:       assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
65:       assertFalse(mUSLauncher0.isSilent());
66:       assertEquals(0L, mUSLauncher0.getBeginTime());
67:       assertNotNull(mUSLauncher0);
68:       
69:       mUSLauncher0.log("ignored satisfied constraints");
70:       assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
71:       assertFalse(mUSLauncher0.isSilent());
72:       assertEquals(0L, mUSLauncher0.getBeginTime());
73:       
74:       mUSLauncher0.log("(|");
75:       assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
76:       assertFalse(mUSLauncher0.isSilent());
77:       assertEquals(0L, mUSLauncher0.getBeginTime());
78:       
79:       PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielHT>(2);
80:       assertEquals(2, percentLengthLearning1.getLimit());
81:       assertNotNull(percentLengthLearning1);
82:       
83:       MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
84:       assertNotNull(mixedDataStructureDanielHT0);
85:       
86:       ArminRestarts arminRestarts0 = new ArminRestarts();
87:       assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
88:       assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
89:       assertTrue(arminRestarts0.shouldRestart());
90:       assertNotNull(arminRestarts0);
91:       
92:       Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning1, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, mUSLauncher0);
93:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
94:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
95:       assertEquals(720, searchParams0.getInitConflictBound());
96:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
97:       assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
98:       assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
99:       assertFalse(mUSLauncher0.isSilent());
100:       assertEquals(0L, mUSLauncher0.getBeginTime());
101:       assertEquals(2, percentLengthLearning1.getLimit());
102:       assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
103:       assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
104:       assertTrue(arminRestarts0.shouldRestart());
105:       assertEquals(2, solver0.newVar());
106:       assertFalse(solver0.isVerbose());
107:       assertEquals(0, solver0.nConstraints());
108:       assertEquals(0, solver0.getPropagationLevel());
109:       assertEquals(0, solver0.currentDecisionLevel());
110:       assertEquals(1, solver0.realNumberOfVariables());
111:       assertEquals(1, solver0.nVars());
112:       assertFalse(solver0.isSolverKeptHot());
113:       assertEquals(2147483, solver0.getTimeout());
114:       assertEquals(0, solver0.decisionLevel());
115:       assertFalse(solver0.isDBSimplificationAllowed());
116:       assertEquals("c ", solver0.getLogPrefix());
117:       assertNotNull(solver0);
118:       
119:       int int1 = solver0.getTimeout();
120:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
121:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
122:       assertEquals(720, searchParams0.getInitConflictBound());
123:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
124:       assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
125:       assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
126:       assertFalse(mUSLauncher0.isSilent());
127:       assertEquals(0L, mUSLauncher0.getBeginTime());
128:       assertEquals(2, percentLengthLearning1.getLimit());
129:       assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
130:       assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
131:       assertTrue(arminRestarts0.shouldRestart());
132:       assertFalse(solver0.isVerbose());
133:       assertEquals(0, solver0.nConstraints());
134:       assertEquals(4, solver0.newVar());
135:       assertEquals(0, solver0.getPropagationLevel());
136:       assertEquals(0, solver0.currentDecisionLevel());
137:       assertFalse(solver0.isSolverKeptHot());
138:       assertEquals(2147483, solver0.getTimeout());
139:       assertEquals(0, solver0.decisionLevel());
140:       assertFalse(solver0.isDBSimplificationAllowed());
141:       assertEquals(3, solver0.nVars());
142:       assertEquals("c ", solver0.getLogPrefix());
143:       assertEquals(3, solver0.realNumberOfVariables());
144:       assertFalse(int1 == int0);
145:       assertEquals(2147483, int1);
146:       
147:       mUSLauncher0.usage();
148:       assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
149:       assertFalse(mUSLauncher0.isSilent());
150:       assertEquals(0L, mUSLauncher0.getBeginTime());
151:       
152:       PercentLengthLearning<CardinalityDataStructure> percentLengthLearning2 = new PercentLengthLearning<CardinalityDataStructure>();
153:       assertEquals(10, percentLengthLearning2.getLimit());
154:       assertNotNull(percentLengthLearning2);
155:       
156:       CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
157:       assertNotNull(cardinalityDataStructure1);
158:       assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));
159:       
160:       Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning2, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, mUSLauncher0);
161:       assertFalse(solver1.isDBSimplificationAllowed());
162:       assertEquals(2147483, solver1.getTimeout());
163:       assertEquals(0, solver1.nConstraints());
164:       assertEquals(1, solver1.nVars());
165:       assertFalse(solver1.isSolverKeptHot());
166:       assertEquals(2, solver1.newVar());
167:       assertEquals(0, solver1.decisionLevel());
168:       assertEquals(1, solver1.realNumberOfVariables());
169:       assertFalse(solver1.isVerbose());
170:       assertEquals("c ", solver1.getLogPrefix());
171:       assertEquals(0, solver1.currentDecisionLevel());
172:       assertEquals(0, solver1.getPropagationLevel());
173:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
174:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
175:       assertEquals(720, searchParams0.getInitConflictBound());
176:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
177:       assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
178:       assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
179:       assertFalse(mUSLauncher0.isSilent());
180:       assertEquals(0L, mUSLauncher0.getBeginTime());
181:       assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
182:       assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
183:       assertTrue(arminRestarts0.shouldRestart());
184:       assertEquals(10, percentLengthLearning2.getLimit());
185:       assertNotNull(solver1);
186:       assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));
187:       
188:       Constr constr0 = Constr.TAUTOLOGY;
189:       assertNotNull(constr0);
190:       
191:       boolean boolean0 = constr0.canBeSatisfiedByCountingLiterals();
192:       assertFalse(boolean0);
193:       
194:       boolean boolean1 = solver1.enqueue(2, constr0);
195:       assertEquals(3, solver1.nVars());
196:       assertFalse(solver1.isDBSimplificationAllowed());
197:       assertEquals(2147483, solver1.getTimeout());
198:       assertEquals(0, solver1.nConstraints());
199:       assertFalse(solver1.isSolverKeptHot());
200:       assertEquals(0, solver1.decisionLevel());
201:       assertFalse(solver1.isVerbose());
202:       assertEquals(4, solver1.newVar());
203:       assertEquals(3, solver1.realNumberOfVariables());
204:       assertEquals("c ", solver1.getLogPrefix());
205:       assertEquals(0, solver1.currentDecisionLevel());
206:       assertEquals(1, solver1.getPropagationLevel());
207:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
208:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
209:       assertEquals(720, searchParams0.getInitConflictBound());
210:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
211:       assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
212:       assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
213:       assertFalse(mUSLauncher0.isSilent());
214:       assertEquals(0L, mUSLauncher0.getBeginTime());
215:       assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
216:       assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
217:       assertTrue(arminRestarts0.shouldRestart());
218:       assertEquals(10, percentLengthLearning2.getLimit());
219:       assertNotSame(cardinalityDataStructure0, cardinalityDataStructure1);
220:       assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));
221:       assertFalse(boolean1 == boolean0);
222:       assertTrue(boolean1);
223:       
224:       Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, mUSLauncher0);
225:       assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
226:       assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
227:       assertEquals(720, searchParams0.getInitConflictBound());
228:       assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
229:       assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
230:       assertEquals(720, percentLengthLearning0.getLimit());
231:       assertFalse(solver2.isSolverKeptHot());
232:       assertEquals(2147483, solver2.getTimeout());
233:       assertEquals(0, solver2.decisionLevel());
234:       assertEquals(0, solver2.getPropagationLevel());
235:       assertFalse(solver2.isDBSimplificationAllowed());
236:       assertEquals(0, solver2.currentDecisionLevel());
237:       assertFalse(solver2.isVerbose());
238:       assertEquals(1, solver2.nVars());
239:       assertEquals("c ", solver2.getLogPrefix());
240:       assertEquals(2, solver2.newVar());
241:       assertEquals(0, solver2.nConstraints());
242:       assertEquals(1, solver2.realNumberOfVariables());
243:       assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
244:       assertFalse(mUSLauncher0.isSilent());
245:       assertEquals(0L, mUSLauncher0.getBeginTime());
246:       assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
247:       assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
248:       assertTrue(arminRestarts0.shouldRestart());
249:       assertNotNull(solver2);
250:       
251:       String[] stringArray0 = new String[3];
252:       stringArray0[0] = "";
253:       stringArray0[1] = "";
254:       stringArray0[2] = "\"jA!IgEr$@Z@HX^/_";
255:       Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8);
256:       solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0;
257:   }
258: }
RegularFileObject[/tmp/EvoSuite_232_1550370588518/org/sat4j/minisat/core/Solver_232_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Sun Feb 17 02:29:48 GMT 2019
5:  */
6: 
7: package org.sat4j.minisat.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class Solver_232_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.minisat.core.Solver"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Solver_232_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.minisat.core.ConflictTimerAdapter",
82:       "org.sat4j.tools.ManyCore",
83:       "org.sat4j.specs.UnitPropagationListener",
84:       "org.sat4j.minisat.core.SizeComparator",
85:       "org.sat4j.tools.FullClauseSelectorSolver",
86:       "org.sat4j.reader.LecteurDimacs",
87:       "org.sat4j.tools.AbstractClauseSelectorSolver$1",
88:       "org.sat4j.tools.SolverDecorator",
89:       "org.sat4j.specs.Propagatable",
90:       "org.sat4j.minisat.core.Counter",
91:       "org.sat4j.minisat.learning.FixedLengthLearning",
92:       "org.sat4j.minisat.core.Undoable",
93:       "org.sat4j.ILauncherMode",
94:       "org.sat4j.minisat.constraints.cnf.Clauses",
95:       "org.sat4j.minisat.core.Pair",
96:       "org.sat4j.core.EmptyVecInt",
97:       "org.sat4j.ExitCode",
98:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
99:       "org.sat4j.specs.IVec",
100:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
101:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
102:       "org.sat4j.minisat.constraints.cnf.UnitClause",
103:       "org.sat4j.specs.Lbool",
104:       "org.sat4j.minisat.constraints.cnf.CBClause",
105:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
106:       "org.sat4j.AbstractLauncher$2",
107:       "org.sat4j.tools.encoding.EncodingStrategyAdapter",
108:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMax",
109:       "org.sat4j.AbstractLauncher$1",
110:       "org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy",
111:       "org.sat4j.specs.IOptimizationProblem",
112:       "org.sat4j.specs.SearchListener",
113:       "org.sat4j.minisat.core.SimplificationType",
114:       "org.sat4j.tools.Minimal4CardinalityModel",
115:       "org.sat4j.minisat.learning.MiniSATLearning",
116:       "org.sat4j.tools.AbstractClauseSelectorSolver$2",
117:       "org.sat4j.minisat.core.SearchParams",
118:       "org.sat4j.tools.AbstractMinimalModel",
119:       "org.sat4j.minisat.core.Heap",
120:       "org.sat4j.minisat.constraints.cnf.BinaryClauses",
121:       "org.sat4j.tools.encoding.Sequential",
122:       "org.sat4j.specs.ILogAble$1",
123:       "org.sat4j.specs.Constr",
124:       "org.sat4j.specs.TimeoutException",
125:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
126:       "org.sat4j.minisat.core.ConflictTimerContainer",
127:       "org.sat4j.specs.ISolverService",
128:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
129:       "org.sat4j.minisat.core.LearningStrategy",
130:       "org.sat4j.minisat.constraints.cnf.WLClause",
131:       "org.sat4j.specs.IGroupSolver",
132:       "org.sat4j.opt.MaxSatDecorator",
133:       "org.sat4j.DecisionMode",
134:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
135:       "org.sat4j.specs.IteratorInt",
136:       "org.sat4j.specs.ISolver",
137:       "org.sat4j.minisat.orders.RandomWalkDecorator",
138:       "org.sat4j.specs.UnitClauseProvider$1",
139:       "org.sat4j.minisat.core.CircularBuffer",
140:       "org.sat4j.minisat.restarts.LubyRestarts",
141:       "org.sat4j.minisat.learning.LimitedLearning",
142:       "org.sat4j.minisat.core.VoidTracing",
143:       "org.sat4j.minisat.core.ActivityListener",
144:       "org.sat4j.minisat.restarts.Glucose21Restarts",
145:       "org.sat4j.minisat.core.GlucoseLCDS",
146:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMin",
147:       "org.sat4j.tools.AbstractClauseSelectorSolver$SelectorState",
148:       "org.sat4j.minisat.core.ILits",
149:       "org.sat4j.BasicLauncher",
150:       "org.sat4j.minisat.constraints.card.AtLeast",
151:       "org.sat4j.specs.ILogAble",
152:       "org.sat4j.specs.ContradictionException",
153:       "org.sat4j.opt.AbstractSelectorVariablesDecorator",
154:       "org.sat4j.reader.GroupedCNFReader",
155:       "org.sat4j.core.LiteralsUtils",
156:       "org.sat4j.minisat.learning.PercentLengthLearning",
157:       "org.sat4j.specs.IConstr",
158:       "org.sat4j.specs.IVecInt",
159:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
160:       "org.sat4j.tools.SolutionFoundListener",
161:       "org.sat4j.tools.xplain.MinimizationStrategy",
162:       "org.sat4j.minisat.constraints.ClausalDataStructureWL",
163:       "org.sat4j.minisat.restarts.EMARestarts",
164:       "org.sat4j.minisat.core.PrimeImplicantStrategy",
165:       "org.sat4j.OptimizationMode",
166:       "org.sat4j.minisat.core.Learner",
167:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
168:       "org.sat4j.minisat.core.ActivityComparator",
169:       "org.sat4j.specs.MandatoryLiteralListener",
170:       "org.sat4j.minisat.constraints.card.MaxWatchCard",
171:       "org.sat4j.specs.IProblem",
172:       "org.sat4j.minisat.restarts.MiniSATRestarts",
173:       "org.sat4j.core.VecInt",
174:       "org.sat4j.minisat.core.Solver",
175:       "org.sat4j.tools.xplain.HighLevelXplain",
176:       "org.sat4j.tools.CheckMUSSolutionListener",
177:       "org.sat4j.minisat.constraints.cnf.Lits",
178:       "org.sat4j.minisat.core.Solver$2",
179:       "org.sat4j.minisat.core.Solver$1",
180:       "org.sat4j.specs.UnitClauseProvider",
181:       "org.sat4j.minisat.learning.AbstractLearning",
182:       "org.sat4j.AbstractLauncher",
183:       "org.sat4j.minisat.core.Solver$4",
184:       "org.sat4j.minisat.core.Solver$3",
185:       "org.sat4j.minisat.core.LearnedConstraintsEvaluationType",
186:       "org.sat4j.minisat.learning.ClauseOnlyLearning",
187:       "org.sat4j.core.VecInt$1",
188:       "org.sat4j.core.ASolverFactory",
189:       "org.sat4j.core.Vec$1",
190:       "org.sat4j.reader.DimacsReader",
191:       "org.sat4j.minisat.core.DataStructureFactory",
192:       "org.sat4j.core.Vec",
193:       "org.sat4j.minisat.core.Solver$9",
194:       "org.sat4j.minisat.core.Glucose2LCDS",
195:       "org.sat4j.minisat.core.Solver$6",
196:       "org.sat4j.minisat.core.Solver$5",
197:       "org.sat4j.minisat.core.SolverStats",
198:       "org.sat4j.minisat.core.Solver$8",
199:       "org.sat4j.minisat.core.Solver$7",
200:       "org.sat4j.minisat.core.Solver$10",
201:       "org.sat4j.minisat.constraints.MixedDataStructureSingleWL",
202:       "org.sat4j.minisat.core.ConstrActivityListener",
203:       "org.sat4j.minisat.core.IPhaseSelectionStrategy",
204:       "org.sat4j.minisat.orders.LevelAndActivityVariableComparator",
205:       "org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy",
206:       "org.sat4j.minisat.orders.SubsetVarOrder",
207:       "org.sat4j.minisat.orders.RandomLiteralSelectionStrategy",
208:       "org.sat4j.minisat.restarts.ArminRestarts",
209:       "org.sat4j.tools.GroupClauseSelectorSolver",
210:       "org.sat4j.minisat.constraints.cnf.UnitClauses",
211:       "org.sat4j.specs.SearchListenerAdapter",
212:       "org.sat4j.tools.xplain.Xplain",
213:       "org.sat4j.tools.ModelIterator",
214:       "org.sat4j.reader.ParseFormatException",
215:       "org.sat4j.tools.SolutionFoundListener$1",
216:       "org.sat4j.tools.AbstractClauseSelectorSolver",
217:       "org.sat4j.tools.StatisticsSolver",
218:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
219:       "org.sat4j.minisat.constraints.cnf.LearntWLClause",
220:       "org.sat4j.tools.OutcomeListener",
221:       "org.sat4j.minisat.core.ActivityLCDS",
222:       "org.sat4j.tools.AbstractOutputSolver",
223:       "org.sat4j.minisat.constraints.cnf.OriginalWLClause",
224:       "org.sat4j.MUSLauncher",
225:       "org.sat4j.minisat.learning.ActiveLearning",
226:       "org.sat4j.minisat.orders.VarOrderHeap",
227:       "org.sat4j.minisat.constraints.xor.Xor",
228:       "org.sat4j.minisat.orders.NaturalStaticOrder",
229:       "org.sat4j.LightFactory",
230:       "org.sat4j.minisat.core.ISimplifier",
231:       "org.sat4j.reader.InstanceReader",
232:       "org.sat4j.minisat.core.ConflictTimer",
233:       "org.sat4j.minisat.core.VarActivityListener",
234:       "org.sat4j.specs.Constr$1",
235:       "org.sat4j.specs.VarMapper",
236:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
237:       "org.sat4j.specs.RandomAccessModel",
238:       "org.sat4j.minisat.SolverFactory",
239:       "org.sat4j.minisat.core.LBDConflictTimer",
240:       "org.sat4j.tools.DimacsOutputSolver",
241:       "org.sat4j.minisat.constraints.cnf.BinaryClause",
242:       "org.sat4j.minisat.orders.TabuListDecorator",
243:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary",
244:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
245:       "org.sat4j.minisat.orders.PureOrder",
246:       "org.sat4j.minisat.core.SizeLCDS",
247:       "org.sat4j.minisat.core.RestartStrategy",
248:       "org.sat4j.minisat.core.AgeLCDS",
249:       "org.sat4j.opt.MinOneDecorator",
250:       "org.sat4j.tools.xplain.Explainer",
251:       "org.sat4j.reader.Reader",
252:       "org.sat4j.core.ReadOnlyVecInt",
253:       "org.sat4j.minisat.core.IOrder",
254:       "org.sat4j.minisat.orders.VariableComparator",
255:       "org.sat4j.minisat.constraints.cnf.OriginalBinaryClause",
256:       "org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy",
257:       "org.sat4j.minisat.core.ICDCL",
258:       "org.sat4j.minisat.core.LearnedConstraintsDeletionStrategy",
259:       "org.sat4j.minisat.restarts.NoRestarts",
260:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
261:       "org.sat4j.core.EmptyVecInt$1",
262:       "org.sat4j.minisat.core.Solver$5$1",
263:       "org.sat4j.minisat.core.MemoryBasedConflictTimer"
264:     );
265:   } 
266: 
267:   private static void resetClasses() {
268:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Solver_232_tmp__ESTest_scaffolding.class.getClassLoader()); 
269: 
270:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
271:       "org.sat4j.minisat.core.Solver$1",
272:       "org.sat4j.minisat.core.Solver",
273:       "org.sat4j.minisat.core.Solver$2",
274:       "org.sat4j.minisat.core.Solver$3",
275:       "org.sat4j.minisat.core.Solver$4",
276:       "org.sat4j.minisat.core.Solver$5",
277:       "org.sat4j.minisat.core.Solver$9",
278:       "org.sat4j.minisat.core.Solver$6",
279:       "org.sat4j.minisat.core.Solver$GlucoseLCDS",
280:       "org.sat4j.minisat.core.Solver$Glucose2LCDS",
281:       "org.sat4j.minisat.core.ConflictTimerAdapter",
282:       "org.sat4j.minisat.core.Solver$7",
283:       "org.sat4j.minisat.core.Solver$8",
284:       "org.sat4j.minisat.core.LearnedConstraintsEvaluationType",
285:       "org.sat4j.minisat.core.Solver$10",
286:       "org.sat4j.minisat.core.Solver$11",
287:       "org.sat4j.specs.ILogAble$1",
288:       "org.sat4j.specs.ILogAble",
289:       "org.sat4j.specs.UnitClauseProvider$1",
290:       "org.sat4j.specs.UnitClauseProvider",
291:       "org.sat4j.core.LiteralsUtils",
292:       "org.sat4j.specs.Lbool",
293:       "org.sat4j.core.EmptyVecInt",
294:       "org.sat4j.core.VecInt",
295:       "org.sat4j.minisat.constraints.AbstractCardinalityDataStructure",
296:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMin",
297:       "org.sat4j.core.Vec",
298:       "org.sat4j.minisat.orders.LevelBasedVarOrderHeap",
299:       "org.sat4j.minisat.orders.AbstractPhaserecordingSelectionStrategy",
300:       "org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy",
301:       "org.sat4j.minisat.orders.RandomWalkDecorator",
302:       "org.sat4j.minisat.learning.LimitedLearning",
303:       "org.sat4j.minisat.learning.PercentLengthLearning",
304:       "org.sat4j.minisat.learning.AbstractLearning",
305:       "org.sat4j.minisat.learning.NoLearningButHeuristics",
306:       "org.sat4j.minisat.learning.MiniSATLearning",
307:       "org.sat4j.minisat.learning.FixedLengthLearning",
308:       "org.sat4j.minisat.constraints.CardinalityDataStructureYanMax",
309:       "org.sat4j.minisat.restarts.MiniSATRestarts",
310:       "org.sat4j.AbstractLauncher",
311:       "org.sat4j.MUSLauncher",
312:       "org.sat4j.AbstractLauncher$1",
313:       "org.sat4j.DecisionMode",
314:       "org.sat4j.ExitCode",
315:       "org.sat4j.OptimizationMode",
316:       "org.sat4j.ILauncherMode",
317:       "org.sat4j.minisat.core.ActivityComparator",
318:       "org.sat4j.specs.SearchListenerAdapter",
319:       "org.sat4j.minisat.core.VoidTracing",
320:       "org.sat4j.minisat.core.MemoryBasedConflictTimer",
321:       "org.sat4j.minisat.core.ActivityLCDS",
322:       "org.sat4j.minisat.core.LBDConflictTimer",
323:       "org.sat4j.minisat.core.GlucoseLCDS",
324:       "org.sat4j.minisat.core.Glucose2LCDS",
325:       "org.sat4j.minisat.core.AgeLCDS",
326:       "org.sat4j.minisat.core.SizeComparator",
327:       "org.sat4j.minisat.core.SizeLCDS",
328:       "org.sat4j.minisat.constraints.CardinalityDataStructure",
329:       "org.sat4j.minisat.restarts.Glucose21Restarts",
330:       "org.sat4j.minisat.core.CircularBuffer",
331:       "org.sat4j.minisat.orders.PureOrder",
332:       "org.sat4j.minisat.restarts.LubyRestarts",
333:       "org.sat4j.minisat.orders.RandomLiteralSelectionStrategy",
334:       "org.sat4j.minisat.learning.ActiveLearning",
335:       "org.sat4j.minisat.constraints.MixedDataStructureDanielHT",
336:       "org.sat4j.minisat.orders.PhaseCachingAutoEraseStrategy",
337:       "org.sat4j.minisat.orders.NaturalStaticOrder",
338:       "org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy",
339:       "org.sat4j.minisat.restarts.EMARestarts",
340:       "org.sat4j.minisat.orders.TabuListDecorator",
341:       "org.sat4j.minisat.orders.SubsetVarOrder",
342:       "org.sat4j.minisat.restarts.ArminRestarts",
343:       "org.sat4j.minisat.restarts.FixedPeriodRestarts",
344:       "org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy",
345:       "org.sat4j.tools.AbstractMinimalModel",
346:       "org.sat4j.tools.Minimal4CardinalityModel",
347:       "org.sat4j.tools.SolutionFoundListener$1",
348:       "org.sat4j.tools.SolutionFoundListener",
349:       "org.sat4j.minisat.learning.NoLearningNoHeuristics",
350:       "org.sat4j.minisat.constraints.MixedDataStructureSingleWL",
351:       "org.sat4j.minisat.constraints.card.AtLeast",
352:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary",
353:       "org.sat4j.minisat.learning.ClauseOnlyLearning",
354:       "org.sat4j.minisat.restarts.NoRestarts",
355:       "org.sat4j.tools.GroupClauseSelectorSolver",
356:       "org.sat4j.tools.AbstractClauseSelectorSolver$1",
357:       "org.sat4j.tools.AbstractClauseSelectorSolver$2",
358:       "org.sat4j.minisat.orders.PositiveLiteralSelectionStrategy",
359:       "org.sat4j.minisat.orders.RSATLastLearnedClausesPhaseSelectionStrategy",
360:       "org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy",
361:       "org.sat4j.core.ASolverFactory",
362:       "org.sat4j.tools.ManyCore",
363:       "org.sat4j.core.VecInt$1",
364:       "org.sat4j.minisat.core.Heap",
365:       "org.sat4j.minisat.orders.ActivityBasedVariableComparator",
366:       "org.sat4j.minisat.core.ConflictTimerContainer",
367:       "org.sat4j.minisat.orders.RSATPhaseSelectionStrategy",
368:       "org.sat4j.minisat.constraints.card.MaxWatchCard",
369:       "org.sat4j.tools.ClausalCardinalitiesDecorator",
370:       "org.sat4j.tools.encoding.Binary",
371:       "org.sat4j.tools.encoding.Product",
372:       "org.sat4j.tools.encoding.Commander",
373:       "org.sat4j.tools.encoding.Binomial",
374:       "org.sat4j.tools.encoding.Ladder",
375:       "org.sat4j.tools.encoding.Policy",
376:       "org.sat4j.minisat.constraints.cnf.UnitClauses",
377:       "org.sat4j.minisat.constraints.card.MinWatchCard",
378:       "org.sat4j.specs.ContradictionException",
379:       "org.sat4j.minisat.constraints.cnf.WLClause",
380:       "org.sat4j.minisat.constraints.cnf.LearntWLClause",
381:       "org.sat4j.tools.DimacsStringSolver",
382:       "org.sat4j.tools.StatisticsSolver",
383:       "org.sat4j.LightFactory",
384:       "org.sat4j.core.EmptyVecInt$1",
385:       "org.sat4j.minisat.constraints.cnf.BinaryClauses",
386:       "org.sat4j.tools.RupSearchListener",
387:       "org.sat4j.minisat.constraints.cnf.HTClause",
388:       "org.sat4j.minisat.constraints.cnf.OriginalHTClause",
389:       "org.sat4j.tools.GateTranslator",
390:       "org.sat4j.core.Vec$1",
391:       "org.sat4j.minisat.orders.LevelAndActivityVariableComparator",
392:       "org.sat4j.tools.CheckMUSSolutionListener",
393:       "org.sat4j.minisat.core.Counter",
394:       "org.sat4j.minisat.constraints.cnf.Clauses",
395:       "org.sat4j.minisat.core.Solver$5$1",
396:       "org.sat4j.minisat.constraints.cnf.OriginalWLClause",
397:       "org.sat4j.minisat.constraints.cnf.UnitClause",
398:       "org.sat4j.tools.ModelIterator",
399:       "org.sat4j.tools.SubModelIterator",
400:       "org.sat4j.minisat.constraints.cnf.BinaryClause",
401:       "org.sat4j.minisat.constraints.cnf.OriginalBinaryClause",
402:       "org.sat4j.core.ConstrGroup",
403:       "org.sat4j.tools.xplain.Xplain",
404:       "org.sat4j.minisat.SolverFactory",
405:       "org.sat4j.specs.FakeConstr",
406:       "org.sat4j.tools.IVisualizationTool",
407:       "org.sat4j.core.ReadOnlyVecInt",
408:       "org.sat4j.core.ReadOnlyVec",
409:       "org.sat4j.minisat.constraints.AbstractDataStructureFactory",
410:       "org.sat4j.minisat.constraints.cnf.Lits",
411:       "org.sat4j.minisat.core.SearchParams",
412:       "org.sat4j.minisat.orders.VarOrderHeap",
413:       "org.sat4j.minisat.core.SolverStats",
414:       "org.sat4j.minisat.core.Pair",
415:       "org.sat4j.specs.TimeoutException",
416:       "org.sat4j.minisat.constraints.ClausalDataStructureWL",
417:       "org.sat4j.specs.Constr$1",
418:       "org.sat4j.specs.Constr",
419:       "org.sat4j.minisat.constraints.MixedDataStructureDanielWL",
420:       "org.sat4j.tools.SolverDecorator",
421:       "org.sat4j.tools.AbstractClauseSelectorSolver",
422:       "org.sat4j.minisat.constraints.xor.Xor",
423:       "org.sat4j.tools.AbstractOutputSolver",
424:       "org.sat4j.tools.DimacsOutputSolver",
425:       "org.sat4j.tools.encoding.EncodingStrategyAdapter",
426:       "org.sat4j.tools.encoding.Sequential",
427:       "org.sat4j.tools.FullClauseSelectorSolver"
428:     );
429:   }
430: }

[MASTER] 03:29:48.602 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure0);

SearchParams searchParams0 = new SearchParams(720);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(720, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertNotNull(searchParams0);

int int0 = searchParams0.getInitConflictBound();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(720, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(720, int0);

LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertNotNull(levelBasedVarOrderHeap0);

PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(720);
assertEquals(720, percentLengthLearning0.getLimit());
assertNotNull(percentLengthLearning0);

CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
assertNotNull(cardinalityDataStructureYanMin0);

MUSLauncher mUSLauncher0 = new MUSLauncher();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertNotNull(mUSLauncher0);

mUSLauncher0.log("ignored satisfied constraints");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

mUSLauncher0.log("(|");
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielHT>(2);
assertEquals(2, percentLengthLearning1.getLimit());
assertNotNull(percentLengthLearning1);

MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
assertNotNull(mixedDataStructureDanielHT0);

ArminRestarts arminRestarts0 = new ArminRestarts();
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(arminRestarts0);

Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning1, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, mUSLauncher0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(720, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(2, percentLengthLearning1.getLimit());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(2, solver0.newVar());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertEquals(1, solver0.realNumberOfVariables());
assertEquals(1, solver0.nVars());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals("c ", solver0.getLogPrefix());
assertNotNull(solver0);

int int1 = solver0.getTimeout();
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(720, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals(2, percentLengthLearning1.getLimit());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertFalse(solver0.isVerbose());
assertEquals(0, solver0.nConstraints());
assertEquals(4, solver0.newVar());
assertEquals(0, solver0.getPropagationLevel());
assertEquals(0, solver0.currentDecisionLevel());
assertFalse(solver0.isSolverKeptHot());
assertEquals(2147483, solver0.getTimeout());
assertEquals(0, solver0.decisionLevel());
assertFalse(solver0.isDBSimplificationAllowed());
assertEquals(3, solver0.nVars());
assertEquals("c ", solver0.getLogPrefix());
assertEquals(3, solver0.realNumberOfVariables());
assertFalse(int1 == int0);
assertEquals(2147483, int1);

mUSLauncher0.usage();
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());

PercentLengthLearning<CardinalityDataStructure> percentLengthLearning2 = new PercentLengthLearning<CardinalityDataStructure>();
assertEquals(10, percentLengthLearning2.getLimit());
assertNotNull(percentLengthLearning2);

CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
assertNotNull(cardinalityDataStructure1);
assertFalse(cardinalityDataStructure1.equals((Object)cardinalityDataStructure0));

Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning2, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, mUSLauncher0);
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertEquals(1, solver1.nVars());
assertFalse(solver1.isSolverKeptHot());
assertEquals(2, solver1.newVar());
assertEquals(0, solver1.decisionLevel());
assertEquals(1, solver1.realNumberOfVariables());
assertFalse(solver1.isVerbose());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(0, solver1.getPropagationLevel());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(720, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(10, percentLengthLearning2.getLimit());
assertNotNull(solver1);
assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));

Constr constr0 = Constr.TAUTOLOGY;
assertNotNull(constr0);

boolean boolean0 = constr0.canBeSatisfiedByCountingLiterals();
assertFalse(boolean0);

boolean boolean1 = solver1.enqueue(2, constr0);
assertEquals(3, solver1.nVars());
assertFalse(solver1.isDBSimplificationAllowed());
assertEquals(2147483, solver1.getTimeout());
assertEquals(0, solver1.nConstraints());
assertFalse(solver1.isSolverKeptHot());
assertEquals(0, solver1.decisionLevel());
assertFalse(solver1.isVerbose());
assertEquals(4, solver1.newVar());
assertEquals(3, solver1.realNumberOfVariables());
assertEquals("c ", solver1.getLogPrefix());
assertEquals(0, solver1.currentDecisionLevel());
assertEquals(1, solver1.getPropagationLevel());
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(720, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertEquals(10, percentLengthLearning2.getLimit());
assertNotSame(cardinalityDataStructure0, cardinalityDataStructure1);
assertFalse(cardinalityDataStructure0.equals((Object)cardinalityDataStructure1));
assertFalse(boolean1 == boolean0);
assertTrue(boolean1);

Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, mUSLauncher0);
assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
assertEquals(720, searchParams0.getInitConflictBound());
assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
assertEquals(720, percentLengthLearning0.getLimit());
assertFalse(solver2.isSolverKeptHot());
assertEquals(2147483, solver2.getTimeout());
assertEquals(0, solver2.decisionLevel());
assertEquals(0, solver2.getPropagationLevel());
assertFalse(solver2.isDBSimplificationAllowed());
assertEquals(0, solver2.currentDecisionLevel());
assertFalse(solver2.isVerbose());
assertEquals(1, solver2.nVars());
assertEquals("c ", solver2.getLogPrefix());
assertEquals(2, solver2.newVar());
assertEquals(0, solver2.nConstraints());
assertEquals(1, solver2.realNumberOfVariables());
assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
assertFalse(mUSLauncher0.isSilent());
assertEquals(0L, mUSLauncher0.getBeginTime());
assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
assertTrue(arminRestarts0.shouldRestart());
assertNotNull(solver2);

String[] stringArray0 = new String[3];
stringArray0[0] = "";
stringArray0[1] = "";
stringArray0[2] = "\"jA!IgEr$@Z@HX^/_";
Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 8);
solverArray0[0] = (Solver<MixedDataStructureSingleWL>) solverArray0;

[MASTER] 03:30:31.094 [logback-2] ERROR ClientNodeImpl - Error when generating tests for: org.sat4j.minisat.core.Solver with seed 1550370307070. Configuration id : null
java.rmi.MarshalException: error marshalling arguments; nested exception is: 
	java.net.SocketException: Broken pipe (Write failed)
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:157) ~[na:1.8.0_191]
	at java.rmi.server.RemoteObjectInvocationHandler.invokeRemoteMethod(RemoteObjectInvocationHandler.java:227) ~[na:1.8.0_191]
	at java.rmi.server.RemoteObjectInvocationHandler.invoke(RemoteObjectInvocationHandler.java:179) ~[na:1.8.0_191]
	at com.sun.proxy.$Proxy7.evosuite_collectTestGenerationResult(Unknown Source) ~[na:na]
	at org.evosuite.rmi.service.ClientNodeImpl$1.run(ClientNodeImpl.java:164) ~[evosuite-master-1.0.7-SNAPSHOT.jar:1.0.7-SNAPSHOT]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [na:1.8.0_191]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_191]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [na:1.8.0_191]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [na:1.8.0_191]
	at java.lang.Thread.run(Thread.java:748) [na:1.8.0_191]
Caused by: java.net.SocketException: Broken pipe (Write failed)
	at java.net.SocketOutputStream.socketWrite0(Native Method) ~[na:1.8.0_191]
	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:111) ~[na:1.8.0_191]
	at java.net.SocketOutputStream.write(SocketOutputStream.java:155) ~[na:1.8.0_191]
	at java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:82) ~[na:1.8.0_191]
	at java.io.BufferedOutputStream.write(BufferedOutputStream.java:126) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream$BlockDataOutputStream.drain(ObjectOutputStream.java:1877) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream$BlockDataOutputStream.setBlockDataMode(ObjectOutputStream.java:1786) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeNonProxyDesc(ObjectOutputStream.java:1286) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeClassDesc(ObjectOutputStream.java:1231) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1427) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeFatalException(ObjectOutputStream.java:1577) ~[na:1.8.0_191]
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:351) ~[na:1.8.0_191]
	at sun.rmi.server.UnicastRef.marshalValue(UnicastRef.java:290) ~[na:1.8.0_191]
	at sun.rmi.server.UnicastRef.invoke(UnicastRef.java:152) ~[na:1.8.0_191]
	... 9 common frames omitted
